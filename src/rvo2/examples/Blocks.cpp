

/*
 * Example file showing a demo with 100 agents split in four groups initially
 * positioned in four corners of the environment. Each agent attempts to move to
 * other side of the environment through a narrow passage generated by four
 * obstacles. There is no roadmap to guide the agents around the obstacles.
 */

#include <cmath>
#include <cstdlib>
#include <vector>
#include <iostream>


#include "../RVO.h"
#include "../Agent.h"

using namespace std;



/* Store the goals of the agents. */
//std::vector<RVO::Vec2> goals;


void updateVisualization(RVO::RVOSimulator *sim)
{
	/* Output the current global time. */
	std::cout << sim->globalTime_;

	/* Output the current position of all the agents. */
	for (size_t i = 0; i < sim->agents_.size(); ++i) {
		std::cout << " " << sim->agents_[i]->m_position;
	}

	std::cout << std::endl;
}



bool reachedGoal(RVO::RVOSimulator *sim)
{
	/* Check if all agents have reached their goals. */
	for (size_t i = 0; i < sim->agents_.size(); ++i) 
    {
        RVO::Agent* a = sim->agents_[i];
		if (absSq(a->m_position - a->m_endGoalPos.p) > 20.0f * 20.0f) {
			return false;
		}
	}

	return true;
}

int main()
{
	RVO::RVOSimulator sim;
	sim.setupBlocks();

    int i = 0;
	do {
		updateVisualization(&sim);

		sim.setPreferredVelocities(true);
		sim.doStep(0.25);
        ++i;
        if (i == 1000)
            break;
	}
	while (!reachedGoal(&sim));
   // cout << i << endl;
    return 0;
}


int mainx()
{
    for(int t = 0; t < 20; ++t)
    {
	    RVO::RVOSimulator sim;
	    sim.setupBlocks();

        int i = 0;
	    do {
		   // updateVisualization(&sim);

		    sim.setPreferredVelocities(true);
		    sim.doStep(0.25);
            ++i;
    //        if (i == 1000)
    //            break;
	    }
	    while (!reachedGoal(&sim));
        cout << i << endl;
    }
	return 0;
}
