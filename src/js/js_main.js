var Module;
if (!Module) Module = (typeof Module !== "undefined" ? Module : null) || {};
var moduleOverrides = {};
for (var key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}
var ENVIRONMENT_IS_WEB = typeof window === "object";
var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
 if (!Module["print"]) Module["print"] = function print(x) {
  process["stdout"].write(x + "\n");
 };
 if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
  process["stderr"].write(x + "\n");
 };
 var nodeFS = require("fs");
 var nodePath = require("path");
 Module["read"] = function read(filename, binary) {
  filename = nodePath["normalize"](filename);
  var ret = nodeFS["readFileSync"](filename);
  if (!ret && filename != nodePath["resolve"](filename)) {
   filename = path.join(__dirname, "..", "src", filename);
   ret = nodeFS["readFileSync"](filename);
  }
  if (ret && !binary) ret = ret.toString();
  return ret;
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 Module["load"] = function load(f) {
  globalEval(read(f));
 };
 if (!Module["thisProgram"]) {
  if (process["argv"].length > 1) {
   Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
  } else {
   Module["thisProgram"] = "unknown-program";
  }
 }
 Module["arguments"] = process["argv"].slice(2);
 if (typeof module !== "undefined") {
  module["exports"] = Module;
 }
 process["on"]("uncaughtException", (function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 }));
 Module["inspect"] = (function() {
  return "[Emscripten Module object]";
 });
} else if (ENVIRONMENT_IS_SHELL) {
 if (!Module["print"]) Module["print"] = print;
 if (typeof printErr != "undefined") Module["printErr"] = printErr;
 if (typeof read != "undefined") {
  Module["read"] = read;
 } else {
  Module["read"] = function read() {
   throw "no read() available (jsc?)";
  };
 }
 Module["readBinary"] = function readBinary(f) {
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  var data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 Module["read"] = function read(url) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof console !== "undefined") {
  if (!Module["print"]) Module["print"] = function print(x) {
   console.log(x);
  };
  if (!Module["printErr"]) Module["printErr"] = function printErr(x) {
   console.log(x);
  };
 } else {
  var TRY_USE_DUMP = false;
  if (!Module["print"]) Module["print"] = TRY_USE_DUMP && typeof dump !== "undefined" ? (function(x) {
   dump(x);
  }) : (function(x) {});
 }
 if (ENVIRONMENT_IS_WORKER) {
  Module["load"] = importScripts;
 }
 if (typeof Module["setWindowTitle"] === "undefined") {
  Module["setWindowTitle"] = (function(title) {
   document.title = title;
  });
 }
} else {
 throw "Unknown runtime environment. Where are we?";
}
function globalEval(x) {
 eval.call(null, x);
}
if (!Module["load"] && Module["read"]) {
 Module["load"] = function load(f) {
  globalEval(Module["read"](f));
 };
}
if (!Module["print"]) {
 Module["print"] = (function() {});
}
if (!Module["printErr"]) {
 Module["printErr"] = Module["print"];
}
if (!Module["arguments"]) {
 Module["arguments"] = [];
}
if (!Module["thisProgram"]) {
 Module["thisProgram"] = "./this.program";
}
Module.print = Module["print"];
Module.printErr = Module["printErr"];
Module["preRun"] = [];
Module["postRun"] = [];
for (var key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}
var Runtime = {
 setTempRet0: (function(value) {
  tempRet0 = value;
 }),
 getTempRet0: (function() {
  return tempRet0;
 }),
 stackSave: (function() {
  return STACKTOP;
 }),
 stackRestore: (function(stackTop) {
  STACKTOP = stackTop;
 }),
 getNativeTypeSize: (function(type) {
  switch (type) {
  case "i1":
  case "i8":
   return 1;
  case "i16":
   return 2;
  case "i32":
   return 4;
  case "i64":
   return 8;
  case "float":
   return 4;
  case "double":
   return 8;
  default:
   {
    if (type[type.length - 1] === "*") {
     return Runtime.QUANTUM_SIZE;
    } else if (type[0] === "i") {
     var bits = parseInt(type.substr(1));
     assert(bits % 8 === 0);
     return bits / 8;
    } else {
     return 0;
    }
   }
  }
 }),
 getNativeFieldSize: (function(type) {
  return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
 }),
 STACK_ALIGN: 16,
 prepVararg: (function(ptr, type) {
  if (type === "double" || type === "i64") {
   if (ptr & 7) {
    assert((ptr & 7) === 4);
    ptr += 4;
   }
  } else {
   assert((ptr & 3) === 0);
  }
  return ptr;
 }),
 getAlignSize: (function(type, size, vararg) {
  if (!vararg && (type == "i64" || type == "double")) return 8;
  if (!type) return Math.min(size, 8);
  return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
 }),
 dynCall: (function(sig, ptr, args) {
  if (args && args.length) {
   if (!args.splice) args = Array.prototype.slice.call(args);
   args.splice(0, 0, ptr);
   return Module["dynCall_" + sig].apply(null, args);
  } else {
   return Module["dynCall_" + sig].call(null, ptr);
  }
 }),
 functionPointers: [],
 addFunction: (function(func) {
  for (var i = 0; i < Runtime.functionPointers.length; i++) {
   if (!Runtime.functionPointers[i]) {
    Runtime.functionPointers[i] = func;
    return 2 * (1 + i);
   }
  }
  throw "Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.";
 }),
 removeFunction: (function(index) {
  Runtime.functionPointers[(index - 2) / 2] = null;
 }),
 warnOnce: (function(text) {
  if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
  if (!Runtime.warnOnce.shown[text]) {
   Runtime.warnOnce.shown[text] = 1;
   Module.printErr(text);
  }
 }),
 funcWrappers: {},
 getFuncWrapper: (function(func, sig) {
  assert(sig);
  if (!Runtime.funcWrappers[sig]) {
   Runtime.funcWrappers[sig] = {};
  }
  var sigCache = Runtime.funcWrappers[sig];
  if (!sigCache[func]) {
   sigCache[func] = function dynCall_wrapper() {
    return Runtime.dynCall(sig, func, arguments);
   };
  }
  return sigCache[func];
 }),
 getCompilerSetting: (function(name) {
  throw "You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work";
 }),
 stackAlloc: (function(size) {
  var ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 15 & -16;
  return ret;
 }),
 staticAlloc: (function(size) {
  var ret = STATICTOP;
  STATICTOP = STATICTOP + size | 0;
  STATICTOP = STATICTOP + 15 & -16;
  return ret;
 }),
 dynamicAlloc: (function(size) {
  var ret = DYNAMICTOP;
  DYNAMICTOP = DYNAMICTOP + size | 0;
  DYNAMICTOP = DYNAMICTOP + 15 & -16;
  if (DYNAMICTOP >= TOTAL_MEMORY) {
   var success = enlargeMemory();
   if (!success) {
    DYNAMICTOP = ret;
    return 0;
   }
  }
  return ret;
 }),
 alignMemory: (function(size, quantum) {
  var ret = size = Math.ceil(size / (quantum ? quantum : 16)) * (quantum ? quantum : 16);
  return ret;
 }),
 makeBigInt: (function(low, high, unsigned) {
  var ret = unsigned ? +(low >>> 0) + +(high >>> 0) * +4294967296 : +(low >>> 0) + +(high | 0) * +4294967296;
  return ret;
 }),
 GLOBAL_BASE: 8,
 QUANTUM_SIZE: 4,
 __dummy__: 0
};
Module["Runtime"] = Runtime;
var __THREW__ = 0;
var ABORT = false;
var EXITSTATUS = 0;
var undef = 0;
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}
var globalScope = this;
function getCFunc(ident) {
 var func = Module["_" + ident];
 if (!func) {
  try {
   func = eval("_" + ident);
  } catch (e) {}
 }
 assert(func, "Cannot call unknown function " + ident + " (perhaps LLVM optimizations or closure removed it?)");
 return func;
}
var cwrap, ccall;
((function() {
 var JSfuncs = {
  "stackSave": (function() {
   Runtime.stackSave();
  }),
  "stackRestore": (function() {
   Runtime.stackRestore();
  }),
  "arrayToC": (function(arr) {
   var ret = Runtime.stackAlloc(arr.length);
   writeArrayToMemory(arr, ret);
   return ret;
  }),
  "stringToC": (function(str) {
   var ret = 0;
   if (str !== null && str !== undefined && str !== 0) {
    ret = Runtime.stackAlloc((str.length << 2) + 1);
    writeStringToMemory(str, ret);
   }
   return ret;
  })
 };
 var toC = {
  "string": JSfuncs["stringToC"],
  "array": JSfuncs["arrayToC"]
 };
 ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
   for (var i = 0; i < args.length; i++) {
    var converter = toC[argTypes[i]];
    if (converter) {
     if (stack === 0) stack = Runtime.stackSave();
     cArgs[i] = converter(args[i]);
    } else {
     cArgs[i] = args[i];
    }
   }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === "string") ret = Pointer_stringify(ret);
  if (stack !== 0) {
   if (opts && opts.async) {
    EmterpreterAsync.asyncFinalizers.push((function() {
     Runtime.stackRestore(stack);
    }));
    return;
   }
   Runtime.stackRestore(stack);
  }
  return ret;
 };
 var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
 function parseJSFunc(jsfunc) {
  var parsed = jsfunc.toString().match(sourceRegex).slice(1);
  return {
   arguments: parsed[0],
   body: parsed[1],
   returnValue: parsed[2]
  };
 }
 var JSsource = {};
 for (var fun in JSfuncs) {
  if (JSfuncs.hasOwnProperty(fun)) {
   JSsource[fun] = parseJSFunc(JSfuncs[fun]);
  }
 }
 cwrap = function cwrap(ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  var numericArgs = argTypes.every((function(type) {
   return type === "number";
  }));
  var numericRet = returnType !== "string";
  if (numericRet && numericArgs) {
   return cfunc;
  }
  var argNames = argTypes.map((function(x, i) {
   return "$" + i;
  }));
  var funcstr = "(function(" + argNames.join(",") + ") {";
  var nargs = argTypes.length;
  if (!numericArgs) {
   funcstr += "var stack = " + JSsource["stackSave"].body + ";";
   for (var i = 0; i < nargs; i++) {
    var arg = argNames[i], type = argTypes[i];
    if (type === "number") continue;
    var convertCode = JSsource[type + "ToC"];
    funcstr += "var " + convertCode.arguments + " = " + arg + ";";
    funcstr += convertCode.body + ";";
    funcstr += arg + "=" + convertCode.returnValue + ";";
   }
  }
  var cfuncname = parseJSFunc((function() {
   return cfunc;
  })).returnValue;
  funcstr += "var ret = " + cfuncname + "(" + argNames.join(",") + ");";
  if (!numericRet) {
   var strgfy = parseJSFunc((function() {
    return Pointer_stringify;
   })).returnValue;
   funcstr += "ret = " + strgfy + "(ret);";
  }
  if (!numericArgs) {
   funcstr += JSsource["stackRestore"].body.replace("()", "(stack)") + ";";
  }
  funcstr += "return ret})";
  return eval(funcstr);
 };
}))();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;
function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;
 case "i8":
  HEAP8[ptr >> 0] = value;
  break;
 case "i16":
  HEAP16[ptr >> 1] = value;
  break;
 case "i32":
  HEAP32[ptr >> 2] = value;
  break;
 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= +1 ? tempDouble > +0 ? (Math_min(+Math_floor(tempDouble / +4294967296), +4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / +4294967296) >>> 0 : 0) ], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;
 case "float":
  HEAPF32[ptr >> 2] = value;
  break;
 case "double":
  HEAPF64[ptr >> 3] = value;
  break;
 default:
  abort("invalid type for setValue: " + type);
 }
}
Module["setValue"] = setValue;
function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];
 case "i8":
  return HEAP8[ptr >> 0];
 case "i16":
  return HEAP16[ptr >> 1];
 case "i32":
  return HEAP32[ptr >> 2];
 case "i64":
  return HEAP32[ptr >> 2];
 case "float":
  return HEAPF32[ptr >> 2];
 case "double":
  return HEAPF64[ptr >> 3];
 default:
  abort("invalid type for setValue: " + type);
 }
 return null;
}
Module["getValue"] = getValue;
var ALLOC_NORMAL = 0;
var ALLOC_STACK = 1;
var ALLOC_STATIC = 2;
var ALLOC_DYNAMIC = 3;
var ALLOC_NONE = 4;
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;
function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc ][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var ptr = ret, stop;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (; ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  if (typeof curr === "function") {
   curr = Runtime.getFunctionIndex(curr);
  }
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = Runtime.getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}
Module["allocate"] = allocate;
function getMemory(size) {
 if (!staticSealed) return Runtime.staticAlloc(size);
 if (typeof _sbrk !== "undefined" && !_sbrk.called || !runtimeInitialized) return Runtime.dynamicAlloc(size);
 return _malloc(size);
}
Module["getMemory"] = getMemory;
function Pointer_stringify(ptr, length) {
 if (length === 0 || !ptr) return "";
 var hasUtf = 0;
 var t;
 var i = 0;
 while (1) {
  t = HEAPU8[ptr + i >> 0];
  hasUtf |= t;
  if (t == 0 && !length) break;
  i++;
  if (length && i == length) break;
 }
 if (!length) length = i;
 var ret = "";
 if (hasUtf < 128) {
  var MAX_CHUNK = 1024;
  var curr;
  while (length > 0) {
   curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
   ret = ret ? ret + curr : curr;
   ptr += MAX_CHUNK;
   length -= MAX_CHUNK;
  }
  return ret;
 }
 return Module["UTF8ToString"](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;
function AsciiToString(ptr) {
 var str = "";
 while (1) {
  var ch = HEAP8[ptr++ >> 0];
  if (!ch) return str;
  str += String.fromCharCode(ch);
 }
}
Module["AsciiToString"] = AsciiToString;
function stringToAscii(str, outPtr) {
 return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;
function UTF8ArrayToString(u8Array, idx) {
 var u0, u1, u2, u3, u4, u5;
 var str = "";
 while (1) {
  u0 = u8Array[idx++];
  if (!u0) return str;
  if (!(u0 & 128)) {
   str += String.fromCharCode(u0);
   continue;
  }
  u1 = u8Array[idx++] & 63;
  if ((u0 & 224) == 192) {
   str += String.fromCharCode((u0 & 31) << 6 | u1);
   continue;
  }
  u2 = u8Array[idx++] & 63;
  if ((u0 & 240) == 224) {
   u0 = (u0 & 15) << 12 | u1 << 6 | u2;
  } else {
   u3 = u8Array[idx++] & 63;
   if ((u0 & 248) == 240) {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;
   } else {
    u4 = u8Array[idx++] & 63;
    if ((u0 & 252) == 248) {
     u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;
    } else {
     u5 = u8Array[idx++] & 63;
     u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;
    }
   }
  }
  if (u0 < 65536) {
   str += String.fromCharCode(u0);
  } else {
   var ch = u0 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  }
 }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;
function UTF8ToString(ptr) {
 return UTF8ArrayToString(HEAPU8, ptr);
}
Module["UTF8ToString"] = UTF8ToString;
function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 2097151) {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 67108863) {
   if (outIdx + 4 >= endIdx) break;
   outU8Array[outIdx++] = 248 | u >> 24;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 5 >= endIdx) break;
   outU8Array[outIdx++] = 252 | u >> 30;
   outU8Array[outIdx++] = 128 | u >> 24 & 63;
   outU8Array[outIdx++] = 128 | u >> 18 & 63;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;
function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;
function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) {
   ++len;
  } else if (u <= 2047) {
   len += 2;
  } else if (u <= 65535) {
   len += 3;
  } else if (u <= 2097151) {
   len += 4;
  } else if (u <= 67108863) {
   len += 5;
  } else {
   len += 6;
  }
 }
 return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;
function UTF16ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var codeUnit = HEAP16[ptr + i * 2 >> 1];
  if (codeUnit == 0) return str;
  ++i;
  str += String.fromCharCode(codeUnit);
 }
}
Module["UTF16ToString"] = UTF16ToString;
function stringToUTF16(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  HEAP16[outPtr >> 1] = codeUnit;
  outPtr += 2;
 }
 HEAP16[outPtr >> 1] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;
function lengthBytesUTF16(str) {
 return str.length * 2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;
function UTF32ToString(ptr) {
 var i = 0;
 var str = "";
 while (1) {
  var utf32 = HEAP32[ptr + i * 4 >> 2];
  if (utf32 == 0) return str;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
}
Module["UTF32ToString"] = UTF32ToString;
function stringToUTF32(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  HEAP32[outPtr >> 2] = codeUnit;
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 HEAP32[outPtr >> 2] = 0;
 return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;
function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;
function demangle(func) {
 var hasLibcxxabi = !!Module["___cxa_demangle"];
 if (hasLibcxxabi) {
  try {
   var buf = _malloc(func.length);
   writeStringToMemory(func.substr(1), buf);
   var status = _malloc(4);
   var ret = Module["___cxa_demangle"](buf, 0, 0, status);
   if (getValue(status, "i32") === 0 && ret) {
    return Pointer_stringify(ret);
   }
  } catch (e) {} finally {
   if (buf) _free(buf);
   if (status) _free(status);
   if (ret) _free(ret);
  }
 }
 var i = 3;
 var basicTypes = {
  "v": "void",
  "b": "bool",
  "c": "char",
  "s": "short",
  "i": "int",
  "l": "long",
  "f": "float",
  "d": "double",
  "w": "wchar_t",
  "a": "signed char",
  "h": "unsigned char",
  "t": "unsigned short",
  "j": "unsigned int",
  "m": "unsigned long",
  "x": "long long",
  "y": "unsigned long long",
  "z": "..."
 };
 var subs = [];
 var first = true;
 function dump(x) {
  if (x) Module.print(x);
  Module.print(func);
  var pre = "";
  for (var a = 0; a < i; a++) pre += " ";
  Module.print(pre + "^");
 }
 function parseNested() {
  i++;
  if (func[i] === "K") i++;
  var parts = [];
  while (func[i] !== "E") {
   if (func[i] === "S") {
    i++;
    var next = func.indexOf("_", i);
    var num = func.substring(i, next) || 0;
    parts.push(subs[num] || "?");
    i = next + 1;
    continue;
   }
   if (func[i] === "C") {
    parts.push(parts[parts.length - 1]);
    i += 2;
    continue;
   }
   var size = parseInt(func.substr(i));
   var pre = size.toString().length;
   if (!size || !pre) {
    i--;
    break;
   }
   var curr = func.substr(i + pre, size);
   parts.push(curr);
   subs.push(curr);
   i += pre + size;
  }
  i++;
  return parts;
 }
 function parse(rawList, limit, allowVoid) {
  limit = limit || Infinity;
  var ret = "", list = [];
  function flushList() {
   return "(" + list.join(", ") + ")";
  }
  var name;
  if (func[i] === "N") {
   name = parseNested().join("::");
   limit--;
   if (limit === 0) return rawList ? [ name ] : name;
  } else {
   if (func[i] === "K" || first && func[i] === "L") i++;
   var size = parseInt(func.substr(i));
   if (size) {
    var pre = size.toString().length;
    name = func.substr(i + pre, size);
    i += pre + size;
   }
  }
  first = false;
  if (func[i] === "I") {
   i++;
   var iList = parse(true);
   var iRet = parse(true, 1, true);
   ret += iRet[0] + " " + name + "<" + iList.join(", ") + ">";
  } else {
   ret = name;
  }
  paramLoop : while (i < func.length && limit-- > 0) {
   var c = func[i++];
   if (c in basicTypes) {
    list.push(basicTypes[c]);
   } else {
    switch (c) {
    case "P":
     list.push(parse(true, 1, true)[0] + "*");
     break;
    case "R":
     list.push(parse(true, 1, true)[0] + "&");
     break;
    case "L":
     {
      i++;
      var end = func.indexOf("E", i);
      var size = end - i;
      list.push(func.substr(i, size));
      i += size + 2;
      break;
     }
    case "A":
     {
      var size = parseInt(func.substr(i));
      i += size.toString().length;
      if (func[i] !== "_") throw "?";
      i++;
      list.push(parse(true, 1, true)[0] + " [" + size + "]");
      break;
     }
    case "E":
     break paramLoop;
    default:
     ret += "?" + c;
     break paramLoop;
    }
   }
  }
  if (!allowVoid && list.length === 1 && list[0] === "void") list = [];
  if (rawList) {
   if (ret) {
    list.push(ret + "?");
   }
   return list;
  } else {
   return ret + flushList();
  }
 }
 var parsed = func;
 try {
  if (func == "Object._main" || func == "_main") {
   return "main()";
  }
  if (typeof func === "number") func = Pointer_stringify(func);
  if (func[0] !== "_") return func;
  if (func[1] !== "_") return func;
  if (func[2] !== "Z") return func;
  switch (func[3]) {
  case "n":
   return "operator new()";
  case "d":
   return "operator delete()";
  }
  parsed = parse();
 } catch (e) {
  parsed += "?";
 }
 if (parsed.indexOf("?") >= 0 && !hasLibcxxabi) {
  Runtime.warnOnce("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
 }
 return parsed;
}
function demangleAll(text) {
 return text.replace(/__Z[\w\d_]+/g, (function(x) {
  var y = demangle(x);
  return x === y ? x : x + " [" + y + "]";
 }));
}
function jsStackTrace() {
 var err = new Error;
 if (!err.stack) {
  try {
   throw new Error(0);
  } catch (e) {
   err = e;
  }
  if (!err.stack) {
   return "(no stack trace available)";
  }
 }
 return err.stack.toString();
}
function stackTrace() {
 return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
 if (x % 4096 > 0) {
  x += 4096 - x % 4096;
 }
 return x;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false;
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0;
var DYNAMIC_BASE = 0, DYNAMICTOP = 0;
function abortOnCannotGrowMemory() {
 abort("Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value " + TOTAL_MEMORY + ", (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ");
}
function enlargeMemory() {
 abortOnCannotGrowMemory();
}
var TOTAL_STACK = Module["TOTAL_STACK"] || 5242880;
var TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;
var totalMemory = 64 * 1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2 * TOTAL_STACK) {
 if (totalMemory < 16 * 1024 * 1024) {
  totalMemory *= 2;
 } else {
  totalMemory += 16 * 1024 * 1024;
 }
}
if (totalMemory !== TOTAL_MEMORY) {
 TOTAL_MEMORY = totalMemory;
}
assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && !!(new Int32Array(1))["subarray"] && !!(new Int32Array(1))["set"], "JS engine does not provide full typed array support");
var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, "Typed arrays 2 must be run on a little-endian system");
Module["HEAP"] = HEAP;
Module["buffer"] = buffer;
Module["HEAP8"] = HEAP8;
Module["HEAP16"] = HEAP16;
Module["HEAP32"] = HEAP32;
Module["HEAPU8"] = HEAPU8;
Module["HEAPU16"] = HEAPU16;
Module["HEAPU32"] = HEAPU32;
Module["HEAPF32"] = HEAPF32;
Module["HEAPF64"] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Runtime.dynCall("v", func);
   } else {
    Runtime.dynCall("vi", func, [ callback.arg ]);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}
var __ATPRERUN__ = [];
var __ATINIT__ = [];
var __ATMAIN__ = [];
var __ATEXIT__ = [];
var __ATPOSTRUN__ = [];
var runtimeInitialized = false;
var runtimeExited = false;
function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}
function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
 callRuntimeCallbacks(__ATEXIT__);
 runtimeExited = true;
}
function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}
function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;
function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;
function addOnPreMain(cb) {
 __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;
function addOnExit(cb) {
 __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;
function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;
function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}
Module["intArrayFromString"] = intArrayFromString;
function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}
Module["intArrayToString"] = intArrayToString;
function writeStringToMemory(string, buffer, dontAddNull) {
 var array = intArrayFromString(string, dontAddNull);
 var i = 0;
 while (i < array.length) {
  var chr = array[i];
  HEAP8[buffer + i >> 0] = chr;
  i = i + 1;
 }
}
Module["writeStringToMemory"] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
 for (var i = 0; i < array.length; i++) {
  HEAP8[buffer++ >> 0] = array[i];
 }
}
Module["writeArrayToMemory"] = writeArrayToMemory;
function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;
function unSign(value, bits, ignore) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
 if (value <= 0) {
  return value;
 }
 var half = bits <= 32 ? Math.abs(1 << bits - 1) : Math.pow(2, bits - 1);
 if (value >= half && (bits <= 32 || value > half)) {
  value = -2 * half + value;
 }
 return value;
}
if (!Math["imul"] || Math["imul"](4294967295, 5) !== -5) Math["imul"] = function imul(a, b) {
 var ah = a >>> 16;
 var al = a & 65535;
 var bh = b >>> 16;
 var bl = b & 65535;
 return al * bl + (ah * bl + al * bh << 16) | 0;
};
Math.imul = Math["imul"];
if (!Math["clz32"]) Math["clz32"] = (function(x) {
 x = x >>> 0;
 for (var i = 0; i < 32; i++) {
  if (x & 1 << 31 - i) return i;
 }
 return 32;
});
Math.clz32 = Math["clz32"];
var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null;
function getUniqueRunDependency(id) {
 return id;
}
function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}
Module["addRunDependency"] = addRunDependency;
function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}
Module["removeRunDependency"] = removeRunDependency;
Module["preloadedImages"] = {};
Module["preloadedAudios"] = {};
var memoryInitializer = null;
var ASM_CONSTS = [ (function($0, $1, $2, $3) {
 move_orient_circle($0, $1, $2, $3);
}), (function($0, $1, $2) {
 move_circle($0, $1, $2);
}), (function($0) {
 return Math.round($0);
}), (function($0, $1) {
 take_perimiters($0, $1);
}), (function($0, $1, $2, $3, $4, $5, $6, $7) {
 add_tri($0, $1, $2, $3, $4, $5, $6, $7);
}), (function($0, $1, $2, $3, $4) {
 add_circle($0, $1, $2, $3, $4, COLOR_AGENT, ObjSelType.MULTI, ObjType.AGENT, null);
}), (function($0, $1, $2, $3, $4, $5) {
 add_circle($0, $1, $2, $3, RADIUS_GOAL, $4 == 0 ? COLOR_POINT_GOAL : COLOR_ATTACK_GOAL, ObjSelType.SINGLE, ObjType.GOAL, $5);
}), (function($0, $1, $2, $3) {
 add_circle($0, $1, $2, $3, RADIUS_POLYPOINT, "rgb(50,50,50)", ObjSelType.NONE, ObjType.POLYPOINT, null);
}), (function($0, $1, $2, $3) {
 add_circle($0, $1, $2, $3, RADIUS_POLYPOINT, "rgb(50,50,50)", ObjSelType.SINGLE, ObjType.BUILDING_PNT, null);
}), (function($0, $1, $2, $3) {
 add_circle($0, $1, $2, $3, RADIUS_POLYPOINT, "rgb(180,100,100)", ObjSelType.NONE, ObjType.POLYPOINT, null);
}), (function($0) {
 set_max_frame($0);
}), (function($0, $1, $2, $3) {
 set_scene_extents($0, $1, $2, $3);
}), (function($0, $1) {
 changed_size($0, $1);
}), (function($0, $1, $2) {
 updated_goal($0, $1, $2 == 0 ? COLOR_POINT_GOAL : COLOR_ATTACK_GOAL);
}), (function($0) {
 setPressedObj($0);
}), (function($0) {
 remove_circle($0);
}), (function($0) {
 remove_triangle($0);
}), (function($0, $1, $2, $3, $4, $5) {
 add_rect($0, $1, $2, $3, $4, $5);
}), (function($0, $1, $2, $3, $4) {
 change_rect($0, $1, $2, $3, $4);
}) ];
function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}
function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}
function _emscripten_asm_const_3(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}
function _emscripten_asm_const_4(code, a0, a1, a2, a3) {
 return ASM_CONSTS[code](a0, a1, a2, a3);
}
function _emscripten_asm_const_5(code, a0, a1, a2, a3, a4) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}
function _emscripten_asm_const_6(code, a0, a1, a2, a3, a4, a5) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}
function _emscripten_asm_const_8(code, a0, a1, a2, a3, a4, a5, a6, a7) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6, a7);
}
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 29856;
__ATINIT__.push({
 func: (function() {
  __GLOBAL__I_000101();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_Mesh_cpp();
 })
}, {
 func: (function() {
  __GLOBAL__sub_I_iostream_cpp();
 })
});
allocate([ 0, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 122, 69, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 167, 69, 0, 0, 68, 24, 0, 0, 173, 69, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 184, 69, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 194, 69, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 210, 69, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 230, 69, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 68, 70, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 148, 70, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 25, 73, 0, 0, 208, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 95, 73, 0, 0, 144, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 161, 73, 0, 0, 160, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 108, 74, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 243, 74, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 112, 75, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 235, 75, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 120, 76, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 7, 77, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 171, 77, 0, 0, 72, 1, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 129, 77, 0, 0, 28, 24, 0, 0, 16, 78, 0, 0, 148, 24, 0, 0, 124, 79, 0, 0, 0, 0, 0, 0, 112, 2, 0, 0, 68, 24, 0, 0, 165, 79, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 186, 81, 0, 0, 68, 24, 0, 0, 177, 81, 0, 0, 112, 1, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 162, 81, 0, 0, 112, 1, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 72, 80, 0, 0, 176, 1, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 35, 80, 0, 0, 28, 24, 0, 0, 172, 80, 0, 0, 68, 24, 0, 0, 254, 80, 0, 0, 208, 1, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 217, 80, 0, 0, 28, 24, 0, 0, 94, 81, 0, 0, 68, 24, 0, 0, 135, 81, 0, 0, 232, 1, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 152, 81, 0, 0, 68, 24, 0, 0, 227, 81, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 248, 81, 0, 0, 68, 24, 0, 0, 8, 82, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 30, 82, 0, 0, 232, 1, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 45, 82, 0, 0, 56, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 52, 82, 0, 0, 112, 1, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 35, 83, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 104, 83, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 117, 83, 0, 0, 68, 24, 0, 0, 130, 83, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 148, 83, 0, 0, 68, 24, 0, 0, 161, 83, 0, 0, 128, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 194, 83, 0, 0, 136, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 8, 84, 0, 0, 136, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 228, 83, 0, 0, 168, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 42, 84, 0, 0, 136, 2, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 82, 84, 0, 0, 0, 24, 0, 0, 84, 84, 0, 0, 68, 24, 0, 0, 87, 84, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 124, 84, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 136, 105, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 199, 105, 0, 0, 152, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 223, 105, 0, 0, 144, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 248, 105, 0, 0, 144, 3, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 16, 106, 0, 0, 108, 24, 0, 0, 41, 106, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 71, 106, 0, 0, 68, 24, 0, 0, 89, 106, 0, 0, 104, 3, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 131, 106, 0, 0, 104, 3, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 173, 106, 0, 0, 28, 24, 0, 0, 222, 106, 0, 0, 108, 24, 0, 0, 15, 107, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 112, 3, 0, 0, 3, 244, 255, 255, 108, 24, 0, 0, 62, 107, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 128, 3, 0, 0, 3, 244, 255, 255, 108, 24, 0, 0, 109, 107, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 112, 3, 0, 0, 3, 244, 255, 255, 108, 24, 0, 0, 156, 107, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 128, 3, 0, 0, 3, 244, 255, 255, 108, 24, 0, 0, 203, 107, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 160, 3, 0, 0, 2, 0, 0, 0, 208, 3, 0, 0, 2, 8, 0, 0, 68, 24, 0, 0, 28, 108, 0, 0, 72, 3, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 50, 108, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 64, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 68, 108, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 72, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 102, 108, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 72, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 137, 108, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 72, 10, 0, 0, 2, 0, 0, 0, 68, 24, 0, 0, 172, 108, 0, 0, 144, 4, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 206, 108, 0, 0, 144, 4, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 241, 108, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 72, 10, 0, 0, 2, 0, 0, 0, 68, 24, 0, 0, 19, 109, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 41, 109, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 61, 109, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 81, 109, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 64, 10, 0, 0, 2, 0, 0, 0, 68, 24, 0, 0, 99, 109, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 68, 24, 0, 0, 120, 109, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 141, 109, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 80, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 209, 109, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 104, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 21, 110, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 128, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 89, 110, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 152, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 157, 110, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 176, 10, 0, 0, 2, 0, 0, 0, 184, 10, 0, 0, 0, 8, 0, 0, 108, 24, 0, 0, 226, 110, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 176, 10, 0, 0, 2, 0, 0, 0, 192, 10, 0, 0, 0, 8, 0, 0, 108, 24, 0, 0, 39, 111, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 200, 10, 0, 0, 0, 8, 0, 0, 108, 24, 0, 0, 108, 111, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 200, 10, 0, 0, 0, 8, 0, 0, 108, 24, 0, 0, 177, 111, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 208, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 205, 111, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 208, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 233, 111, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 208, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 5, 112, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 208, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 33, 112, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 216, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 103, 112, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 224, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 173, 112, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 232, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 243, 112, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 240, 10, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 57, 113, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 248, 10, 0, 0, 2, 0, 0, 0, 108, 24, 0, 0, 78, 113, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 32, 4, 0, 0, 2, 0, 0, 0, 248, 10, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 135, 116, 0, 0, 28, 24, 0, 0, 112, 116, 0, 0, 108, 24, 0, 0, 90, 116, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 11, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 43, 116, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 11, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 21, 116, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 108, 24, 0, 0, 230, 115, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 28, 24, 0, 0, 211, 115, 0, 0, 28, 24, 0, 0, 177, 115, 0, 0, 28, 24, 0, 0, 143, 115, 0, 0, 28, 24, 0, 0, 122, 115, 0, 0, 28, 24, 0, 0, 101, 115, 0, 0, 28, 24, 0, 0, 76, 115, 0, 0, 28, 24, 0, 0, 51, 115, 0, 0, 28, 24, 0, 0, 26, 115, 0, 0, 28, 24, 0, 0, 1, 115, 0, 0, 28, 24, 0, 0, 233, 114, 0, 0, 28, 24, 0, 0, 252, 115, 0, 0, 28, 24, 0, 0, 65, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 88, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 6, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 200, 255, 255, 255, 200, 255, 255, 255, 160, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 240, 11, 0, 0, 172, 23, 0, 0, 192, 23, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 176, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 196, 255, 255, 255, 196, 255, 255, 255, 192, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 104, 12, 0, 0, 160, 12, 0, 0, 180, 12, 0, 0, 124, 12, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 196, 255, 255, 255, 196, 255, 255, 255, 160, 3, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 208, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 3, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 224, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 28, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 5, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 6, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 28, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 7, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 28, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 8, 0, 0, 0, 46 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
allocate([ 48, 1, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 96, 1, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 40, 2, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 2, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 1, 0, 0, 0, 10, 0, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 216, 1, 0, 0, 55, 0, 0, 0, 57, 0, 0, 0, 2, 0, 0, 0, 11, 0, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 184, 1, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 11, 0, 0, 0, 14, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 15, 0, 0, 0, 12, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 152, 1, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 13, 0, 0, 0, 16, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 3, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 120, 1, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 136, 1, 0, 0, 66, 0, 0, 0, 68, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 69, 0, 0, 0, 71, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 72, 2, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 56, 0, 0, 0, 248, 255, 255, 255, 72, 2, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 192, 255, 255, 255, 192, 255, 255, 255, 72, 2, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 192, 255, 255, 255, 192, 255, 255, 255, 160, 3, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 228, 22, 0, 0, 112, 23, 0, 0, 32, 23, 0, 0, 52, 23, 0, 0, 172, 23, 0, 0, 192, 23, 0, 0, 152, 23, 0, 0, 132, 23, 0, 0, 12, 23, 0, 0, 248, 22, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 56, 0, 0, 0, 248, 255, 255, 255, 0, 4, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 192, 255, 255, 255, 192, 255, 255, 255, 0, 4, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 208, 3, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 200, 255, 255, 255, 200, 255, 255, 255, 208, 3, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 88, 2, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 2, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 200, 2, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 152, 2, 0, 0, 92, 0, 0, 0, 96, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 232, 2, 0, 0, 92, 0, 0, 0, 97, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 5, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 248, 2, 0, 0, 92, 0, 0, 0, 98, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 5, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 184, 2, 0, 0, 92, 0, 0, 0, 99, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 211, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 192, 3, 0, 0, 192, 4, 0, 0, 192, 5, 0, 0, 192, 6, 0, 0, 192, 7, 0, 0, 192, 8, 0, 0, 192, 9, 0, 0, 192, 10, 0, 0, 192, 11, 0, 0, 192, 12, 0, 0, 192, 13, 0, 0, 192, 14, 0, 0, 192, 15, 0, 0, 192, 16, 0, 0, 192, 17, 0, 0, 192, 18, 0, 0, 192, 19, 0, 0, 192, 20, 0, 0, 192, 21, 0, 0, 192, 22, 0, 0, 192, 23, 0, 0, 192, 24, 0, 0, 192, 25, 0, 0, 192, 26, 0, 0, 192, 27, 0, 0, 192, 28, 0, 0, 192, 29, 0, 0, 192, 30, 0, 0, 192, 31, 0, 0, 192, 0, 0, 0, 179, 1, 0, 0, 195, 2, 0, 0, 195, 3, 0, 0, 195, 4, 0, 0, 195, 5, 0, 0, 195, 6, 0, 0, 195, 7, 0, 0, 195, 8, 0, 0, 195, 9, 0, 0, 195, 10, 0, 0, 195, 11, 0, 0, 195, 12, 0, 0, 195, 13, 0, 0, 211, 14, 0, 0, 195, 15, 0, 0, 195, 0, 0, 12, 187, 1, 0, 12, 195, 2, 0, 12, 195, 3, 0, 12, 195, 4, 0, 12, 211, 100, 26, 0, 0, 212, 26, 0, 0, 68, 27, 0, 0, 68, 27, 0, 0, 52, 67, 0, 0, 180, 35, 0, 0, 180, 29, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 100, 0, 0, 0, 232, 3, 0, 0, 16, 39, 0, 0, 160, 134, 1, 0, 64, 66, 15, 0, 128, 150, 152, 0, 0, 225, 245, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 113, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 105, 99, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 97, 95, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 65, 0, 0, 0, 66, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 75, 0, 0, 0, 76, 0, 0, 0, 77, 0, 0, 0, 78, 0, 0, 0, 79, 0, 0, 0, 80, 0, 0, 0, 81, 0, 0, 0, 82, 0, 0, 0, 83, 0, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 88, 0, 0, 0, 89, 0, 0, 0, 90, 0, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 127 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 5472);
allocate([ 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 47, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 56, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 64, 0, 0, 0, 97, 0, 0, 0, 98, 0, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 91, 0, 0, 0, 92, 0, 0, 0, 93, 0, 0, 0, 94, 0, 0, 0, 95, 0, 0, 0, 96, 0, 0, 0, 97, 0, 0, 0, 98, 0, 0, 0, 99, 0, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 102, 0, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 105, 0, 0, 0, 106, 0, 0, 0, 107, 0, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 112, 0, 0, 0, 113, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 127 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 9136);
allocate([ 8, 3, 0, 0, 100, 0, 0, 0, 101, 0, 0, 0, 18, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 24, 3, 0, 0, 100, 0, 0, 0, 102, 0, 0, 0, 19, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 22, 0, 0, 0, 19, 0, 0, 0, 13, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 40, 3, 0, 0, 103, 0, 0, 0, 104, 0, 0, 0, 20, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 26, 0, 0, 0, 5, 0, 0, 0, 18, 0, 0, 0, 16, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 56, 3, 0, 0, 103, 0, 0, 0, 105, 0, 0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 20, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 3, 0, 0, 103, 0, 0, 0, 106, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 26, 0, 0, 0, 5, 0, 0, 0, 18, 0, 0, 0, 3, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 152, 3, 0, 0, 100, 0, 0, 0, 107, 0, 0, 0, 22, 0, 0, 0, 12, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 22, 0, 0, 0, 19, 0, 0, 0, 13, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 17, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 248, 255, 255, 255, 248, 255, 255, 255, 160, 3, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 184, 3, 0, 0, 108, 0, 0, 0, 109, 0, 0, 0, 248, 255, 255, 255, 248, 255, 255, 255, 184, 3, 0, 0, 110, 0, 0, 0, 111, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 208, 3, 0, 0, 84, 0, 0, 0, 85, 0, 0, 0, 252, 255, 255, 255, 252, 255, 255, 255, 208, 3, 0, 0, 86, 0, 0, 0, 87, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 232, 3, 0, 0, 112, 0, 0, 0, 113, 0, 0, 0, 252, 255, 255, 255, 252, 255, 255, 255, 232, 3, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 0, 0, 0, 0, 104, 3, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 118, 0, 0, 0, 119, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 5, 0, 0, 121, 0, 0, 0, 122, 0, 0, 0, 120, 0, 0, 0, 2, 0, 0, 0, 8, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 5, 0, 0, 123, 0, 0, 0, 124, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 5, 0, 0, 125, 0, 0, 0, 126, 0, 0, 0, 120, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 5, 0, 0, 127, 0, 0, 0, 128, 0, 0, 0, 120, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 23, 0, 0, 0, 5, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 5, 0, 0, 129, 0, 0, 0, 130, 0, 0, 0, 120, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 25, 0, 0, 0, 9, 0, 0, 0, 26, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 5, 0, 0, 131, 0, 0, 0, 132, 0, 0, 0, 120, 0, 0, 0, 29, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 1, 0, 0, 0, 248, 255, 255, 255, 224, 5, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 133, 0, 0, 0, 134, 0, 0, 0, 120, 0, 0, 0, 37, 0, 0, 0, 32, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 2, 0, 0, 0, 248, 255, 255, 255, 8, 6, 0, 0, 38, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 6, 0, 0, 135, 0, 0, 0, 136, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 6, 0, 0, 137, 0, 0, 0, 138, 0, 0, 0, 120, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 6, 0, 0, 139, 0, 0, 0, 140, 0, 0, 0, 120, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 47, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 6, 0, 0, 141, 0, 0, 0, 142, 0, 0, 0, 120, 0, 0, 0, 48, 0, 0, 0, 49, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0, 32, 0, 0, 0, 50, 0, 0, 0, 33, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 6, 0, 0, 143, 0, 0, 0, 144, 0, 0, 0, 120, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 35, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 53, 0, 0, 0, 39, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 6, 0, 0, 145, 0, 0, 0, 146, 0, 0, 0, 120, 0, 0, 0, 54, 0, 0, 0, 55, 0, 0, 0, 41, 0, 0, 0, 42, 0, 0, 0, 43, 0, 0, 0, 44, 0, 0, 0, 56, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 6, 0, 0, 147, 0, 0, 0, 148, 0, 0, 0, 120, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 7, 0, 0, 149, 0, 0, 0, 150, 0, 0, 0, 120, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 7, 0, 0, 151, 0, 0, 0, 152, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 7, 0, 0, 153, 0, 0, 0, 154, 0, 0, 0, 120, 0, 0, 0, 2, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 7, 0, 0, 155, 0, 0, 0, 156, 0, 0, 0, 120, 0, 0, 0, 19, 0, 0, 0, 7, 0, 0, 0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 7, 0, 0, 157, 0, 0, 0, 158, 0, 0, 0, 120, 0, 0, 0, 20, 0, 0, 0, 8, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 4, 0, 0, 159, 0, 0, 0, 160, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 5, 0, 0, 161, 0, 0, 0, 162, 0, 0, 0, 120, 0, 0, 0, 22, 0, 0, 0, 21, 0, 0, 0, 23, 0, 0, 0, 22, 0, 0, 0, 24, 0, 0, 0, 1, 0, 0, 0, 23, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 4, 0, 0, 163, 0, 0, 0, 164, 0, 0, 0, 120, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 12, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 13, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 5, 0, 0, 165, 0, 0, 0, 166, 0, 0, 0, 120, 0, 0, 0, 60, 0, 0, 0, 61, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 80, 5, 0, 0, 167, 0, 0, 0, 168, 0, 0, 0, 120, 0, 0, 0, 62, 0, 0, 0, 63, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 169, 0, 0, 0, 170, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 48, 4, 0, 0, 169, 0, 0, 0, 171, 0, 0, 0, 120, 0, 0, 0, 24, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 25, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 5, 0, 0, 0, 27, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 169, 0, 0, 0, 172, 0, 0, 0, 120, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 15, 0, 0, 0, 64, 0, 0, 0, 65, 0, 0, 0, 16, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 112, 4, 0, 0, 169, 0, 0, 0, 173, 0, 0, 0, 120, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 17, 0, 0, 0, 67, 0, 0, 0, 68, 0, 0, 0, 18, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 144, 4, 0, 0, 169, 0, 0, 0, 174, 0, 0, 0, 120, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 20, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 176, 4, 0, 0, 169, 0, 0, 0, 175, 0, 0, 0, 120, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 20, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 192, 4, 0, 0, 169, 0, 0, 0, 176, 0, 0, 0, 120, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 19, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 20, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 121, 0, 0, 0, 37, 0, 0, 0, 89, 0, 0, 0, 45, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 45, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 37, 0, 0, 0, 73, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 112, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 0, 0, 0, 114, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 97, 0, 0, 0, 108, 0, 0, 0, 115, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 111, 0, 0, 0, 110, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 101, 0, 0, 0, 100, 0, 0, 0, 110, 0, 0, 0, 101, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 104, 0, 0, 0, 117, 0, 0, 0, 114, 0, 0, 0, 115, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 97, 0, 0, 0, 116, 0, 0, 0, 117, 0, 0, 0, 114, 0, 0, 0, 100, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 111, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 117, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 87, 0, 0, 0, 101, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 84, 0, 0, 0, 104, 0, 0, 0, 117, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 97, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 97, 0, 0, 0, 110, 0, 0, 0, 117, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 101, 0, 0, 0, 98, 0, 0, 0, 114, 0, 0, 0, 117, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 99, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 105, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 108, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 117, 0, 0, 0, 103, 0, 0, 0, 117, 0, 0, 0, 115, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 101, 0, 0, 0, 112, 0, 0, 0, 116, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 99, 0, 0, 0, 116, 0, 0, 0, 111, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 111, 0, 0, 0, 118, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 101, 0, 0, 0, 99, 0, 0, 0, 101, 0, 0, 0, 109, 0, 0, 0, 98, 0, 0, 0, 101, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 97, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 101, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 97, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 112, 0, 0, 0, 114, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 117, 0, 0, 0, 108, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 117, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 83, 0, 0, 0, 101, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 99, 0, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 111, 0, 0, 0, 118, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 101, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 109, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 47, 0, 0, 0, 37, 0, 0, 0, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 97, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 98, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 100, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 72, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 73, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 77, 0, 0, 0, 58, 0, 0, 0, 37, 0, 0, 0, 83, 0, 0, 0, 32, 0, 0, 0, 37, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 32, 2, 32, 2, 32, 2, 32, 2, 32, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 96, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 8, 216, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 213, 8, 213, 8, 213, 8, 213, 8, 213, 8, 213, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 8, 197, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 4, 192, 8, 214, 8, 214, 8, 214, 8, 214, 8, 214, 8, 214, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 8, 198, 4, 192, 4, 192, 4, 192, 4, 192, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 109, 111, 118, 101, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 41, 0, 114, 101, 116, 117, 114, 110, 32, 77, 97, 116, 104, 46, 114, 111, 117, 110, 100, 40, 36, 48, 41, 0, 116, 97, 107, 101, 95, 112, 101, 114, 105, 109, 105, 116, 101, 114, 115, 40, 36, 48, 44, 32, 36, 49, 41, 0, 57, 69, 120, 99, 101, 112, 116, 105, 111, 110, 0, 115, 101, 116, 95, 115, 99, 101, 110, 101, 95, 101, 120, 116, 101, 110, 116, 115, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 41, 0, 52, 73, 116, 101, 109, 0, 57, 65, 103, 101, 110, 116, 73, 116, 101, 109, 0, 56, 71, 111, 97, 108, 73, 116, 101, 109, 0, 49, 51, 80, 111, 108, 121, 80, 111, 105, 110, 116, 73, 116, 101, 109, 0, 49, 55, 66, 117, 105, 108, 100, 105, 110, 103, 80, 111, 105, 110, 116, 73, 116, 101, 109, 0, 49, 54, 66, 117, 105, 108, 100, 105, 110, 103, 77, 111, 118, 101, 73, 116, 101, 109, 0, 109, 111, 118, 101, 95, 111, 114, 105, 101, 110, 116, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 41, 0, 97, 100, 100, 95, 116, 114, 105, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 36, 52, 44, 32, 36, 53, 44, 32, 36, 54, 44, 32, 36, 55, 41, 0, 55, 84, 114, 105, 73, 116, 101, 109, 0, 114, 101, 109, 111, 118, 101, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 41, 0, 114, 101, 109, 111, 118, 101, 95, 116, 114, 105, 97, 110, 103, 108, 101, 40, 36, 48, 41, 0, 97, 100, 100, 95, 114, 101, 99, 116, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 36, 52, 44, 32, 36, 53, 41, 0, 49, 50, 69, 114, 114, 111, 114, 66, 111, 120, 73, 116, 101, 109, 0, 99, 104, 97, 110, 103, 101, 95, 114, 101, 99, 116, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 36, 52, 41, 0, 97, 100, 100, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 36, 52, 44, 32, 67, 79, 76, 79, 82, 95, 65, 71, 69, 78, 84, 44, 32, 79, 98, 106, 83, 101, 108, 84, 121, 112, 101, 46, 77, 85, 76, 84, 73, 44, 32, 79, 98, 106, 84, 121, 112, 101, 46, 65, 71, 69, 78, 84, 44, 32, 110, 117, 108, 108, 41, 0, 97, 100, 100, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 82, 65, 68, 73, 85, 83, 95, 71, 79, 65, 76, 44, 32, 40, 36, 52, 32, 61, 61, 32, 48, 41, 32, 63, 32, 67, 79, 76, 79, 82, 95, 80, 79, 73, 78, 84, 95, 71, 79, 65, 76, 32, 58, 32, 67, 79, 76, 79, 82, 95, 65, 84, 84, 65, 67, 75, 95, 71, 79, 65, 76, 44, 32, 79, 98, 106, 83, 101, 108, 84, 121, 112, 101, 46, 83, 73, 78, 71, 76, 69, 44, 32, 79, 98, 106, 84, 121, 112, 101, 46, 71, 79, 65, 76, 44, 32, 36, 53, 41, 0, 97, 100, 100, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 82, 65, 68, 73, 85, 83, 95, 80, 79, 76, 89, 80, 79, 73, 78, 84, 44, 32, 39, 114, 103, 98, 40, 53, 48, 44, 53, 48, 44, 53, 48, 41, 39, 44, 32, 79, 98, 106, 83, 101, 108, 84, 121, 112, 101, 46, 78, 79, 78, 69, 44, 32, 79, 98, 106, 84, 121, 112, 101, 46, 80, 79, 76, 89, 80, 79, 73, 78, 84, 44, 32, 110, 117, 108, 108, 41, 0, 97, 100, 100, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 82, 65, 68, 73, 85, 83, 95, 80, 79, 76, 89, 80, 79, 73, 78, 84, 44, 32, 39, 114, 103, 98, 40, 49, 56, 48, 44, 49, 48, 48, 44, 49, 48, 48, 41, 39, 44, 32, 79, 98, 106, 83, 101, 108, 84, 121, 112, 101, 46, 78, 79, 78, 69, 44, 32, 79, 98, 106, 84, 121, 112, 101, 46, 80, 79, 76, 89, 80, 79, 73, 78, 84, 44, 32, 110, 117, 108, 108, 41, 0, 97, 100, 100, 95, 99, 105, 114, 99, 108, 101, 40, 36, 48, 44, 32, 36, 49, 44, 32, 36, 50, 44, 32, 36, 51, 44, 32, 82, 65, 68, 73, 85, 83, 95, 80, 79, 76, 89, 80, 79, 73, 78, 84, 44, 32, 39, 114, 103, 98, 40, 53, 48, 44, 53, 48, 44, 53, 48, 41, 39, 44, 32, 79, 98, 106, 83, 101, 108, 84, 121, 112, 101, 46, 83, 73, 78, 71, 76, 69, 44, 32, 79, 98, 106, 84, 121, 112, 101, 46, 66, 85, 73, 76, 68, 73, 78, 71, 95, 80, 78, 84, 44, 32, 110, 117, 108, 108, 41, 0, 68, 105, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 97, 110, 103, 101, 116, 32, 105, 110, 32, 112, 114, 101, 118, 32, 103, 111, 97, 108, 0, 69, 88, 67, 69, 80, 84, 73, 79, 78, 32, 0, 115, 101, 116, 95, 109, 97, 120, 95, 102, 114, 97, 109, 101, 40, 36, 48, 41, 0, 35, 32, 118, 58, 0, 58, 0, 78, 83, 116, 51, 95, 95, 49, 49, 57, 98, 97, 115, 105, 99, 95, 111, 115, 116, 114, 105, 110, 103, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 53, 98, 97, 115, 105, 99, 95, 115, 116, 114, 105, 110, 103, 98, 117, 102, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 57, 98, 97, 115, 105, 99, 95, 105, 115, 116, 114, 105, 110, 103, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 99, 69, 69, 69, 69, 0, 98, 97, 100, 32, 102, 114, 97, 109, 101, 32, 105, 110, 100, 101, 120, 32, 0, 32, 115, 122, 61, 0, 99, 104, 97, 110, 103, 101, 100, 95, 115, 105, 122, 101, 40, 36, 48, 44, 32, 36, 49, 41, 0, 117, 112, 100, 97, 116, 101, 100, 95, 103, 111, 97, 108, 40, 36, 48, 44, 32, 36, 49, 44, 32, 40, 36, 50, 32, 61, 61, 32, 48, 41, 32, 63, 32, 67, 79, 76, 79, 82, 95, 80, 79, 73, 78, 84, 95, 71, 79, 65, 76, 32, 58, 32, 67, 79, 76, 79, 82, 95, 65, 84, 84, 65, 67, 75, 95, 71, 79, 65, 76, 32, 41, 0, 115, 101, 116, 80, 114, 101, 115, 115, 101, 100, 79, 98, 106, 40, 36, 48, 41, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 49, 51, 80, 111, 108, 121, 80, 111, 105, 110, 116, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 49, 51, 80, 111, 108, 121, 80, 111, 105, 110, 116, 73, 116, 101, 109, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 57, 65, 103, 101, 110, 116, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 57, 65, 103, 101, 110, 116, 73, 116, 101, 109, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 56, 71, 111, 97, 108, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 56, 71, 111, 97, 108, 73, 116, 101, 109, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 49, 54, 66, 117, 105, 108, 100, 105, 110, 103, 77, 111, 118, 101, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 49, 54, 66, 117, 105, 108, 100, 105, 110, 103, 77, 111, 118, 101, 73, 116, 101, 109, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 49, 55, 66, 117, 105, 108, 100, 105, 110, 103, 80, 111, 105, 110, 116, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 49, 55, 66, 117, 105, 108, 100, 105, 110, 103, 80, 111, 105, 110, 116, 73, 116, 101, 109, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 115, 104, 97, 114, 101, 100, 95, 112, 116, 114, 95, 112, 111, 105, 110, 116, 101, 114, 73, 80, 55, 84, 114, 105, 73, 116, 101, 109, 78, 83, 95, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 83, 49, 95, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 49, 95, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 100, 101, 102, 97, 117, 108, 116, 95, 100, 101, 108, 101, 116, 101, 73, 55, 84, 114, 105, 73, 116, 101, 109, 69, 69, 0, 0, 90, 78, 53, 65, 103, 101, 110, 116, 49, 54, 99, 111, 109, 112, 117, 116, 101, 78, 101, 105, 103, 104, 98, 111, 114, 115, 69, 82, 55, 66, 105, 104, 84, 114, 101, 101, 69, 51, 36, 95, 49, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 102, 117, 110, 99, 73, 90, 78, 53, 65, 103, 101, 110, 116, 49, 54, 99, 111, 109, 112, 117, 116, 101, 78, 101, 105, 103, 104, 98, 111, 114, 115, 69, 82, 55, 66, 105, 104, 84, 114, 101, 101, 69, 51, 36, 95, 49, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 53, 95, 69, 69, 70, 118, 80, 54, 79, 98, 106, 101, 99, 116, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 98, 97, 115, 101, 73, 70, 118, 80, 54, 79, 98, 106, 101, 99, 116, 69, 69, 69, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 97, 100, 100, 101, 100, 32, 118, 101, 114, 116, 105, 99, 101, 115, 0, 76, 111, 99, 97, 116, 101, 80, 111, 105, 110, 116, 0, 77, 97, 114, 107, 78, 101, 105, 103, 104, 98, 111, 114, 0, 80, 111, 105, 110, 116, 67, 87, 0, 76, 101, 103, 97, 108, 105, 122, 101, 0, 98, 97, 100, 32, 105, 110, 100, 101, 120, 0, 80, 111, 105, 110, 116, 67, 67, 87, 0, 110, 117, 108, 108, 32, 116, 114, 105, 97, 110, 103, 108, 101, 32, 105, 110, 32, 102, 105, 110, 97, 108, 105, 122, 101, 0, 110, 117, 108, 108, 32, 116, 114, 105, 97, 110, 103, 108, 101, 0, 69, 100, 103, 101, 69, 118, 101, 110, 116, 32, 45, 32, 99, 111, 108, 108, 105, 110, 101, 97, 114, 32, 112, 111, 105, 110, 116, 115, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 100, 111, 110, 39, 116, 32, 99, 114, 111, 115, 115, 32, 116, 104, 101, 32, 115, 116, 114, 101, 97, 109, 115, 33, 0, 109, 105, 115, 115, 105, 110, 103, 32, 110, 101, 120, 116, 0, 109, 105, 115, 115, 105, 110, 103, 32, 110, 101, 120, 116, 32, 110, 101, 120, 116, 0, 91, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 93, 32, 79, 112, 112, 111, 115, 105, 110, 103, 32, 112, 111, 105, 110, 116, 32, 111, 110, 32, 99, 111, 110, 115, 116, 114, 97, 105, 110, 101, 100, 32, 101, 100, 103, 101, 0, 91, 66, 85, 71, 58, 70, 73, 88, 77, 69, 93, 32, 70, 76, 73, 80, 32, 102, 97, 105, 108, 101, 100, 32, 100, 117, 101, 32, 116, 111, 32, 109, 105, 115, 115, 105, 110, 103, 32, 116, 114, 105, 97, 110, 103, 108, 101, 0, 80, 83, 116, 49, 51, 114, 117, 110, 116, 105, 109, 101, 95, 101, 114, 114, 111, 114, 0, 69, 100, 103, 101, 45, 99, 116, 111, 114, 0, 69, 109, 112, 116, 121, 32, 110, 111, 100, 101, 63, 0, 78, 83, 116, 51, 95, 95, 49, 49, 55, 98, 97, 100, 95, 102, 117, 110, 99, 116, 105, 111, 110, 95, 99, 97, 108, 108, 69, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 114, 97, 100, 105, 117, 115, 0, 102, 0, 32, 65, 103, 101, 110, 116, 32, 0, 32, 114, 101, 112, 108, 97, 110, 0, 105, 44, 0, 44, 10, 0, 112, 44, 10, 0, 118, 44, 0, 44, 0, 98, 44, 0, 103, 44, 0, 97, 44, 0, 73, 109, 112, 111, 114, 116, 101, 100, 32, 102, 105, 108, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 0, 85, 110, 107, 110, 111, 119, 110, 32, 67, 77, 68, 32, 0, 90, 78, 56, 68, 111, 99, 117, 109, 101, 110, 116, 49, 48, 117, 112, 100, 97, 116, 101, 80, 108, 97, 110, 69, 80, 53, 65, 103, 101, 110, 116, 69, 51, 36, 95, 49, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 102, 117, 110, 99, 73, 90, 78, 56, 68, 111, 99, 117, 109, 101, 110, 116, 49, 48, 117, 112, 100, 97, 116, 101, 80, 108, 97, 110, 69, 80, 53, 65, 103, 101, 110, 116, 69, 51, 36, 95, 49, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 53, 95, 69, 69, 70, 52, 86, 101, 99, 50, 80, 54, 86, 101, 114, 116, 101, 120, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 98, 97, 115, 101, 73, 70, 52, 86, 101, 99, 50, 80, 54, 86, 101, 114, 116, 101, 120, 69, 69, 69, 0, 90, 78, 56, 68, 111, 99, 117, 109, 101, 110, 116, 49, 48, 117, 112, 100, 97, 116, 101, 80, 108, 97, 110, 69, 80, 53, 65, 103, 101, 110, 116, 69, 51, 36, 95, 48, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 102, 117, 110, 99, 73, 90, 78, 56, 68, 111, 99, 117, 109, 101, 110, 116, 49, 48, 117, 112, 100, 97, 116, 101, 80, 108, 97, 110, 69, 80, 53, 65, 103, 101, 110, 116, 69, 51, 36, 95, 48, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 83, 53, 95, 69, 69, 70, 118, 80, 54, 86, 101, 114, 116, 101, 120, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 102, 117, 110, 99, 116, 105, 111, 110, 54, 95, 95, 98, 97, 115, 101, 73, 70, 118, 80, 54, 86, 101, 114, 116, 101, 120, 69, 69, 69, 0, 49, 52, 83, 101, 103, 109, 101, 110, 116, 83, 117, 98, 71, 111, 97, 108, 0, 56, 73, 83, 117, 98, 71, 111, 97, 108, 0, 49, 50, 80, 111, 105, 110, 116, 83, 101, 103, 109, 101, 110, 116, 0, 55, 83, 101, 103, 109, 101, 110, 116, 0, 54, 79, 98, 106, 101, 99, 116, 0, 89, 111, 117, 32, 100, 105, 100, 32, 110, 111, 116, 32, 114, 101, 115, 101, 114, 118, 101, 32, 101, 110, 111, 117, 103, 104, 32, 115, 112, 97, 99, 101, 0, 49, 56, 83, 117, 98, 71, 111, 97, 108, 70, 114, 111, 109, 83, 101, 103, 109, 101, 110, 116, 0, 49, 51, 73, 83, 117, 98, 71, 111, 97, 108, 77, 97, 107, 101, 114, 0, 49, 57, 83, 117, 98, 71, 111, 97, 108, 70, 114, 111, 109, 80, 111, 105, 110, 116, 83, 101, 103, 0, 49, 50, 80, 111, 105, 110, 116, 83, 117, 98, 71, 111, 97, 108, 0, 53, 65, 103, 101, 110, 116, 0, 54, 67, 105, 114, 99, 108, 101, 0, 78, 111, 116, 32, 97, 108, 108, 32, 116, 114, 105, 97, 110, 103, 108, 101, 115, 32, 97, 114, 101, 32, 99, 108, 111, 99, 107, 119, 105, 115, 101, 0, 83, 116, 97, 110, 103, 101, 32, 104, 97, 108, 102, 32, 101, 100, 103, 101, 32, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 0, 85, 110, 101, 120, 112, 101, 116, 101, 99, 101, 100, 32, 99, 111, 109, 109, 111, 110, 32, 118, 116, 120, 0, 117, 110, 112, 101, 120, 112, 101, 99, 116, 101, 100, 32, 117, 110, 112, 97, 105, 114, 101, 100, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 109, 111, 114, 101, 32, 116, 104, 97, 110, 32, 116, 119, 111, 32, 105, 116, 101, 109, 115, 0, 100, 105, 100, 32, 110, 111, 116, 32, 102, 105, 110, 100, 32, 110, 111, 110, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 111, 102, 32, 112, 111, 108, 121, 108, 105, 110, 101, 0, 102, 105, 114, 115, 116, 32, 105, 116, 101, 114, 97, 116, 105, 111, 110, 32, 106, 117, 110, 99, 116, 105, 111, 110, 63, 0, 44, 32, 0, 78, 83, 116, 51, 95, 95, 49, 49, 56, 98, 97, 115, 105, 99, 95, 115, 116, 114, 105, 110, 103, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 78, 83, 95, 57, 97, 108, 108, 111, 99, 97, 116, 111, 114, 73, 99, 69, 69, 69, 69, 0, 83, 116, 57, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 83, 116, 57, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 83, 116, 49, 51, 114, 117, 110, 116, 105, 109, 101, 95, 101, 114, 114, 111, 114, 0, 83, 116, 57, 116, 121, 112, 101, 95, 105, 110, 102, 111, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 54, 95, 95, 115, 104, 105, 109, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 57, 95, 95, 112, 111, 105, 110, 116, 101, 114, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 49, 55, 95, 95, 112, 98, 97, 115, 101, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 51, 95, 95, 102, 117, 110, 100, 97, 109, 101, 110, 116, 97, 108, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 118, 0, 68, 110, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 48, 95, 95, 115, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 78, 49, 48, 95, 95, 99, 120, 120, 97, 98, 105, 118, 49, 50, 49, 95, 95, 118, 109, 105, 95, 99, 108, 97, 115, 115, 95, 116, 121, 112, 101, 95, 105, 110, 102, 111, 69, 0, 33, 34, 98, 97, 115, 105, 99, 95, 115, 116, 114, 105, 110, 103, 32, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 34, 0, 67, 58, 92, 108, 105, 98, 92, 69, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 49, 46, 51, 53, 46, 48, 92, 115, 121, 115, 116, 101, 109, 92, 105, 110, 99, 108, 117, 100, 101, 92, 108, 105, 98, 99, 120, 120, 92, 115, 116, 114, 105, 110, 103, 0, 95, 95, 116, 104, 114, 111, 119, 95, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 0, 33, 34, 118, 101, 99, 116, 111, 114, 32, 108, 101, 110, 103, 116, 104, 95, 101, 114, 114, 111, 114, 34, 0, 67, 58, 92, 108, 105, 98, 92, 69, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 101, 109, 115, 99, 114, 105, 112, 116, 101, 110, 92, 49, 46, 51, 53, 46, 48, 92, 115, 121, 115, 116, 101, 109, 92, 105, 110, 99, 108, 117, 100, 101, 92, 108, 105, 98, 99, 120, 120, 92, 118, 101, 99, 116, 111, 114, 0, 112, 116, 104, 114, 101, 97, 100, 95, 111, 110, 99, 101, 32, 102, 97, 105, 108, 117, 114, 101, 32, 105, 110, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 95, 102, 97, 115, 116, 40, 41, 0, 115, 116, 100, 58, 58, 98, 97, 100, 95, 97, 108, 108, 111, 99, 0, 116, 101, 114 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 11688);
allocate([ 109, 105, 110, 97, 116, 101, 95, 104, 97, 110, 100, 108, 101, 114, 32, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 108, 121, 32, 114, 101, 116, 117, 114, 110, 101, 100, 0, 115, 116, 100, 58, 58, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 99, 97, 110, 110, 111, 116, 32, 99, 114, 101, 97, 116, 101, 32, 112, 116, 104, 114, 101, 97, 100, 32, 107, 101, 121, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 99, 97, 110, 110, 111, 116, 32, 122, 101, 114, 111, 32, 111, 117, 116, 32, 116, 104, 114, 101, 97, 100, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 95, 95, 99, 120, 97, 95, 103, 101, 116, 95, 103, 108, 111, 98, 97, 108, 115, 40, 41, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 58, 32, 37, 115, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 32, 111, 102, 32, 116, 121, 112, 101, 32, 37, 115, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 32, 119, 105, 116, 104, 32, 37, 115, 32, 102, 111, 114, 101, 105, 103, 110, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 0, 116, 101, 114, 109, 105, 110, 97, 116, 105, 110, 103, 0, 117, 110, 99, 97, 117, 103, 104, 116, 0, 84, 33, 34, 25, 13, 1, 2, 3, 17, 75, 28, 12, 16, 4, 11, 29, 18, 30, 39, 104, 110, 111, 112, 113, 98, 32, 5, 6, 15, 19, 20, 21, 26, 8, 22, 7, 40, 36, 23, 24, 9, 10, 14, 27, 31, 37, 35, 131, 130, 125, 38, 42, 43, 60, 61, 62, 63, 67, 71, 74, 77, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 114, 115, 116, 121, 122, 123, 124, 0, 73, 108, 108, 101, 103, 97, 108, 32, 98, 121, 116, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0, 68, 111, 109, 97, 105, 110, 32, 101, 114, 114, 111, 114, 0, 82, 101, 115, 117, 108, 116, 32, 110, 111, 116, 32, 114, 101, 112, 114, 101, 115, 101, 110, 116, 97, 98, 108, 101, 0, 78, 111, 116, 32, 97, 32, 116, 116, 121, 0, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 110, 111, 116, 32, 112, 101, 114, 109, 105, 116, 116, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 102, 105, 108, 101, 32, 111, 114, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 78, 111, 32, 115, 117, 99, 104, 32, 112, 114, 111, 99, 101, 115, 115, 0, 70, 105, 108, 101, 32, 101, 120, 105, 115, 116, 115, 0, 86, 97, 108, 117, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 32, 102, 111, 114, 32, 100, 97, 116, 97, 32, 116, 121, 112, 101, 0, 78, 111, 32, 115, 112, 97, 99, 101, 32, 108, 101, 102, 116, 32, 111, 110, 32, 100, 101, 118, 105, 99, 101, 0, 79, 117, 116, 32, 111, 102, 32, 109, 101, 109, 111, 114, 121, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 98, 117, 115, 121, 0, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 32, 115, 121, 115, 116, 101, 109, 32, 99, 97, 108, 108, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 116, 101, 109, 112, 111, 114, 97, 114, 105, 108, 121, 32, 117, 110, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 73, 110, 118, 97, 108, 105, 100, 32, 115, 101, 101, 107, 0, 67, 114, 111, 115, 115, 45, 100, 101, 118, 105, 99, 101, 32, 108, 105, 110, 107, 0, 82, 101, 97, 100, 45, 111, 110, 108, 121, 32, 102, 105, 108, 101, 32, 115, 121, 115, 116, 101, 109, 0, 68, 105, 114, 101, 99, 116, 111, 114, 121, 32, 110, 111, 116, 32, 101, 109, 112, 116, 121, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 112, 101, 101, 114, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 116, 105, 109, 101, 100, 32, 111, 117, 116, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 0, 72, 111, 115, 116, 32, 105, 115, 32, 100, 111, 119, 110, 0, 72, 111, 115, 116, 32, 105, 115, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 65, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 0, 66, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 0, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 32, 111, 114, 32, 97, 100, 100, 114, 101, 115, 115, 0, 66, 108, 111, 99, 107, 32, 100, 101, 118, 105, 99, 101, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 78, 111, 32, 115, 117, 99, 104, 32, 100, 101, 118, 105, 99, 101, 0, 78, 111, 116, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 73, 115, 32, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 0, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 98, 117, 115, 121, 0, 69, 120, 101, 99, 32, 102, 111, 114, 109, 97, 116, 32, 101, 114, 114, 111, 114, 0, 73, 110, 118, 97, 108, 105, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0, 65, 114, 103, 117, 109, 101, 110, 116, 32, 108, 105, 115, 116, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 83, 121, 109, 98, 111, 108, 105, 99, 32, 108, 105, 110, 107, 32, 108, 111, 111, 112, 0, 70, 105, 108, 101, 110, 97, 109, 101, 32, 116, 111, 111, 32, 108, 111, 110, 103, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 115, 32, 105, 110, 32, 115, 121, 115, 116, 101, 109, 0, 78, 111, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 66, 97, 100, 32, 102, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 0, 78, 111, 32, 99, 104, 105, 108, 100, 32, 112, 114, 111, 99, 101, 115, 115, 0, 66, 97, 100, 32, 97, 100, 100, 114, 101, 115, 115, 0, 70, 105, 108, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 84, 111, 111, 32, 109, 97, 110, 121, 32, 108, 105, 110, 107, 115, 0, 78, 111, 32, 108, 111, 99, 107, 115, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 82, 101, 115, 111, 117, 114, 99, 101, 32, 100, 101, 97, 100, 108, 111, 99, 107, 32, 119, 111, 117, 108, 100, 32, 111, 99, 99, 117, 114, 0, 83, 116, 97, 116, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 118, 101, 114, 97, 98, 108, 101, 0, 80, 114, 101, 118, 105, 111, 117, 115, 32, 111, 119, 110, 101, 114, 32, 100, 105, 101, 100, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 99, 97, 110, 99, 101, 108, 101, 100, 0, 70, 117, 110, 99, 116, 105, 111, 110, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 0, 78, 111, 32, 109, 101, 115, 115, 97, 103, 101, 32, 111, 102, 32, 100, 101, 115, 105, 114, 101, 100, 32, 116, 121, 112, 101, 0, 73, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 114, 101, 109, 111, 118, 101, 100, 0, 68, 101, 118, 105, 99, 101, 32, 110, 111, 116, 32, 97, 32, 115, 116, 114, 101, 97, 109, 0, 78, 111, 32, 100, 97, 116, 97, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 68, 101, 118, 105, 99, 101, 32, 116, 105, 109, 101, 111, 117, 116, 0, 79, 117, 116, 32, 111, 102, 32, 115, 116, 114, 101, 97, 109, 115, 32, 114, 101, 115, 111, 117, 114, 99, 101, 115, 0, 76, 105, 110, 107, 32, 104, 97, 115, 32, 98, 101, 101, 110, 32, 115, 101, 118, 101, 114, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 101, 114, 114, 111, 114, 0, 66, 97, 100, 32, 109, 101, 115, 115, 97, 103, 101, 0, 70, 105, 108, 101, 32, 100, 101, 115, 99, 114, 105, 112, 116, 111, 114, 32, 105, 110, 32, 98, 97, 100, 32, 115, 116, 97, 116, 101, 0, 78, 111, 116, 32, 97, 32, 115, 111, 99, 107, 101, 116, 0, 68, 101, 115, 116, 105, 110, 97, 116, 105, 111, 110, 32, 97, 100, 100, 114, 101, 115, 115, 32, 114, 101, 113, 117, 105, 114, 101, 100, 0, 77, 101, 115, 115, 97, 103, 101, 32, 116, 111, 111, 32, 108, 97, 114, 103, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 119, 114, 111, 110, 103, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 115, 111, 99, 107, 101, 116, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 116, 121, 112, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 78, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 80, 114, 111, 116, 111, 99, 111, 108, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0, 65, 100, 100, 114, 101, 115, 115, 32, 102, 97, 109, 105, 108, 121, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 98, 121, 32, 112, 114, 111, 116, 111, 99, 111, 108, 0, 65, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 78, 101, 116, 119, 111, 114, 107, 32, 105, 115, 32, 100, 111, 119, 110, 0, 78, 101, 116, 119, 111, 114, 107, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 32, 98, 121, 32, 110, 101, 116, 119, 111, 114, 107, 0, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 0, 78, 111, 32, 98, 117, 102, 102, 101, 114, 32, 115, 112, 97, 99, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 0, 83, 111, 99, 107, 101, 116, 32, 105, 115, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 83, 111, 99, 107, 101, 116, 32, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 0, 67, 97, 110, 110, 111, 116, 32, 115, 101, 110, 100, 32, 97, 102, 116, 101, 114, 32, 115, 111, 99, 107, 101, 116, 32, 115, 104, 117, 116, 100, 111, 119, 110, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 79, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 32, 112, 114, 111, 103, 114, 101, 115, 115, 0, 83, 116, 97, 108, 101, 32, 102, 105, 108, 101, 32, 104, 97, 110, 100, 108, 101, 0, 82, 101, 109, 111, 116, 101, 32, 73, 47, 79, 32, 101, 114, 114, 111, 114, 0, 81, 117, 111, 116, 97, 32, 101, 120, 99, 101, 101, 100, 101, 100, 0, 78, 111, 32, 109, 101, 100, 105, 117, 109, 32, 102, 111, 117, 110, 100, 0, 87, 114, 111, 110, 103, 32, 109, 101, 100, 105, 117, 109, 32, 116, 121, 112, 101, 0, 78, 111, 32, 101, 114, 114, 111, 114, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 0, 0, 105, 110, 102, 105, 110, 105, 116, 121, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 255, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 1, 2, 4, 7, 3, 6, 5, 0, 80, 79, 83, 73, 88 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 21928);
allocate([ 17, 0, 10, 0, 17, 17, 17, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 15, 10, 17, 17, 17, 3, 10, 7, 0, 1, 19, 9, 11, 11, 0, 0, 9, 6, 11, 0, 0, 11, 0, 6, 17, 0, 0, 0, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 10, 10, 17, 17, 17, 0, 10, 0, 0, 2, 0, 9, 11, 0, 0, 0, 9, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 4, 13, 0, 0, 0, 0, 9, 14, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 15, 0, 0, 0, 0, 9, 16, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 18, 18, 18, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 10, 0, 0, 0, 0, 9, 11, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 12, 0, 0, 0, 0, 9, 12, 0, 0, 0, 0, 0, 12, 0, 0, 12, 0, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 45, 43, 32, 32, 32, 48, 88, 48, 120, 0, 40, 110, 117, 108, 108, 41, 0, 45, 48, 88, 43, 48, 88, 32, 48, 88, 45, 48, 120, 43, 48, 120, 32, 48, 120, 0, 105, 110, 102, 0, 73, 78, 70, 0, 110, 97, 110, 0, 78, 65, 78, 0, 46, 0, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 115, 116, 100, 111, 117, 116, 98, 117, 102, 73, 119, 69, 69, 0, 117, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 32, 108, 111, 99, 97, 108, 101, 32, 102, 111, 114, 32, 115, 116, 97, 110, 100, 97, 114, 100, 32, 105, 110, 112, 117, 116, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 115, 116, 100, 105, 110, 98, 117, 102, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 115, 116, 100, 111, 117, 116, 98, 117, 102, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 115, 116, 100, 105, 110, 98, 117, 102, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 115, 104, 97, 114, 101, 100, 95, 99, 111, 117, 110, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 57, 95, 95, 115, 104, 97, 114, 101, 100, 95, 119, 101, 97, 107, 95, 99, 111, 117, 110, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 105, 111, 115, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 98, 97, 115, 105, 99, 95, 105, 111, 115, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 98, 97, 115, 105, 99, 95, 105, 111, 115, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 53, 98, 97, 115, 105, 99, 95, 115, 116, 114, 101, 97, 109, 98, 117, 102, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 53, 98, 97, 115, 105, 99, 95, 115, 116, 114, 101, 97, 109, 98, 117, 102, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 105, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 105, 115, 116, 114, 101, 97, 109, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 111, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 98, 97, 115, 105, 99, 95, 111, 115, 116, 114, 101, 97, 109, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 98, 97, 115, 105, 99, 95, 105, 111, 115, 116, 114, 101, 97, 109, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 65, 66, 67, 68, 69, 70, 120, 88, 43, 45, 112, 80, 105, 73, 110, 78, 0, 78, 83, 116, 51, 95, 95, 49, 54, 108, 111, 99, 97, 108, 101, 53, 102, 97, 99, 101, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 53, 99, 116, 121, 112, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 99, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 68, 115, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 68, 105, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 54, 95, 95, 110, 97, 114, 114, 111, 119, 95, 116, 111, 95, 117, 116, 102, 56, 73, 76, 106, 51, 50, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 55, 95, 95, 119, 105, 100, 101, 110, 95, 102, 114, 111, 109, 95, 117, 116, 102, 56, 73, 76, 106, 51, 50, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 100, 101, 99, 118, 116, 73, 119, 99, 49, 49, 95, 95, 109, 98, 115, 116, 97, 116, 101, 95, 116, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 54, 108, 111, 99, 97, 108, 101, 53, 95, 95, 105, 109, 112, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 108, 108, 97, 116, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 99, 111, 108, 108, 97, 116, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 53, 99, 116, 121, 112, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 110, 117, 109, 112, 117, 110, 99, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 110, 117, 109, 112, 117, 110, 99, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 55, 110, 117, 109, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 116, 105, 109, 101, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 99, 76, 98, 48, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 99, 76, 98, 49, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 119, 76, 98, 48, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 112, 117, 110, 99, 116, 73, 119, 76, 98, 49, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 99, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 119, 78, 83, 95, 49, 57, 105, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 99, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 99, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 99, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 119, 78, 83, 95, 49, 57, 111, 115, 116, 114, 101, 97, 109, 98, 117, 102, 95, 105, 116, 101, 114, 97, 116, 111, 114, 73, 119, 78, 83, 95, 49, 49, 99, 104, 97, 114, 95, 116, 114, 97, 105, 116, 115, 73, 119, 69, 69, 69, 69, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 109, 101, 115, 115, 97, 103, 101, 115, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 56, 109, 101, 115, 115, 97, 103, 101, 115, 73, 119, 69, 69, 0, 37, 112, 0, 67, 0, 37, 0, 0, 0, 0, 0, 108, 0, 108, 108, 0, 0, 76, 0, 37, 112, 0, 0, 0, 0, 37, 72, 58, 37, 77, 58, 37, 83, 37, 109, 47, 37, 100, 47, 37, 121, 37, 89, 45, 37, 109, 45, 37, 100, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 37, 72, 58, 37, 77, 37, 72, 58, 37, 77, 58, 37, 83, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 37, 76, 102, 0, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 37, 46, 48, 76, 102, 0, 42, 0, 116, 114, 117, 101, 0, 102, 97, 108, 115, 101, 0, 83, 117, 110, 100, 97, 121, 0, 77, 111, 110, 100, 97, 121, 0, 84, 117, 101, 115, 100, 97, 121, 0, 87, 101, 100, 110, 101, 115, 100, 97, 121, 0, 84, 104, 117, 114, 115, 100, 97, 121, 0, 70, 114, 105, 100, 97, 121, 0, 83, 97, 116, 117, 114, 100, 97, 121, 0, 83, 117, 110, 0, 77, 111, 110, 0, 84, 117, 101, 0, 87, 101, 100, 0, 84, 104, 117, 0, 70, 114, 105, 0, 83, 97, 116, 0, 74, 97, 110, 117, 97, 114, 121, 0, 70, 101, 98, 114, 117, 97, 114, 121, 0, 77, 97, 114, 99, 104, 0, 65, 112, 114, 105, 108, 0, 77, 97, 121, 0, 74, 117, 110, 101, 0, 74, 117, 108, 121, 0, 65, 117, 103, 117, 115, 116, 0, 83, 101, 112, 116, 101, 109, 98, 101, 114, 0, 79, 99, 116, 111, 98, 101, 114, 0, 78, 111, 118, 101, 109, 98, 101, 114, 0, 68, 101, 99, 101, 109, 98, 101, 114, 0, 74, 97, 110, 0, 70, 101, 98, 0, 77, 97, 114, 0, 65, 112, 114, 0, 74, 117, 110, 0, 74, 117, 108, 0, 65, 117, 103, 0, 83, 101, 112, 0, 79, 99, 116, 0, 78, 111, 118, 0, 68, 101, 99, 0, 65, 77, 0, 80, 77, 0, 37, 109, 47, 37, 100, 47, 37, 121, 0, 37, 72, 58, 37, 77, 58, 37, 83, 0, 37, 97, 32, 37, 98, 32, 37, 100, 32, 37, 72, 58, 37, 77, 58, 37, 83, 32, 37, 89, 0, 37, 73, 58, 37, 77, 58, 37, 83, 32, 37, 112, 0, 78, 83, 116, 51, 95, 95, 49, 49, 51, 109, 101, 115, 115, 97, 103, 101, 115, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 112, 117, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 49, 95, 95, 109, 111, 110, 101, 121, 95, 103, 101, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 109, 111, 110, 101, 121, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 95, 95, 116, 105, 109, 101, 95, 112, 117, 116, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 116, 105, 109, 101, 95, 103, 101, 116, 95, 99, 95, 115, 116, 111, 114, 97, 103, 101, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 50, 48, 95, 95, 116, 105, 109, 101, 95, 103, 101, 116, 95, 99, 95, 115, 116, 111, 114, 97, 103, 101, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 116, 105, 109, 101, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 112, 117, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 110, 117, 109, 95, 112, 117, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 112, 117, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 103, 101, 116, 73, 119, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 52, 95, 95, 110, 117, 109, 95, 103, 101, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 57, 95, 95, 110, 117, 109, 95, 103, 101, 116, 73, 99, 69, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 50, 99, 111, 100, 101, 99, 118, 116, 95, 98, 97, 115, 101, 69, 0, 78, 83, 116, 51, 95, 95, 49, 49, 48, 99, 116, 121, 112, 101, 95, 98, 97, 115, 101, 69, 0 ], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE + 26473);
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
}
function copyTempDouble(ptr) {
 HEAP8[tempDoublePtr] = HEAP8[ptr];
 HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];
 HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];
 HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];
 HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];
 HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];
 HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];
 HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];
}
function _atexit(func, arg) {
 __ATEXIT__.unshift({
  func: func,
  arg: arg
 });
}
function ___cxa_atexit() {
 return _atexit.apply(null, arguments);
}
Module["_i64Subtract"] = _i64Subtract;
function ___assert_fail(condition, filename, line, func) {
 ABORT = true;
 throw "Assertion failed: " + Pointer_stringify(condition) + ", at: " + [ filename ? Pointer_stringify(filename) : "unknown filename", line, func ? Pointer_stringify(func) : "unknown function" ] + " at " + stackTrace();
}
function __ZSt18uncaught_exceptionv() {
 return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}
var EXCEPTIONS = {
 last: 0,
 caught: [],
 infos: {},
 deAdjust: (function(adjusted) {
  if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
  for (var ptr in EXCEPTIONS.infos) {
   var info = EXCEPTIONS.infos[ptr];
   if (info.adjusted === adjusted) {
    return ptr;
   }
  }
  return adjusted;
 }),
 addRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount++;
 }),
 decRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  assert(info.refcount > 0);
  info.refcount--;
  if (info.refcount === 0) {
   if (info.destructor) {
    Runtime.dynCall("vi", info.destructor, [ ptr ]);
   }
   delete EXCEPTIONS.infos[ptr];
   ___cxa_free_exception(ptr);
  }
 }),
 clearRef: (function(ptr) {
  if (!ptr) return;
  var info = EXCEPTIONS.infos[ptr];
  info.refcount = 0;
 })
};
function ___resumeException(ptr) {
 if (!EXCEPTIONS.last) {
  EXCEPTIONS.last = ptr;
 }
 EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr));
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
function ___cxa_find_matching_catch() {
 var thrown = EXCEPTIONS.last;
 if (!thrown) {
  return (asm["setTempRet0"](0), 0) | 0;
 }
 var info = EXCEPTIONS.infos[thrown];
 var throwntype = info.type;
 if (!throwntype) {
  return (asm["setTempRet0"](0), thrown) | 0;
 }
 var typeArray = Array.prototype.slice.call(arguments);
 var pointer = Module["___cxa_is_pointer_type"](throwntype);
 if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
 HEAP32[___cxa_find_matching_catch.buffer >> 2] = thrown;
 thrown = ___cxa_find_matching_catch.buffer;
 for (var i = 0; i < typeArray.length; i++) {
  if (typeArray[i] && Module["___cxa_can_catch"](typeArray[i], throwntype, thrown)) {
   thrown = HEAP32[thrown >> 2];
   info.adjusted = thrown;
   return (asm["setTempRet0"](typeArray[i]), thrown) | 0;
  }
 }
 thrown = HEAP32[thrown >> 2];
 return (asm["setTempRet0"](throwntype), thrown) | 0;
}
function ___cxa_throw(ptr, type, destructor) {
 EXCEPTIONS.infos[ptr] = {
  ptr: ptr,
  adjusted: ptr,
  type: type,
  destructor: destructor,
  refcount: 0
 };
 EXCEPTIONS.last = ptr;
 if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
  __ZSt18uncaught_exceptionv.uncaught_exception = 1;
 } else {
  __ZSt18uncaught_exceptionv.uncaught_exception++;
 }
 throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
}
Module["_memset"] = _memset;
var _BDtoILow = true;
function _pthread_mutex_lock() {}
function __isLeapYear(year) {
 return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function __arraySum(array, index) {
 var sum = 0;
 for (var i = 0; i <= index; sum += array[i++]) ;
 return sum;
}
var __MONTH_DAYS_LEAP = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
var __MONTH_DAYS_REGULAR = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
function __addDays(date, days) {
 var newDate = new Date(date.getTime());
 while (days > 0) {
  var leap = __isLeapYear(newDate.getFullYear());
  var currentMonth = newDate.getMonth();
  var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  if (days > daysInCurrentMonth - newDate.getDate()) {
   days -= daysInCurrentMonth - newDate.getDate() + 1;
   newDate.setDate(1);
   if (currentMonth < 11) {
    newDate.setMonth(currentMonth + 1);
   } else {
    newDate.setMonth(0);
    newDate.setFullYear(newDate.getFullYear() + 1);
   }
  } else {
   newDate.setDate(newDate.getDate() + days);
   return newDate;
  }
 }
 return newDate;
}
function _strftime(s, maxsize, format, tm) {
 var tm_zone = HEAP32[tm + 40 >> 2];
 var date = {
  tm_sec: HEAP32[tm >> 2],
  tm_min: HEAP32[tm + 4 >> 2],
  tm_hour: HEAP32[tm + 8 >> 2],
  tm_mday: HEAP32[tm + 12 >> 2],
  tm_mon: HEAP32[tm + 16 >> 2],
  tm_year: HEAP32[tm + 20 >> 2],
  tm_wday: HEAP32[tm + 24 >> 2],
  tm_yday: HEAP32[tm + 28 >> 2],
  tm_isdst: HEAP32[tm + 32 >> 2],
  tm_gmtoff: HEAP32[tm + 36 >> 2],
  tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ""
 };
 var pattern = Pointer_stringify(format);
 var EXPANSION_RULES_1 = {
  "%c": "%a %b %d %H:%M:%S %Y",
  "%D": "%m/%d/%y",
  "%F": "%Y-%m-%d",
  "%h": "%b",
  "%r": "%I:%M:%S %p",
  "%R": "%H:%M",
  "%T": "%H:%M:%S",
  "%x": "%m/%d/%y",
  "%X": "%H:%M:%S"
 };
 for (var rule in EXPANSION_RULES_1) {
  pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_1[rule]);
 }
 var WEEKDAYS = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
 var MONTHS = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
 function leadingSomething(value, digits, character) {
  var str = typeof value === "number" ? value.toString() : value || "";
  while (str.length < digits) {
   str = character[0] + str;
  }
  return str;
 }
 function leadingNulls(value, digits) {
  return leadingSomething(value, digits, "0");
 }
 function compareByDay(date1, date2) {
  function sgn(value) {
   return value < 0 ? -1 : value > 0 ? 1 : 0;
  }
  var compare;
  if ((compare = sgn(date1.getFullYear() - date2.getFullYear())) === 0) {
   if ((compare = sgn(date1.getMonth() - date2.getMonth())) === 0) {
    compare = sgn(date1.getDate() - date2.getDate());
   }
  }
  return compare;
 }
 function getFirstWeekStartDate(janFourth) {
  switch (janFourth.getDay()) {
  case 0:
   return new Date(janFourth.getFullYear() - 1, 11, 29);
  case 1:
   return janFourth;
  case 2:
   return new Date(janFourth.getFullYear(), 0, 3);
  case 3:
   return new Date(janFourth.getFullYear(), 0, 2);
  case 4:
   return new Date(janFourth.getFullYear(), 0, 1);
  case 5:
   return new Date(janFourth.getFullYear() - 1, 11, 31);
  case 6:
   return new Date(janFourth.getFullYear() - 1, 11, 30);
  }
 }
 function getWeekBasedYear(date) {
  var thisDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
  var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
  var janFourthNextYear = new Date(thisDate.getFullYear() + 1, 0, 4);
  var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
  var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
   if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
    return thisDate.getFullYear() + 1;
   } else {
    return thisDate.getFullYear();
   }
  } else {
   return thisDate.getFullYear() - 1;
  }
 }
 var EXPANSION_RULES_2 = {
  "%a": (function(date) {
   return WEEKDAYS[date.tm_wday].substring(0, 3);
  }),
  "%A": (function(date) {
   return WEEKDAYS[date.tm_wday];
  }),
  "%b": (function(date) {
   return MONTHS[date.tm_mon].substring(0, 3);
  }),
  "%B": (function(date) {
   return MONTHS[date.tm_mon];
  }),
  "%C": (function(date) {
   var year = date.tm_year + 1900;
   return leadingNulls(year / 100 | 0, 2);
  }),
  "%d": (function(date) {
   return leadingNulls(date.tm_mday, 2);
  }),
  "%e": (function(date) {
   return leadingSomething(date.tm_mday, 2, " ");
  }),
  "%g": (function(date) {
   return getWeekBasedYear(date).toString().substring(2);
  }),
  "%G": (function(date) {
   return getWeekBasedYear(date);
  }),
  "%H": (function(date) {
   return leadingNulls(date.tm_hour, 2);
  }),
  "%I": (function(date) {
   return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour - 12, 2);
  }),
  "%j": (function(date) {
   return leadingNulls(date.tm_mday + __arraySum(__isLeapYear(date.tm_year + 1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon - 1), 3);
  }),
  "%m": (function(date) {
   return leadingNulls(date.tm_mon + 1, 2);
  }),
  "%M": (function(date) {
   return leadingNulls(date.tm_min, 2);
  }),
  "%n": (function() {
   return "\n";
  }),
  "%p": (function(date) {
   if (date.tm_hour > 0 && date.tm_hour < 13) {
    return "AM";
   } else {
    return "PM";
   }
  }),
  "%S": (function(date) {
   return leadingNulls(date.tm_sec, 2);
  }),
  "%t": (function() {
   return "\t";
  }),
  "%u": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay() || 7;
  }),
  "%U": (function(date) {
   var janFirst = new Date(date.tm_year + 1900, 0, 1);
   var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7 - janFirst.getDay());
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstSunday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstSundayUntilEndJanuary = 31 - firstSunday.getDate();
    var days = firstSundayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstSunday, janFirst) === 0 ? "01" : "00";
  }),
  "%V": (function(date) {
   var janFourthThisYear = new Date(date.tm_year + 1900, 0, 4);
   var janFourthNextYear = new Date(date.tm_year + 1901, 0, 4);
   var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
   var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
   var endDate = __addDays(new Date(date.tm_year + 1900, 0, 1), date.tm_yday);
   if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
    return "53";
   }
   if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
    return "01";
   }
   var daysDifference;
   if (firstWeekStartThisYear.getFullYear() < date.tm_year + 1900) {
    daysDifference = date.tm_yday + 32 - firstWeekStartThisYear.getDate();
   } else {
    daysDifference = date.tm_yday + 1 - firstWeekStartThisYear.getDate();
   }
   return leadingNulls(Math.ceil(daysDifference / 7), 2);
  }),
  "%w": (function(date) {
   var day = new Date(date.tm_year + 1900, date.tm_mon + 1, date.tm_mday, 0, 0, 0, 0);
   return day.getDay();
  }),
  "%W": (function(date) {
   var janFirst = new Date(date.tm_year, 0, 1);
   var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7 - janFirst.getDay() + 1);
   var endDate = new Date(date.tm_year + 1900, date.tm_mon, date.tm_mday);
   if (compareByDay(firstMonday, endDate) < 0) {
    var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth() - 1) - 31;
    var firstMondayUntilEndJanuary = 31 - firstMonday.getDate();
    var days = firstMondayUntilEndJanuary + februaryFirstUntilEndMonth + endDate.getDate();
    return leadingNulls(Math.ceil(days / 7), 2);
   }
   return compareByDay(firstMonday, janFirst) === 0 ? "01" : "00";
  }),
  "%y": (function(date) {
   return (date.tm_year + 1900).toString().substring(2);
  }),
  "%Y": (function(date) {
   return date.tm_year + 1900;
  }),
  "%z": (function(date) {
   var off = date.tm_gmtoff;
   var ahead = off >= 0;
   off = Math.abs(off) / 60;
   off = off / 60 * 100 + off % 60;
   return (ahead ? "+" : "-") + String("0000" + off).slice(-4);
  }),
  "%Z": (function(date) {
   return date.tm_zone;
  }),
  "%%": (function() {
   return "%";
  })
 };
 for (var rule in EXPANSION_RULES_2) {
  if (pattern.indexOf(rule) >= 0) {
   pattern = pattern.replace(new RegExp(rule, "g"), EXPANSION_RULES_2[rule](date));
  }
 }
 var bytes = intArrayFromString(pattern, false);
 if (bytes.length > maxsize) {
  return 0;
 }
 writeArrayToMemory(bytes, s);
 return bytes.length - 1;
}
function _strftime_l(s, maxsize, format, tm) {
 return _strftime(s, maxsize, format, tm);
}
function _abort() {
 Module["abort"]();
}
function _pthread_once(ptr, func) {
 if (!_pthread_once.seen) _pthread_once.seen = {};
 if (ptr in _pthread_once.seen) return;
 Runtime.dynCall("v", func);
 _pthread_once.seen[ptr] = 1;
}
var _sqrtf = Math_sqrt;
function ___unlock() {}
var PTHREAD_SPECIFIC = {};
function _pthread_getspecific(key) {
 return PTHREAD_SPECIFIC[key] || 0;
}
function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}
var ERRNO_CODES = {
 EPERM: 1,
 ENOENT: 2,
 ESRCH: 3,
 EINTR: 4,
 EIO: 5,
 ENXIO: 6,
 E2BIG: 7,
 ENOEXEC: 8,
 EBADF: 9,
 ECHILD: 10,
 EAGAIN: 11,
 EWOULDBLOCK: 11,
 ENOMEM: 12,
 EACCES: 13,
 EFAULT: 14,
 ENOTBLK: 15,
 EBUSY: 16,
 EEXIST: 17,
 EXDEV: 18,
 ENODEV: 19,
 ENOTDIR: 20,
 EISDIR: 21,
 EINVAL: 22,
 ENFILE: 23,
 EMFILE: 24,
 ENOTTY: 25,
 ETXTBSY: 26,
 EFBIG: 27,
 ENOSPC: 28,
 ESPIPE: 29,
 EROFS: 30,
 EMLINK: 31,
 EPIPE: 32,
 EDOM: 33,
 ERANGE: 34,
 ENOMSG: 42,
 EIDRM: 43,
 ECHRNG: 44,
 EL2NSYNC: 45,
 EL3HLT: 46,
 EL3RST: 47,
 ELNRNG: 48,
 EUNATCH: 49,
 ENOCSI: 50,
 EL2HLT: 51,
 EDEADLK: 35,
 ENOLCK: 37,
 EBADE: 52,
 EBADR: 53,
 EXFULL: 54,
 ENOANO: 55,
 EBADRQC: 56,
 EBADSLT: 57,
 EDEADLOCK: 35,
 EBFONT: 59,
 ENOSTR: 60,
 ENODATA: 61,
 ETIME: 62,
 ENOSR: 63,
 ENONET: 64,
 ENOPKG: 65,
 EREMOTE: 66,
 ENOLINK: 67,
 EADV: 68,
 ESRMNT: 69,
 ECOMM: 70,
 EPROTO: 71,
 EMULTIHOP: 72,
 EDOTDOT: 73,
 EBADMSG: 74,
 ENOTUNIQ: 76,
 EBADFD: 77,
 EREMCHG: 78,
 ELIBACC: 79,
 ELIBBAD: 80,
 ELIBSCN: 81,
 ELIBMAX: 82,
 ELIBEXEC: 83,
 ENOSYS: 38,
 ENOTEMPTY: 39,
 ENAMETOOLONG: 36,
 ELOOP: 40,
 EOPNOTSUPP: 95,
 EPFNOSUPPORT: 96,
 ECONNRESET: 104,
 ENOBUFS: 105,
 EAFNOSUPPORT: 97,
 EPROTOTYPE: 91,
 ENOTSOCK: 88,
 ENOPROTOOPT: 92,
 ESHUTDOWN: 108,
 ECONNREFUSED: 111,
 EADDRINUSE: 98,
 ECONNABORTED: 103,
 ENETUNREACH: 101,
 ENETDOWN: 100,
 ETIMEDOUT: 110,
 EHOSTDOWN: 112,
 EHOSTUNREACH: 113,
 EINPROGRESS: 115,
 EALREADY: 114,
 EDESTADDRREQ: 89,
 EMSGSIZE: 90,
 EPROTONOSUPPORT: 93,
 ESOCKTNOSUPPORT: 94,
 EADDRNOTAVAIL: 99,
 ENETRESET: 102,
 EISCONN: 106,
 ENOTCONN: 107,
 ETOOMANYREFS: 109,
 EUSERS: 87,
 EDQUOT: 122,
 ESTALE: 116,
 ENOTSUP: 95,
 ENOMEDIUM: 123,
 EILSEQ: 84,
 EOVERFLOW: 75,
 ECANCELED: 125,
 ENOTRECOVERABLE: 131,
 EOWNERDEAD: 130,
 ESTRPIPE: 86
};
function _sysconf(name) {
 switch (name) {
 case 30:
  return PAGE_SIZE;
 case 85:
  return totalMemory / PAGE_SIZE;
 case 132:
 case 133:
 case 12:
 case 137:
 case 138:
 case 15:
 case 235:
 case 16:
 case 17:
 case 18:
 case 19:
 case 20:
 case 149:
 case 13:
 case 10:
 case 236:
 case 153:
 case 9:
 case 21:
 case 22:
 case 159:
 case 154:
 case 14:
 case 77:
 case 78:
 case 139:
 case 80:
 case 81:
 case 82:
 case 68:
 case 67:
 case 164:
 case 11:
 case 29:
 case 47:
 case 48:
 case 95:
 case 52:
 case 51:
 case 46:
  return 200809;
 case 79:
  return 0;
 case 27:
 case 246:
 case 127:
 case 128:
 case 23:
 case 24:
 case 160:
 case 161:
 case 181:
 case 182:
 case 242:
 case 183:
 case 184:
 case 243:
 case 244:
 case 245:
 case 165:
 case 178:
 case 179:
 case 49:
 case 50:
 case 168:
 case 169:
 case 175:
 case 170:
 case 171:
 case 172:
 case 97:
 case 76:
 case 32:
 case 173:
 case 35:
  return -1;
 case 176:
 case 177:
 case 7:
 case 155:
 case 8:
 case 157:
 case 125:
 case 126:
 case 92:
 case 93:
 case 129:
 case 130:
 case 131:
 case 94:
 case 91:
  return 1;
 case 74:
 case 60:
 case 69:
 case 70:
 case 4:
  return 1024;
 case 31:
 case 42:
 case 72:
  return 32;
 case 87:
 case 26:
 case 33:
  return 2147483647;
 case 34:
 case 1:
  return 47839;
 case 38:
 case 36:
  return 99;
 case 43:
 case 37:
  return 2048;
 case 0:
  return 2097152;
 case 3:
  return 65536;
 case 28:
  return 32768;
 case 44:
  return 32767;
 case 75:
  return 16384;
 case 39:
  return 1e3;
 case 89:
  return 700;
 case 71:
  return 256;
 case 40:
  return 255;
 case 2:
  return 100;
 case 180:
  return 64;
 case 25:
  return 20;
 case 5:
  return 16;
 case 6:
  return 6;
 case 73:
  return 4;
 case 84:
  {
   if (typeof navigator === "object") return navigator["hardwareConcurrency"] || 1;
   return 1;
  }
 }
 ___setErrNo(ERRNO_CODES.EINVAL);
 return -1;
}
var _fabs = Math_abs;
var PTHREAD_SPECIFIC_NEXT_KEY = 1;
function _pthread_key_create(key, destructor) {
 if (key == 0) {
  return ERRNO_CODES.EINVAL;
 }
 HEAP32[key >> 2] = PTHREAD_SPECIFIC_NEXT_KEY;
 PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
 PTHREAD_SPECIFIC_NEXT_KEY++;
 return 0;
}
var _sqrt = Math_sqrt;
function ___lock() {}
var _emscripten_asm_const_int = true;
var ERRNO_MESSAGES = {
 0: "Success",
 1: "Not super-user",
 2: "No such file or directory",
 3: "No such process",
 4: "Interrupted system call",
 5: "I/O error",
 6: "No such device or address",
 7: "Arg list too long",
 8: "Exec format error",
 9: "Bad file number",
 10: "No children",
 11: "No more processes",
 12: "Not enough core",
 13: "Permission denied",
 14: "Bad address",
 15: "Block device required",
 16: "Mount device busy",
 17: "File exists",
 18: "Cross-device link",
 19: "No such device",
 20: "Not a directory",
 21: "Is a directory",
 22: "Invalid argument",
 23: "Too many open files in system",
 24: "Too many open files",
 25: "Not a typewriter",
 26: "Text file busy",
 27: "File too large",
 28: "No space left on device",
 29: "Illegal seek",
 30: "Read only file system",
 31: "Too many links",
 32: "Broken pipe",
 33: "Math arg out of domain of func",
 34: "Math result not representable",
 35: "File locking deadlock error",
 36: "File or path name too long",
 37: "No record locks available",
 38: "Function not implemented",
 39: "Directory not empty",
 40: "Too many symbolic links",
 42: "No message of desired type",
 43: "Identifier removed",
 44: "Channel number out of range",
 45: "Level 2 not synchronized",
 46: "Level 3 halted",
 47: "Level 3 reset",
 48: "Link number out of range",
 49: "Protocol driver not attached",
 50: "No CSI structure available",
 51: "Level 2 halted",
 52: "Invalid exchange",
 53: "Invalid request descriptor",
 54: "Exchange full",
 55: "No anode",
 56: "Invalid request code",
 57: "Invalid slot",
 59: "Bad font file fmt",
 60: "Device not a stream",
 61: "No data (for no delay io)",
 62: "Timer expired",
 63: "Out of streams resources",
 64: "Machine is not on the network",
 65: "Package not installed",
 66: "The object is remote",
 67: "The link has been severed",
 68: "Advertise error",
 69: "Srmount error",
 70: "Communication error on send",
 71: "Protocol error",
 72: "Multihop attempted",
 73: "Cross mount point (not really error)",
 74: "Trying to read unreadable message",
 75: "Value too large for defined data type",
 76: "Given log. name not unique",
 77: "f.d. invalid for this operation",
 78: "Remote address changed",
 79: "Can   access a needed shared lib",
 80: "Accessing a corrupted shared lib",
 81: ".lib section in a.out corrupted",
 82: "Attempting to link in too many libs",
 83: "Attempting to exec a shared library",
 84: "Illegal byte sequence",
 86: "Streams pipe error",
 87: "Too many users",
 88: "Socket operation on non-socket",
 89: "Destination address required",
 90: "Message too long",
 91: "Protocol wrong type for socket",
 92: "Protocol not available",
 93: "Unknown protocol",
 94: "Socket type not supported",
 95: "Not supported",
 96: "Protocol family not supported",
 97: "Address family not supported by protocol family",
 98: "Address already in use",
 99: "Address not available",
 100: "Network interface is not configured",
 101: "Network is unreachable",
 102: "Connection reset by network",
 103: "Connection aborted",
 104: "Connection reset by peer",
 105: "No buffer space available",
 106: "Socket is already connected",
 107: "Socket is not connected",
 108: "Can't send after socket shutdown",
 109: "Too many references",
 110: "Connection timed out",
 111: "Connection refused",
 112: "Host is down",
 113: "Host is unreachable",
 114: "Socket already connected",
 115: "Connection already in progress",
 116: "Stale file handle",
 122: "Quota exceeded",
 123: "No medium (in tape drive)",
 125: "Operation canceled",
 130: "Previous owner died",
 131: "State not recoverable"
};
var TTY = {
 ttys: [],
 init: (function() {}),
 shutdown: (function() {}),
 register: (function(dev, ops) {
  TTY.ttys[dev] = {
   input: [],
   output: [],
   ops: ops
  };
  FS.registerDevice(dev, TTY.stream_ops);
 }),
 stream_ops: {
  open: (function(stream) {
   var tty = TTY.ttys[stream.node.rdev];
   if (!tty) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   stream.tty = tty;
   stream.seekable = false;
  }),
  close: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  flush: (function(stream) {
   stream.tty.ops.flush(stream.tty);
  }),
  read: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.get_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   var bytesRead = 0;
   for (var i = 0; i < length; i++) {
    var result;
    try {
     result = stream.tty.ops.get_char(stream.tty);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    if (result === undefined && bytesRead === 0) {
     throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
    }
    if (result === null || result === undefined) break;
    bytesRead++;
    buffer[offset + i] = result;
   }
   if (bytesRead) {
    stream.node.timestamp = Date.now();
   }
   return bytesRead;
  }),
  write: (function(stream, buffer, offset, length, pos) {
   if (!stream.tty || !stream.tty.ops.put_char) {
    throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
   }
   for (var i = 0; i < length; i++) {
    try {
     stream.tty.ops.put_char(stream.tty, buffer[offset + i]);
    } catch (e) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
   }
   if (length) {
    stream.node.timestamp = Date.now();
   }
   return i;
  })
 },
 default_tty_ops: {
  get_char: (function(tty) {
   if (!tty.input.length) {
    var result = null;
    if (ENVIRONMENT_IS_NODE) {
     var BUFSIZE = 256;
     var buf = new Buffer(BUFSIZE);
     var bytesRead = 0;
     var fd = process.stdin.fd;
     var usingDevice = false;
     try {
      fd = fs.openSync("/dev/stdin", "r");
      usingDevice = true;
     } catch (e) {}
     bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
     if (usingDevice) {
      fs.closeSync(fd);
     }
     if (bytesRead > 0) {
      result = buf.slice(0, bytesRead).toString("utf-8");
     } else {
      result = null;
     }
    } else if (typeof window != "undefined" && typeof window.prompt == "function") {
     result = window.prompt("Input: ");
     if (result !== null) {
      result += "\n";
     }
    } else if (typeof readline == "function") {
     result = readline();
     if (result !== null) {
      result += "\n";
     }
    }
    if (!result) {
     return null;
    }
    tty.input = intArrayFromString(result, true);
   }
   return tty.input.shift();
  }),
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["print"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 },
 default_tty1_ops: {
  put_char: (function(tty, val) {
   if (val === null || val === 10) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   } else {
    if (val != 0) tty.output.push(val);
   }
  }),
  flush: (function(tty) {
   if (tty.output && tty.output.length > 0) {
    Module["printErr"](UTF8ArrayToString(tty.output, 0));
    tty.output = [];
   }
  })
 }
};
var MEMFS = {
 ops_table: null,
 mount: (function(mount) {
  return MEMFS.createNode(null, "/", 16384 | 511, 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (!MEMFS.ops_table) {
   MEMFS.ops_table = {
    dir: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      lookup: MEMFS.node_ops.lookup,
      mknod: MEMFS.node_ops.mknod,
      rename: MEMFS.node_ops.rename,
      unlink: MEMFS.node_ops.unlink,
      rmdir: MEMFS.node_ops.rmdir,
      readdir: MEMFS.node_ops.readdir,
      symlink: MEMFS.node_ops.symlink
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek
     }
    },
    file: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: {
      llseek: MEMFS.stream_ops.llseek,
      read: MEMFS.stream_ops.read,
      write: MEMFS.stream_ops.write,
      allocate: MEMFS.stream_ops.allocate,
      mmap: MEMFS.stream_ops.mmap,
      msync: MEMFS.stream_ops.msync
     }
    },
    link: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr,
      readlink: MEMFS.node_ops.readlink
     },
     stream: {}
    },
    chrdev: {
     node: {
      getattr: MEMFS.node_ops.getattr,
      setattr: MEMFS.node_ops.setattr
     },
     stream: FS.chrdev_stream_ops
    }
   };
  }
  var node = FS.createNode(parent, name, mode, dev);
  if (FS.isDir(node.mode)) {
   node.node_ops = MEMFS.ops_table.dir.node;
   node.stream_ops = MEMFS.ops_table.dir.stream;
   node.contents = {};
  } else if (FS.isFile(node.mode)) {
   node.node_ops = MEMFS.ops_table.file.node;
   node.stream_ops = MEMFS.ops_table.file.stream;
   node.usedBytes = 0;
   node.contents = null;
  } else if (FS.isLink(node.mode)) {
   node.node_ops = MEMFS.ops_table.link.node;
   node.stream_ops = MEMFS.ops_table.link.stream;
  } else if (FS.isChrdev(node.mode)) {
   node.node_ops = MEMFS.ops_table.chrdev.node;
   node.stream_ops = MEMFS.ops_table.chrdev.stream;
  }
  node.timestamp = Date.now();
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 getFileDataAsRegularArray: (function(node) {
  if (node.contents && node.contents.subarray) {
   var arr = [];
   for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
   return arr;
  }
  return node.contents;
 }),
 getFileDataAsTypedArray: (function(node) {
  if (!node.contents) return new Uint8Array;
  if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
  return new Uint8Array(node.contents);
 }),
 expandFileStorage: (function(node, newCapacity) {
  if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
   node.contents = MEMFS.getFileDataAsRegularArray(node);
   node.usedBytes = node.contents.length;
  }
  if (!node.contents || node.contents.subarray) {
   var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
   if (prevCapacity >= newCapacity) return;
   var CAPACITY_DOUBLING_MAX = 1024 * 1024;
   newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) | 0);
   if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
   var oldContents = node.contents;
   node.contents = new Uint8Array(newCapacity);
   if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
   return;
  }
  if (!node.contents && newCapacity > 0) node.contents = [];
  while (node.contents.length < newCapacity) node.contents.push(0);
 }),
 resizeFileStorage: (function(node, newSize) {
  if (node.usedBytes == newSize) return;
  if (newSize == 0) {
   node.contents = null;
   node.usedBytes = 0;
   return;
  }
  if (!node.contents || node.contents.subarray) {
   var oldContents = node.contents;
   node.contents = new Uint8Array(new ArrayBuffer(newSize));
   if (oldContents) {
    node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
   }
   node.usedBytes = newSize;
   return;
  }
  if (!node.contents) node.contents = [];
  if (node.contents.length > newSize) node.contents.length = newSize; else while (node.contents.length < newSize) node.contents.push(0);
  node.usedBytes = newSize;
 }),
 node_ops: {
  getattr: (function(node) {
   var attr = {};
   attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
   attr.ino = node.id;
   attr.mode = node.mode;
   attr.nlink = 1;
   attr.uid = 0;
   attr.gid = 0;
   attr.rdev = node.rdev;
   if (FS.isDir(node.mode)) {
    attr.size = 4096;
   } else if (FS.isFile(node.mode)) {
    attr.size = node.usedBytes;
   } else if (FS.isLink(node.mode)) {
    attr.size = node.link.length;
   } else {
    attr.size = 0;
   }
   attr.atime = new Date(node.timestamp);
   attr.mtime = new Date(node.timestamp);
   attr.ctime = new Date(node.timestamp);
   attr.blksize = 4096;
   attr.blocks = Math.ceil(attr.size / attr.blksize);
   return attr;
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
   if (attr.size !== undefined) {
    MEMFS.resizeFileStorage(node, attr.size);
   }
  }),
  lookup: (function(parent, name) {
   throw FS.genericErrors[ERRNO_CODES.ENOENT];
  }),
  mknod: (function(parent, name, mode, dev) {
   return MEMFS.createNode(parent, name, mode, dev);
  }),
  rename: (function(old_node, new_dir, new_name) {
   if (FS.isDir(old_node.mode)) {
    var new_node;
    try {
     new_node = FS.lookupNode(new_dir, new_name);
    } catch (e) {}
    if (new_node) {
     for (var i in new_node.contents) {
      throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
     }
    }
   }
   delete old_node.parent.contents[old_node.name];
   old_node.name = new_name;
   new_dir.contents[new_name] = old_node;
   old_node.parent = new_dir;
  }),
  unlink: (function(parent, name) {
   delete parent.contents[name];
  }),
  rmdir: (function(parent, name) {
   var node = FS.lookupNode(parent, name);
   for (var i in node.contents) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
   }
   delete parent.contents[name];
  }),
  readdir: (function(node) {
   var entries = [ ".", ".." ];
   for (var key in node.contents) {
    if (!node.contents.hasOwnProperty(key)) {
     continue;
    }
    entries.push(key);
   }
   return entries;
  }),
  symlink: (function(parent, newname, oldpath) {
   var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);
   node.link = oldpath;
   return node;
  }),
  readlink: (function(node) {
   if (!FS.isLink(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return node.link;
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   var contents = stream.node.contents;
   if (position >= stream.node.usedBytes) return 0;
   var size = Math.min(stream.node.usedBytes - position, length);
   assert(size >= 0);
   if (size > 8 && contents.subarray) {
    buffer.set(contents.subarray(position, position + size), offset);
   } else {
    for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
   }
   return size;
  }),
  write: (function(stream, buffer, offset, length, position, canOwn) {
   if (!length) return 0;
   var node = stream.node;
   node.timestamp = Date.now();
   if (buffer.subarray && (!node.contents || node.contents.subarray)) {
    if (canOwn) {
     node.contents = buffer.subarray(offset, offset + length);
     node.usedBytes = length;
     return length;
    } else if (node.usedBytes === 0 && position === 0) {
     node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
     node.usedBytes = length;
     return length;
    } else if (position + length <= node.usedBytes) {
     node.contents.set(buffer.subarray(offset, offset + length), position);
     return length;
    }
   }
   MEMFS.expandFileStorage(node, position + length);
   if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); else {
    for (var i = 0; i < length; i++) {
     node.contents[position + i] = buffer[offset + i];
    }
   }
   node.usedBytes = Math.max(node.usedBytes, position + length);
   return length;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.usedBytes;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  }),
  allocate: (function(stream, offset, length) {
   MEMFS.expandFileStorage(stream.node, offset + length);
   stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
  }),
  mmap: (function(stream, buffer, offset, length, position, prot, flags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   var ptr;
   var allocated;
   var contents = stream.node.contents;
   if (!(flags & 2) && (contents.buffer === buffer || contents.buffer === buffer.buffer)) {
    allocated = false;
    ptr = contents.byteOffset;
   } else {
    if (position > 0 || position + length < stream.node.usedBytes) {
     if (contents.subarray) {
      contents = contents.subarray(position, position + length);
     } else {
      contents = Array.prototype.slice.call(contents, position, position + length);
     }
    }
    allocated = true;
    ptr = _malloc(length);
    if (!ptr) {
     throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
    }
    buffer.set(contents, ptr);
   }
   return {
    ptr: ptr,
    allocated: allocated
   };
  }),
  msync: (function(stream, buffer, offset, length, mmapFlags) {
   if (!FS.isFile(stream.node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
   }
   if (mmapFlags & 2) {
    return 0;
   }
   var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
   return 0;
  })
 }
};
var IDBFS = {
 dbs: {},
 indexedDB: (function() {
  if (typeof indexedDB !== "undefined") return indexedDB;
  var ret = null;
  if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
  assert(ret, "IDBFS used, but indexedDB not supported");
  return ret;
 }),
 DB_VERSION: 21,
 DB_STORE_NAME: "FILE_DATA",
 mount: (function(mount) {
  return MEMFS.mount.apply(null, arguments);
 }),
 syncfs: (function(mount, populate, callback) {
  IDBFS.getLocalSet(mount, (function(err, local) {
   if (err) return callback(err);
   IDBFS.getRemoteSet(mount, (function(err, remote) {
    if (err) return callback(err);
    var src = populate ? remote : local;
    var dst = populate ? local : remote;
    IDBFS.reconcile(src, dst, callback);
   }));
  }));
 }),
 getDB: (function(name, callback) {
  var db = IDBFS.dbs[name];
  if (db) {
   return callback(null, db);
  }
  var req;
  try {
   req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
  } catch (e) {
   return callback(e);
  }
  req.onupgradeneeded = (function(e) {
   var db = e.target.result;
   var transaction = e.target.transaction;
   var fileStore;
   if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
    fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
   } else {
    fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
   }
   if (!fileStore.indexNames.contains("timestamp")) {
    fileStore.createIndex("timestamp", "timestamp", {
     unique: false
    });
   }
  });
  req.onsuccess = (function() {
   db = req.result;
   IDBFS.dbs[name] = db;
   callback(null, db);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 getLocalSet: (function(mount, callback) {
  var entries = {};
  function isRealDir(p) {
   return p !== "." && p !== "..";
  }
  function toAbsolute(root) {
   return (function(p) {
    return PATH.join2(root, p);
   });
  }
  var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  while (check.length) {
   var path = check.pop();
   var stat;
   try {
    stat = FS.stat(path);
   } catch (e) {
    return callback(e);
   }
   if (FS.isDir(stat.mode)) {
    check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
   }
   entries[path] = {
    timestamp: stat.mtime
   };
  }
  return callback(null, {
   type: "local",
   entries: entries
  });
 }),
 getRemoteSet: (function(mount, callback) {
  var entries = {};
  IDBFS.getDB(mount.mountpoint, (function(err, db) {
   if (err) return callback(err);
   var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readonly");
   transaction.onerror = (function(e) {
    callback(this.error);
    e.preventDefault();
   });
   var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
   var index = store.index("timestamp");
   index.openKeyCursor().onsuccess = (function(event) {
    var cursor = event.target.result;
    if (!cursor) {
     return callback(null, {
      type: "remote",
      db: db,
      entries: entries
     });
    }
    entries[cursor.primaryKey] = {
     timestamp: cursor.key
    };
    cursor.continue();
   });
  }));
 }),
 loadLocalEntry: (function(path, callback) {
  var stat, node;
  try {
   var lookup = FS.lookupPath(path);
   node = lookup.node;
   stat = FS.stat(path);
  } catch (e) {
   return callback(e);
  }
  if (FS.isDir(stat.mode)) {
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode
   });
  } else if (FS.isFile(stat.mode)) {
   node.contents = MEMFS.getFileDataAsTypedArray(node);
   return callback(null, {
    timestamp: stat.mtime,
    mode: stat.mode,
    contents: node.contents
   });
  } else {
   return callback(new Error("node type not supported"));
  }
 }),
 storeLocalEntry: (function(path, entry, callback) {
  try {
   if (FS.isDir(entry.mode)) {
    FS.mkdir(path, entry.mode);
   } else if (FS.isFile(entry.mode)) {
    FS.writeFile(path, entry.contents, {
     encoding: "binary",
     canOwn: true
    });
   } else {
    return callback(new Error("node type not supported"));
   }
   FS.chmod(path, entry.mode);
   FS.utime(path, entry.timestamp, entry.timestamp);
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 removeLocalEntry: (function(path, callback) {
  try {
   var lookup = FS.lookupPath(path);
   var stat = FS.stat(path);
   if (FS.isDir(stat.mode)) {
    FS.rmdir(path);
   } else if (FS.isFile(stat.mode)) {
    FS.unlink(path);
   }
  } catch (e) {
   return callback(e);
  }
  callback(null);
 }),
 loadRemoteEntry: (function(store, path, callback) {
  var req = store.get(path);
  req.onsuccess = (function(event) {
   callback(null, event.target.result);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 storeRemoteEntry: (function(store, path, entry, callback) {
  var req = store.put(entry, path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 removeRemoteEntry: (function(store, path, callback) {
  var req = store.delete(path);
  req.onsuccess = (function() {
   callback(null);
  });
  req.onerror = (function(e) {
   callback(this.error);
   e.preventDefault();
  });
 }),
 reconcile: (function(src, dst, callback) {
  var total = 0;
  var create = [];
  Object.keys(src.entries).forEach((function(key) {
   var e = src.entries[key];
   var e2 = dst.entries[key];
   if (!e2 || e.timestamp > e2.timestamp) {
    create.push(key);
    total++;
   }
  }));
  var remove = [];
  Object.keys(dst.entries).forEach((function(key) {
   var e = dst.entries[key];
   var e2 = src.entries[key];
   if (!e2) {
    remove.push(key);
    total++;
   }
  }));
  if (!total) {
   return callback(null);
  }
  var errored = false;
  var completed = 0;
  var db = src.type === "remote" ? src.db : dst.db;
  var transaction = db.transaction([ IDBFS.DB_STORE_NAME ], "readwrite");
  var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= total) {
    return callback(null);
   }
  }
  transaction.onerror = (function(e) {
   done(this.error);
   e.preventDefault();
  });
  create.sort().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.loadRemoteEntry(store, path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeLocalEntry(path, entry, done);
    }));
   } else {
    IDBFS.loadLocalEntry(path, (function(err, entry) {
     if (err) return done(err);
     IDBFS.storeRemoteEntry(store, path, entry, done);
    }));
   }
  }));
  remove.sort().reverse().forEach((function(path) {
   if (dst.type === "local") {
    IDBFS.removeLocalEntry(path, done);
   } else {
    IDBFS.removeRemoteEntry(store, path, done);
   }
  }));
 })
};
var NODEFS = {
 isWindows: false,
 staticInit: (function() {
  NODEFS.isWindows = !!process.platform.match(/^win/);
 }),
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_NODE);
  return NODEFS.createNode(null, "/", NODEFS.getMode(mount.opts.root), 0);
 }),
 createNode: (function(parent, name, mode, dev) {
  if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = FS.createNode(parent, name, mode);
  node.node_ops = NODEFS.node_ops;
  node.stream_ops = NODEFS.stream_ops;
  return node;
 }),
 getMode: (function(path) {
  var stat;
  try {
   stat = fs.lstatSync(path);
   if (NODEFS.isWindows) {
    stat.mode = stat.mode | (stat.mode & 146) >> 1;
   }
  } catch (e) {
   if (!e.code) throw e;
   throw new FS.ErrnoError(ERRNO_CODES[e.code]);
  }
  return stat.mode;
 }),
 realPath: (function(node) {
  var parts = [];
  while (node.parent !== node) {
   parts.push(node.name);
   node = node.parent;
  }
  parts.push(node.mount.opts.root);
  parts.reverse();
  return PATH.join.apply(null, parts);
 }),
 flagsToPermissionStringMap: {
  0: "r",
  1: "r+",
  2: "r+",
  64: "r",
  65: "r+",
  66: "r+",
  129: "rx+",
  193: "rx+",
  514: "w+",
  577: "w",
  578: "w+",
  705: "wx",
  706: "wx+",
  1024: "a",
  1025: "a",
  1026: "a+",
  1089: "a",
  1090: "a+",
  1153: "ax",
  1154: "ax+",
  1217: "ax",
  1218: "ax+",
  4096: "rs",
  4098: "rs+"
 },
 flagsToPermissionString: (function(flags) {
  flags &= ~32768;
  if (flags in NODEFS.flagsToPermissionStringMap) {
   return NODEFS.flagsToPermissionStringMap[flags];
  } else {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
 }),
 node_ops: {
  getattr: (function(node) {
   var path = NODEFS.realPath(node);
   var stat;
   try {
    stat = fs.lstatSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (NODEFS.isWindows && !stat.blksize) {
    stat.blksize = 4096;
   }
   if (NODEFS.isWindows && !stat.blocks) {
    stat.blocks = (stat.size + stat.blksize - 1) / stat.blksize | 0;
   }
   return {
    dev: stat.dev,
    ino: stat.ino,
    mode: stat.mode,
    nlink: stat.nlink,
    uid: stat.uid,
    gid: stat.gid,
    rdev: stat.rdev,
    size: stat.size,
    atime: stat.atime,
    mtime: stat.mtime,
    ctime: stat.ctime,
    blksize: stat.blksize,
    blocks: stat.blocks
   };
  }),
  setattr: (function(node, attr) {
   var path = NODEFS.realPath(node);
   try {
    if (attr.mode !== undefined) {
     fs.chmodSync(path, attr.mode);
     node.mode = attr.mode;
    }
    if (attr.timestamp !== undefined) {
     var date = new Date(attr.timestamp);
     fs.utimesSync(path, date, date);
    }
    if (attr.size !== undefined) {
     fs.truncateSync(path, attr.size);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  lookup: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   var mode = NODEFS.getMode(path);
   return NODEFS.createNode(parent, name, mode);
  }),
  mknod: (function(parent, name, mode, dev) {
   var node = NODEFS.createNode(parent, name, mode, dev);
   var path = NODEFS.realPath(node);
   try {
    if (FS.isDir(node.mode)) {
     fs.mkdirSync(path, node.mode);
    } else {
     fs.writeFileSync(path, "", {
      mode: node.mode
     });
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return node;
  }),
  rename: (function(oldNode, newDir, newName) {
   var oldPath = NODEFS.realPath(oldNode);
   var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
   try {
    fs.renameSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  unlink: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.unlinkSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  rmdir: (function(parent, name) {
   var path = PATH.join2(NODEFS.realPath(parent), name);
   try {
    fs.rmdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readdir: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    return fs.readdirSync(path);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  symlink: (function(parent, newName, oldPath) {
   var newPath = PATH.join2(NODEFS.realPath(parent), newName);
   try {
    fs.symlinkSync(oldPath, newPath);
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  readlink: (function(node) {
   var path = NODEFS.realPath(node);
   try {
    path = fs.readlinkSync(path);
    path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
    return path;
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  })
 },
 stream_ops: {
  open: (function(stream) {
   var path = NODEFS.realPath(stream.node);
   try {
    if (FS.isFile(stream.node.mode)) {
     stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  close: (function(stream) {
   try {
    if (FS.isFile(stream.node.mode) && stream.nfd) {
     fs.closeSync(stream.nfd);
    }
   } catch (e) {
    if (!e.code) throw e;
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
  }),
  read: (function(stream, buffer, offset, length, position) {
   if (length === 0) return 0;
   var nbuffer = new Buffer(length);
   var res;
   try {
    res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   if (res > 0) {
    for (var i = 0; i < res; i++) {
     buffer[offset + i] = nbuffer[i];
    }
   }
   return res;
  }),
  write: (function(stream, buffer, offset, length, position) {
   var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
   var res;
   try {
    res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
   } catch (e) {
    throw new FS.ErrnoError(ERRNO_CODES[e.code]);
   }
   return res;
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     try {
      var stat = fs.fstatSync(stream.nfd);
      position += stat.size;
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES[e.code]);
     }
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var WORKERFS = {
 DIR_MODE: 16895,
 FILE_MODE: 33279,
 reader: null,
 mount: (function(mount) {
  assert(ENVIRONMENT_IS_WORKER);
  if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync;
  var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
  var createdParents = {};
  function ensureParent(path) {
   var parts = path.split("/");
   var parent = root;
   for (var i = 0; i < parts.length - 1; i++) {
    var curr = parts.slice(0, i + 1).join("/");
    if (!createdParents[curr]) {
     createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
    }
    parent = createdParents[curr];
   }
   return parent;
  }
  function base(path) {
   var parts = path.split("/");
   return parts[parts.length - 1];
  }
  Array.prototype.forEach.call(mount.opts["files"] || [], (function(file) {
   WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
  }));
  (mount.opts["blobs"] || []).forEach((function(obj) {
   WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
  }));
  (mount.opts["packages"] || []).forEach((function(pack) {
   pack["metadata"].files.forEach((function(file) {
    var name = file.filename.substr(1);
    WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
   }));
  }));
  return root;
 }),
 createNode: (function(parent, name, mode, dev, contents, mtime) {
  var node = FS.createNode(parent, name, mode);
  node.mode = mode;
  node.node_ops = WORKERFS.node_ops;
  node.stream_ops = WORKERFS.stream_ops;
  node.timestamp = (mtime || new Date).getTime();
  assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
  if (mode === WORKERFS.FILE_MODE) {
   node.size = contents.size;
   node.contents = contents;
  } else {
   node.size = 4096;
   node.contents = {};
  }
  if (parent) {
   parent.contents[name] = node;
  }
  return node;
 }),
 node_ops: {
  getattr: (function(node) {
   return {
    dev: 1,
    ino: undefined,
    mode: node.mode,
    nlink: 1,
    uid: 0,
    gid: 0,
    rdev: undefined,
    size: node.size,
    atime: new Date(node.timestamp),
    mtime: new Date(node.timestamp),
    ctime: new Date(node.timestamp),
    blksize: 4096,
    blocks: Math.ceil(node.size / 4096)
   };
  }),
  setattr: (function(node, attr) {
   if (attr.mode !== undefined) {
    node.mode = attr.mode;
   }
   if (attr.timestamp !== undefined) {
    node.timestamp = attr.timestamp;
   }
  }),
  lookup: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }),
  mknod: (function(parent, name, mode, dev) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rename: (function(oldNode, newDir, newName) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  unlink: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  rmdir: (function(parent, name) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readdir: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  symlink: (function(parent, newName, oldPath) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }),
  readlink: (function(node) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  })
 },
 stream_ops: {
  read: (function(stream, buffer, offset, length, position) {
   if (position >= stream.node.size) return 0;
   var chunk = stream.node.contents.slice(position, position + length);
   var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
   buffer.set(new Uint8Array(ab), offset);
   return chunk.size;
  }),
  write: (function(stream, buffer, offset, length, position) {
   throw new FS.ErrnoError(ERRNO_CODES.EIO);
  }),
  llseek: (function(stream, offset, whence) {
   var position = offset;
   if (whence === 1) {
    position += stream.position;
   } else if (whence === 2) {
    if (FS.isFile(stream.node.mode)) {
     position += stream.node.size;
    }
   }
   if (position < 0) {
    throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
   }
   return position;
  })
 }
};
var _stdin = allocate(1, "i32*", ALLOC_STATIC);
var _stdout = allocate(1, "i32*", ALLOC_STATIC);
var _stderr = allocate(1, "i32*", ALLOC_STATIC);
var FS = {
 root: null,
 mounts: [],
 devices: [ null ],
 streams: [],
 nextInode: 1,
 nameTable: null,
 currentPath: "/",
 initialized: false,
 ignorePermissions: true,
 trackingDelegate: {},
 tracking: {
  openFlags: {
   READ: 1,
   WRITE: 2
  }
 },
 ErrnoError: null,
 genericErrors: {},
 filesystems: null,
 handleFSError: (function(e) {
  if (!(e instanceof FS.ErrnoError)) throw e + " : " + stackTrace();
  return ___setErrNo(e.errno);
 }),
 lookupPath: (function(path, opts) {
  path = PATH.resolve(FS.cwd(), path);
  opts = opts || {};
  if (!path) return {
   path: "",
   node: null
  };
  var defaults = {
   follow_mount: true,
   recurse_count: 0
  };
  for (var key in defaults) {
   if (opts[key] === undefined) {
    opts[key] = defaults[key];
   }
  }
  if (opts.recurse_count > 8) {
   throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
  }
  var parts = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), false);
  var current = FS.root;
  var current_path = "/";
  for (var i = 0; i < parts.length; i++) {
   var islast = i === parts.length - 1;
   if (islast && opts.parent) {
    break;
   }
   current = FS.lookupNode(current, parts[i]);
   current_path = PATH.join2(current_path, parts[i]);
   if (FS.isMountpoint(current)) {
    if (!islast || islast && opts.follow_mount) {
     current = current.mounted.root;
    }
   }
   if (!islast || opts.follow) {
    var count = 0;
    while (FS.isLink(current.mode)) {
     var link = FS.readlink(current_path);
     current_path = PATH.resolve(PATH.dirname(current_path), link);
     var lookup = FS.lookupPath(current_path, {
      recurse_count: opts.recurse_count
     });
     current = lookup.node;
     if (count++ > 40) {
      throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
     }
    }
   }
  }
  return {
   path: current_path,
   node: current
  };
 }),
 getPath: (function(node) {
  var path;
  while (true) {
   if (FS.isRoot(node)) {
    var mount = node.mount.mountpoint;
    if (!path) return mount;
    return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
   }
   path = path ? node.name + "/" + path : node.name;
   node = node.parent;
  }
 }),
 hashName: (function(parentid, name) {
  var hash = 0;
  for (var i = 0; i < name.length; i++) {
   hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
  }
  return (parentid + hash >>> 0) % FS.nameTable.length;
 }),
 hashAddNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  node.name_next = FS.nameTable[hash];
  FS.nameTable[hash] = node;
 }),
 hashRemoveNode: (function(node) {
  var hash = FS.hashName(node.parent.id, node.name);
  if (FS.nameTable[hash] === node) {
   FS.nameTable[hash] = node.name_next;
  } else {
   var current = FS.nameTable[hash];
   while (current) {
    if (current.name_next === node) {
     current.name_next = node.name_next;
     break;
    }
    current = current.name_next;
   }
  }
 }),
 lookupNode: (function(parent, name) {
  var err = FS.mayLookup(parent);
  if (err) {
   throw new FS.ErrnoError(err, parent);
  }
  var hash = FS.hashName(parent.id, name);
  for (var node = FS.nameTable[hash]; node; node = node.name_next) {
   var nodeName = node.name;
   if (node.parent.id === parent.id && nodeName === name) {
    return node;
   }
  }
  return FS.lookup(parent, name);
 }),
 createNode: (function(parent, name, mode, rdev) {
  if (!FS.FSNode) {
   FS.FSNode = (function(parent, name, mode, rdev) {
    if (!parent) {
     parent = this;
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
   });
   FS.FSNode.prototype = {};
   var readMode = 292 | 73;
   var writeMode = 146;
   Object.defineProperties(FS.FSNode.prototype, {
    read: {
     get: (function() {
      return (this.mode & readMode) === readMode;
     }),
     set: (function(val) {
      val ? this.mode |= readMode : this.mode &= ~readMode;
     })
    },
    write: {
     get: (function() {
      return (this.mode & writeMode) === writeMode;
     }),
     set: (function(val) {
      val ? this.mode |= writeMode : this.mode &= ~writeMode;
     })
    },
    isFolder: {
     get: (function() {
      return FS.isDir(this.mode);
     })
    },
    isDevice: {
     get: (function() {
      return FS.isChrdev(this.mode);
     })
    }
   });
  }
  var node = new FS.FSNode(parent, name, mode, rdev);
  FS.hashAddNode(node);
  return node;
 }),
 destroyNode: (function(node) {
  FS.hashRemoveNode(node);
 }),
 isRoot: (function(node) {
  return node === node.parent;
 }),
 isMountpoint: (function(node) {
  return !!node.mounted;
 }),
 isFile: (function(mode) {
  return (mode & 61440) === 32768;
 }),
 isDir: (function(mode) {
  return (mode & 61440) === 16384;
 }),
 isLink: (function(mode) {
  return (mode & 61440) === 40960;
 }),
 isChrdev: (function(mode) {
  return (mode & 61440) === 8192;
 }),
 isBlkdev: (function(mode) {
  return (mode & 61440) === 24576;
 }),
 isFIFO: (function(mode) {
  return (mode & 61440) === 4096;
 }),
 isSocket: (function(mode) {
  return (mode & 49152) === 49152;
 }),
 flagModes: {
  "r": 0,
  "rs": 1052672,
  "r+": 2,
  "w": 577,
  "wx": 705,
  "xw": 705,
  "w+": 578,
  "wx+": 706,
  "xw+": 706,
  "a": 1089,
  "ax": 1217,
  "xa": 1217,
  "a+": 1090,
  "ax+": 1218,
  "xa+": 1218
 },
 modeStringToFlags: (function(str) {
  var flags = FS.flagModes[str];
  if (typeof flags === "undefined") {
   throw new Error("Unknown file open mode: " + str);
  }
  return flags;
 }),
 flagsToPermissionString: (function(flag) {
  var perms = [ "r", "w", "rw" ][flag & 3];
  if (flag & 512) {
   perms += "w";
  }
  return perms;
 }),
 nodePermissions: (function(node, perms) {
  if (FS.ignorePermissions) {
   return 0;
  }
  if (perms.indexOf("r") !== -1 && !(node.mode & 292)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("w") !== -1 && !(node.mode & 146)) {
   return ERRNO_CODES.EACCES;
  } else if (perms.indexOf("x") !== -1 && !(node.mode & 73)) {
   return ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 mayLookup: (function(dir) {
  var err = FS.nodePermissions(dir, "x");
  if (err) return err;
  if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
  return 0;
 }),
 mayCreate: (function(dir, name) {
  try {
   var node = FS.lookupNode(dir, name);
   return ERRNO_CODES.EEXIST;
  } catch (e) {}
  return FS.nodePermissions(dir, "wx");
 }),
 mayDelete: (function(dir, name, isdir) {
  var node;
  try {
   node = FS.lookupNode(dir, name);
  } catch (e) {
   return e.errno;
  }
  var err = FS.nodePermissions(dir, "wx");
  if (err) {
   return err;
  }
  if (isdir) {
   if (!FS.isDir(node.mode)) {
    return ERRNO_CODES.ENOTDIR;
   }
   if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
    return ERRNO_CODES.EBUSY;
   }
  } else {
   if (FS.isDir(node.mode)) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return 0;
 }),
 mayOpen: (function(node, flags) {
  if (!node) {
   return ERRNO_CODES.ENOENT;
  }
  if (FS.isLink(node.mode)) {
   return ERRNO_CODES.ELOOP;
  } else if (FS.isDir(node.mode)) {
   if ((flags & 2097155) !== 0 || flags & 512) {
    return ERRNO_CODES.EISDIR;
   }
  }
  return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
 }),
 MAX_OPEN_FDS: 4096,
 nextfd: (function(fd_start, fd_end) {
  fd_start = fd_start || 0;
  fd_end = fd_end || FS.MAX_OPEN_FDS;
  for (var fd = fd_start; fd <= fd_end; fd++) {
   if (!FS.streams[fd]) {
    return fd;
   }
  }
  throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
 }),
 getStream: (function(fd) {
  return FS.streams[fd];
 }),
 createStream: (function(stream, fd_start, fd_end) {
  if (!FS.FSStream) {
   FS.FSStream = (function() {});
   FS.FSStream.prototype = {};
   Object.defineProperties(FS.FSStream.prototype, {
    object: {
     get: (function() {
      return this.node;
     }),
     set: (function(val) {
      this.node = val;
     })
    },
    isRead: {
     get: (function() {
      return (this.flags & 2097155) !== 1;
     })
    },
    isWrite: {
     get: (function() {
      return (this.flags & 2097155) !== 0;
     })
    },
    isAppend: {
     get: (function() {
      return this.flags & 1024;
     })
    }
   });
  }
  var newStream = new FS.FSStream;
  for (var p in stream) {
   newStream[p] = stream[p];
  }
  stream = newStream;
  var fd = FS.nextfd(fd_start, fd_end);
  stream.fd = fd;
  FS.streams[fd] = stream;
  return stream;
 }),
 closeStream: (function(fd) {
  FS.streams[fd] = null;
 }),
 chrdev_stream_ops: {
  open: (function(stream) {
   var device = FS.getDevice(stream.node.rdev);
   stream.stream_ops = device.stream_ops;
   if (stream.stream_ops.open) {
    stream.stream_ops.open(stream);
   }
  }),
  llseek: (function() {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  })
 },
 major: (function(dev) {
  return dev >> 8;
 }),
 minor: (function(dev) {
  return dev & 255;
 }),
 makedev: (function(ma, mi) {
  return ma << 8 | mi;
 }),
 registerDevice: (function(dev, ops) {
  FS.devices[dev] = {
   stream_ops: ops
  };
 }),
 getDevice: (function(dev) {
  return FS.devices[dev];
 }),
 getMounts: (function(mount) {
  var mounts = [];
  var check = [ mount ];
  while (check.length) {
   var m = check.pop();
   mounts.push(m);
   check.push.apply(check, m.mounts);
  }
  return mounts;
 }),
 syncfs: (function(populate, callback) {
  if (typeof populate === "function") {
   callback = populate;
   populate = false;
  }
  var mounts = FS.getMounts(FS.root.mount);
  var completed = 0;
  function done(err) {
   if (err) {
    if (!done.errored) {
     done.errored = true;
     return callback(err);
    }
    return;
   }
   if (++completed >= mounts.length) {
    callback(null);
   }
  }
  mounts.forEach((function(mount) {
   if (!mount.type.syncfs) {
    return done(null);
   }
   mount.type.syncfs(mount, populate, done);
  }));
 }),
 mount: (function(type, opts, mountpoint) {
  var root = mountpoint === "/";
  var pseudo = !mountpoint;
  var node;
  if (root && FS.root) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  } else if (!root && !pseudo) {
   var lookup = FS.lookupPath(mountpoint, {
    follow_mount: false
   });
   mountpoint = lookup.path;
   node = lookup.node;
   if (FS.isMountpoint(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
   }
   if (!FS.isDir(node.mode)) {
    throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
   }
  }
  var mount = {
   type: type,
   opts: opts,
   mountpoint: mountpoint,
   mounts: []
  };
  var mountRoot = type.mount(mount);
  mountRoot.mount = mount;
  mount.root = mountRoot;
  if (root) {
   FS.root = mountRoot;
  } else if (node) {
   node.mounted = mount;
   if (node.mount) {
    node.mount.mounts.push(mount);
   }
  }
  return mountRoot;
 }),
 unmount: (function(mountpoint) {
  var lookup = FS.lookupPath(mountpoint, {
   follow_mount: false
  });
  if (!FS.isMountpoint(lookup.node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node = lookup.node;
  var mount = node.mounted;
  var mounts = FS.getMounts(mount);
  Object.keys(FS.nameTable).forEach((function(hash) {
   var current = FS.nameTable[hash];
   while (current) {
    var next = current.name_next;
    if (mounts.indexOf(current.mount) !== -1) {
     FS.destroyNode(current);
    }
    current = next;
   }
  }));
  node.mounted = null;
  var idx = node.mount.mounts.indexOf(mount);
  assert(idx !== -1);
  node.mount.mounts.splice(idx, 1);
 }),
 lookup: (function(parent, name) {
  return parent.node_ops.lookup(parent, name);
 }),
 mknod: (function(path, mode, dev) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  if (!name || name === "." || name === "..") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.mayCreate(parent, name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.mknod) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.mknod(parent, name, mode, dev);
 }),
 create: (function(path, mode) {
  mode = mode !== undefined ? mode : 438;
  mode &= 4095;
  mode |= 32768;
  return FS.mknod(path, mode, 0);
 }),
 mkdir: (function(path, mode) {
  mode = mode !== undefined ? mode : 511;
  mode &= 511 | 512;
  mode |= 16384;
  return FS.mknod(path, mode, 0);
 }),
 mkdev: (function(path, mode, dev) {
  if (typeof dev === "undefined") {
   dev = mode;
   mode = 438;
  }
  mode |= 8192;
  return FS.mknod(path, mode, dev);
 }),
 symlink: (function(oldpath, newpath) {
  if (!PATH.resolve(oldpath)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var lookup = FS.lookupPath(newpath, {
   parent: true
  });
  var parent = lookup.node;
  if (!parent) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  var newname = PATH.basename(newpath);
  var err = FS.mayCreate(parent, newname);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.symlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return parent.node_ops.symlink(parent, newname, oldpath);
 }),
 rename: (function(old_path, new_path) {
  var old_dirname = PATH.dirname(old_path);
  var new_dirname = PATH.dirname(new_path);
  var old_name = PATH.basename(old_path);
  var new_name = PATH.basename(new_path);
  var lookup, old_dir, new_dir;
  try {
   lookup = FS.lookupPath(old_path, {
    parent: true
   });
   old_dir = lookup.node;
   lookup = FS.lookupPath(new_path, {
    parent: true
   });
   new_dir = lookup.node;
  } catch (e) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  if (old_dir.mount !== new_dir.mount) {
   throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
  }
  var old_node = FS.lookupNode(old_dir, old_name);
  var relative = PATH.relative(old_path, new_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  relative = PATH.relative(new_path, old_dirname);
  if (relative.charAt(0) !== ".") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
  }
  var new_node;
  try {
   new_node = FS.lookupNode(new_dir, new_name);
  } catch (e) {}
  if (old_node === new_node) {
   return;
  }
  var isdir = FS.isDir(old_node.mode);
  var err = FS.mayDelete(old_dir, old_name, isdir);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  err = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!old_dir.node_ops.rename) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  if (new_dir !== old_dir) {
   err = FS.nodePermissions(old_dir, "w");
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  try {
   if (FS.trackingDelegate["willMovePath"]) {
    FS.trackingDelegate["willMovePath"](old_path, new_path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
  FS.hashRemoveNode(old_node);
  try {
   old_dir.node_ops.rename(old_node, new_dir, new_name);
  } catch (e) {
   throw e;
  } finally {
   FS.hashAddNode(old_node);
  }
  try {
   if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
  } catch (e) {
   console.log("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
  }
 }),
 rmdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, true);
  if (err) {
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.rmdir) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.rmdir(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  if (!node.node_ops.readdir) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  return node.node_ops.readdir(node);
 }),
 unlink: (function(path) {
  var lookup = FS.lookupPath(path, {
   parent: true
  });
  var parent = lookup.node;
  var name = PATH.basename(path);
  var node = FS.lookupNode(parent, name);
  var err = FS.mayDelete(parent, name, false);
  if (err) {
   if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
   throw new FS.ErrnoError(err);
  }
  if (!parent.node_ops.unlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isMountpoint(node)) {
   throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
  }
  try {
   if (FS.trackingDelegate["willDeletePath"]) {
    FS.trackingDelegate["willDeletePath"](path);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
  }
  parent.node_ops.unlink(parent, name);
  FS.destroyNode(node);
  try {
   if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
  } catch (e) {
   console.log("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
  }
 }),
 readlink: (function(path) {
  var lookup = FS.lookupPath(path);
  var link = lookup.node;
  if (!link) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!link.node_ops.readlink) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
 }),
 stat: (function(path, dontFollow) {
  var lookup = FS.lookupPath(path, {
   follow: !dontFollow
  });
  var node = lookup.node;
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (!node.node_ops.getattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  return node.node_ops.getattr(node);
 }),
 lstat: (function(path) {
  return FS.stat(path, true);
 }),
 chmod: (function(path, mode, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   mode: mode & 4095 | node.mode & ~4095,
   timestamp: Date.now()
  });
 }),
 lchmod: (function(path, mode) {
  FS.chmod(path, mode, true);
 }),
 fchmod: (function(fd, mode) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chmod(stream.node, mode);
 }),
 chown: (function(path, uid, gid, dontFollow) {
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: !dontFollow
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  node.node_ops.setattr(node, {
   timestamp: Date.now()
  });
 }),
 lchown: (function(path, uid, gid) {
  FS.chown(path, uid, gid, true);
 }),
 fchown: (function(fd, uid, gid) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  FS.chown(stream.node, uid, gid);
 }),
 truncate: (function(path, len) {
  if (len < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var node;
  if (typeof path === "string") {
   var lookup = FS.lookupPath(path, {
    follow: true
   });
   node = lookup.node;
  } else {
   node = path;
  }
  if (!node.node_ops.setattr) {
   throw new FS.ErrnoError(ERRNO_CODES.EPERM);
  }
  if (FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!FS.isFile(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var err = FS.nodePermissions(node, "w");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  node.node_ops.setattr(node, {
   size: len,
   timestamp: Date.now()
  });
 }),
 ftruncate: (function(fd, len) {
  var stream = FS.getStream(fd);
  if (!stream) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  FS.truncate(stream.node, len);
 }),
 utime: (function(path, atime, mtime) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  var node = lookup.node;
  node.node_ops.setattr(node, {
   timestamp: Math.max(atime, mtime)
  });
 }),
 open: (function(path, flags, mode, fd_start, fd_end) {
  if (path === "") {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
  mode = typeof mode === "undefined" ? 438 : mode;
  if (flags & 64) {
   mode = mode & 4095 | 32768;
  } else {
   mode = 0;
  }
  var node;
  if (typeof path === "object") {
   node = path;
  } else {
   path = PATH.normalize(path);
   try {
    var lookup = FS.lookupPath(path, {
     follow: !(flags & 131072)
    });
    node = lookup.node;
   } catch (e) {}
  }
  var created = false;
  if (flags & 64) {
   if (node) {
    if (flags & 128) {
     throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
    }
   } else {
    node = FS.mknod(path, mode, 0);
    created = true;
   }
  }
  if (!node) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
  }
  if (FS.isChrdev(node.mode)) {
   flags &= ~512;
  }
  if (flags & 65536 && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  if (!created) {
   var err = FS.mayOpen(node, flags);
   if (err) {
    throw new FS.ErrnoError(err);
   }
  }
  if (flags & 512) {
   FS.truncate(node, 0);
  }
  flags &= ~(128 | 512);
  var stream = FS.createStream({
   node: node,
   path: FS.getPath(node),
   flags: flags,
   seekable: true,
   position: 0,
   stream_ops: node.stream_ops,
   ungotten: [],
   error: false
  }, fd_start, fd_end);
  if (stream.stream_ops.open) {
   stream.stream_ops.open(stream);
  }
  if (Module["logReadFiles"] && !(flags & 1)) {
   if (!FS.readFiles) FS.readFiles = {};
   if (!(path in FS.readFiles)) {
    FS.readFiles[path] = 1;
    Module["printErr"]("read file: " + path);
   }
  }
  try {
   if (FS.trackingDelegate["onOpenFile"]) {
    var trackingFlags = 0;
    if ((flags & 2097155) !== 1) {
     trackingFlags |= FS.tracking.openFlags.READ;
    }
    if ((flags & 2097155) !== 0) {
     trackingFlags |= FS.tracking.openFlags.WRITE;
    }
    FS.trackingDelegate["onOpenFile"](path, trackingFlags);
   }
  } catch (e) {
   console.log("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
  }
  return stream;
 }),
 close: (function(stream) {
  if (stream.getdents) stream.getdents = null;
  try {
   if (stream.stream_ops.close) {
    stream.stream_ops.close(stream);
   }
  } catch (e) {
   throw e;
  } finally {
   FS.closeStream(stream.fd);
  }
 }),
 llseek: (function(stream, offset, whence) {
  if (!stream.seekable || !stream.stream_ops.llseek) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  stream.position = stream.stream_ops.llseek(stream, offset, whence);
  stream.ungotten = [];
  return stream.position;
 }),
 read: (function(stream, buffer, offset, length, position) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.read) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
  if (!seeking) stream.position += bytesRead;
  return bytesRead;
 }),
 write: (function(stream, buffer, offset, length, position, canOwn) {
  if (length < 0 || position < 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (FS.isDir(stream.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
  }
  if (!stream.stream_ops.write) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if (stream.flags & 1024) {
   FS.llseek(stream, 0, 2);
  }
  var seeking = true;
  if (typeof position === "undefined") {
   position = stream.position;
   seeking = false;
  } else if (!stream.seekable) {
   throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
  }
  var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
  if (!seeking) stream.position += bytesWritten;
  try {
   if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
  } catch (e) {
   console.log("FS.trackingDelegate['onWriteToFile']('" + path + "') threw an exception: " + e.message);
  }
  return bytesWritten;
 }),
 allocate: (function(stream, offset, length) {
  if (offset < 0 || length <= 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
  }
  if ((stream.flags & 2097155) === 0) {
   throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  }
  if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  if (!stream.stream_ops.allocate) {
   throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
  }
  stream.stream_ops.allocate(stream, offset, length);
 }),
 mmap: (function(stream, buffer, offset, length, position, prot, flags) {
  if ((stream.flags & 2097155) === 1) {
   throw new FS.ErrnoError(ERRNO_CODES.EACCES);
  }
  if (!stream.stream_ops.mmap) {
   throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
  }
  return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
 }),
 msync: (function(stream, buffer, offset, length, mmapFlags) {
  if (!stream || !stream.stream_ops.msync) {
   return 0;
  }
  return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
 }),
 munmap: (function(stream) {
  return 0;
 }),
 ioctl: (function(stream, cmd, arg) {
  if (!stream.stream_ops.ioctl) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
  }
  return stream.stream_ops.ioctl(stream, cmd, arg);
 }),
 readFile: (function(path, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "r";
  opts.encoding = opts.encoding || "binary";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var ret;
  var stream = FS.open(path, opts.flags);
  var stat = FS.stat(path);
  var length = stat.size;
  var buf = new Uint8Array(length);
  FS.read(stream, buf, 0, length, 0);
  if (opts.encoding === "utf8") {
   ret = UTF8ArrayToString(buf, 0);
  } else if (opts.encoding === "binary") {
   ret = buf;
  }
  FS.close(stream);
  return ret;
 }),
 writeFile: (function(path, data, opts) {
  opts = opts || {};
  opts.flags = opts.flags || "w";
  opts.encoding = opts.encoding || "utf8";
  if (opts.encoding !== "utf8" && opts.encoding !== "binary") {
   throw new Error('Invalid encoding type "' + opts.encoding + '"');
  }
  var stream = FS.open(path, opts.flags, opts.mode);
  if (opts.encoding === "utf8") {
   var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
   var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
   FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
  } else if (opts.encoding === "binary") {
   FS.write(stream, data, 0, data.length, 0, opts.canOwn);
  }
  FS.close(stream);
 }),
 cwd: (function() {
  return FS.currentPath;
 }),
 chdir: (function(path) {
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  if (!FS.isDir(lookup.node.mode)) {
   throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
  }
  var err = FS.nodePermissions(lookup.node, "x");
  if (err) {
   throw new FS.ErrnoError(err);
  }
  FS.currentPath = lookup.path;
 }),
 createDefaultDirectories: (function() {
  FS.mkdir("/tmp");
  FS.mkdir("/home");
  FS.mkdir("/home/web_user");
 }),
 createDefaultDevices: (function() {
  FS.mkdir("/dev");
  FS.registerDevice(FS.makedev(1, 3), {
   read: (function() {
    return 0;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    return length;
   })
  });
  FS.mkdev("/dev/null", FS.makedev(1, 3));
  TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
  TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
  FS.mkdev("/dev/tty", FS.makedev(5, 0));
  FS.mkdev("/dev/tty1", FS.makedev(6, 0));
  var random_device;
  if (typeof crypto !== "undefined") {
   var randomBuffer = new Uint8Array(1);
   random_device = (function() {
    crypto.getRandomValues(randomBuffer);
    return randomBuffer[0];
   });
  } else if (ENVIRONMENT_IS_NODE) {
   random_device = (function() {
    return require("crypto").randomBytes(1)[0];
   });
  } else {
   random_device = (function() {
    return Math.random() * 256 | 0;
   });
  }
  FS.createDevice("/dev", "random", random_device);
  FS.createDevice("/dev", "urandom", random_device);
  FS.mkdir("/dev/shm");
  FS.mkdir("/dev/shm/tmp");
 }),
 createSpecialDirectories: (function() {
  FS.mkdir("/proc");
  FS.mkdir("/proc/self");
  FS.mkdir("/proc/self/fd");
  FS.mount({
   mount: (function() {
    var node = FS.createNode("/proc/self", "fd", 16384 | 511, 73);
    node.node_ops = {
     lookup: (function(parent, name) {
      var fd = +name;
      var stream = FS.getStream(fd);
      if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
      var ret = {
       parent: null,
       mount: {
        mountpoint: "fake"
       },
       node_ops: {
        readlink: (function() {
         return stream.path;
        })
       }
      };
      ret.parent = ret;
      return ret;
     })
    };
    return node;
   })
  }, {}, "/proc/self/fd");
 }),
 createStandardStreams: (function() {
  if (Module["stdin"]) {
   FS.createDevice("/dev", "stdin", Module["stdin"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdin");
  }
  if (Module["stdout"]) {
   FS.createDevice("/dev", "stdout", null, Module["stdout"]);
  } else {
   FS.symlink("/dev/tty", "/dev/stdout");
  }
  if (Module["stderr"]) {
   FS.createDevice("/dev", "stderr", null, Module["stderr"]);
  } else {
   FS.symlink("/dev/tty1", "/dev/stderr");
  }
  var stdin = FS.open("/dev/stdin", "r");
  assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
  var stdout = FS.open("/dev/stdout", "w");
  assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
  var stderr = FS.open("/dev/stderr", "w");
  assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
 }),
 ensureErrnoError: (function() {
  if (FS.ErrnoError) return;
  FS.ErrnoError = function ErrnoError(errno, node) {
   this.node = node;
   this.setErrno = (function(errno) {
    this.errno = errno;
    for (var key in ERRNO_CODES) {
     if (ERRNO_CODES[key] === errno) {
      this.code = key;
      break;
     }
    }
   });
   this.setErrno(errno);
   this.message = ERRNO_MESSAGES[errno];
  };
  FS.ErrnoError.prototype = new Error;
  FS.ErrnoError.prototype.constructor = FS.ErrnoError;
  [ ERRNO_CODES.ENOENT ].forEach((function(code) {
   FS.genericErrors[code] = new FS.ErrnoError(code);
   FS.genericErrors[code].stack = "<generic error, no stack>";
  }));
 }),
 staticInit: (function() {
  FS.ensureErrnoError();
  FS.nameTable = new Array(4096);
  FS.mount(MEMFS, {}, "/");
  FS.createDefaultDirectories();
  FS.createDefaultDevices();
  FS.createSpecialDirectories();
  FS.filesystems = {
   "MEMFS": MEMFS,
   "IDBFS": IDBFS,
   "NODEFS": NODEFS,
   "WORKERFS": WORKERFS
  };
 }),
 init: (function(input, output, error) {
  assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
  FS.init.initialized = true;
  FS.ensureErrnoError();
  Module["stdin"] = input || Module["stdin"];
  Module["stdout"] = output || Module["stdout"];
  Module["stderr"] = error || Module["stderr"];
  FS.createStandardStreams();
 }),
 quit: (function() {
  FS.init.initialized = false;
  var fflush = Module["_fflush"];
  if (fflush) fflush(0);
  for (var i = 0; i < FS.streams.length; i++) {
   var stream = FS.streams[i];
   if (!stream) {
    continue;
   }
   FS.close(stream);
  }
 }),
 getMode: (function(canRead, canWrite) {
  var mode = 0;
  if (canRead) mode |= 292 | 73;
  if (canWrite) mode |= 146;
  return mode;
 }),
 joinPath: (function(parts, forceRelative) {
  var path = PATH.join.apply(null, parts);
  if (forceRelative && path[0] == "/") path = path.substr(1);
  return path;
 }),
 absolutePath: (function(relative, base) {
  return PATH.resolve(base, relative);
 }),
 standardizePath: (function(path) {
  return PATH.normalize(path);
 }),
 findObject: (function(path, dontResolveLastLink) {
  var ret = FS.analyzePath(path, dontResolveLastLink);
  if (ret.exists) {
   return ret.object;
  } else {
   ___setErrNo(ret.error);
   return null;
  }
 }),
 analyzePath: (function(path, dontResolveLastLink) {
  try {
   var lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   path = lookup.path;
  } catch (e) {}
  var ret = {
   isRoot: false,
   exists: false,
   error: 0,
   name: null,
   path: null,
   object: null,
   parentExists: false,
   parentPath: null,
   parentObject: null
  };
  try {
   var lookup = FS.lookupPath(path, {
    parent: true
   });
   ret.parentExists = true;
   ret.parentPath = lookup.path;
   ret.parentObject = lookup.node;
   ret.name = PATH.basename(path);
   lookup = FS.lookupPath(path, {
    follow: !dontResolveLastLink
   });
   ret.exists = true;
   ret.path = lookup.path;
   ret.object = lookup.node;
   ret.name = lookup.node.name;
   ret.isRoot = lookup.path === "/";
  } catch (e) {
   ret.error = e.errno;
  }
  return ret;
 }),
 createFolder: (function(parent, name, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.mkdir(path, mode);
 }),
 createPath: (function(parent, path, canRead, canWrite) {
  parent = typeof parent === "string" ? parent : FS.getPath(parent);
  var parts = path.split("/").reverse();
  while (parts.length) {
   var part = parts.pop();
   if (!part) continue;
   var current = PATH.join2(parent, part);
   try {
    FS.mkdir(current);
   } catch (e) {}
   parent = current;
  }
  return current;
 }),
 createFile: (function(parent, name, properties, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(canRead, canWrite);
  return FS.create(path, mode);
 }),
 createDataFile: (function(parent, name, data, canRead, canWrite, canOwn) {
  var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
  var mode = FS.getMode(canRead, canWrite);
  var node = FS.create(path, mode);
  if (data) {
   if (typeof data === "string") {
    var arr = new Array(data.length);
    for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
    data = arr;
   }
   FS.chmod(node, mode | 146);
   var stream = FS.open(node, "w");
   FS.write(stream, data, 0, data.length, 0, canOwn);
   FS.close(stream);
   FS.chmod(node, mode);
  }
  return node;
 }),
 createDevice: (function(parent, name, input, output) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  var mode = FS.getMode(!!input, !!output);
  if (!FS.createDevice.major) FS.createDevice.major = 64;
  var dev = FS.makedev(FS.createDevice.major++, 0);
  FS.registerDevice(dev, {
   open: (function(stream) {
    stream.seekable = false;
   }),
   close: (function(stream) {
    if (output && output.buffer && output.buffer.length) {
     output(10);
    }
   }),
   read: (function(stream, buffer, offset, length, pos) {
    var bytesRead = 0;
    for (var i = 0; i < length; i++) {
     var result;
     try {
      result = input();
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
     if (result === undefined && bytesRead === 0) {
      throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
     }
     if (result === null || result === undefined) break;
     bytesRead++;
     buffer[offset + i] = result;
    }
    if (bytesRead) {
     stream.node.timestamp = Date.now();
    }
    return bytesRead;
   }),
   write: (function(stream, buffer, offset, length, pos) {
    for (var i = 0; i < length; i++) {
     try {
      output(buffer[offset + i]);
     } catch (e) {
      throw new FS.ErrnoError(ERRNO_CODES.EIO);
     }
    }
    if (length) {
     stream.node.timestamp = Date.now();
    }
    return i;
   })
  });
  return FS.mkdev(path, mode, dev);
 }),
 createLink: (function(parent, name, target, canRead, canWrite) {
  var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
  return FS.symlink(target, path);
 }),
 forceLoadFile: (function(obj) {
  if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
  var success = true;
  if (typeof XMLHttpRequest !== "undefined") {
   throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
  } else if (Module["read"]) {
   try {
    obj.contents = intArrayFromString(Module["read"](obj.url), true);
    obj.usedBytes = obj.contents.length;
   } catch (e) {
    success = false;
   }
  } else {
   throw new Error("Cannot load without read() or XMLHttpRequest.");
  }
  if (!success) ___setErrNo(ERRNO_CODES.EIO);
  return success;
 }),
 createLazyFile: (function(parent, name, url, canRead, canWrite) {
  function LazyUint8Array() {
   this.lengthKnown = false;
   this.chunks = [];
  }
  LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
   if (idx > this.length - 1 || idx < 0) {
    return undefined;
   }
   var chunkOffset = idx % this.chunkSize;
   var chunkNum = idx / this.chunkSize | 0;
   return this.getter(chunkNum)[chunkOffset];
  };
  LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
   this.getter = getter;
  };
  LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
   var xhr = new XMLHttpRequest;
   xhr.open("HEAD", url, false);
   xhr.send(null);
   if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
   var datalength = Number(xhr.getResponseHeader("Content-length"));
   var header;
   var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
   var chunkSize = 1024 * 1024;
   if (!hasByteServing) chunkSize = datalength;
   var doXHR = (function(from, to) {
    if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
    if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
    var xhr = new XMLHttpRequest;
    xhr.open("GET", url, false);
    if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    if (typeof Uint8Array != "undefined") xhr.responseType = "arraybuffer";
    if (xhr.overrideMimeType) {
     xhr.overrideMimeType("text/plain; charset=x-user-defined");
    }
    xhr.send(null);
    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
    if (xhr.response !== undefined) {
     return new Uint8Array(xhr.response || []);
    } else {
     return intArrayFromString(xhr.responseText || "", true);
    }
   });
   var lazyArray = this;
   lazyArray.setDataGetter((function(chunkNum) {
    var start = chunkNum * chunkSize;
    var end = (chunkNum + 1) * chunkSize - 1;
    end = Math.min(end, datalength - 1);
    if (typeof lazyArray.chunks[chunkNum] === "undefined") {
     lazyArray.chunks[chunkNum] = doXHR(start, end);
    }
    if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
    return lazyArray.chunks[chunkNum];
   }));
   this._length = datalength;
   this._chunkSize = chunkSize;
   this.lengthKnown = true;
  };
  if (typeof XMLHttpRequest !== "undefined") {
   if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
   var lazyArray = new LazyUint8Array;
   Object.defineProperty(lazyArray, "length", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._length;
    })
   });
   Object.defineProperty(lazyArray, "chunkSize", {
    get: (function() {
     if (!this.lengthKnown) {
      this.cacheLength();
     }
     return this._chunkSize;
    })
   });
   var properties = {
    isDevice: false,
    contents: lazyArray
   };
  } else {
   var properties = {
    isDevice: false,
    url: url
   };
  }
  var node = FS.createFile(parent, name, properties, canRead, canWrite);
  if (properties.contents) {
   node.contents = properties.contents;
  } else if (properties.url) {
   node.contents = null;
   node.url = properties.url;
  }
  Object.defineProperty(node, "usedBytes", {
   get: (function() {
    return this.contents.length;
   })
  });
  var stream_ops = {};
  var keys = Object.keys(node.stream_ops);
  keys.forEach((function(key) {
   var fn = node.stream_ops[key];
   stream_ops[key] = function forceLoadLazyFile() {
    if (!FS.forceLoadFile(node)) {
     throw new FS.ErrnoError(ERRNO_CODES.EIO);
    }
    return fn.apply(null, arguments);
   };
  }));
  stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
   if (!FS.forceLoadFile(node)) {
    throw new FS.ErrnoError(ERRNO_CODES.EIO);
   }
   var contents = stream.node.contents;
   if (position >= contents.length) return 0;
   var size = Math.min(contents.length - position, length);
   assert(size >= 0);
   if (contents.slice) {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents[position + i];
    }
   } else {
    for (var i = 0; i < size; i++) {
     buffer[offset + i] = contents.get(position + i);
    }
   }
   return size;
  };
  node.stream_ops = stream_ops;
  return node;
 }),
 createPreloadedFile: (function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
  Browser.init();
  var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
  var dep = getUniqueRunDependency("cp " + fullname);
  function processData(byteArray) {
   function finish(byteArray) {
    if (preFinish) preFinish();
    if (!dontCreateFile) {
     FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
    }
    if (onload) onload();
    removeRunDependency(dep);
   }
   var handled = false;
   Module["preloadPlugins"].forEach((function(plugin) {
    if (handled) return;
    if (plugin["canHandle"](fullname)) {
     plugin["handle"](byteArray, fullname, finish, (function() {
      if (onerror) onerror();
      removeRunDependency(dep);
     }));
     handled = true;
    }
   }));
   if (!handled) finish(byteArray);
  }
  addRunDependency(dep);
  if (typeof url == "string") {
   Browser.asyncLoad(url, (function(byteArray) {
    processData(byteArray);
   }), onerror);
  } else {
   processData(url);
  }
 }),
 indexedDB: (function() {
  return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
 }),
 DB_NAME: (function() {
  return "EM_FS_" + window.location.pathname;
 }),
 DB_VERSION: 20,
 DB_STORE_NAME: "FILE_DATA",
 saveFilesToDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
   console.log("creating db");
   var db = openRequest.result;
   db.createObjectStore(FS.DB_STORE_NAME);
  };
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   var transaction = db.transaction([ FS.DB_STORE_NAME ], "readwrite");
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var putRequest = files.put(FS.analyzePath(path).object.contents, path);
    putRequest.onsuccess = function putRequest_onsuccess() {
     ok++;
     if (ok + fail == total) finish();
    };
    putRequest.onerror = function putRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 }),
 loadFilesFromDB: (function(paths, onload, onerror) {
  onload = onload || (function() {});
  onerror = onerror || (function() {});
  var indexedDB = FS.indexedDB();
  try {
   var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
  } catch (e) {
   return onerror(e);
  }
  openRequest.onupgradeneeded = onerror;
  openRequest.onsuccess = function openRequest_onsuccess() {
   var db = openRequest.result;
   try {
    var transaction = db.transaction([ FS.DB_STORE_NAME ], "readonly");
   } catch (e) {
    onerror(e);
    return;
   }
   var files = transaction.objectStore(FS.DB_STORE_NAME);
   var ok = 0, fail = 0, total = paths.length;
   function finish() {
    if (fail == 0) onload(); else onerror();
   }
   paths.forEach((function(path) {
    var getRequest = files.get(path);
    getRequest.onsuccess = function getRequest_onsuccess() {
     if (FS.analyzePath(path).exists) {
      FS.unlink(path);
     }
     FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
     ok++;
     if (ok + fail == total) finish();
    };
    getRequest.onerror = function getRequest_onerror() {
     fail++;
     if (ok + fail == total) finish();
    };
   }));
   transaction.onerror = onerror;
  };
  openRequest.onerror = onerror;
 })
};
var PATH = {
 splitPath: (function(filename) {
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  return splitPathRe.exec(filename).slice(1);
 }),
 normalizeArray: (function(parts, allowAboveRoot) {
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
   var last = parts[i];
   if (last === ".") {
    parts.splice(i, 1);
   } else if (last === "..") {
    parts.splice(i, 1);
    up++;
   } else if (up) {
    parts.splice(i, 1);
    up--;
   }
  }
  if (allowAboveRoot) {
   for (; up--; up) {
    parts.unshift("..");
   }
  }
  return parts;
 }),
 normalize: (function(path) {
  var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
  path = PATH.normalizeArray(path.split("/").filter((function(p) {
   return !!p;
  })), !isAbsolute).join("/");
  if (!path && !isAbsolute) {
   path = ".";
  }
  if (path && trailingSlash) {
   path += "/";
  }
  return (isAbsolute ? "/" : "") + path;
 }),
 dirname: (function(path) {
  var result = PATH.splitPath(path), root = result[0], dir = result[1];
  if (!root && !dir) {
   return ".";
  }
  if (dir) {
   dir = dir.substr(0, dir.length - 1);
  }
  return root + dir;
 }),
 basename: (function(path) {
  if (path === "/") return "/";
  var lastSlash = path.lastIndexOf("/");
  if (lastSlash === -1) return path;
  return path.substr(lastSlash + 1);
 }),
 extname: (function(path) {
  return PATH.splitPath(path)[3];
 }),
 join: (function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return PATH.normalize(paths.join("/"));
 }),
 join2: (function(l, r) {
  return PATH.normalize(l + "/" + r);
 }),
 resolve: (function() {
  var resolvedPath = "", resolvedAbsolute = false;
  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
   var path = i >= 0 ? arguments[i] : FS.cwd();
   if (typeof path !== "string") {
    throw new TypeError("Arguments to path.resolve must be strings");
   } else if (!path) {
    return "";
   }
   resolvedPath = path + "/" + resolvedPath;
   resolvedAbsolute = path.charAt(0) === "/";
  }
  resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter((function(p) {
   return !!p;
  })), !resolvedAbsolute).join("/");
  return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
 }),
 relative: (function(from, to) {
  from = PATH.resolve(from).substr(1);
  to = PATH.resolve(to).substr(1);
  function trim(arr) {
   var start = 0;
   for (; start < arr.length; start++) {
    if (arr[start] !== "") break;
   }
   var end = arr.length - 1;
   for (; end >= 0; end--) {
    if (arr[end] !== "") break;
   }
   if (start > end) return [];
   return arr.slice(start, end - start + 1);
  }
  var fromParts = trim(from.split("/"));
  var toParts = trim(to.split("/"));
  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
   if (fromParts[i] !== toParts[i]) {
    samePartsLength = i;
    break;
   }
  }
  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
   outputParts.push("..");
  }
  outputParts = outputParts.concat(toParts.slice(samePartsLength));
  return outputParts.join("/");
 })
};
function _emscripten_set_main_loop_timing(mode, value) {
 Browser.mainLoop.timingMode = mode;
 Browser.mainLoop.timingValue = value;
 if (!Browser.mainLoop.func) {
  return 1;
 }
 if (mode == 0) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
   setTimeout(Browser.mainLoop.runner, value);
  };
  Browser.mainLoop.method = "timeout";
 } else if (mode == 1) {
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
   Browser.requestAnimationFrame(Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "rAF";
 } else if (mode == 2) {
  if (!window["setImmediate"]) {
   var setImmediates = [];
   var emscriptenMainLoopMessageId = "__emcc";
   function Browser_setImmediate_messageHandler(event) {
    if (event.source === window && event.data === emscriptenMainLoopMessageId) {
     event.stopPropagation();
     setImmediates.shift()();
    }
   }
   window.addEventListener("message", Browser_setImmediate_messageHandler, true);
   window["setImmediate"] = function Browser_emulated_setImmediate(func) {
    setImmediates.push(func);
    window.postMessage(emscriptenMainLoopMessageId, "*");
   };
  }
  Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
   window["setImmediate"](Browser.mainLoop.runner);
  };
  Browser.mainLoop.method = "immediate";
 }
 return 0;
}
function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
 Module["noExitRuntime"] = true;
 assert(!Browser.mainLoop.func, "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.");
 Browser.mainLoop.func = func;
 Browser.mainLoop.arg = arg;
 var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
 Browser.mainLoop.runner = function Browser_mainLoop_runner() {
  if (ABORT) return;
  if (Browser.mainLoop.queue.length > 0) {
   var start = Date.now();
   var blocker = Browser.mainLoop.queue.shift();
   blocker.func(blocker.arg);
   if (Browser.mainLoop.remainingBlockers) {
    var remaining = Browser.mainLoop.remainingBlockers;
    var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);
    if (blocker.counted) {
     Browser.mainLoop.remainingBlockers = next;
    } else {
     next = next + .5;
     Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;
    }
   }
   console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + " ms");
   Browser.mainLoop.updateStatus();
   setTimeout(Browser.mainLoop.runner, 0);
   return;
  }
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
  if (Browser.mainLoop.timingMode == 1 && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
   Browser.mainLoop.scheduler();
   return;
  }
  if (Browser.mainLoop.method === "timeout" && Module.ctx) {
   Module.printErr("Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!");
   Browser.mainLoop.method = "";
  }
  Browser.mainLoop.runIter((function() {
   if (typeof arg !== "undefined") {
    Runtime.dynCall("vi", func, [ arg ]);
   } else {
    Runtime.dynCall("v", func);
   }
  }));
  if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  if (typeof SDL === "object" && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  Browser.mainLoop.scheduler();
 };
 if (!noSetTiming) {
  if (fps && fps > 0) _emscripten_set_main_loop_timing(0, 1e3 / fps); else _emscripten_set_main_loop_timing(1, 1);
  Browser.mainLoop.scheduler();
 }
 if (simulateInfiniteLoop) {
  throw "SimulateInfiniteLoop";
 }
}
var Browser = {
 mainLoop: {
  scheduler: null,
  method: "",
  currentlyRunningMainloop: 0,
  func: null,
  arg: 0,
  timingMode: 0,
  timingValue: 0,
  currentFrameNumber: 0,
  queue: [],
  pause: (function() {
   Browser.mainLoop.scheduler = null;
   Browser.mainLoop.currentlyRunningMainloop++;
  }),
  resume: (function() {
   Browser.mainLoop.currentlyRunningMainloop++;
   var timingMode = Browser.mainLoop.timingMode;
   var timingValue = Browser.mainLoop.timingValue;
   var func = Browser.mainLoop.func;
   Browser.mainLoop.func = null;
   _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true);
   _emscripten_set_main_loop_timing(timingMode, timingValue);
   Browser.mainLoop.scheduler();
  }),
  updateStatus: (function() {
   if (Module["setStatus"]) {
    var message = Module["statusMessage"] || "Please wait...";
    var remaining = Browser.mainLoop.remainingBlockers;
    var expected = Browser.mainLoop.expectedBlockers;
    if (remaining) {
     if (remaining < expected) {
      Module["setStatus"](message + " (" + (expected - remaining) + "/" + expected + ")");
     } else {
      Module["setStatus"](message);
     }
    } else {
     Module["setStatus"]("");
    }
   }
  }),
  runIter: (function(func) {
   if (ABORT) return;
   if (Module["preMainLoop"]) {
    var preRet = Module["preMainLoop"]();
    if (preRet === false) {
     return;
    }
   }
   try {
    func();
   } catch (e) {
    if (e instanceof ExitStatus) {
     return;
    } else {
     if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
     throw e;
    }
   }
   if (Module["postMainLoop"]) Module["postMainLoop"]();
  })
 },
 isFullScreen: false,
 pointerLock: false,
 moduleContextCreatedCallbacks: [],
 workers: [],
 init: (function() {
  if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  if (Browser.initted) return;
  Browser.initted = true;
  try {
   new Blob;
   Browser.hasBlobConstructor = true;
  } catch (e) {
   Browser.hasBlobConstructor = false;
   console.log("warning: no blob constructor, cannot create blobs with mimetypes");
  }
  Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null;
  Browser.URLObject = typeof window != "undefined" ? window.URL ? window.URL : window.webkitURL : undefined;
  if (!Module.noImageDecoding && typeof Browser.URLObject === "undefined") {
   console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
   Module.noImageDecoding = true;
  }
  var imagePlugin = {};
  imagePlugin["canHandle"] = function imagePlugin_canHandle(name) {
   return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
  };
  imagePlugin["handle"] = function imagePlugin_handle(byteArray, name, onload, onerror) {
   var b = null;
   if (Browser.hasBlobConstructor) {
    try {
     b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
     if (b.size !== byteArray.length) {
      b = new Blob([ (new Uint8Array(byteArray)).buffer ], {
       type: Browser.getMimetype(name)
      });
     }
    } catch (e) {
     Runtime.warnOnce("Blob constructor present but fails: " + e + "; falling back to blob builder");
    }
   }
   if (!b) {
    var bb = new Browser.BlobBuilder;
    bb.append((new Uint8Array(byteArray)).buffer);
    b = bb.getBlob();
   }
   var url = Browser.URLObject.createObjectURL(b);
   var img = new Image;
   img.onload = function img_onload() {
    assert(img.complete, "Image " + name + " could not be decoded");
    var canvas = document.createElement("canvas");
    canvas.width = img.width;
    canvas.height = img.height;
    var ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0);
    Module["preloadedImages"][name] = canvas;
    Browser.URLObject.revokeObjectURL(url);
    if (onload) onload(byteArray);
   };
   img.onerror = function img_onerror(event) {
    console.log("Image " + url + " could not be decoded");
    if (onerror) onerror();
   };
   img.src = url;
  };
  Module["preloadPlugins"].push(imagePlugin);
  var audioPlugin = {};
  audioPlugin["canHandle"] = function audioPlugin_canHandle(name) {
   return !Module.noAudioDecoding && name.substr(-4) in {
    ".ogg": 1,
    ".wav": 1,
    ".mp3": 1
   };
  };
  audioPlugin["handle"] = function audioPlugin_handle(byteArray, name, onload, onerror) {
   var done = false;
   function finish(audio) {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = audio;
    if (onload) onload(byteArray);
   }
   function fail() {
    if (done) return;
    done = true;
    Module["preloadedAudios"][name] = new Audio;
    if (onerror) onerror();
   }
   if (Browser.hasBlobConstructor) {
    try {
     var b = new Blob([ byteArray ], {
      type: Browser.getMimetype(name)
     });
    } catch (e) {
     return fail();
    }
    var url = Browser.URLObject.createObjectURL(b);
    var audio = new Audio;
    audio.addEventListener("canplaythrough", (function() {
     finish(audio);
    }), false);
    audio.onerror = function audio_onerror(event) {
     if (done) return;
     console.log("warning: browser could not fully decode audio " + name + ", trying slower base64 approach");
     function encode64(data) {
      var BASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var PAD = "=";
      var ret = "";
      var leftchar = 0;
      var leftbits = 0;
      for (var i = 0; i < data.length; i++) {
       leftchar = leftchar << 8 | data[i];
       leftbits += 8;
       while (leftbits >= 6) {
        var curr = leftchar >> leftbits - 6 & 63;
        leftbits -= 6;
        ret += BASE[curr];
       }
      }
      if (leftbits == 2) {
       ret += BASE[(leftchar & 3) << 4];
       ret += PAD + PAD;
      } else if (leftbits == 4) {
       ret += BASE[(leftchar & 15) << 2];
       ret += PAD;
      }
      return ret;
     }
     audio.src = "data:audio/x-" + name.substr(-3) + ";base64," + encode64(byteArray);
     finish(audio);
    };
    audio.src = url;
    Browser.safeSetTimeout((function() {
     finish(audio);
    }), 1e4);
   } else {
    return fail();
   }
  };
  Module["preloadPlugins"].push(audioPlugin);
  var canvas = Module["canvas"];
  function pointerLockChange() {
   Browser.pointerLock = document["pointerLockElement"] === canvas || document["mozPointerLockElement"] === canvas || document["webkitPointerLockElement"] === canvas || document["msPointerLockElement"] === canvas;
  }
  if (canvas) {
   canvas.requestPointerLock = canvas["requestPointerLock"] || canvas["mozRequestPointerLock"] || canvas["webkitRequestPointerLock"] || canvas["msRequestPointerLock"] || (function() {});
   canvas.exitPointerLock = document["exitPointerLock"] || document["mozExitPointerLock"] || document["webkitExitPointerLock"] || document["msExitPointerLock"] || (function() {});
   canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
   document.addEventListener("pointerlockchange", pointerLockChange, false);
   document.addEventListener("mozpointerlockchange", pointerLockChange, false);
   document.addEventListener("webkitpointerlockchange", pointerLockChange, false);
   document.addEventListener("mspointerlockchange", pointerLockChange, false);
   if (Module["elementPointerLock"]) {
    canvas.addEventListener("click", (function(ev) {
     if (!Browser.pointerLock && canvas.requestPointerLock) {
      canvas.requestPointerLock();
      ev.preventDefault();
     }
    }), false);
   }
  }
 }),
 createContext: (function(canvas, useWebGL, setInModule, webGLContextAttributes) {
  if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx;
  var ctx;
  var contextHandle;
  if (useWebGL) {
   var contextAttributes = {
    antialias: false,
    alpha: false
   };
   if (webGLContextAttributes) {
    for (var attribute in webGLContextAttributes) {
     contextAttributes[attribute] = webGLContextAttributes[attribute];
    }
   }
   contextHandle = GL.createContext(canvas, contextAttributes);
   if (contextHandle) {
    ctx = GL.getContext(contextHandle).GLctx;
   }
   canvas.style.backgroundColor = "black";
  } else {
   ctx = canvas.getContext("2d");
  }
  if (!ctx) return null;
  if (setInModule) {
   if (!useWebGL) assert(typeof GLctx === "undefined", "cannot set in module if GLctx is used, but we are a non-GL context that would replace it");
   Module.ctx = ctx;
   if (useWebGL) GL.makeContextCurrent(contextHandle);
   Module.useWebGL = useWebGL;
   Browser.moduleContextCreatedCallbacks.forEach((function(callback) {
    callback();
   }));
   Browser.init();
  }
  return ctx;
 }),
 destroyContext: (function(canvas, useWebGL, setInModule) {}),
 fullScreenHandlersInstalled: false,
 lockPointer: undefined,
 resizeCanvas: undefined,
 requestFullScreen: (function(lockPointer, resizeCanvas, vrDevice) {
  Browser.lockPointer = lockPointer;
  Browser.resizeCanvas = resizeCanvas;
  Browser.vrDevice = vrDevice;
  if (typeof Browser.lockPointer === "undefined") Browser.lockPointer = true;
  if (typeof Browser.resizeCanvas === "undefined") Browser.resizeCanvas = false;
  if (typeof Browser.vrDevice === "undefined") Browser.vrDevice = null;
  var canvas = Module["canvas"];
  function fullScreenChange() {
   Browser.isFullScreen = false;
   var canvasContainer = canvas.parentNode;
   if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvasContainer) {
    canvas.cancelFullScreen = document["cancelFullScreen"] || document["mozCancelFullScreen"] || document["webkitCancelFullScreen"] || document["msExitFullscreen"] || document["exitFullscreen"] || (function() {});
    canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
    if (Browser.lockPointer) canvas.requestPointerLock();
    Browser.isFullScreen = true;
    if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
   } else {
    canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
    canvasContainer.parentNode.removeChild(canvasContainer);
    if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
   }
   if (Module["onFullScreen"]) Module["onFullScreen"](Browser.isFullScreen);
   Browser.updateCanvasDimensions(canvas);
  }
  if (!Browser.fullScreenHandlersInstalled) {
   Browser.fullScreenHandlersInstalled = true;
   document.addEventListener("fullscreenchange", fullScreenChange, false);
   document.addEventListener("mozfullscreenchange", fullScreenChange, false);
   document.addEventListener("webkitfullscreenchange", fullScreenChange, false);
   document.addEventListener("MSFullscreenChange", fullScreenChange, false);
  }
  var canvasContainer = document.createElement("div");
  canvas.parentNode.insertBefore(canvasContainer, canvas);
  canvasContainer.appendChild(canvas);
  canvasContainer.requestFullScreen = canvasContainer["requestFullScreen"] || canvasContainer["mozRequestFullScreen"] || canvasContainer["msRequestFullscreen"] || (canvasContainer["webkitRequestFullScreen"] ? (function() {
   canvasContainer["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
  }) : null);
  if (vrDevice) {
   canvasContainer.requestFullScreen({
    vrDisplay: vrDevice
   });
  } else {
   canvasContainer.requestFullScreen();
  }
 }),
 nextRAF: 0,
 fakeRequestAnimationFrame: (function(func) {
  var now = Date.now();
  if (Browser.nextRAF === 0) {
   Browser.nextRAF = now + 1e3 / 60;
  } else {
   while (now + 2 >= Browser.nextRAF) {
    Browser.nextRAF += 1e3 / 60;
   }
  }
  var delay = Math.max(Browser.nextRAF - now, 0);
  setTimeout(func, delay);
 }),
 requestAnimationFrame: function requestAnimationFrame(func) {
  if (typeof window === "undefined") {
   Browser.fakeRequestAnimationFrame(func);
  } else {
   if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window["requestAnimationFrame"] || window["mozRequestAnimationFrame"] || window["webkitRequestAnimationFrame"] || window["msRequestAnimationFrame"] || window["oRequestAnimationFrame"] || Browser.fakeRequestAnimationFrame;
   }
   window.requestAnimationFrame(func);
  }
 },
 safeCallback: (function(func) {
  return (function() {
   if (!ABORT) return func.apply(null, arguments);
  });
 }),
 allowAsyncCallbacks: true,
 queuedAsyncCallbacks: [],
 pauseAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = false;
 }),
 resumeAsyncCallbacks: (function() {
  Browser.allowAsyncCallbacks = true;
  if (Browser.queuedAsyncCallbacks.length > 0) {
   var callbacks = Browser.queuedAsyncCallbacks;
   Browser.queuedAsyncCallbacks = [];
   callbacks.forEach((function(func) {
    func();
   }));
  }
 }),
 safeRequestAnimationFrame: (function(func) {
  return Browser.requestAnimationFrame((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }));
 }),
 safeSetTimeout: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setTimeout((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   } else {
    Browser.queuedAsyncCallbacks.push(func);
   }
  }), timeout);
 }),
 safeSetInterval: (function(func, timeout) {
  Module["noExitRuntime"] = true;
  return setInterval((function() {
   if (ABORT) return;
   if (Browser.allowAsyncCallbacks) {
    func();
   }
  }), timeout);
 }),
 getMimetype: (function(name) {
  return {
   "jpg": "image/jpeg",
   "jpeg": "image/jpeg",
   "png": "image/png",
   "bmp": "image/bmp",
   "ogg": "audio/ogg",
   "wav": "audio/wav",
   "mp3": "audio/mpeg"
  }[name.substr(name.lastIndexOf(".") + 1)];
 }),
 getUserMedia: (function(func) {
  if (!window.getUserMedia) {
   window.getUserMedia = navigator["getUserMedia"] || navigator["mozGetUserMedia"];
  }
  window.getUserMedia(func);
 }),
 getMovementX: (function(event) {
  return event["movementX"] || event["mozMovementX"] || event["webkitMovementX"] || 0;
 }),
 getMovementY: (function(event) {
  return event["movementY"] || event["mozMovementY"] || event["webkitMovementY"] || 0;
 }),
 getMouseWheelDelta: (function(event) {
  var delta = 0;
  switch (event.type) {
  case "DOMMouseScroll":
   delta = event.detail;
   break;
  case "mousewheel":
   delta = event.wheelDelta;
   break;
  case "wheel":
   delta = event["deltaY"];
   break;
  default:
   throw "unrecognized mouse wheel event: " + event.type;
  }
  return delta;
 }),
 mouseX: 0,
 mouseY: 0,
 mouseMovementX: 0,
 mouseMovementY: 0,
 touches: {},
 lastTouches: {},
 calculateMouseEvent: (function(event) {
  if (Browser.pointerLock) {
   if (event.type != "mousemove" && "mozMovementX" in event) {
    Browser.mouseMovementX = Browser.mouseMovementY = 0;
   } else {
    Browser.mouseMovementX = Browser.getMovementX(event);
    Browser.mouseMovementY = Browser.getMovementY(event);
   }
   if (typeof SDL != "undefined") {
    Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
    Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
   } else {
    Browser.mouseX += Browser.mouseMovementX;
    Browser.mouseY += Browser.mouseMovementY;
   }
  } else {
   var rect = Module["canvas"].getBoundingClientRect();
   var cw = Module["canvas"].width;
   var ch = Module["canvas"].height;
   var scrollX = typeof window.scrollX !== "undefined" ? window.scrollX : window.pageXOffset;
   var scrollY = typeof window.scrollY !== "undefined" ? window.scrollY : window.pageYOffset;
   if (event.type === "touchstart" || event.type === "touchend" || event.type === "touchmove") {
    var touch = event.touch;
    if (touch === undefined) {
     return;
    }
    var adjustedX = touch.pageX - (scrollX + rect.left);
    var adjustedY = touch.pageY - (scrollY + rect.top);
    adjustedX = adjustedX * (cw / rect.width);
    adjustedY = adjustedY * (ch / rect.height);
    var coords = {
     x: adjustedX,
     y: adjustedY
    };
    if (event.type === "touchstart") {
     Browser.lastTouches[touch.identifier] = coords;
     Browser.touches[touch.identifier] = coords;
    } else if (event.type === "touchend" || event.type === "touchmove") {
     var last = Browser.touches[touch.identifier];
     if (!last) last = coords;
     Browser.lastTouches[touch.identifier] = last;
     Browser.touches[touch.identifier] = coords;
    }
    return;
   }
   var x = event.pageX - (scrollX + rect.left);
   var y = event.pageY - (scrollY + rect.top);
   x = x * (cw / rect.width);
   y = y * (ch / rect.height);
   Browser.mouseMovementX = x - Browser.mouseX;
   Browser.mouseMovementY = y - Browser.mouseY;
   Browser.mouseX = x;
   Browser.mouseY = y;
  }
 }),
 xhrLoad: (function(url, onload, onerror) {
  var xhr = new XMLHttpRequest;
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
   } else {
    onerror();
   }
  };
  xhr.onerror = onerror;
  xhr.send(null);
 }),
 asyncLoad: (function(url, onload, onerror, noRunDep) {
  Browser.xhrLoad(url, (function(arrayBuffer) {
   assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
   onload(new Uint8Array(arrayBuffer));
   if (!noRunDep) removeRunDependency("al " + url);
  }), (function(event) {
   if (onerror) {
    onerror();
   } else {
    throw 'Loading data file "' + url + '" failed.';
   }
  }));
  if (!noRunDep) addRunDependency("al " + url);
 }),
 resizeListeners: [],
 updateResizeListeners: (function() {
  var canvas = Module["canvas"];
  Browser.resizeListeners.forEach((function(listener) {
   listener(canvas.width, canvas.height);
  }));
 }),
 setCanvasSize: (function(width, height, noUpdates) {
  var canvas = Module["canvas"];
  Browser.updateCanvasDimensions(canvas, width, height);
  if (!noUpdates) Browser.updateResizeListeners();
 }),
 windowedWidth: 0,
 windowedHeight: 0,
 setFullScreenCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags | 8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 setWindowedCanvasSize: (function() {
  if (typeof SDL != "undefined") {
   var flags = HEAPU32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2];
   flags = flags & ~8388608;
   HEAP32[SDL.screen + Runtime.QUANTUM_SIZE * 0 >> 2] = flags;
  }
  Browser.updateResizeListeners();
 }),
 updateCanvasDimensions: (function(canvas, wNative, hNative) {
  if (wNative && hNative) {
   canvas.widthNative = wNative;
   canvas.heightNative = hNative;
  } else {
   wNative = canvas.widthNative;
   hNative = canvas.heightNative;
  }
  var w = wNative;
  var h = hNative;
  if (Module["forcedAspectRatio"] && Module["forcedAspectRatio"] > 0) {
   if (w / h < Module["forcedAspectRatio"]) {
    w = Math.round(h * Module["forcedAspectRatio"]);
   } else {
    h = Math.round(w / Module["forcedAspectRatio"]);
   }
  }
  if ((document["webkitFullScreenElement"] || document["webkitFullscreenElement"] || document["mozFullScreenElement"] || document["mozFullscreenElement"] || document["fullScreenElement"] || document["fullscreenElement"] || document["msFullScreenElement"] || document["msFullscreenElement"] || document["webkitCurrentFullScreenElement"]) === canvas.parentNode && typeof screen != "undefined") {
   var factor = Math.min(screen.width / w, screen.height / h);
   w = Math.round(w * factor);
   h = Math.round(h * factor);
  }
  if (Browser.resizeCanvas) {
   if (canvas.width != w) canvas.width = w;
   if (canvas.height != h) canvas.height = h;
   if (typeof canvas.style != "undefined") {
    canvas.style.removeProperty("width");
    canvas.style.removeProperty("height");
   }
  } else {
   if (canvas.width != wNative) canvas.width = wNative;
   if (canvas.height != hNative) canvas.height = hNative;
   if (typeof canvas.style != "undefined") {
    if (w != wNative || h != hNative) {
     canvas.style.setProperty("width", w + "px", "important");
     canvas.style.setProperty("height", h + "px", "important");
    } else {
     canvas.style.removeProperty("width");
     canvas.style.removeProperty("height");
    }
   }
  }
 }),
 wgetRequests: {},
 nextWgetRequestHandle: 0,
 getNextWgetRequestHandle: (function() {
  var handle = Browser.nextWgetRequestHandle;
  Browser.nextWgetRequestHandle++;
  return handle;
 })
};
function _pthread_setspecific(key, value) {
 if (!(key in PTHREAD_SPECIFIC)) {
  return ERRNO_CODES.EINVAL;
 }
 PTHREAD_SPECIFIC[key] = value;
 return 0;
}
function _malloc(bytes) {
 var ptr = Runtime.dynamicAlloc(bytes + 8);
 return ptr + 8 & 4294967288;
}
Module["_malloc"] = _malloc;
function ___cxa_allocate_exception(size) {
 return _malloc(size);
}
var _sin = Math_sin;
Module["_i64Add"] = _i64Add;
Module["_bitshift64Lshr"] = _bitshift64Lshr;
var _BDtoIHigh = true;
function _pthread_cleanup_push(routine, arg) {
 __ATEXIT__.push((function() {
  Runtime.dynCall("vi", routine, [ arg ]);
 }));
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function _pthread_cond_broadcast() {
 return 0;
}
function ___cxa_guard_acquire(variable) {
 if (!HEAP8[variable >> 0]) {
  HEAP8[variable >> 0] = 1;
  return 1;
 }
 return 0;
}
function _pthread_cleanup_pop() {
 assert(_pthread_cleanup_push.level == __ATEXIT__.length, "cannot pop if something else added meanwhile!");
 __ATEXIT__.pop();
 _pthread_cleanup_push.level = __ATEXIT__.length;
}
function ___cxa_guard_release() {}
var _emscripten_asm_const_double = true;
function ___cxa_begin_catch(ptr) {
 __ZSt18uncaught_exceptionv.uncaught_exception--;
 EXCEPTIONS.caught.push(ptr);
 EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
 return ptr;
}
function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
 return dest;
}
Module["_memcpy"] = _memcpy;
var SYSCALLS = {
 DEFAULT_POLLMASK: 5,
 mappings: {},
 umask: 511,
 calculateAt: (function(dirfd, path) {
  if (path[0] !== "/") {
   var dir;
   if (dirfd === -100) {
    dir = FS.cwd();
   } else {
    var dirstream = FS.getStream(dirfd);
    if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
    dir = dirstream.path;
   }
   path = PATH.join2(dir, path);
  }
  return path;
 }),
 doStat: (function(func, path, buf) {
  try {
   var stat = func(path);
  } catch (e) {
   if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
    return -ERRNO_CODES.ENOTDIR;
   }
   throw e;
  }
  HEAP32[buf >> 2] = stat.dev;
  HEAP32[buf + 4 >> 2] = 0;
  HEAP32[buf + 8 >> 2] = stat.ino;
  HEAP32[buf + 12 >> 2] = stat.mode;
  HEAP32[buf + 16 >> 2] = stat.nlink;
  HEAP32[buf + 20 >> 2] = stat.uid;
  HEAP32[buf + 24 >> 2] = stat.gid;
  HEAP32[buf + 28 >> 2] = stat.rdev;
  HEAP32[buf + 32 >> 2] = 0;
  HEAP32[buf + 36 >> 2] = stat.size;
  HEAP32[buf + 40 >> 2] = 4096;
  HEAP32[buf + 44 >> 2] = stat.blocks;
  HEAP32[buf + 48 >> 2] = stat.atime.getTime() / 1e3 | 0;
  HEAP32[buf + 52 >> 2] = 0;
  HEAP32[buf + 56 >> 2] = stat.mtime.getTime() / 1e3 | 0;
  HEAP32[buf + 60 >> 2] = 0;
  HEAP32[buf + 64 >> 2] = stat.ctime.getTime() / 1e3 | 0;
  HEAP32[buf + 68 >> 2] = 0;
  HEAP32[buf + 72 >> 2] = stat.ino;
  return 0;
 }),
 doMsync: (function(addr, stream, len, flags) {
  var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
  FS.msync(stream, buffer, 0, len, flags);
 }),
 doMkdir: (function(path, mode) {
  path = PATH.normalize(path);
  if (path[path.length - 1] === "/") path = path.substr(0, path.length - 1);
  FS.mkdir(path, mode, 0);
  return 0;
 }),
 doMknod: (function(path, mode, dev) {
  switch (mode & 61440) {
  case 32768:
  case 8192:
  case 24576:
  case 4096:
  case 49152:
   break;
  default:
   return -ERRNO_CODES.EINVAL;
  }
  FS.mknod(path, mode, dev);
  return 0;
 }),
 doReadlink: (function(path, buf, bufsize) {
  if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
  var ret = FS.readlink(path);
  ret = ret.slice(0, Math.max(0, bufsize));
  writeStringToMemory(ret, buf, true);
  return ret.length;
 }),
 doAccess: (function(path, amode) {
  if (amode & ~7) {
   return -ERRNO_CODES.EINVAL;
  }
  var node;
  var lookup = FS.lookupPath(path, {
   follow: true
  });
  node = lookup.node;
  var perms = "";
  if (amode & 4) perms += "r";
  if (amode & 2) perms += "w";
  if (amode & 1) perms += "x";
  if (perms && FS.nodePermissions(node, perms)) {
   return -ERRNO_CODES.EACCES;
  }
  return 0;
 }),
 doDup: (function(path, flags, suggestFD) {
  var suggest = FS.getStream(suggestFD);
  if (suggest) FS.close(suggest);
  return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
 }),
 doReadv: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.read(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
   if (curr < len) break;
  }
  return ret;
 }),
 doWritev: (function(stream, iov, iovcnt, offset) {
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   var curr = FS.write(stream, HEAP8, ptr, len, offset);
   if (curr < 0) return -1;
   ret += curr;
  }
  return ret;
 }),
 varargs: 0,
 get: (function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 }),
 getStr: (function() {
  var ret = Pointer_stringify(SYSCALLS.get());
  return ret;
 }),
 getStreamFromFD: (function() {
  var stream = FS.getStream(SYSCALLS.get());
  if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return stream;
 }),
 getSocketFromFD: (function() {
  var socket = SOCKFS.getSocket(SYSCALLS.get());
  if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  return socket;
 }),
 getSocketAddress: (function(allowNull) {
  var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
  if (allowNull && addrp === 0) return null;
  var info = __read_sockaddr(addrp, addrlen);
  if (info.errno) throw new FS.ErrnoError(info.errno);
  info.addr = DNS.lookup_addr(info.addr) || info.addr;
  return info;
 }),
 get64: (function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  if (low >= 0) assert(high === 0); else assert(high === -1);
  return low;
 }),
 getZero: (function() {
  assert(SYSCALLS.get() === 0);
 })
};
function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _sbrk(bytes) {
 var self = _sbrk;
 if (!self.called) {
  DYNAMICTOP = alignMemoryPage(DYNAMICTOP);
  self.called = true;
  assert(Runtime.dynamicAlloc);
  self.alloc = Runtime.dynamicAlloc;
  Runtime.dynamicAlloc = (function() {
   abort("cannot dynamically allocate, sbrk now has control");
  });
 }
 var ret = DYNAMICTOP;
 if (bytes != 0) {
  var success = self.alloc(bytes);
  if (!success) return -1 >>> 0;
 }
 return ret;
}
Module["_bitshift64Shl"] = _bitshift64Shl;
Module["_memmove"] = _memmove;
var _BItoD = true;
function ___syscall54(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
  switch (op) {
  case 21505:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21506:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return 0;
   }
  case 21519:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    var argp = SYSCALLS.get();
    HEAP32[argp >> 2] = 0;
    return 0;
   }
  case 21520:
   {
    if (!stream.tty) return -ERRNO_CODES.ENOTTY;
    return -ERRNO_CODES.EINVAL;
   }
  case 21531:
   {
    var argp = SYSCALLS.get();
    return FS.ioctl(stream, op, argp);
   }
  default:
   abort("bad ioctl syscall " + op);
  }
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function _pthread_cond_wait() {
 return 0;
}
var _atan2 = Math_atan2;
function _pthread_mutex_unlock() {}
function _time(ptr) {
 var ret = Date.now() / 1e3 | 0;
 if (ptr) {
  HEAP32[ptr >> 2] = ret;
 }
 return ret;
}
function _pthread_self() {
 return 0;
}
function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  assert(offset_high === 0);
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doWritev(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
function ___syscall145(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  return SYSCALLS.doReadv(stream, iov, iovcnt);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}
var ___dso_handle = allocate(1, "i32*", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {
 Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);
};
Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) {
 Browser.requestAnimationFrame(func);
};
Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) {
 Browser.setCanvasSize(width, height, noUpdates);
};
Module["pauseMainLoop"] = function Module_pauseMainLoop() {
 Browser.mainLoop.pause();
};
Module["resumeMainLoop"] = function Module_resumeMainLoop() {
 Browser.mainLoop.resume();
};
Module["getUserMedia"] = function Module_getUserMedia() {
 Browser.getUserMedia();
};
Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {
 return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);
};
FS.staticInit();
__ATINIT__.unshift((function() {
 if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
}));
__ATMAIN__.push((function() {
 FS.ignorePermissions = false;
}));
__ATEXIT__.push((function() {
 FS.quit();
}));
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift((function() {
 TTY.init();
}));
__ATEXIT__.push((function() {
 TTY.shutdown();
}));
if (ENVIRONMENT_IS_NODE) {
 var fs = require("fs");
 var NODEJS_PATH = require("path");
 NODEFS.staticInit();
}
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true;
STACK_MAX = STACK_BASE + TOTAL_STACK;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");
var cttz_i8 = allocate([ 8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0 ], "i8", ALLOC_DYNAMIC);
function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 try {
  return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiii(index, a1, a2, a3) {
 try {
  return Module["dynCall_iiii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiiii(index, a1, a2, a3, a4, a5) {
 try {
  Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_dii(index, a1, a2) {
 try {
  return Module["dynCall_dii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiid"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vi(index, a1) {
 try {
  Module["dynCall_vi"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiidii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiidii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vii(index, a1, a2) {
 try {
  Module["dynCall_vii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 try {
  return Module["dynCall_iiiiiii"](index, a1, a2, a3, a4, a5, a6);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_ii(index, a1) {
 try {
  return Module["dynCall_ii"](index, a1);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viid(index, a1, a2, a3) {
 try {
  Module["dynCall_viid"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viii(index, a1, a2, a3) {
 try {
  Module["dynCall_viii"](index, a1, a2, a3);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_v(index) {
 try {
  Module["dynCall_v"](index);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 try {
  return Module["dynCall_iiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiii(index, a1, a2, a3, a4) {
 try {
  return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_viiii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_viiii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iii(index, a1, a2) {
 try {
  return Module["dynCall_iii"](index, a1, a2);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiid(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiid"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_vidii(index, a1, a2, a3, a4) {
 try {
  Module["dynCall_vidii"](index, a1, a2, a3, a4);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
 try {
  return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
 } catch (e) {
  if (typeof e !== "number" && e !== "longjmp") throw e;
  asm["setThrew"](1, 0);
 }
}
Module.asmGlobalArg = {
 "Math": Math,
 "Int8Array": Int8Array,
 "Int16Array": Int16Array,
 "Int32Array": Int32Array,
 "Uint8Array": Uint8Array,
 "Uint16Array": Uint16Array,
 "Uint32Array": Uint32Array,
 "Float32Array": Float32Array,
 "Float64Array": Float64Array,
 "NaN": NaN,
 "Infinity": Infinity
};
Module.asmLibraryArg = {
 "abort": abort,
 "assert": assert,
 "invoke_iiiiiiii": invoke_iiiiiiii,
 "invoke_iiii": invoke_iiii,
 "invoke_viiiiii": invoke_viiiiii,
 "invoke_viiiii": invoke_viiiii,
 "invoke_dii": invoke_dii,
 "invoke_iiiiiid": invoke_iiiiiid,
 "invoke_vi": invoke_vi,
 "invoke_iiidii": invoke_iiidii,
 "invoke_vii": invoke_vii,
 "invoke_iiiiiii": invoke_iiiiiii,
 "invoke_ii": invoke_ii,
 "invoke_viid": invoke_viid,
 "invoke_viii": invoke_viii,
 "invoke_v": invoke_v,
 "invoke_iiiiiiiii": invoke_iiiiiiiii,
 "invoke_iiiii": invoke_iiiii,
 "invoke_viiii": invoke_viiii,
 "invoke_iii": invoke_iii,
 "invoke_iiiiid": invoke_iiiiid,
 "invoke_vidii": invoke_vidii,
 "invoke_iiiiii": invoke_iiiiii,
 "_fabs": _fabs,
 "_strftime": _strftime,
 "_pthread_cond_wait": _pthread_cond_wait,
 "_sin": _sin,
 "_sqrtf": _sqrtf,
 "___syscall146": ___syscall146,
 "_abort": _abort,
 "___cxa_guard_acquire": ___cxa_guard_acquire,
 "_atan2": _atan2,
 "___setErrNo": ___setErrNo,
 "_atexit": _atexit,
 "___assert_fail": ___assert_fail,
 "___cxa_allocate_exception": ___cxa_allocate_exception,
 "___cxa_find_matching_catch": ___cxa_find_matching_catch,
 "__isLeapYear": __isLeapYear,
 "___cxa_guard_release": ___cxa_guard_release,
 "__addDays": __addDays,
 "_strftime_l": _strftime_l,
 "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing,
 "_sbrk": _sbrk,
 "___cxa_begin_catch": ___cxa_begin_catch,
 "_emscripten_memcpy_big": _emscripten_memcpy_big,
 "___resumeException": ___resumeException,
 "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv,
 "_sysconf": _sysconf,
 "_pthread_getspecific": _pthread_getspecific,
 "__arraySum": __arraySum,
 "_pthread_self": _pthread_self,
 "_pthread_mutex_unlock": _pthread_mutex_unlock,
 "_pthread_once": _pthread_once,
 "_sqrt": _sqrt,
 "___syscall54": ___syscall54,
 "___unlock": ___unlock,
 "_pthread_cleanup_pop": _pthread_cleanup_pop,
 "_pthread_cond_broadcast": _pthread_cond_broadcast,
 "_emscripten_set_main_loop": _emscripten_set_main_loop,
 "_pthread_setspecific": _pthread_setspecific,
 "___cxa_atexit": ___cxa_atexit,
 "___cxa_throw": ___cxa_throw,
 "___lock": ___lock,
 "___syscall6": ___syscall6,
 "_pthread_cleanup_push": _pthread_cleanup_push,
 "___syscall145": ___syscall145,
 "_time": _time,
 "_pthread_mutex_lock": _pthread_mutex_lock,
 "_pthread_key_create": _pthread_key_create,
 "_emscripten_asm_const_8": _emscripten_asm_const_8,
 "___syscall140": ___syscall140,
 "_emscripten_asm_const_6": _emscripten_asm_const_6,
 "_emscripten_asm_const_5": _emscripten_asm_const_5,
 "_emscripten_asm_const_4": _emscripten_asm_const_4,
 "_emscripten_asm_const_3": _emscripten_asm_const_3,
 "_emscripten_asm_const_2": _emscripten_asm_const_2,
 "_emscripten_asm_const_1": _emscripten_asm_const_1,
 "STACKTOP": STACKTOP,
 "STACK_MAX": STACK_MAX,
 "tempDoublePtr": tempDoublePtr,
 "ABORT": ABORT,
 "cttz_i8": cttz_i8,
 "___dso_handle": ___dso_handle
};
// EMSCRIPTEN_START_ASM

var asm = (function(global,env,buffer) {

  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_dii=env.invoke_dii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_vi=env.invoke_vi;
  var invoke_iiidii=env.invoke_iiidii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viid=env.invoke_viid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_vidii=env.invoke_vidii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _sin=env._sin;
  var _sqrtf=env._sqrtf;
  var ___syscall146=env.___syscall146;
  var _abort=env._abort;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _atan2=env._atan2;
  var ___setErrNo=env.___setErrNo;
  var _atexit=env._atexit;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var __isLeapYear=env.__isLeapYear;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _strftime_l=env._strftime_l;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _sqrt=env._sqrt;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall145=env.___syscall145;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _pthread_key_create=env._pthread_key_create;
  var _emscripten_asm_const_8=env._emscripten_asm_const_8;
  var ___syscall140=env.___syscall140;
  var _emscripten_asm_const_6=env._emscripten_asm_const_6;
  var _emscripten_asm_const_5=env._emscripten_asm_const_5;
  var _emscripten_asm_const_4=env._emscripten_asm_const_4;
  var _emscripten_asm_const_3=env._emscripten_asm_const_3;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN6MapDef11makeBoxPolyEv(i51) {
 i51 = i51 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, i20 = 0, i21 = 0, d22 = 0.0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, d30 = 0.0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, d59 = 0.0, i60 = 0, i61 = 0;
 i58 = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 i49 = i58 + 356 | 0;
 i57 = i58 + 344 | 0;
 i55 = i58 + 332 | 0;
 i52 = i58 + 320 | 0;
 i31 = i58 + 304 | 0;
 i27 = i58 + 16 | 0;
 i32 = i58 + 8 | 0;
 i33 = i58;
 i53 = i58 + 144 | 0;
 i34 = i58 + 132 | 0;
 i54 = i58 + 120 | 0;
 i37 = i58 + 108 | 0;
 i50 = i58 + 160 | 0;
 i44 = i58 + 96 | 0;
 i45 = i58 + 84 | 0;
 i46 = i58 + 72 | 0;
 i47 = i58 + 60 | 0;
 i48 = i58 + 48 | 0;
 i42 = i58 + 40 | 0;
 i56 = i58 + 24 | 0;
 i21 = i51 + 12 | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i43 = i51 + 16 | 0;
 i2 = HEAP32[i43 >> 2] | 0;
 L1 : do if ((i1 | 0) != (i2 | 0)) do {
  i20 = i1;
  while (1) {
   if (!(HEAP8[(HEAP32[i1 >> 2] | 0) + 24 >> 0] | 0)) break;
   i10 = HEAP32[i21 >> 2] | 0;
   i10 = i10 + ((i20 - i10 >> 2) + 1 << 2) | 0;
   if ((i10 | 0) == (i2 | 0)) i8 = i1; else {
    i11 = i2 + -4 | 0;
    i8 = i10;
    i9 = i1;
    while (1) {
     i41 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = 0;
     i12 = HEAP32[i9 >> 2] | 0;
     HEAP32[i9 >> 2] = i41;
     if (i12) {
      i3 = HEAP32[i12 + 12 >> 2] | 0;
      i4 = i3;
      if (i3) {
       i5 = i12 + 16 | 0;
       i7 = HEAP32[i5 >> 2] | 0;
       if ((i7 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i7 + (~((i7 + -4 - i4 | 0) >>> 2) << 2);
       __ZdlPv(i3);
      }
      i3 = HEAP32[i12 >> 2] | 0;
      i4 = i3;
      if (i3) {
       i5 = i12 + 4 | 0;
       i7 = HEAP32[i5 >> 2] | 0;
       if ((i7 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i7 + (~((i7 + -4 - i4 | 0) >>> 2) << 2);
       __ZdlPv(i3);
      }
      __ZdlPv(i12);
     }
     i8 = i8 + 4 | 0;
     if ((i8 | 0) == (i2 | 0)) break; else i9 = i9 + 4 | 0;
    }
    i8 = i1 + (((i11 - i10 | 0) >>> 2) + 1 << 2) | 0;
    i2 = HEAP32[i43 >> 2] | 0;
   }
   if ((i2 | 0) != (i8 | 0)) {
    do {
     i41 = i2 + -4 | 0;
     HEAP32[i43 >> 2] = i41;
     i7 = HEAP32[i41 >> 2] | 0;
     HEAP32[i41 >> 2] = 0;
     if (i7) {
      i2 = HEAP32[i7 + 12 >> 2] | 0;
      i3 = i2;
      if (i2) {
       i4 = i7 + 16 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
       __ZdlPv(i2);
      }
      i2 = HEAP32[i7 >> 2] | 0;
      i3 = i2;
      if (i2) {
       i4 = i7 + 4 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
       __ZdlPv(i2);
      }
      __ZdlPv(i7);
     }
     i2 = HEAP32[i43 >> 2] | 0;
    } while ((i2 | 0) != (i8 | 0));
    i2 = i8;
   }
   if ((i1 | 0) == (i2 | 0)) break L1;
  }
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i2 | 0)); while (0);
 i2 = HEAP32[i51 + 36 >> 2] | 0;
 i3 = i51 + 40 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i41 = i1 + -4 | 0;
  HEAP32[i3 >> 2] = i41;
  i1 = HEAP32[i41 >> 2] | 0;
  HEAP32[i41 >> 2] = 0;
  if (i1) __ZdlPv(i1);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 HEAP32[i57 >> 2] = 0;
 i41 = i57 + 4 | 0;
 HEAP32[i41 >> 2] = 0;
 HEAP32[i57 + 8 >> 2] = 0;
 i25 = i51 + 28 | 0;
 i5 = HEAP32[i25 >> 2] | 0;
 i26 = i51 + 24 | 0;
 i4 = HEAP32[i26 >> 2] | 0;
 i3 = i5 - i4 | 0;
 i28 = i57 + 8 | 0;
 i2 = (i5 | 0) != (i4 | 0);
 if (i2) {
  if ((i5 | 0) == (i4 | 0)) i1 = 0; else i1 = __Znwj(i3 << 3) | 0;
  i40 = i1;
  HEAP32[i57 >> 2] = i40;
  HEAP32[i41 >> 2] = i40;
  HEAP32[i28 >> 2] = i1 + (i3 << 3);
 } else i1 = 0;
 HEAP32[i55 >> 2] = 0;
 i40 = i55 + 4 | 0;
 HEAP32[i40 >> 2] = 0;
 HEAP32[i55 + 8 >> 2] = 0;
 i24 = i55 + 8 | 0;
 if (i2) {
  if ((i5 | 0) == (i4 | 0)) i2 = 0; else i2 = __Znwj(i3 << 2) | 0;
  i39 = i2;
  HEAP32[i55 >> 2] = i39;
  HEAP32[i40 >> 2] = i39;
  HEAP32[i24 >> 2] = i2 + (i3 << 2);
 }
 HEAP32[i52 + 4 >> 2] = 0;
 HEAP32[i52 + 8 >> 2] = 0;
 i39 = i52 + 4 | 0;
 HEAP32[i52 >> 2] = i39;
 if ((i5 | 0) == (i4 | 0)) i3 = i1; else {
  i11 = i49 + 4 | 0;
  i12 = i27 + 4 | 0;
  i20 = i31 + 4 | 0;
  i21 = i31 + 8 | 0;
  i23 = i31 + 12 | 0;
  i1 = i4;
  i2 = i5;
  i10 = 0;
  do {
   i9 = HEAP32[i1 + (i10 << 2) >> 2] | 0;
   i8 = HEAP32[i9 >> 2] | 0;
   i7 = HEAP32[i9 + 8 >> 2] | 0;
   d6 = +HEAPF32[i8 + 4 >> 2];
   d13 = +HEAPF32[i7 + 4 >> 2];
   d18 = d6 - d13;
   d14 = +HEAPF32[i8 + 8 >> 2];
   d15 = +HEAPF32[i7 + 8 >> 2];
   d19 = d14 - d15;
   do if (!(d18 == 0.0 | d19 == 0.0)) {
    i4 = d6 < d13;
    d22 = i4 ? d6 : d13;
    d17 = i4 ? d13 : d6;
    i4 = d14 < d15;
    d16 = i4 ? d14 : d15;
    d14 = i4 ? d15 : d14;
    i4 = i9 + 16 | 0;
    HEAP8[i4 >> 0] = 0;
    if ((i2 | 0) != (i1 | 0)) {
     i5 = i2 - i1 >> 2;
     i7 = 0;
     do {
      if ((i10 | 0) != (i7 | 0) ? (i29 = HEAP32[i1 + (i7 << 2) >> 2] | 0, (HEAP8[i29 + 16 >> 0] | 0) == 0) : 0) {
       i61 = HEAP32[i29 >> 2] | 0;
       i3 = HEAP32[i29 + 8 >> 2] | 0;
       d59 = +HEAPF32[i61 + 4 >> 2];
       d15 = +HEAPF32[i3 + 4 >> 2];
       i60 = d59 < d15;
       d6 = +HEAPF32[i61 + 8 >> 2];
       d13 = +HEAPF32[i3 + 8 >> 2];
       i3 = d6 < d13;
       if (!((i60 ? d15 : d59) <= d22) & !((i60 ? d59 : d15) >= d17) & !((i3 ? d13 : d6) <= d16)) i3 = (i3 ? d6 : d13) >= d14; else i3 = 1;
       i3 = i3 & 1 ^ 1;
       HEAP8[i4 >> 0] = i3;
      } else i3 = 0;
      i7 = i7 + 1 | 0;
      i3 = i3 << 24 >> 24 == 0;
     } while (i3 & i7 >>> 0 < i5 >>> 0);
     if (!i3) break;
    }
    i5 = d18 * d19 < 0.0;
    i2 = i8;
    i1 = 0;
    while (1) {
     i60 = HEAP32[i2 + 4 >> 2] | 0;
     HEAP32[i49 >> 2] = i60;
     i61 = HEAP32[i2 + 8 >> 2] | 0;
     HEAP32[i11 >> 2] = i61;
     i4 = HEAP32[i39 >> 2] | 0;
     d13 = (HEAP32[tempDoublePtr >> 2] = i60, +HEAPF32[tempDoublePtr >> 2]);
     d14 = (HEAP32[tempDoublePtr >> 2] = i61, +HEAPF32[tempDoublePtr >> 2]);
     do if (i4) {
      i3 = i39;
      L90 : do {
       while (1) {
        d6 = +HEAPF32[i4 + 16 >> 2];
        if (!(d6 < d13)) {
         if (d13 < d6) {
          i3 = i4;
          break;
         }
         if (!(+HEAPF32[i4 + 20 >> 2] < d14)) {
          i3 = i4;
          break;
         }
        }
        i4 = HEAP32[i4 + 4 >> 2] | 0;
        if (!i4) break L90;
       }
       i4 = HEAP32[i3 >> 2] | 0;
      } while ((i4 | 0) != 0);
      if ((i3 | 0) != (i39 | 0) ? (d30 = +HEAPF32[i3 + 16 >> 2], !(d13 < d30)) : 0) {
       if (!(d30 < d13) ? d14 < +HEAPF32[i3 + 20 >> 2] : 0) {
        i38 = 73;
        break;
       }
       i2 = HEAP32[i3 + 24 >> 2] | 0;
      } else i38 = 73;
     } else i38 = 73; while (0);
     if ((i38 | 0) == 73) {
      i38 = 0;
      HEAP32[(__ZNSt3__13mapINS_4pairIffEEP6VertexNS_4lessIS2_EENS_9allocatorINS1_IKS2_S4_EEEEEixERS8_(i52, i49) | 0) >> 2] = i2;
     }
     i3 = i31 + (i1 << 2) | 0;
     HEAP32[i3 >> 2] = i2;
     i4 = HEAP32[i40 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i24 >> 2] | 0)) __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i55, i3); else {
      HEAP32[i4 >> 2] = i2;
      HEAP32[i40 >> 2] = (HEAP32[i40 >> 2] | 0) + 4;
     }
     i1 = i1 + 1 | 0;
     if ((i1 | 0) >= 4) break;
     i2 = HEAP32[i9 + (i1 << 2) >> 2] | 0;
    }
    i2 = i5 ? 3 : 5;
    HEAP32[i27 >> 2] = HEAP32[i31 >> 2];
    HEAP32[i12 >> 2] = HEAP32[i31 + ((i2 & 3) << 2) >> 2];
    i1 = HEAP32[i41 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i60 = i27;
     i61 = HEAP32[i60 + 4 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i60 >> 2];
     HEAP32[i1 + 4 >> 2] = i61;
     i1 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
     HEAP32[i41 >> 2] = i1;
    } else {
     __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i27);
     i1 = HEAP32[i41 >> 2] | 0;
    }
    HEAP32[i27 >> 2] = HEAP32[i20 >> 2];
    HEAP32[i12 >> 2] = HEAP32[i31 + ((i2 + 1 & 3) << 2) >> 2];
    if (i1 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i60 = i27;
     i61 = HEAP32[i60 + 4 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i60 >> 2];
     HEAP32[i1 + 4 >> 2] = i61;
     i1 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
     HEAP32[i41 >> 2] = i1;
    } else {
     __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i27);
     i1 = HEAP32[i41 >> 2] | 0;
    }
    HEAP32[i27 >> 2] = HEAP32[i21 >> 2];
    HEAP32[i12 >> 2] = HEAP32[i31 + ((i2 + 2 & 3) << 2) >> 2];
    if (i1 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i60 = i27;
     i61 = HEAP32[i60 + 4 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i60 >> 2];
     HEAP32[i1 + 4 >> 2] = i61;
     i1 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
     HEAP32[i41 >> 2] = i1;
    } else {
     __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i27);
     i1 = HEAP32[i41 >> 2] | 0;
    }
    HEAP32[i27 >> 2] = HEAP32[i23 >> 2];
    HEAP32[i12 >> 2] = HEAP32[i31 + ((i2 + 3 & 3) << 2) >> 2];
    if (i1 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i9 = i27;
     i60 = HEAP32[i9 + 4 >> 2] | 0;
     i61 = i1;
     HEAP32[i61 >> 2] = HEAP32[i9 >> 2];
     HEAP32[i61 + 4 >> 2] = i60;
     HEAP32[i41 >> 2] = (HEAP32[i41 >> 2] | 0) + 8;
    } else __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i27);
    i2 = HEAP32[i25 >> 2] | 0;
    i1 = HEAP32[i26 >> 2] | 0;
   } while (0);
   i10 = i10 + 1 | 0;
  } while (i10 >>> 0 < i2 - i1 >> 2 >>> 0);
  i3 = HEAP32[i41 >> 2] | 0;
  i1 = HEAP32[i57 >> 2] | 0;
 }
 L133 : do if ((i3 | 0) == (i1 | 0)) i20 = i3; else {
  i21 = i32 + 4 | 0;
  i23 = i33 + 4 | 0;
  i2 = i3;
  i5 = i1;
  i4 = i1;
  i1 = i3;
  i20 = 0;
  while (1) {
   i12 = (i20 << 3 >> 3) + 1 | 0;
   i3 = i1;
   i1 = i5;
   L137 : while (1) {
    i10 = HEAP32[i4 + (i20 << 3) >> 2] | 0;
    i11 = HEAP32[i4 + (i20 << 3) + 4 >> 2] | 0;
    d6 = +HEAPF32[i10 + 4 >> 2];
    d13 = +HEAPF32[i10 + 8 >> 2];
    d14 = +HEAPF32[i11 + 4 >> 2];
    d15 = +HEAPF32[i11 + 8 >> 2];
    i5 = d6 < d14;
    d16 = i5 ? d6 : d14;
    d18 = i5 ? d14 : d6;
    i5 = d13 < d15;
    d17 = i5 ? d13 : d15;
    d19 = i5 ? d15 : d13;
    i5 = HEAP32[i40 >> 2] | 0;
    i8 = HEAP32[i55 >> 2] | 0;
    if ((i5 | 0) == (i8 | 0)) break;
    i5 = i5 - i8 >> 2;
    i9 = 0;
    while (1) {
     i7 = HEAP32[i8 + (i9 << 2) >> 2] | 0;
     d30 = +HEAPF32[i7 + 4 >> 2];
     d59 = +HEAPF32[i7 + 8 >> 2];
     if (d59 < d19 & (d30 == d6 & d30 == d14 & d59 > d17) | d30 < d18 & (d30 > d16 & (d59 == d13 & d59 == d15))) {
      i1 = i7;
      i2 = i9;
      break;
     }
     i9 = i9 + 1 | 0;
     if (i9 >>> 0 >= i5 >>> 0) break L137;
    }
    HEAP32[i32 >> 2] = i10;
    HEAP32[i21 >> 2] = i1;
    if (i3 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i60 = i32;
     i61 = HEAP32[i60 + 4 >> 2] | 0;
     i1 = i3;
     HEAP32[i1 >> 2] = HEAP32[i60 >> 2];
     HEAP32[i1 + 4 >> 2] = i61;
     i1 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
     HEAP32[i41 >> 2] = i1;
    } else {
     __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i32);
     i1 = HEAP32[i41 >> 2] | 0;
    }
    HEAP32[i33 >> 2] = HEAP32[(HEAP32[i55 >> 2] | 0) + (i2 << 2) >> 2];
    HEAP32[i23 >> 2] = i11;
    if (i1 >>> 0 < (HEAP32[i28 >> 2] | 0) >>> 0) {
     i60 = i33;
     i61 = HEAP32[i60 + 4 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i60 >> 2];
     HEAP32[i1 + 4 >> 2] = i61;
     i1 = (HEAP32[i41 >> 2] | 0) + 8 | 0;
     HEAP32[i41 >> 2] = i1;
    } else {
     __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i57, i33);
     i1 = HEAP32[i41 >> 2] | 0;
    }
    i2 = HEAP32[i57 >> 2] | 0;
    i61 = i2 + (i12 << 3) | 0;
    i1 = i1 - i61 | 0;
    _memmove(i2 + (i20 << 3) | 0, i61 | 0, i1 | 0) | 0;
    i1 = i2 + ((i1 >> 3) + i20 << 3) | 0;
    i2 = HEAP32[i41 >> 2] | 0;
    if ((i2 | 0) == (i1 | 0)) i2 = i1; else {
     i2 = i2 + (~((i2 + -8 - i1 | 0) >>> 3) << 3) | 0;
     HEAP32[i41 >> 2] = i2;
    }
    i1 = HEAP32[i57 >> 2] | 0;
    if (i20 >>> 0 >= i2 - i1 >> 3 >>> 0) {
     i20 = i2;
     break L133;
    } else {
     i4 = i1;
     i3 = i2;
    }
   }
   i20 = i20 + 1 | 0;
   if (i20 >>> 0 >= i3 - i4 >> 3 >>> 0) {
    i20 = i2;
    break;
   } else {
    i5 = i1;
    i1 = i3;
   }
  }
 } while (0);
 i11 = i53 + 4 | 0;
 HEAP32[i11 >> 2] = 0;
 i12 = i53 + 8 | 0;
 HEAP32[i12 >> 2] = 0;
 i31 = i53 + 4 | 0;
 HEAP32[i53 >> 2] = i31;
 i21 = i31;
 do if ((i1 | 0) != (i20 | 0)) {
  i2 = 0;
  i10 = 0;
  while (1) {
   i9 = i1 + 4 | 0;
   do if (i2) {
    i7 = HEAP32[i9 >> 2] | 0;
    i8 = HEAP32[i1 >> 2] | 0;
    i3 = i31;
    i4 = i2;
    L164 : while (1) {
     while (1) {
      i5 = HEAP32[i4 + 16 >> 2] | 0;
      if (i5 >>> 0 >= i7 >>> 0) {
       if (i7 >>> 0 < i5 >>> 0) {
        i3 = i4;
        break;
       }
       if ((HEAP32[i4 + 20 >> 2] | 0) >>> 0 >= i8 >>> 0) {
        i3 = i4;
        break;
       }
      }
      i4 = HEAP32[i4 + 4 >> 2] | 0;
      if (!i4) {
       i4 = i3;
       break L164;
      }
     }
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) {
      i4 = i3;
      break;
     }
    }
    if ((i4 | 0) != (i31 | 0) ? (i35 = HEAP32[i4 + 16 >> 2] | 0, i7 >>> 0 >= i35 >>> 0) : 0) {
     if (i35 >>> 0 < i7 >>> 0) {
      if ((i4 | 0) == (i31 | 0)) {
       i38 = 121;
       break;
      }
     } else if ((i4 | 0) == (i31 | 0) ? 1 : i8 >>> 0 < (HEAP32[i4 + 20 >> 2] | 0) >>> 0) {
      i38 = 121;
      break;
     }
     i2 = HEAP32[i4 + 4 >> 2] | 0;
     if (!i2) {
      i3 = i4;
      while (1) {
       i2 = HEAP32[i3 + 8 >> 2] | 0;
       if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) break; else i3 = i2;
      }
     } else while (1) {
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) break; else i2 = i3;
     }
     if ((HEAP32[i53 >> 2] | 0) == (i4 | 0)) HEAP32[i53 >> 2] = i2;
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + -1;
     __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(i10, i4);
     __ZdlPv(i4);
    } else i38 = 121;
   } else i38 = 121; while (0);
   if ((i38 | 0) == 121) {
    i38 = 0;
    i10 = HEAP32[i1 >> 2] | 0;
    i9 = HEAP32[i9 >> 2] | 0;
    if (i2) {
     i7 = i10;
     i8 = i9;
     i3 = i31;
     i4 = i2;
     L194 : do {
      while (1) {
       i5 = HEAP32[i4 + 16 >> 2] | 0;
       if (i5 >>> 0 >= i7 >>> 0) {
        if (i7 >>> 0 < i5 >>> 0) {
         i3 = i4;
         break;
        }
        if ((HEAP32[i4 + 20 >> 2] | 0) >>> 0 >= i8 >>> 0) {
         i3 = i4;
         break;
        }
       }
       i4 = HEAP32[i4 + 4 >> 2] | 0;
       if (!i4) break L194;
      }
      i4 = HEAP32[i3 >> 2] | 0;
     } while ((i4 | 0) != 0);
     if ((i3 | 0) != (i31 | 0) ? (i36 = HEAP32[i3 + 16 >> 2] | 0, i7 >>> 0 >= i36 >>> 0) : 0) {
      if (i36 >>> 0 < i7 >>> 0) {
       i38 = 133;
       break;
      }
      if (i8 >>> 0 >= (HEAP32[i3 + 20 >> 2] | 0) >>> 0) {
       i38 = 133;
       break;
      }
     }
    }
    do if (i2) {
     i5 = i10;
     i7 = i9;
     L211 : while (1) {
      i3 = HEAP32[i2 + 16 >> 2] | 0;
      do if (i5 >>> 0 >= i3 >>> 0) {
       if (i3 >>> 0 >= i5 >>> 0) {
        i3 = HEAP32[i2 + 20 >> 2] | 0;
        if (i7 >>> 0 < i3 >>> 0) {
         i38 = 139;
         break;
        }
        if (i3 >>> 0 >= i7 >>> 0) {
         i38 = 145;
         break L211;
        }
       }
       i3 = i2 + 4 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) {
        i38 = 144;
        break L211;
       } else i2 = i4;
      } else i38 = 139; while (0);
      if ((i38 | 0) == 139) {
       i38 = 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) {
        i3 = i2;
        i38 = 140;
        break;
       } else i2 = i3;
      }
     }
     if ((i38 | 0) == 140) {
      i38 = 0;
      HEAP32[i49 >> 2] = i2;
      i4 = i3;
      i3 = i2;
      break;
     } else if ((i38 | 0) == 144) {
      i38 = 0;
      HEAP32[i49 >> 2] = i2;
      i4 = i3;
      i3 = i2;
      break;
     } else if ((i38 | 0) == 145) {
      i38 = 0;
      HEAP32[i49 >> 2] = i2;
      i4 = i49;
      i3 = i2;
      break;
     }
    } else {
     HEAP32[i49 >> 2] = i31;
     i4 = i31;
     i3 = i21;
    } while (0);
    if (!(HEAP32[i4 >> 2] | 0)) {
     i2 = __Znwj(24) | 0;
     HEAP32[i2 + 16 >> 2] = i10;
     HEAP32[i2 + 20 >> 2] = i9;
     HEAP32[i2 >> 2] = 0;
     HEAP32[i2 + 4 >> 2] = 0;
     HEAP32[i2 + 8 >> 2] = i3;
     HEAP32[i4 >> 2] = i2;
     i3 = HEAP32[HEAP32[i53 >> 2] >> 2] | 0;
     if (i3) {
      HEAP32[i53 >> 2] = i3;
      i2 = HEAP32[i4 >> 2] | 0;
     }
     __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i11 >> 2] | 0, i2);
     HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 1;
    }
   }
   i1 = i1 + 8 | 0;
   if ((i1 | 0) == (i20 | 0)) {
    i38 = 154;
    break;
   }
   i10 = HEAP32[i31 >> 2] | 0;
   i2 = i10;
  }
  if ((i38 | 0) == 133) {
   i61 = ___cxa_allocate_exception(16) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i34, 21135, 20);
   __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i61, i34);
   ___cxa_throw(i61 | 0, 16, 12);
  } else if ((i38 | 0) == 154) {
   i1 = i31;
   i2 = HEAP32[i53 >> 2] | 0;
   break;
  }
 } else {
  i1 = i31;
  i2 = i31;
 } while (0);
 i27 = i54 + 4 | 0;
 HEAP32[i27 >> 2] = 0;
 i28 = i54 + 8 | 0;
 HEAP32[i28 >> 2] = 0;
 i29 = i54 + 4 | 0;
 HEAP32[i54 >> 2] = i29;
 L240 : do if ((i2 | 0) != (i1 | 0)) {
  i8 = i29;
  i1 = 0;
  while (1) {
   i7 = i2 + 16 | 0;
   if (i1) {
    i5 = HEAP32[i7 >> 2] | 0;
    i3 = i29;
    i4 = i1;
    L246 : do {
     while (1) {
      if ((HEAP32[i4 + 16 >> 2] | 0) >>> 0 >= i5 >>> 0) {
       i3 = i4;
       break;
      }
      i4 = HEAP32[i4 + 4 >> 2] | 0;
      if (!i4) break L246;
     }
     i4 = HEAP32[i3 >> 2] | 0;
    } while ((i4 | 0) != 0);
    if ((i3 | 0) != (i29 | 0) ? i5 >>> 0 >= (HEAP32[i3 + 16 >> 2] | 0) >>> 0 : 0) {
     i1 = i3 + 24 | 0;
     if (HEAP32[i1 >> 2] | 0) break;
     HEAP32[i1 >> 2] = HEAP32[i2 + 20 >> 2];
    } else i38 = 168;
   } else i38 = 168;
   if ((i38 | 0) == 168) {
    do if (i1) {
     i5 = HEAP32[i7 >> 2] | 0;
     while (1) {
      i3 = HEAP32[i1 + 16 >> 2] | 0;
      if (i5 >>> 0 < i3 >>> 0) {
       i3 = HEAP32[i1 >> 2] | 0;
       if (!i3) {
        i3 = i1;
        i38 = 172;
        break;
       } else i1 = i3;
      } else {
       if (i3 >>> 0 >= i5 >>> 0) {
        i38 = 178;
        break;
       }
       i3 = i1 + 4 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) {
        i38 = 176;
        break;
       } else i1 = i4;
      }
     }
     if ((i38 | 0) == 172) {
      HEAP32[i49 >> 2] = i1;
      i4 = i3;
      i3 = i1;
      i38 = 179;
      break;
     } else if ((i38 | 0) == 176) {
      HEAP32[i49 >> 2] = i1;
      i4 = i3;
      i3 = i1;
      i38 = 179;
      break;
     } else if ((i38 | 0) == 178) {
      i38 = 0;
      HEAP32[i49 >> 2] = i1;
      if (!i1) {
       i4 = i49;
       i3 = i1;
       i38 = 179;
       break;
      } else break;
     }
    } else {
     HEAP32[i49 >> 2] = i29;
     i4 = i29;
     i3 = i8;
     i38 = 179;
    } while (0);
    if ((i38 | 0) == 179) {
     i38 = 0;
     i1 = __Znwj(28) | 0;
     HEAP32[i1 + 16 >> 2] = HEAP32[i7 >> 2];
     HEAP32[i1 + 20 >> 2] = 0;
     HEAP32[i1 + 24 >> 2] = 0;
     HEAP32[i1 >> 2] = 0;
     HEAP32[i1 + 4 >> 2] = 0;
     HEAP32[i1 + 8 >> 2] = i3;
     HEAP32[i4 >> 2] = i1;
     i3 = HEAP32[HEAP32[i54 >> 2] >> 2] | 0;
     if (!i3) i3 = i1; else {
      HEAP32[i54 >> 2] = i3;
      i3 = HEAP32[i4 >> 2] | 0;
     }
     __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i27 >> 2] | 0, i3);
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
    }
    HEAP32[i1 + 20 >> 2] = HEAP32[i2 + 20 >> 2];
    HEAP32[i1 + 24 >> 2] = 0;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) while (1) {
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
   } else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   if ((i1 | 0) == (i31 | 0)) break L240;
   i2 = i1;
   i1 = HEAP32[i29 >> 2] | 0;
  }
  i61 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i37, 21156, 44);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i61, i37);
  ___cxa_throw(i61 | 0, 16, 12);
 } while (0);
 i20 = i50 + 64 | 0;
 i23 = i50 + 8 | 0;
 HEAP32[i23 >> 2] = 5880;
 i21 = i50 + 12 | 0;
 HEAP32[i50 >> 2] = 5920;
 HEAP32[i20 >> 2] = 5940;
 HEAP32[i50 + 4 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(i50 + 64 | 0, i21);
 HEAP32[i50 + 136 >> 2] = 0;
 HEAP32[i50 + 140 >> 2] = -1;
 HEAP32[i50 >> 2] = 5860;
 HEAP32[i50 + 64 >> 2] = 5900;
 HEAP32[i23 >> 2] = 5880;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i21);
 HEAP32[i21 >> 2] = 3108;
 i23 = i50 + 44 | 0;
 HEAP32[i23 >> 2] = 0;
 HEAP32[i23 + 4 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i23 + 12 >> 2] = 0;
 HEAP32[i50 + 60 >> 2] = 24;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i49 + 4 >> 2] = 0;
 HEAP32[i49 + 8 >> 2] = 0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i21, i49);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
 i24 = i42 + 4 | 0;
 i25 = i29;
 i26 = i50 + 8 | 0;
 L289 : while (1) {
  if (!(HEAP32[i28 >> 2] | 0)) {
   i38 = 271;
   break;
  };
  HEAP32[i44 >> 2] = 0;
  HEAP32[i44 + 4 >> 2] = 0;
  HEAP32[i44 + 8 >> 2] = 0;
  i2 = __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i51, i44) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i44);
  HEAP8[i2 + 24 >> 0] = 1;
  i2 = HEAP32[i54 >> 2] | 0;
  while (1) {
   if (!(HEAP32[i2 + 24 >> 2] | 0)) {
    i1 = i2;
    break;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) while (1) {
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
   } else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   if ((i1 | 0) == (i29 | 0)) {
    i38 = 198;
    break L289;
   } else i2 = i1;
  }
  i12 = HEAP32[i1 + 16 >> 2] | 0;
  i1 = i12;
  i11 = 0;
  do {
   i2 = HEAP32[i29 >> 2] | 0;
   if (!i2) {
    i38 = 208;
    break L289;
   }
   i4 = i1;
   i3 = i29;
   L306 : while (1) {
    while (1) {
     if ((HEAP32[i2 + 16 >> 2] | 0) >>> 0 >= i4 >>> 0) {
      i3 = i2;
      break;
     }
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i2) {
      i10 = i3;
      break L306;
     }
    }
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i10 = i3;
     break;
    }
   }
   if ((i10 | 0) == (i29 | 0)) {
    i38 = 208;
    break L289;
   }
   if ((i10 | 0) == (i29 | 0) ? 1 : i4 >>> 0 < (HEAP32[i10 + 16 >> 2] | 0) >>> 0) {
    i38 = 208;
    break L289;
   }
   i8 = i10 + 20 | 0;
   i9 = i11;
   i11 = i1;
   i3 = HEAP32[(HEAP32[i43 >> 2] | 0) + -4 >> 2] | 0;
   i4 = i3 + 4 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   i61 = i5 - i1 | 0;
   i2 = i61 >> 2;
   do if ((i61 | 0) >= 8) {
    i7 = HEAP32[i1 + (i2 + -2 << 2) >> 2] | 0;
    i1 = HEAP32[i1 + (i2 + -1 << 2) >> 2] | 0;
    d59 = +HEAPF32[i1 + 4 >> 2];
    if (!(+HEAPF32[i7 + 4 >> 2] == d59 ? d59 == +HEAPF32[i11 + 4 >> 2] : 0)) {
     d6 = +HEAPF32[i1 + 8 >> 2];
     if (!(+HEAPF32[i7 + 8 >> 2] == d6)) break;
     if (!(d6 == +HEAPF32[i11 + 8 >> 2])) break;
    }
    HEAP32[i4 >> 2] = i5 + -4;
    i61 = i3 + 16 | 0;
    HEAP32[i61 >> 2] = (HEAP32[i61 >> 2] | 0) + -4;
   } while (0);
   HEAP32[i47 >> 2] = 0;
   HEAP32[i47 + 4 >> 2] = 0;
   HEAP32[i47 + 8 >> 2] = 0;
   __ZN6MapDef9addToLastEP6VertexRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i51, i11, i47) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
   i1 = HEAP32[i10 + 24 >> 2] | 0;
   do if (!i1) {
    i1 = HEAP32[i8 >> 2] | 0;
    i2 = HEAP32[i10 + 4 >> 2] | 0;
    if (!i2) {
     i3 = i10;
     while (1) {
      i2 = HEAP32[i3 + 8 >> 2] | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) break; else i3 = i2;
     }
    } else while (1) {
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) break; else i2 = i3;
    }
    if ((HEAP32[i54 >> 2] | 0) == (i10 | 0)) HEAP32[i54 >> 2] = i2;
    HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + -1;
    __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i27 >> 2] | 0, i10);
    __ZdlPv(i10);
   } else {
    i3 = i1;
    i2 = HEAP32[i8 >> 2] | 0;
    if (!i9) {
     i38 = 224;
     break L289;
    }
    d18 = +HEAPF32[i11 + 4 >> 2];
    d22 = +HEAPF32[i11 + 8 >> 2];
    i7 = (d18 - +HEAPF32[i9 + 4 >> 2]) * (+HEAPF32[i1 + 8 >> 2] - d22) - (d22 - +HEAPF32[i9 + 8 >> 2]) * (+HEAPF32[i1 + 4 >> 2] - d18) < 0.0;
    i1 = i7 ? i2 : i3;
    i7 = i7 ? i3 : i2;
    i5 = i7;
    d19 = +HEAPF32[i5 + 4 >> 2] - d18;
    d30 = +HEAPF32[i5 + 8 >> 2] - d22;
    d59 = 1.0 / +Math_sqrt(+(d19 * d19 + d30 * d30));
    HEAPF32[i42 >> 2] = d18 + d19 * d59 * .10000000149011612;
    HEAPF32[i24 >> 2] = d22 + d30 * d59 * .10000000149011612;
    i5 = __ZN6MapDef9addBoxVtxERK4Vec2(i51, i42) | 0;
    i8 = i5;
    i2 = HEAP32[i10 + 4 >> 2] | 0;
    if (!i2) {
     i3 = i10;
     while (1) {
      i2 = HEAP32[i3 + 8 >> 2] | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) break; else i3 = i2;
     }
    } else while (1) {
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) break; else i2 = i3;
    }
    if ((HEAP32[i54 >> 2] | 0) == (i10 | 0)) HEAP32[i54 >> 2] = i2;
    HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + -1;
    __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i27 >> 2] | 0, i10);
    __ZdlPv(i10);
    i2 = HEAP32[i29 >> 2] | 0;
    do if (i2) {
     while (1) {
      i3 = HEAP32[i2 + 16 >> 2] | 0;
      if (i5 >>> 0 < i3 >>> 0) {
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) {
        i3 = i2;
        i38 = 234;
        break;
       } else i2 = i3;
      } else {
       if (i3 >>> 0 >= i5 >>> 0) {
        i38 = 240;
        break;
       }
       i3 = i2 + 4 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) {
        i38 = 238;
        break;
       } else i2 = i4;
      }
     }
     if ((i38 | 0) == 234) {
      HEAP32[i49 >> 2] = i2;
      i38 = 241;
      break;
     } else if ((i38 | 0) == 238) {
      HEAP32[i49 >> 2] = i2;
      i38 = 241;
      break;
     } else if ((i38 | 0) == 240) {
      i38 = 0;
      HEAP32[i49 >> 2] = i2;
      if (!i2) {
       i3 = i49;
       i38 = 241;
       break;
      } else break;
     }
    } else {
     HEAP32[i49 >> 2] = i29;
     i3 = i29;
     i2 = i25;
     i38 = 241;
    } while (0);
    if ((i38 | 0) == 241) {
     i4 = __Znwj(28) | 0;
     HEAP32[i4 + 16 >> 2] = i8;
     HEAP32[i4 + 20 >> 2] = 0;
     HEAP32[i4 + 24 >> 2] = 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = i2;
     HEAP32[i3 >> 2] = i4;
     i2 = HEAP32[HEAP32[i54 >> 2] >> 2] | 0;
     if (!i2) i2 = i4; else {
      HEAP32[i54 >> 2] = i2;
      i2 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i27 >> 2] | 0, i2);
     HEAP32[i28 >> 2] = (HEAP32[i28 >> 2] | 0) + 1;
     i2 = i4;
    }
    HEAP32[i2 + 20 >> 2] = i7;
    HEAP32[i2 + 24 >> 2] = 0;
    i2 = HEAP32[i54 >> 2] | 0;
    if ((i2 | 0) == (i29 | 0)) break; else i3 = i2;
    while (1) {
     i2 = i3 + 20 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i11 | 0)) HEAP32[i2 >> 2] = i8;
     i2 = i3 + 24 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i11 | 0)) HEAP32[i2 >> 2] = i8;
     i2 = HEAP32[i3 + 4 >> 2] | 0;
     if (!i2) while (1) {
      i2 = HEAP32[i3 + 8 >> 2] | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) break; else i3 = i2;
     } else while (1) {
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) break; else i2 = i3;
     }
     if ((i2 | 0) == (i29 | 0)) break; else i3 = i2;
    }
   } while (0);
  } while ((i1 | 0) != (i12 | 0));
  i3 = (HEAP32[i43 >> 2] | 0) + -4 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  i5 = i4 + 4 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i8 = HEAP32[i4 >> 2] | 0;
  i61 = i1 - i8 | 0;
  i2 = i61 >> 2;
  do if ((i61 | 0) < 8) {
   i9 = i4;
   i7 = i8;
  } else {
   i7 = HEAP32[i8 + (i2 + -2 << 2) >> 2] | 0;
   i2 = HEAP32[i8 + (i2 + -1 << 2) >> 2] | 0;
   d59 = +HEAPF32[i2 + 4 >> 2];
   if (!(+HEAPF32[i7 + 4 >> 2] == d59 ? d59 == +HEAPF32[i12 + 4 >> 2] : 0)) {
    d6 = +HEAPF32[i2 + 8 >> 2];
    if (!(+HEAPF32[i7 + 8 >> 2] == d6)) {
     i9 = i4;
     i7 = i8;
     break;
    }
    if (!(d6 == +HEAPF32[i12 + 8 >> 2])) {
     i9 = i4;
     i7 = i8;
     break;
    }
   }
   HEAP32[i5 >> 2] = i1 + -4;
   i7 = i4 + 16 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + -4;
   i7 = HEAP32[i3 >> 2] | 0;
   i9 = i7;
   i1 = HEAP32[i7 + 4 >> 2] | 0;
   i7 = HEAP32[i7 >> 2] | 0;
  } while (0);
  i8 = i9 + 4 | 0;
  i2 = i1 - i7 | 0;
  do if ((i2 | 0) >= 8) {
   i3 = HEAP32[i7 + ((i2 >> 2) + -1 << 2) >> 2] | 0;
   i2 = HEAP32[i7 >> 2] | 0;
   i4 = i7 + 4 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   d59 = +HEAPF32[i2 + 4 >> 2];
   if (!(+HEAPF32[i3 + 4 >> 2] == d59 ? d59 == +HEAPF32[i5 + 4 >> 2] : 0)) {
    d6 = +HEAPF32[i2 + 8 >> 2];
    if (!(+HEAPF32[i3 + 8 >> 2] == d6)) break;
    if (!(d6 == +HEAPF32[i5 + 8 >> 2])) break;
   }
   i1 = i1 - i4 | 0;
   _memmove(i7 | 0, i4 | 0, i1 | 0) | 0;
   i1 = i7 + (i1 >> 2 << 2) | 0;
   i2 = HEAP32[i8 >> 2] | 0;
   if ((i2 | 0) != (i1 | 0)) HEAP32[i8 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
   i3 = HEAP32[i9 + 12 >> 2] | 0;
   i61 = i3 + 4 | 0;
   i1 = i9 + 16 | 0;
   i2 = (HEAP32[i1 >> 2] | 0) - i61 | 0;
   _memmove(i3 | 0, i61 | 0, i2 | 0) | 0;
   i2 = i3 + (i2 >> 2 << 2) | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if ((i3 | 0) != (i2 | 0)) HEAP32[i1 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  } while (0);
  i61 = HEAP32[(HEAP32[i43 >> 2] | 0) + -4 >> 2] | 0;
  __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i26, (HEAP32[i61 + 4 >> 2] | 0) - (HEAP32[i61 >> 2] | 0) >> 2) | 0, 21280, 2) | 0;
 }
 if ((i38 | 0) == 198) {
  i61 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i45, 21201, 25);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i61, i45);
  ___cxa_throw(i61 | 0, 16, 12);
 } else if ((i38 | 0) == 208) {
  i61 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i46, 21227, 26);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i61, i46);
  ___cxa_throw(i61 | 0, 16, 12);
 } else if ((i38 | 0) == 224) {
  i61 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i48, 21254, 25);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i61, i48);
  ___cxa_throw(i61 | 0, 16, 12);
 } else if ((i38 | 0) == 271) {
  __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(i56, i21);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i56);
  HEAP32[i50 >> 2] = 5860;
  HEAP32[i20 >> 2] = 5900;
  HEAP32[i26 >> 2] = 5880;
  HEAP32[i21 >> 2] = 3108;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i23);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i21);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i20);
  __ZNSt3__16__treeINS_12__value_typeIP6VertexNS_4pairIS3_S3_EEEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i54, HEAP32[i29 >> 2] | 0);
  __ZNSt3__16__treeINS_4pairIP6VertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i53, HEAP32[i31 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeINS_4pairIffEEP6VertexEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i52, HEAP32[i39 >> 2] | 0);
  i1 = HEAP32[i55 >> 2] | 0;
  i2 = i1;
  if (i1) {
   i3 = HEAP32[i40 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) HEAP32[i40 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
   __ZdlPv(i1);
  }
  i1 = HEAP32[i57 >> 2] | 0;
  if (!i1) {
   STACKTOP = i58;
   return;
  }
  i2 = HEAP32[i41 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i41 >> 2] = i2 + (~((i2 + -8 - i1 | 0) >>> 3) << 3);
  __ZdlPv(i1);
  STACKTOP = i58;
  return;
 }
}
function _malloc(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0;
 do if (i2 >>> 0 < 245) {
  i14 = i2 >>> 0 < 11 ? 16 : i2 + 11 & -8;
  i2 = i14 >>> 3;
  i8 = HEAP32[2541] | 0;
  i3 = i8 >>> i2;
  if (i3 & 3) {
   i2 = (i3 & 1 ^ 1) + i2 | 0;
   i4 = i2 << 1;
   i3 = 10204 + (i4 << 2) | 0;
   i4 = 10204 + (i4 + 2 << 2) | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   i6 = i5 + 8 | 0;
   i7 = HEAP32[i6 >> 2] | 0;
   do if ((i3 | 0) != (i7 | 0)) {
    if (i7 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i1 = i7 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i4 >> 2] = i7;
     break;
    } else _abort();
   } else HEAP32[2541] = i8 & ~(1 << i2); while (0);
   i38 = i2 << 3;
   HEAP32[i5 + 4 >> 2] = i38 | 3;
   i38 = i5 + (i38 | 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
   i38 = i6;
   return i38 | 0;
  }
  i7 = HEAP32[2543] | 0;
  if (i14 >>> 0 > i7 >>> 0) {
   if (i3) {
    i4 = 2 << i2;
    i4 = i3 << i2 & (i4 | 0 - i4);
    i4 = (i4 & 0 - i4) + -1 | 0;
    i9 = i4 >>> 12 & 16;
    i4 = i4 >>> i9;
    i5 = i4 >>> 5 & 8;
    i4 = i4 >>> i5;
    i6 = i4 >>> 2 & 4;
    i4 = i4 >>> i6;
    i3 = i4 >>> 1 & 2;
    i4 = i4 >>> i3;
    i2 = i4 >>> 1 & 1;
    i2 = (i5 | i9 | i6 | i3 | i2) + (i4 >>> i2) | 0;
    i4 = i2 << 1;
    i3 = 10204 + (i4 << 2) | 0;
    i4 = 10204 + (i4 + 2 << 2) | 0;
    i6 = HEAP32[i4 >> 2] | 0;
    i9 = i6 + 8 | 0;
    i5 = HEAP32[i9 >> 2] | 0;
    do if ((i3 | 0) != (i5 | 0)) {
     if (i5 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i6 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i4 >> 2] = i5;
      i10 = HEAP32[2543] | 0;
      break;
     } else _abort();
    } else {
     HEAP32[2541] = i8 & ~(1 << i2);
     i10 = i7;
    } while (0);
    i38 = i2 << 3;
    i7 = i38 - i14 | 0;
    HEAP32[i6 + 4 >> 2] = i14 | 3;
    i8 = i6 + i14 | 0;
    HEAP32[i6 + (i14 | 4) >> 2] = i7 | 1;
    HEAP32[i6 + i38 >> 2] = i7;
    if (i10) {
     i5 = HEAP32[2546] | 0;
     i3 = i10 >>> 3;
     i1 = i3 << 1;
     i4 = 10204 + (i1 << 2) | 0;
     i2 = HEAP32[2541] | 0;
     i3 = 1 << i3;
     if (i2 & i3) {
      i2 = 10204 + (i1 + 2 << 2) | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
       i11 = i2;
       i12 = i1;
      }
     } else {
      HEAP32[2541] = i2 | i3;
      i11 = 10204 + (i1 + 2 << 2) | 0;
      i12 = i4;
     }
     HEAP32[i11 >> 2] = i5;
     HEAP32[i12 + 12 >> 2] = i5;
     HEAP32[i5 + 8 >> 2] = i12;
     HEAP32[i5 + 12 >> 2] = i4;
    }
    HEAP32[2543] = i7;
    HEAP32[2546] = i8;
    i38 = i9;
    return i38 | 0;
   }
   i2 = HEAP32[2542] | 0;
   if (i2) {
    i3 = (i2 & 0 - i2) + -1 | 0;
    i37 = i3 >>> 12 & 16;
    i3 = i3 >>> i37;
    i36 = i3 >>> 5 & 8;
    i3 = i3 >>> i36;
    i38 = i3 >>> 2 & 4;
    i3 = i3 >>> i38;
    i2 = i3 >>> 1 & 2;
    i3 = i3 >>> i2;
    i4 = i3 >>> 1 & 1;
    i4 = HEAP32[10468 + ((i36 | i37 | i38 | i2 | i4) + (i3 >>> i4) << 2) >> 2] | 0;
    i3 = (HEAP32[i4 + 4 >> 2] & -8) - i14 | 0;
    i2 = i4;
    while (1) {
     i1 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i1) {
      i1 = HEAP32[i2 + 20 >> 2] | 0;
      if (!i1) {
       i9 = i3;
       break;
      }
     }
     i2 = (HEAP32[i1 + 4 >> 2] & -8) - i14 | 0;
     i38 = i2 >>> 0 < i3 >>> 0;
     i3 = i38 ? i2 : i3;
     i2 = i1;
     i4 = i38 ? i1 : i4;
    }
    i6 = HEAP32[2545] | 0;
    if (i4 >>> 0 < i6 >>> 0) _abort();
    i8 = i4 + i14 | 0;
    if (i4 >>> 0 >= i8 >>> 0) _abort();
    i7 = HEAP32[i4 + 24 >> 2] | 0;
    i3 = HEAP32[i4 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i4 | 0)) {
     i2 = i4 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i4 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i13 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (i5) {
       i1 = i5;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i5 = HEAP32[i3 >> 2] | 0;
      if (!i5) break; else {
       i1 = i5;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i6 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i13 = i1;
      break;
     }
    } else {
     i5 = HEAP32[i4 + 8 >> 2] | 0;
     if (i5 >>> 0 < i6 >>> 0) _abort();
     i1 = i5 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i4 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i5;
      i13 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i7) {
     i1 = HEAP32[i4 + 28 >> 2] | 0;
     i2 = 10468 + (i1 << 2) | 0;
     if ((i4 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i13;
      if (!i13) {
       HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
       break;
      }
     } else {
      if (i7 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
      i1 = i7 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i7 + 20 >> 2] = i13;
      if (!i13) break;
     }
     i2 = HEAP32[2545] | 0;
     if (i13 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i13 + 24 >> 2] = i7;
     i1 = HEAP32[i4 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i13 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     } while (0);
     i1 = HEAP32[i4 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
      HEAP32[i13 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i13;
      break;
     }
    } while (0);
    if (i9 >>> 0 < 16) {
     i38 = i9 + i14 | 0;
     HEAP32[i4 + 4 >> 2] = i38 | 3;
     i38 = i4 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } else {
     HEAP32[i4 + 4 >> 2] = i14 | 3;
     HEAP32[i4 + (i14 | 4) >> 2] = i9 | 1;
     HEAP32[i4 + (i9 + i14) >> 2] = i9;
     i1 = HEAP32[2543] | 0;
     if (i1) {
      i6 = HEAP32[2546] | 0;
      i3 = i1 >>> 3;
      i1 = i3 << 1;
      i5 = 10204 + (i1 << 2) | 0;
      i2 = HEAP32[2541] | 0;
      i3 = 1 << i3;
      if (i2 & i3) {
       i1 = 10204 + (i1 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
        i15 = i1;
        i16 = i2;
       }
      } else {
       HEAP32[2541] = i2 | i3;
       i15 = 10204 + (i1 + 2 << 2) | 0;
       i16 = i5;
      }
      HEAP32[i15 >> 2] = i6;
      HEAP32[i16 + 12 >> 2] = i6;
      HEAP32[i6 + 8 >> 2] = i16;
      HEAP32[i6 + 12 >> 2] = i5;
     }
     HEAP32[2543] = i9;
     HEAP32[2546] = i8;
    }
    i38 = i4 + 8 | 0;
    return i38 | 0;
   } else i16 = i14;
  } else i16 = i14;
 } else if (i2 >>> 0 <= 4294967231) {
  i2 = i2 + 11 | 0;
  i12 = i2 & -8;
  i11 = HEAP32[2542] | 0;
  if (i11) {
   i3 = 0 - i12 | 0;
   i2 = i2 >>> 8;
   if (i2) if (i12 >>> 0 > 16777215) i10 = 31; else {
    i16 = (i2 + 1048320 | 0) >>> 16 & 8;
    i21 = i2 << i16;
    i15 = (i21 + 520192 | 0) >>> 16 & 4;
    i21 = i21 << i15;
    i10 = (i21 + 245760 | 0) >>> 16 & 2;
    i10 = 14 - (i15 | i16 | i10) + (i21 << i10 >>> 15) | 0;
    i10 = i12 >>> (i10 + 7 | 0) & 1 | i10 << 1;
   } else i10 = 0;
   i2 = HEAP32[10468 + (i10 << 2) >> 2] | 0;
   L123 : do if (!i2) {
    i5 = 0;
    i2 = 0;
    i21 = 86;
   } else {
    i7 = i3;
    i5 = 0;
    i8 = i12 << ((i10 | 0) == 31 ? 0 : 25 - (i10 >>> 1) | 0);
    i9 = i2;
    i2 = 0;
    while (1) {
     i6 = HEAP32[i9 + 4 >> 2] & -8;
     i3 = i6 - i12 | 0;
     if (i3 >>> 0 < i7 >>> 0) if ((i6 | 0) == (i12 | 0)) {
      i6 = i9;
      i2 = i9;
      i21 = 90;
      break L123;
     } else i2 = i9; else i3 = i7;
     i21 = HEAP32[i9 + 20 >> 2] | 0;
     i9 = HEAP32[i9 + 16 + (i8 >>> 31 << 2) >> 2] | 0;
     i5 = (i21 | 0) == 0 | (i21 | 0) == (i9 | 0) ? i5 : i21;
     if (!i9) {
      i21 = 86;
      break;
     } else {
      i7 = i3;
      i8 = i8 << 1;
     }
    }
   } while (0);
   if ((i21 | 0) == 86) {
    if ((i5 | 0) == 0 & (i2 | 0) == 0) {
     i2 = 2 << i10;
     i2 = i11 & (i2 | 0 - i2);
     if (!i2) {
      i16 = i12;
      break;
     }
     i2 = (i2 & 0 - i2) + -1 | 0;
     i13 = i2 >>> 12 & 16;
     i2 = i2 >>> i13;
     i11 = i2 >>> 5 & 8;
     i2 = i2 >>> i11;
     i15 = i2 >>> 2 & 4;
     i2 = i2 >>> i15;
     i16 = i2 >>> 1 & 2;
     i2 = i2 >>> i16;
     i5 = i2 >>> 1 & 1;
     i5 = HEAP32[10468 + ((i11 | i13 | i15 | i16 | i5) + (i2 >>> i5) << 2) >> 2] | 0;
     i2 = 0;
    }
    if (!i5) {
     i8 = i3;
     i9 = i2;
    } else {
     i6 = i5;
     i21 = 90;
    }
   }
   if ((i21 | 0) == 90) while (1) {
    i21 = 0;
    i16 = (HEAP32[i6 + 4 >> 2] & -8) - i12 | 0;
    i5 = i16 >>> 0 < i3 >>> 0;
    i3 = i5 ? i16 : i3;
    i2 = i5 ? i6 : i2;
    i5 = HEAP32[i6 + 16 >> 2] | 0;
    if (i5) {
     i6 = i5;
     i21 = 90;
     continue;
    }
    i6 = HEAP32[i6 + 20 >> 2] | 0;
    if (!i6) {
     i8 = i3;
     i9 = i2;
     break;
    } else i21 = 90;
   }
   if ((i9 | 0) != 0 ? i8 >>> 0 < ((HEAP32[2543] | 0) - i12 | 0) >>> 0 : 0) {
    i5 = HEAP32[2545] | 0;
    if (i9 >>> 0 < i5 >>> 0) _abort();
    i7 = i9 + i12 | 0;
    if (i9 >>> 0 >= i7 >>> 0) _abort();
    i6 = HEAP32[i9 + 24 >> 2] | 0;
    i3 = HEAP32[i9 + 12 >> 2] | 0;
    do if ((i3 | 0) == (i9 | 0)) {
     i2 = i9 + 20 | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i2 = i9 + 16 | 0;
      i1 = HEAP32[i2 >> 2] | 0;
      if (!i1) {
       i14 = 0;
       break;
      }
     }
     while (1) {
      i3 = i1 + 20 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (i4) {
       i1 = i4;
       i2 = i3;
       continue;
      }
      i3 = i1 + 16 | 0;
      i4 = HEAP32[i3 >> 2] | 0;
      if (!i4) break; else {
       i1 = i4;
       i2 = i3;
      }
     }
     if (i2 >>> 0 < i5 >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = 0;
      i14 = i1;
      break;
     }
    } else {
     i4 = HEAP32[i9 + 8 >> 2] | 0;
     if (i4 >>> 0 < i5 >>> 0) _abort();
     i1 = i4 + 12 | 0;
     if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
     i2 = i3 + 8 | 0;
     if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
      HEAP32[i1 >> 2] = i3;
      HEAP32[i2 >> 2] = i4;
      i14 = i3;
      break;
     } else _abort();
    } while (0);
    do if (i6) {
     i1 = HEAP32[i9 + 28 >> 2] | 0;
     i2 = 10468 + (i1 << 2) | 0;
     if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
      HEAP32[i2 >> 2] = i14;
      if (!i14) {
       HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
       break;
      }
     } else {
      if (i6 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
      i1 = i6 + 16 | 0;
      if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
      if (!i14) break;
     }
     i2 = HEAP32[2545] | 0;
     if (i14 >>> 0 < i2 >>> 0) _abort();
     HEAP32[i14 + 24 >> 2] = i6;
     i1 = HEAP32[i9 + 16 >> 2] | 0;
     do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
      HEAP32[i14 + 16 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     } while (0);
     i1 = HEAP32[i9 + 20 >> 2] | 0;
     if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
      HEAP32[i14 + 20 >> 2] = i1;
      HEAP32[i1 + 24 >> 2] = i14;
      break;
     }
    } while (0);
    L199 : do if (i8 >>> 0 >= 16) {
     HEAP32[i9 + 4 >> 2] = i12 | 3;
     HEAP32[i9 + (i12 | 4) >> 2] = i8 | 1;
     HEAP32[i9 + (i8 + i12) >> 2] = i8;
     i1 = i8 >>> 3;
     if (i8 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 10204 + (i2 << 2) | 0;
      i3 = HEAP32[2541] | 0;
      i1 = 1 << i1;
      if (i3 & i1) {
       i1 = 10204 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
        i18 = i1;
        i19 = i2;
       }
      } else {
       HEAP32[2541] = i3 | i1;
       i18 = 10204 + (i2 + 2 << 2) | 0;
       i19 = i4;
      }
      HEAP32[i18 >> 2] = i7;
      HEAP32[i19 + 12 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i19;
      HEAP32[i9 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i8 >>> 8;
     if (i1) if (i8 >>> 0 > 16777215) i4 = 31; else {
      i37 = (i1 + 1048320 | 0) >>> 16 & 8;
      i38 = i1 << i37;
      i36 = (i38 + 520192 | 0) >>> 16 & 4;
      i38 = i38 << i36;
      i4 = (i38 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
      i4 = i8 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } else i4 = 0;
     i1 = 10468 + (i4 << 2) | 0;
     HEAP32[i9 + (i12 + 28) >> 2] = i4;
     HEAP32[i9 + (i12 + 20) >> 2] = 0;
     HEAP32[i9 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[2542] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[2542] = i2 | i3;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 24) >> 2] = i1;
      HEAP32[i9 + (i12 + 12) >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i7;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L217 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i8 | 0)) {
      i4 = i8 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i8 | 0)) {
        i24 = i3;
        break L217;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i7;
       HEAP32[i9 + (i12 + 24) >> 2] = i1;
       HEAP32[i9 + (i12 + 12) >> 2] = i7;
       HEAP32[i9 + (i12 + 8) >> 2] = i7;
       break L199;
      }
     } else i24 = i1; while (0);
     i1 = i24 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i38 = HEAP32[2545] | 0;
     if (i2 >>> 0 >= i38 >>> 0 & i24 >>> 0 >= i38 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i7;
      HEAP32[i1 >> 2] = i7;
      HEAP32[i9 + (i12 + 8) >> 2] = i2;
      HEAP32[i9 + (i12 + 12) >> 2] = i24;
      HEAP32[i9 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = i8 + i12 | 0;
     HEAP32[i9 + 4 >> 2] = i38 | 3;
     i38 = i9 + (i38 + 4) | 0;
     HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
    } while (0);
    i38 = i9 + 8 | 0;
    return i38 | 0;
   } else i16 = i12;
  } else i16 = i12;
 } else i16 = -1; while (0);
 i3 = HEAP32[2543] | 0;
 if (i3 >>> 0 >= i16 >>> 0) {
  i1 = i3 - i16 | 0;
  i2 = HEAP32[2546] | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[2546] = i2 + i16;
   HEAP32[2543] = i1;
   HEAP32[i2 + (i16 + 4) >> 2] = i1 | 1;
   HEAP32[i2 + i3 >> 2] = i1;
   HEAP32[i2 + 4 >> 2] = i16 | 3;
  } else {
   HEAP32[2543] = 0;
   HEAP32[2546] = 0;
   HEAP32[i2 + 4 >> 2] = i3 | 3;
   i38 = i2 + (i3 + 4) | 0;
   HEAP32[i38 >> 2] = HEAP32[i38 >> 2] | 1;
  }
  i38 = i2 + 8 | 0;
  return i38 | 0;
 }
 i2 = HEAP32[2544] | 0;
 if (i2 >>> 0 > i16 >>> 0) {
  i37 = i2 - i16 | 0;
  HEAP32[2544] = i37;
  i38 = HEAP32[2547] | 0;
  HEAP32[2547] = i38 + i16;
  HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
  HEAP32[i38 + 4 >> 2] = i16 | 3;
  i38 = i38 + 8 | 0;
  return i38 | 0;
 }
 do if (!(HEAP32[2659] | 0)) {
  i2 = _sysconf(30) | 0;
  if (!(i2 + -1 & i2)) {
   HEAP32[2661] = i2;
   HEAP32[2660] = i2;
   HEAP32[2662] = -1;
   HEAP32[2663] = -1;
   HEAP32[2664] = 0;
   HEAP32[2652] = 0;
   HEAP32[2659] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 i9 = i16 + 48 | 0;
 i8 = HEAP32[2661] | 0;
 i10 = i16 + 47 | 0;
 i7 = i8 + i10 | 0;
 i8 = 0 - i8 | 0;
 i11 = i7 & i8;
 if (i11 >>> 0 <= i16 >>> 0) {
  i38 = 0;
  return i38 | 0;
 }
 i2 = HEAP32[2651] | 0;
 if ((i2 | 0) != 0 ? (i19 = HEAP32[2649] | 0, i24 = i19 + i11 | 0, i24 >>> 0 <= i19 >>> 0 | i24 >>> 0 > i2 >>> 0) : 0) {
  i38 = 0;
  return i38 | 0;
 }
 L258 : do if (!(HEAP32[2652] & 4)) {
  i2 = HEAP32[2547] | 0;
  L260 : do if (i2) {
   i5 = 10612;
   while (1) {
    i3 = HEAP32[i5 >> 2] | 0;
    if (i3 >>> 0 <= i2 >>> 0 ? (i17 = i5 + 4 | 0, (i3 + (HEAP32[i17 >> 2] | 0) | 0) >>> 0 > i2 >>> 0) : 0) {
     i6 = i5;
     i2 = i17;
     break;
    }
    i5 = HEAP32[i5 + 8 >> 2] | 0;
    if (!i5) {
     i21 = 174;
     break L260;
    }
   }
   i3 = i7 - (HEAP32[2544] | 0) & i8;
   if (i3 >>> 0 < 2147483647) {
    i5 = _sbrk(i3 | 0) | 0;
    i24 = (i5 | 0) == ((HEAP32[i6 >> 2] | 0) + (HEAP32[i2 >> 2] | 0) | 0);
    i2 = i24 ? i3 : 0;
    if (i24) {
     if ((i5 | 0) != (-1 | 0)) {
      i22 = i5;
      i15 = i2;
      i21 = 194;
      break L258;
     }
    } else i21 = 184;
   } else i2 = 0;
  } else i21 = 174; while (0);
  do if ((i21 | 0) == 174) {
   i6 = _sbrk(0) | 0;
   if ((i6 | 0) != (-1 | 0)) {
    i2 = i6;
    i3 = HEAP32[2660] | 0;
    i5 = i3 + -1 | 0;
    if (!(i5 & i2)) i3 = i11; else i3 = i11 - i2 + (i5 + i2 & 0 - i3) | 0;
    i2 = HEAP32[2649] | 0;
    i5 = i2 + i3 | 0;
    if (i3 >>> 0 > i16 >>> 0 & i3 >>> 0 < 2147483647) {
     i24 = HEAP32[2651] | 0;
     if ((i24 | 0) != 0 ? i5 >>> 0 <= i2 >>> 0 | i5 >>> 0 > i24 >>> 0 : 0) {
      i2 = 0;
      break;
     }
     i5 = _sbrk(i3 | 0) | 0;
     i24 = (i5 | 0) == (i6 | 0);
     i2 = i24 ? i3 : 0;
     if (i24) {
      i22 = i6;
      i15 = i2;
      i21 = 194;
      break L258;
     } else i21 = 184;
    } else i2 = 0;
   } else i2 = 0;
  } while (0);
  L280 : do if ((i21 | 0) == 184) {
   i6 = 0 - i3 | 0;
   do if (i9 >>> 0 > i3 >>> 0 & (i3 >>> 0 < 2147483647 & (i5 | 0) != (-1 | 0)) ? (i20 = HEAP32[2661] | 0, i20 = i10 - i3 + i20 & 0 - i20, i20 >>> 0 < 2147483647) : 0) if ((_sbrk(i20 | 0) | 0) == (-1 | 0)) {
    _sbrk(i6 | 0) | 0;
    break L280;
   } else {
    i3 = i20 + i3 | 0;
    break;
   } while (0);
   if ((i5 | 0) != (-1 | 0)) {
    i22 = i5;
    i15 = i3;
    i21 = 194;
    break L258;
   }
  } while (0);
  HEAP32[2652] = HEAP32[2652] | 4;
  i21 = 191;
 } else {
  i2 = 0;
  i21 = 191;
 } while (0);
 if ((((i21 | 0) == 191 ? i11 >>> 0 < 2147483647 : 0) ? (i22 = _sbrk(i11 | 0) | 0, i23 = _sbrk(0) | 0, i22 >>> 0 < i23 >>> 0 & ((i22 | 0) != (-1 | 0) & (i23 | 0) != (-1 | 0))) : 0) ? (i25 = i23 - i22 | 0, i26 = i25 >>> 0 > (i16 + 40 | 0) >>> 0, i26) : 0) {
  i15 = i26 ? i25 : i2;
  i21 = 194;
 }
 if ((i21 | 0) == 194) {
  i2 = (HEAP32[2649] | 0) + i15 | 0;
  HEAP32[2649] = i2;
  if (i2 >>> 0 > (HEAP32[2650] | 0) >>> 0) HEAP32[2650] = i2;
  i7 = HEAP32[2547] | 0;
  L299 : do if (i7) {
   i6 = 10612;
   do {
    i2 = HEAP32[i6 >> 2] | 0;
    i3 = i6 + 4 | 0;
    i5 = HEAP32[i3 >> 2] | 0;
    if ((i22 | 0) == (i2 + i5 | 0)) {
     i27 = i2;
     i28 = i3;
     i29 = i5;
     i30 = i6;
     i21 = 204;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
   } while ((i6 | 0) != 0);
   if (((i21 | 0) == 204 ? (HEAP32[i30 + 12 >> 2] & 8 | 0) == 0 : 0) ? i7 >>> 0 < i22 >>> 0 & i7 >>> 0 >= i27 >>> 0 : 0) {
    HEAP32[i28 >> 2] = i29 + i15;
    i38 = (HEAP32[2544] | 0) + i15 | 0;
    i37 = i7 + 8 | 0;
    i37 = (i37 & 7 | 0) == 0 ? 0 : 0 - i37 & 7;
    i36 = i38 - i37 | 0;
    HEAP32[2547] = i7 + i37;
    HEAP32[2544] = i36;
    HEAP32[i7 + (i37 + 4) >> 2] = i36 | 1;
    HEAP32[i7 + (i38 + 4) >> 2] = 40;
    HEAP32[2548] = HEAP32[2663];
    break;
   }
   i2 = HEAP32[2545] | 0;
   if (i22 >>> 0 < i2 >>> 0) {
    HEAP32[2545] = i22;
    i2 = i22;
   }
   i3 = i22 + i15 | 0;
   i6 = 10612;
   while (1) {
    if ((HEAP32[i6 >> 2] | 0) == (i3 | 0)) {
     i5 = i6;
     i3 = i6;
     i21 = 212;
     break;
    }
    i6 = HEAP32[i6 + 8 >> 2] | 0;
    if (!i6) {
     i3 = 10612;
     break;
    }
   }
   if ((i21 | 0) == 212) if (!(HEAP32[i3 + 12 >> 2] & 8)) {
    HEAP32[i5 >> 2] = i22;
    i13 = i3 + 4 | 0;
    HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + i15;
    i13 = i22 + 8 | 0;
    i13 = (i13 & 7 | 0) == 0 ? 0 : 0 - i13 & 7;
    i10 = i22 + (i15 + 8) | 0;
    i10 = (i10 & 7 | 0) == 0 ? 0 : 0 - i10 & 7;
    i1 = i22 + (i10 + i15) | 0;
    i12 = i13 + i16 | 0;
    i14 = i22 + i12 | 0;
    i11 = i1 - (i22 + i13) - i16 | 0;
    HEAP32[i22 + (i13 + 4) >> 2] = i16 | 3;
    L324 : do if ((i1 | 0) != (i7 | 0)) {
     if ((i1 | 0) == (HEAP32[2546] | 0)) {
      i38 = (HEAP32[2543] | 0) + i11 | 0;
      HEAP32[2543] = i38;
      HEAP32[2546] = i14;
      HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
      HEAP32[i22 + (i38 + i12) >> 2] = i38;
      break;
     }
     i8 = i15 + 4 | 0;
     i3 = HEAP32[i22 + (i8 + i10) >> 2] | 0;
     if ((i3 & 3 | 0) == 1) {
      i9 = i3 & -8;
      i6 = i3 >>> 3;
      L332 : do if (i3 >>> 0 >= 256) {
       i7 = HEAP32[i22 + ((i10 | 24) + i15) >> 2] | 0;
       i4 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       do if ((i4 | 0) == (i1 | 0)) {
        i5 = i10 | 16;
        i4 = i22 + (i8 + i5) | 0;
        i3 = HEAP32[i4 >> 2] | 0;
        if (!i3) {
         i4 = i22 + (i5 + i15) | 0;
         i3 = HEAP32[i4 >> 2] | 0;
         if (!i3) {
          i35 = 0;
          break;
         }
        }
        while (1) {
         i5 = i3 + 20 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (i6) {
          i3 = i6;
          i4 = i5;
          continue;
         }
         i5 = i3 + 16 | 0;
         i6 = HEAP32[i5 >> 2] | 0;
         if (!i6) break; else {
          i3 = i6;
          i4 = i5;
         }
        }
        if (i4 >>> 0 < i2 >>> 0) _abort(); else {
         HEAP32[i4 >> 2] = 0;
         i35 = i3;
         break;
        }
       } else {
        i5 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 12 | 0;
        if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) _abort();
        i3 = i4 + 8 | 0;
        if ((HEAP32[i3 >> 2] | 0) == (i1 | 0)) {
         HEAP32[i2 >> 2] = i4;
         HEAP32[i3 >> 2] = i5;
         i35 = i4;
         break;
        } else _abort();
       } while (0);
       if (!i7) break;
       i2 = HEAP32[i22 + (i15 + 28 + i10) >> 2] | 0;
       i3 = 10468 + (i2 << 2) | 0;
       do if ((i1 | 0) != (HEAP32[i3 >> 2] | 0)) {
        if (i7 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
        i2 = i7 + 16 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) HEAP32[i2 >> 2] = i35; else HEAP32[i7 + 20 >> 2] = i35;
        if (!i35) break L332;
       } else {
        HEAP32[i3 >> 2] = i35;
        if (i35) break;
        HEAP32[2542] = HEAP32[2542] & ~(1 << i2);
        break L332;
       } while (0);
       i3 = HEAP32[2545] | 0;
       if (i35 >>> 0 < i3 >>> 0) _abort();
       HEAP32[i35 + 24 >> 2] = i7;
       i1 = i10 | 16;
       i2 = HEAP32[i22 + (i1 + i15) >> 2] | 0;
       do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
        HEAP32[i35 + 16 >> 2] = i2;
        HEAP32[i2 + 24 >> 2] = i35;
        break;
       } while (0);
       i1 = HEAP32[i22 + (i8 + i1) >> 2] | 0;
       if (!i1) break;
       if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
        HEAP32[i35 + 20 >> 2] = i1;
        HEAP32[i1 + 24 >> 2] = i35;
        break;
       }
      } else {
       i4 = HEAP32[i22 + ((i10 | 8) + i15) >> 2] | 0;
       i5 = HEAP32[i22 + (i15 + 12 + i10) >> 2] | 0;
       i3 = 10204 + (i6 << 1 << 2) | 0;
       do if ((i4 | 0) != (i3 | 0)) {
        if (i4 >>> 0 < i2 >>> 0) _abort();
        if ((HEAP32[i4 + 12 >> 2] | 0) == (i1 | 0)) break;
        _abort();
       } while (0);
       if ((i5 | 0) == (i4 | 0)) {
        HEAP32[2541] = HEAP32[2541] & ~(1 << i6);
        break;
       }
       do if ((i5 | 0) == (i3 | 0)) i31 = i5 + 8 | 0; else {
        if (i5 >>> 0 < i2 >>> 0) _abort();
        i2 = i5 + 8 | 0;
        if ((HEAP32[i2 >> 2] | 0) == (i1 | 0)) {
         i31 = i2;
         break;
        }
        _abort();
       } while (0);
       HEAP32[i4 + 12 >> 2] = i5;
       HEAP32[i31 >> 2] = i4;
      } while (0);
      i1 = i22 + ((i9 | i10) + i15) | 0;
      i5 = i9 + i11 | 0;
     } else i5 = i11;
     i1 = i1 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i1 >> 2] & -2;
     HEAP32[i22 + (i12 + 4) >> 2] = i5 | 1;
     HEAP32[i22 + (i5 + i12) >> 2] = i5;
     i1 = i5 >>> 3;
     if (i5 >>> 0 < 256) {
      i2 = i1 << 1;
      i4 = 10204 + (i2 << 2) | 0;
      i3 = HEAP32[2541] | 0;
      i1 = 1 << i1;
      do if (!(i3 & i1)) {
       HEAP32[2541] = i3 | i1;
       i36 = 10204 + (i2 + 2 << 2) | 0;
       i37 = i4;
      } else {
       i1 = 10204 + (i2 + 2 << 2) | 0;
       i2 = HEAP32[i1 >> 2] | 0;
       if (i2 >>> 0 >= (HEAP32[2545] | 0) >>> 0) {
        i36 = i1;
        i37 = i2;
        break;
       }
       _abort();
      } while (0);
      HEAP32[i36 >> 2] = i14;
      HEAP32[i37 + 12 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i37;
      HEAP32[i22 + (i12 + 12) >> 2] = i4;
      break;
     }
     i1 = i5 >>> 8;
     do if (!i1) i4 = 0; else {
      if (i5 >>> 0 > 16777215) {
       i4 = 31;
       break;
      }
      i36 = (i1 + 1048320 | 0) >>> 16 & 8;
      i37 = i1 << i36;
      i35 = (i37 + 520192 | 0) >>> 16 & 4;
      i37 = i37 << i35;
      i4 = (i37 + 245760 | 0) >>> 16 & 2;
      i4 = 14 - (i35 | i36 | i4) + (i37 << i4 >>> 15) | 0;
      i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
     } while (0);
     i1 = 10468 + (i4 << 2) | 0;
     HEAP32[i22 + (i12 + 28) >> 2] = i4;
     HEAP32[i22 + (i12 + 20) >> 2] = 0;
     HEAP32[i22 + (i12 + 16) >> 2] = 0;
     i2 = HEAP32[2542] | 0;
     i3 = 1 << i4;
     if (!(i2 & i3)) {
      HEAP32[2542] = i2 | i3;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 24) >> 2] = i1;
      HEAP32[i22 + (i12 + 12) >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i14;
      break;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     L418 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
      i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
      while (1) {
       i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) break;
       if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
        i38 = i3;
        break L418;
       } else {
        i4 = i4 << 1;
        i1 = i3;
       }
      }
      if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
       HEAP32[i2 >> 2] = i14;
       HEAP32[i22 + (i12 + 24) >> 2] = i1;
       HEAP32[i22 + (i12 + 12) >> 2] = i14;
       HEAP32[i22 + (i12 + 8) >> 2] = i14;
       break L324;
      }
     } else i38 = i1; while (0);
     i1 = i38 + 8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     i37 = HEAP32[2545] | 0;
     if (i2 >>> 0 >= i37 >>> 0 & i38 >>> 0 >= i37 >>> 0) {
      HEAP32[i2 + 12 >> 2] = i14;
      HEAP32[i1 >> 2] = i14;
      HEAP32[i22 + (i12 + 8) >> 2] = i2;
      HEAP32[i22 + (i12 + 12) >> 2] = i38;
      HEAP32[i22 + (i12 + 24) >> 2] = 0;
      break;
     } else _abort();
    } else {
     i38 = (HEAP32[2544] | 0) + i11 | 0;
     HEAP32[2544] = i38;
     HEAP32[2547] = i14;
     HEAP32[i22 + (i12 + 4) >> 2] = i38 | 1;
    } while (0);
    i38 = i22 + (i13 | 8) | 0;
    return i38 | 0;
   } else i3 = 10612;
   while (1) {
    i2 = HEAP32[i3 >> 2] | 0;
    if (i2 >>> 0 <= i7 >>> 0 ? (i1 = HEAP32[i3 + 4 >> 2] | 0, i4 = i2 + i1 | 0, i4 >>> 0 > i7 >>> 0) : 0) break;
    i3 = HEAP32[i3 + 8 >> 2] | 0;
   }
   i5 = i2 + (i1 + -39) | 0;
   i2 = i2 + (i1 + -47 + ((i5 & 7 | 0) == 0 ? 0 : 0 - i5 & 7)) | 0;
   i5 = i7 + 16 | 0;
   i2 = i2 >>> 0 < i5 >>> 0 ? i7 : i2;
   i1 = i2 + 8 | 0;
   i3 = i22 + 8 | 0;
   i3 = (i3 & 7 | 0) == 0 ? 0 : 0 - i3 & 7;
   i38 = i15 + -40 - i3 | 0;
   HEAP32[2547] = i22 + i3;
   HEAP32[2544] = i38;
   HEAP32[i22 + (i3 + 4) >> 2] = i38 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[2548] = HEAP32[2663];
   i3 = i2 + 4 | 0;
   HEAP32[i3 >> 2] = 27;
   HEAP32[i1 >> 2] = HEAP32[2653];
   HEAP32[i1 + 4 >> 2] = HEAP32[2654];
   HEAP32[i1 + 8 >> 2] = HEAP32[2655];
   HEAP32[i1 + 12 >> 2] = HEAP32[2656];
   HEAP32[2653] = i22;
   HEAP32[2654] = i15;
   HEAP32[2656] = 0;
   HEAP32[2655] = i1;
   i1 = i2 + 28 | 0;
   HEAP32[i1 >> 2] = 7;
   if ((i2 + 32 | 0) >>> 0 < i4 >>> 0) do {
    i38 = i1;
    i1 = i1 + 4 | 0;
    HEAP32[i1 >> 2] = 7;
   } while ((i38 + 8 | 0) >>> 0 < i4 >>> 0);
   if ((i2 | 0) != (i7 | 0)) {
    i6 = i2 - i7 | 0;
    HEAP32[i3 >> 2] = HEAP32[i3 >> 2] & -2;
    HEAP32[i7 + 4 >> 2] = i6 | 1;
    HEAP32[i2 >> 2] = i6;
    i1 = i6 >>> 3;
    if (i6 >>> 0 < 256) {
     i2 = i1 << 1;
     i4 = 10204 + (i2 << 2) | 0;
     i3 = HEAP32[2541] | 0;
     i1 = 1 << i1;
     if (i3 & i1) {
      i1 = 10204 + (i2 + 2 << 2) | 0;
      i2 = HEAP32[i1 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
       i32 = i1;
       i33 = i2;
      }
     } else {
      HEAP32[2541] = i3 | i1;
      i32 = 10204 + (i2 + 2 << 2) | 0;
      i33 = i4;
     }
     HEAP32[i32 >> 2] = i7;
     HEAP32[i33 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i33;
     HEAP32[i7 + 12 >> 2] = i4;
     break;
    }
    i1 = i6 >>> 8;
    if (i1) if (i6 >>> 0 > 16777215) i4 = 31; else {
     i37 = (i1 + 1048320 | 0) >>> 16 & 8;
     i38 = i1 << i37;
     i36 = (i38 + 520192 | 0) >>> 16 & 4;
     i38 = i38 << i36;
     i4 = (i38 + 245760 | 0) >>> 16 & 2;
     i4 = 14 - (i36 | i37 | i4) + (i38 << i4 >>> 15) | 0;
     i4 = i6 >>> (i4 + 7 | 0) & 1 | i4 << 1;
    } else i4 = 0;
    i3 = 10468 + (i4 << 2) | 0;
    HEAP32[i7 + 28 >> 2] = i4;
    HEAP32[i7 + 20 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    i1 = HEAP32[2542] | 0;
    i2 = 1 << i4;
    if (!(i1 & i2)) {
     HEAP32[2542] = i1 | i2;
     HEAP32[i3 >> 2] = i7;
     HEAP32[i7 + 24 >> 2] = i3;
     HEAP32[i7 + 12 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i7;
     break;
    }
    i1 = HEAP32[i3 >> 2] | 0;
    L459 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i6 | 0)) {
     i4 = i6 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
     while (1) {
      i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (!i3) break;
      if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i6 | 0)) {
       i34 = i3;
       break L459;
      } else {
       i4 = i4 << 1;
       i1 = i3;
      }
     }
     if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
      HEAP32[i2 >> 2] = i7;
      HEAP32[i7 + 24 >> 2] = i1;
      HEAP32[i7 + 12 >> 2] = i7;
      HEAP32[i7 + 8 >> 2] = i7;
      break L299;
     }
    } else i34 = i1; while (0);
    i1 = i34 + 8 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    i38 = HEAP32[2545] | 0;
    if (i2 >>> 0 >= i38 >>> 0 & i34 >>> 0 >= i38 >>> 0) {
     HEAP32[i2 + 12 >> 2] = i7;
     HEAP32[i1 >> 2] = i7;
     HEAP32[i7 + 8 >> 2] = i2;
     HEAP32[i7 + 12 >> 2] = i34;
     HEAP32[i7 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } else {
   i38 = HEAP32[2545] | 0;
   if ((i38 | 0) == 0 | i22 >>> 0 < i38 >>> 0) HEAP32[2545] = i22;
   HEAP32[2653] = i22;
   HEAP32[2654] = i15;
   HEAP32[2656] = 0;
   HEAP32[2550] = HEAP32[2659];
   HEAP32[2549] = -1;
   i1 = 0;
   do {
    i38 = i1 << 1;
    i37 = 10204 + (i38 << 2) | 0;
    HEAP32[10204 + (i38 + 3 << 2) >> 2] = i37;
    HEAP32[10204 + (i38 + 2 << 2) >> 2] = i37;
    i1 = i1 + 1 | 0;
   } while ((i1 | 0) != 32);
   i38 = i22 + 8 | 0;
   i38 = (i38 & 7 | 0) == 0 ? 0 : 0 - i38 & 7;
   i37 = i15 + -40 - i38 | 0;
   HEAP32[2547] = i22 + i38;
   HEAP32[2544] = i37;
   HEAP32[i22 + (i38 + 4) >> 2] = i37 | 1;
   HEAP32[i22 + (i15 + -36) >> 2] = 40;
   HEAP32[2548] = HEAP32[2663];
  } while (0);
  i1 = HEAP32[2544] | 0;
  if (i1 >>> 0 > i16 >>> 0) {
   i37 = i1 - i16 | 0;
   HEAP32[2544] = i37;
   i38 = HEAP32[2547] | 0;
   HEAP32[2547] = i38 + i16;
   HEAP32[i38 + (i16 + 4) >> 2] = i37 | 1;
   HEAP32[i38 + 4 >> 2] = i16 | 3;
   i38 = i38 + 8 | 0;
   return i38 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 i38 = 0;
 return i38 | 0;
}

function _printf_core(i49, i2, i50, i51, i52) {
 i49 = i49 | 0;
 i2 = i2 | 0;
 i50 = i50 | 0;
 i51 = i51 | 0;
 i52 = i52 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i53 = 0;
 i53 = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 i44 = i53 + 24 | 0;
 i46 = i53 + 16 | 0;
 i45 = i53 + 588 | 0;
 i39 = i53 + 576 | 0;
 i43 = i53;
 i36 = i53 + 536 | 0;
 i48 = i53 + 8 | 0;
 i47 = i53 + 528 | 0;
 i27 = (i49 | 0) != 0;
 i28 = i36 + 40 | 0;
 i35 = i28;
 i36 = i36 + 39 | 0;
 i37 = i48 + 4 | 0;
 i38 = i39 + 12 | 0;
 i39 = i39 + 11 | 0;
 i40 = i45;
 i41 = i38;
 i42 = i41 - i40 | 0;
 i29 = -2 - i40 | 0;
 i30 = i41 + 2 | 0;
 i31 = i44 + 288 | 0;
 i32 = i45 + 9 | 0;
 i33 = i32;
 i34 = i45 + 8 | 0;
 i1 = 0;
 i12 = i2;
 i3 = 0;
 i2 = 0;
 L1 : while (1) {
  do if ((i1 | 0) > -1) if ((i3 | 0) > (2147483647 - i1 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   i1 = -1;
   break;
  } else {
   i1 = i3 + i1 | 0;
   break;
  } while (0);
  i3 = HEAP8[i12 >> 0] | 0;
  if (!(i3 << 24 >> 24)) {
   i26 = 245;
   break;
  } else i4 = i12;
  L9 : while (1) {
   switch (i3 << 24 >> 24) {
   case 37:
    {
     i3 = i4;
     i26 = 9;
     break L9;
    }
   case 0:
    {
     i3 = i4;
     break L9;
    }
   default:
    {}
   }
   i25 = i4 + 1 | 0;
   i3 = HEAP8[i25 >> 0] | 0;
   i4 = i25;
  }
  L12 : do if ((i26 | 0) == 9) while (1) {
   i26 = 0;
   if ((HEAP8[i3 + 1 >> 0] | 0) != 37) break L12;
   i4 = i4 + 1 | 0;
   i3 = i3 + 2 | 0;
   if ((HEAP8[i3 >> 0] | 0) == 37) i26 = 9; else break;
  } while (0);
  i14 = i4 - i12 | 0;
  if (i27 ? (HEAP32[i49 >> 2] & 32 | 0) == 0 : 0) ___fwritex(i12, i14, i49) | 0;
  if ((i4 | 0) != (i12 | 0)) {
   i12 = i3;
   i3 = i14;
   continue;
  }
  i7 = i3 + 1 | 0;
  i4 = HEAP8[i7 >> 0] | 0;
  i5 = (i4 << 24 >> 24) + -48 | 0;
  if (i5 >>> 0 < 10) {
   i25 = (HEAP8[i3 + 2 >> 0] | 0) == 36;
   i7 = i25 ? i3 + 3 | 0 : i7;
   i4 = HEAP8[i7 >> 0] | 0;
   i10 = i25 ? i5 : -1;
   i2 = i25 ? 1 : i2;
  } else i10 = -1;
  i3 = i4 << 24 >> 24;
  L25 : do if ((i3 & -32 | 0) == 32) {
   i5 = 0;
   while (1) {
    if (!(1 << i3 + -32 & 75913)) {
     i8 = i5;
     i3 = i7;
     break L25;
    }
    i5 = 1 << (i4 << 24 >> 24) + -32 | i5;
    i7 = i7 + 1 | 0;
    i4 = HEAP8[i7 >> 0] | 0;
    i3 = i4 << 24 >> 24;
    if ((i3 & -32 | 0) != 32) {
     i8 = i5;
     i3 = i7;
     break;
    }
   }
  } else {
   i8 = 0;
   i3 = i7;
  } while (0);
  do if (i4 << 24 >> 24 == 42) {
   i5 = i3 + 1 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 2 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i2 = 1;
    i3 = i3 + 3 | 0;
    i4 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else {
    if (i2) {
     i1 = -1;
     break L1;
    }
    if (!i27) {
     i13 = i8;
     i3 = i5;
     i2 = 0;
     i25 = 0;
     break;
    }
    i2 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i4 = HEAP32[i2 >> 2] | 0;
    HEAP32[i50 >> 2] = i2 + 4;
    i2 = 0;
    i3 = i5;
   }
   if ((i4 | 0) < 0) {
    i13 = i8 | 8192;
    i25 = 0 - i4 | 0;
   } else {
    i13 = i8;
    i25 = i4;
   }
  } else {
   i5 = (i4 << 24 >> 24) + -48 | 0;
   if (i5 >>> 0 < 10) {
    i4 = 0;
    do {
     i4 = (i4 * 10 | 0) + i5 | 0;
     i3 = i3 + 1 | 0;
     i5 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
    } while (i5 >>> 0 < 10);
    if ((i4 | 0) < 0) {
     i1 = -1;
     break L1;
    } else {
     i13 = i8;
     i25 = i4;
    }
   } else {
    i13 = i8;
    i25 = 0;
   }
  } while (0);
  L46 : do if ((HEAP8[i3 >> 0] | 0) == 46) {
   i5 = i3 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (i4 << 24 >> 24 != 42) {
    i7 = (i4 << 24 >> 24) + -48 | 0;
    if (i7 >>> 0 < 10) {
     i3 = i5;
     i4 = 0;
    } else {
     i3 = i5;
     i7 = 0;
     break;
    }
    while (1) {
     i4 = (i4 * 10 | 0) + i7 | 0;
     i3 = i3 + 1 | 0;
     i7 = (HEAP8[i3 >> 0] | 0) + -48 | 0;
     if (i7 >>> 0 >= 10) {
      i7 = i4;
      break L46;
     }
    }
   }
   i5 = i3 + 2 | 0;
   i4 = (HEAP8[i5 >> 0] | 0) + -48 | 0;
   if (i4 >>> 0 < 10 ? (HEAP8[i3 + 3 >> 0] | 0) == 36 : 0) {
    HEAP32[i52 + (i4 << 2) >> 2] = 10;
    i3 = i3 + 4 | 0;
    i7 = HEAP32[i51 + ((HEAP8[i5 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if (i2) {
    i1 = -1;
    break L1;
   }
   if (i27) {
    i3 = (HEAP32[i50 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    i7 = HEAP32[i3 >> 2] | 0;
    HEAP32[i50 >> 2] = i3 + 4;
    i3 = i5;
   } else {
    i3 = i5;
    i7 = 0;
   }
  } else i7 = -1; while (0);
  i9 = 0;
  while (1) {
   i4 = (HEAP8[i3 >> 0] | 0) + -65 | 0;
   if (i4 >>> 0 > 57) {
    i1 = -1;
    break L1;
   }
   i5 = i3 + 1 | 0;
   i4 = HEAP8[26481 + (i9 * 58 | 0) + i4 >> 0] | 0;
   i8 = i4 & 255;
   if ((i8 + -1 | 0) >>> 0 < 8) {
    i3 = i5;
    i9 = i8;
   } else {
    i24 = i5;
    break;
   }
  }
  if (!(i4 << 24 >> 24)) {
   i1 = -1;
   break;
  }
  i5 = (i10 | 0) > -1;
  do if (i4 << 24 >> 24 == 19) if (i5) {
   i1 = -1;
   break L1;
  } else i26 = 52; else {
   if (i5) {
    HEAP32[i52 + (i10 << 2) >> 2] = i8;
    i22 = i51 + (i10 << 3) | 0;
    i23 = HEAP32[i22 + 4 >> 2] | 0;
    i26 = i43;
    HEAP32[i26 >> 2] = HEAP32[i22 >> 2];
    HEAP32[i26 + 4 >> 2] = i23;
    i26 = 52;
    break;
   }
   if (!i27) {
    i1 = 0;
    break L1;
   }
   _pop_arg(i43, i8, i50);
  } while (0);
  if ((i26 | 0) == 52 ? (i26 = 0, !i27) : 0) {
   i12 = i24;
   i3 = i14;
   continue;
  }
  i10 = HEAP8[i3 >> 0] | 0;
  i10 = (i9 | 0) != 0 & (i10 & 15 | 0) == 3 ? i10 & -33 : i10;
  i5 = i13 & -65537;
  i23 = (i13 & 8192 | 0) == 0 ? i13 : i5;
  L75 : do switch (i10 | 0) {
  case 110:
   switch (i9 | 0) {
   case 0:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 1:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 2:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 3:
    {
     HEAP16[HEAP32[i43 >> 2] >> 1] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 4:
    {
     HEAP8[HEAP32[i43 >> 2] >> 0] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 6:
    {
     HEAP32[HEAP32[i43 >> 2] >> 2] = i1;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   case 7:
    {
     i12 = HEAP32[i43 >> 2] | 0;
     HEAP32[i12 >> 2] = i1;
     HEAP32[i12 + 4 >> 2] = ((i1 | 0) < 0) << 31 >> 31;
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   default:
    {
     i12 = i24;
     i3 = i14;
     continue L1;
    }
   }
  case 112:
   {
    i9 = i23 | 8;
    i7 = i7 >>> 0 > 8 ? i7 : 8;
    i10 = 120;
    i26 = 64;
    break;
   }
  case 88:
  case 120:
   {
    i9 = i23;
    i26 = 64;
    break;
   }
  case 111:
   {
    i5 = i43;
    i4 = HEAP32[i5 >> 2] | 0;
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if ((i4 | 0) == 0 & (i5 | 0) == 0) i3 = i28; else {
     i3 = i28;
     do {
      i3 = i3 + -1 | 0;
      HEAP8[i3 >> 0] = i4 & 7 | 48;
      i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 3) | 0;
      i5 = tempRet0;
     } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    }
    if (!(i23 & 8)) {
     i4 = i23;
     i9 = 0;
     i8 = 26961;
     i26 = 77;
    } else {
     i9 = i35 - i3 + 1 | 0;
     i4 = i23;
     i7 = (i7 | 0) < (i9 | 0) ? i9 : i7;
     i9 = 0;
     i8 = 26961;
     i26 = 77;
    }
    break;
   }
  case 105:
  case 100:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i4 | 0) < 0) {
     i3 = _i64Subtract(0, 0, i3 | 0, i4 | 0) | 0;
     i4 = tempRet0;
     i5 = i43;
     HEAP32[i5 >> 2] = i3;
     HEAP32[i5 + 4 >> 2] = i4;
     i5 = 1;
     i8 = 26961;
     i26 = 76;
     break L75;
    }
    if (!(i23 & 2048)) {
     i8 = i23 & 1;
     i5 = i8;
     i8 = (i8 | 0) == 0 ? 26961 : 26963;
     i26 = 76;
    } else {
     i5 = 1;
     i8 = 26962;
     i26 = 76;
    }
    break;
   }
  case 117:
   {
    i4 = i43;
    i3 = HEAP32[i4 >> 2] | 0;
    i4 = HEAP32[i4 + 4 >> 2] | 0;
    i5 = 0;
    i8 = 26961;
    i26 = 76;
    break;
   }
  case 99:
   {
    HEAP8[i36 >> 0] = HEAP32[i43 >> 2];
    i12 = i36;
    i4 = 1;
    i9 = 0;
    i10 = 26961;
    i3 = i28;
    break;
   }
  case 109:
   {
    i3 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    i26 = 82;
    break;
   }
  case 115:
   {
    i3 = HEAP32[i43 >> 2] | 0;
    i3 = (i3 | 0) != 0 ? i3 : 26971;
    i26 = 82;
    break;
   }
  case 67:
   {
    HEAP32[i48 >> 2] = HEAP32[i43 >> 2];
    HEAP32[i37 >> 2] = 0;
    HEAP32[i43 >> 2] = i48;
    i7 = -1;
    i26 = 86;
    break;
   }
  case 83:
   {
    if (!i7) {
     _pad(i49, 32, i25, 0, i23);
     i3 = 0;
     i26 = 98;
    } else i26 = 86;
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    d6 = +HEAPF64[i43 >> 3];
    HEAP32[i46 >> 2] = 0;
    HEAPF64[tempDoublePtr >> 3] = d6;
    if ((HEAP32[tempDoublePtr + 4 >> 2] | 0) >= 0) if (!(i23 & 2048)) {
     i22 = i23 & 1;
     i21 = i22;
     i22 = (i22 | 0) == 0 ? 26979 : 26984;
    } else {
     i21 = 1;
     i22 = 26981;
    } else {
     d6 = -d6;
     i21 = 1;
     i22 = 26978;
    }
    HEAPF64[tempDoublePtr >> 3] = d6;
    i20 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if (i20 >>> 0 < 2146435072 | (i20 | 0) == 2146435072 & 0 < 0) {
     d11 = +_frexpl(d6, i46) * 2.0;
     i4 = d11 != 0.0;
     if (i4) HEAP32[i46 >> 2] = (HEAP32[i46 >> 2] | 0) + -1;
     i18 = i10 | 32;
     if ((i18 | 0) == 97) {
      i12 = i10 & 32;
      i14 = (i12 | 0) == 0 ? i22 : i22 + 9 | 0;
      i13 = i21 | 2;
      i3 = 12 - i7 | 0;
      do if (!(i7 >>> 0 > 11 | (i3 | 0) == 0)) {
       d6 = 8.0;
       do {
        i3 = i3 + -1 | 0;
        d6 = d6 * 16.0;
       } while ((i3 | 0) != 0);
       if ((HEAP8[i14 >> 0] | 0) == 45) {
        d6 = -(d6 + (-d11 - d6));
        break;
       } else {
        d6 = d11 + d6 - d6;
        break;
       }
      } else d6 = d11; while (0);
      i4 = HEAP32[i46 >> 2] | 0;
      i3 = (i4 | 0) < 0 ? 0 - i4 | 0 : i4;
      i3 = _fmt_u(i3, ((i3 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i3 | 0) == (i38 | 0)) {
       HEAP8[i39 >> 0] = 48;
       i3 = i39;
      }
      HEAP8[i3 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i9 = i3 + -2 | 0;
      HEAP8[i9 >> 0] = i10 + 15;
      i8 = (i7 | 0) < 1;
      i5 = (i23 & 8 | 0) == 0;
      i4 = i45;
      while (1) {
       i22 = ~~d6;
       i3 = i4 + 1 | 0;
       HEAP8[i4 >> 0] = HEAPU8[26945 + i22 >> 0] | i12;
       d6 = (d6 - +(i22 | 0)) * 16.0;
       do if ((i3 - i40 | 0) == 1) {
        if (i5 & (i8 & d6 == 0.0)) break;
        HEAP8[i3 >> 0] = 46;
        i3 = i4 + 2 | 0;
       } while (0);
       if (!(d6 != 0.0)) break; else i4 = i3;
      }
      i7 = (i7 | 0) != 0 & (i29 + i3 | 0) < (i7 | 0) ? i30 + i7 - i9 | 0 : i42 - i9 + i3 | 0;
      i5 = i7 + i13 | 0;
      _pad(i49, 32, i25, i5, i23);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i14, i13, i49) | 0;
      _pad(i49, 48, i25, i5, i23 ^ 65536);
      i3 = i3 - i40 | 0;
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i45, i3, i49) | 0;
      i4 = i41 - i9 | 0;
      _pad(i49, 48, i7 - (i3 + i4) | 0, 0, 0);
      if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i9, i4, i49) | 0;
      _pad(i49, 32, i25, i5, i23 ^ 8192);
      i3 = (i5 | 0) < (i25 | 0) ? i25 : i5;
      break;
     }
     i3 = (i7 | 0) < 0 ? 6 : i7;
     if (i4) {
      i4 = (HEAP32[i46 >> 2] | 0) + -28 | 0;
      HEAP32[i46 >> 2] = i4;
      d6 = d11 * 268435456.0;
     } else {
      d6 = d11;
      i4 = HEAP32[i46 >> 2] | 0;
     }
     i20 = (i4 | 0) < 0 ? i44 : i31;
     i19 = i20;
     i4 = i20;
     do {
      i17 = ~~d6 >>> 0;
      HEAP32[i4 >> 2] = i17;
      i4 = i4 + 4 | 0;
      d6 = (d6 - +(i17 >>> 0)) * 1.0e9;
     } while (d6 != 0.0);
     i5 = i4;
     i4 = HEAP32[i46 >> 2] | 0;
     if ((i4 | 0) > 0) {
      i8 = i20;
      while (1) {
       i9 = (i4 | 0) > 29 ? 29 : i4;
       i7 = i5 + -4 | 0;
       do if (i7 >>> 0 < i8 >>> 0) i7 = i8; else {
        i4 = 0;
        do {
         i17 = _bitshift64Shl(HEAP32[i7 >> 2] | 0, 0, i9 | 0) | 0;
         i17 = _i64Add(i17 | 0, tempRet0 | 0, i4 | 0, 0) | 0;
         i4 = tempRet0;
         i16 = ___uremdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         HEAP32[i7 >> 2] = i16;
         i4 = ___udivdi3(i17 | 0, i4 | 0, 1e9, 0) | 0;
         i7 = i7 + -4 | 0;
        } while (i7 >>> 0 >= i8 >>> 0);
        if (!i4) {
         i7 = i8;
         break;
        }
        i7 = i8 + -4 | 0;
        HEAP32[i7 >> 2] = i4;
       } while (0);
       while (1) {
        if (i5 >>> 0 <= i7 >>> 0) break;
        i4 = i5 + -4 | 0;
        if (!(HEAP32[i4 >> 2] | 0)) i5 = i4; else break;
       }
       i4 = (HEAP32[i46 >> 2] | 0) - i9 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) > 0) i8 = i7; else break;
      }
     } else i7 = i20;
     if ((i4 | 0) < 0) {
      i14 = ((i3 + 25 | 0) / 9 | 0) + 1 | 0;
      i15 = (i18 | 0) == 102;
      i12 = i7;
      while (1) {
       i13 = 0 - i4 | 0;
       i13 = (i13 | 0) > 9 ? 9 : i13;
       do if (i12 >>> 0 < i5 >>> 0) {
        i4 = (1 << i13) + -1 | 0;
        i8 = 1e9 >>> i13;
        i7 = 0;
        i9 = i12;
        do {
         i17 = HEAP32[i9 >> 2] | 0;
         HEAP32[i9 >> 2] = (i17 >>> i13) + i7;
         i7 = Math_imul(i17 & i4, i8) | 0;
         i9 = i9 + 4 | 0;
        } while (i9 >>> 0 < i5 >>> 0);
        i4 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12;
        if (!i7) {
         i7 = i4;
         break;
        }
        HEAP32[i5 >> 2] = i7;
        i7 = i4;
        i5 = i5 + 4 | 0;
       } else i7 = (HEAP32[i12 >> 2] | 0) == 0 ? i12 + 4 | 0 : i12; while (0);
       i4 = i15 ? i20 : i7;
       i5 = (i5 - i4 >> 2 | 0) > (i14 | 0) ? i4 + (i14 << 2) | 0 : i5;
       i4 = (HEAP32[i46 >> 2] | 0) + i13 | 0;
       HEAP32[i46 >> 2] = i4;
       if ((i4 | 0) >= 0) {
        i12 = i7;
        break;
       } else i12 = i7;
      }
     } else i12 = i7;
     do if (i12 >>> 0 < i5 >>> 0) {
      i4 = (i19 - i12 >> 2) * 9 | 0;
      i8 = HEAP32[i12 >> 2] | 0;
      if (i8 >>> 0 < 10) break; else i7 = 10;
      do {
       i7 = i7 * 10 | 0;
       i4 = i4 + 1 | 0;
      } while (i8 >>> 0 >= i7 >>> 0);
     } else i4 = 0; while (0);
     i16 = (i18 | 0) == 103;
     i17 = (i3 | 0) != 0;
     i7 = i3 - ((i18 | 0) != 102 ? i4 : 0) + ((i17 & i16) << 31 >> 31) | 0;
     if ((i7 | 0) < (((i5 - i19 >> 2) * 9 | 0) + -9 | 0)) {
      i9 = i7 + 9216 | 0;
      i15 = (i9 | 0) / 9 | 0;
      i7 = i20 + (i15 + -1023 << 2) | 0;
      i9 = ((i9 | 0) % 9 | 0) + 1 | 0;
      if ((i9 | 0) < 9) {
       i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i9 = i9 + 1 | 0;
       } while ((i9 | 0) != 9);
      } else i8 = 10;
      i13 = HEAP32[i7 >> 2] | 0;
      i14 = (i13 >>> 0) % (i8 >>> 0) | 0;
      if ((i14 | 0) == 0 ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) i8 = i12; else i26 = 163;
      do if ((i26 | 0) == 163) {
       i26 = 0;
       d11 = (((i13 >>> 0) / (i8 >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       i9 = (i8 | 0) / 2 | 0;
       do if (i14 >>> 0 < i9 >>> 0) d6 = .5; else {
        if ((i14 | 0) == (i9 | 0) ? (i20 + (i15 + -1022 << 2) | 0) == (i5 | 0) : 0) {
         d6 = 1.0;
         break;
        }
        d6 = 1.5;
       } while (0);
       do if (i21) {
        if ((HEAP8[i22 >> 0] | 0) != 45) break;
        d11 = -d11;
        d6 = -d6;
       } while (0);
       i9 = i13 - i14 | 0;
       HEAP32[i7 >> 2] = i9;
       if (!(d11 + d6 != d11)) {
        i8 = i12;
        break;
       }
       i18 = i9 + i8 | 0;
       HEAP32[i7 >> 2] = i18;
       if (i18 >>> 0 > 999999999) {
        i4 = i12;
        while (1) {
         i8 = i7 + -4 | 0;
         HEAP32[i7 >> 2] = 0;
         if (i8 >>> 0 < i4 >>> 0) {
          i4 = i4 + -4 | 0;
          HEAP32[i4 >> 2] = 0;
         }
         i18 = (HEAP32[i8 >> 2] | 0) + 1 | 0;
         HEAP32[i8 >> 2] = i18;
         if (i18 >>> 0 > 999999999) i7 = i8; else {
          i12 = i4;
          i7 = i8;
          break;
         }
        }
       }
       i4 = (i19 - i12 >> 2) * 9 | 0;
       i9 = HEAP32[i12 >> 2] | 0;
       if (i9 >>> 0 < 10) {
        i8 = i12;
        break;
       } else i8 = 10;
       do {
        i8 = i8 * 10 | 0;
        i4 = i4 + 1 | 0;
       } while (i9 >>> 0 >= i8 >>> 0);
       i8 = i12;
      } while (0);
      i18 = i7 + 4 | 0;
      i12 = i8;
      i5 = i5 >>> 0 > i18 >>> 0 ? i18 : i5;
     }
     i14 = 0 - i4 | 0;
     while (1) {
      if (i5 >>> 0 <= i12 >>> 0) {
       i15 = 0;
       i18 = i5;
       break;
      }
      i7 = i5 + -4 | 0;
      if (!(HEAP32[i7 >> 2] | 0)) i5 = i7; else {
       i15 = 1;
       i18 = i5;
       break;
      }
     }
     do if (i16) {
      i3 = (i17 & 1 ^ 1) + i3 | 0;
      if ((i3 | 0) > (i4 | 0) & (i4 | 0) > -5) {
       i10 = i10 + -1 | 0;
       i3 = i3 + -1 - i4 | 0;
      } else {
       i10 = i10 + -2 | 0;
       i3 = i3 + -1 | 0;
      }
      i5 = i23 & 8;
      if (i5) break;
      do if (i15) {
       i5 = HEAP32[i18 + -4 >> 2] | 0;
       if (!i5) {
        i7 = 9;
        break;
       }
       if (!((i5 >>> 0) % 10 | 0)) {
        i8 = 10;
        i7 = 0;
       } else {
        i7 = 0;
        break;
       }
       do {
        i8 = i8 * 10 | 0;
        i7 = i7 + 1 | 0;
       } while (((i5 >>> 0) % (i8 >>> 0) | 0 | 0) == 0);
      } else i7 = 9; while (0);
      i5 = ((i18 - i19 >> 2) * 9 | 0) + -9 | 0;
      if ((i10 | 32 | 0) == 102) {
       i5 = i5 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      } else {
       i5 = i5 + i4 - i7 | 0;
       i5 = (i5 | 0) < 0 ? 0 : i5;
       i3 = (i3 | 0) < (i5 | 0) ? i3 : i5;
       i5 = 0;
       break;
      }
     } else i5 = i23 & 8; while (0);
     i13 = i3 | i5;
     i8 = (i13 | 0) != 0 & 1;
     i9 = (i10 | 32 | 0) == 102;
     if (i9) {
      i4 = (i4 | 0) > 0 ? i4 : 0;
      i10 = 0;
     } else {
      i7 = (i4 | 0) < 0 ? i14 : i4;
      i7 = _fmt_u(i7, ((i7 | 0) < 0) << 31 >> 31, i38) | 0;
      if ((i41 - i7 | 0) < 2) do {
       i7 = i7 + -1 | 0;
       HEAP8[i7 >> 0] = 48;
      } while ((i41 - i7 | 0) < 2);
      HEAP8[i7 + -1 >> 0] = (i4 >> 31 & 2) + 43;
      i19 = i7 + -2 | 0;
      HEAP8[i19 >> 0] = i10;
      i4 = i41 - i19 | 0;
      i10 = i19;
     }
     i14 = i21 + 1 + i3 + i8 + i4 | 0;
     _pad(i49, 32, i25, i14, i23);
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i22, i21, i49) | 0;
     _pad(i49, 48, i25, i14, i23 ^ 65536);
     do if (i9) {
      i7 = i12 >>> 0 > i20 >>> 0 ? i20 : i12;
      i4 = i7;
      do {
       i5 = _fmt_u(HEAP32[i4 >> 2] | 0, 0, i32) | 0;
       do if ((i4 | 0) == (i7 | 0)) {
        if ((i5 | 0) != (i32 | 0)) break;
        HEAP8[i34 >> 0] = 48;
        i5 = i34;
       } else {
        if (i5 >>> 0 <= i45 >>> 0) break;
        do {
         i5 = i5 + -1 | 0;
         HEAP8[i5 >> 0] = 48;
        } while (i5 >>> 0 > i45 >>> 0);
       } while (0);
       if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i5, i33 - i5 | 0, i49) | 0;
       i4 = i4 + 4 | 0;
      } while (i4 >>> 0 <= i20 >>> 0);
      do if (i13) {
       if (HEAP32[i49 >> 2] & 32) break;
       ___fwritex(27013, 1, i49) | 0;
      } while (0);
      if ((i3 | 0) > 0 & i4 >>> 0 < i18 >>> 0) {
       i5 = i4;
       while (1) {
        i4 = _fmt_u(HEAP32[i5 >> 2] | 0, 0, i32) | 0;
        if (i4 >>> 0 > i45 >>> 0) do {
         i4 = i4 + -1 | 0;
         HEAP8[i4 >> 0] = 48;
        } while (i4 >>> 0 > i45 >>> 0);
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > 9 ? 9 : i3, i49) | 0;
        i5 = i5 + 4 | 0;
        i4 = i3 + -9 | 0;
        if (!((i3 | 0) > 9 & i5 >>> 0 < i18 >>> 0)) {
         i3 = i4;
         break;
        } else i3 = i4;
       }
      }
      _pad(i49, 48, i3 + 9 | 0, 9, 0);
     } else {
      i9 = i15 ? i18 : i12 + 4 | 0;
      if ((i3 | 0) > -1) {
       i8 = (i5 | 0) == 0;
       i7 = i12;
       do {
        i4 = _fmt_u(HEAP32[i7 >> 2] | 0, 0, i32) | 0;
        if ((i4 | 0) == (i32 | 0)) {
         HEAP8[i34 >> 0] = 48;
         i4 = i34;
        }
        do if ((i7 | 0) == (i12 | 0)) {
         i5 = i4 + 1 | 0;
         if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, 1, i49) | 0;
         if (i8 & (i3 | 0) < 1) {
          i4 = i5;
          break;
         }
         if (HEAP32[i49 >> 2] & 32) {
          i4 = i5;
          break;
         }
         ___fwritex(27013, 1, i49) | 0;
         i4 = i5;
        } else {
         if (i4 >>> 0 <= i45 >>> 0) break;
         do {
          i4 = i4 + -1 | 0;
          HEAP8[i4 >> 0] = 48;
         } while (i4 >>> 0 > i45 >>> 0);
        } while (0);
        i5 = i33 - i4 | 0;
        if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i4, (i3 | 0) > (i5 | 0) ? i5 : i3, i49) | 0;
        i3 = i3 - i5 | 0;
        i7 = i7 + 4 | 0;
       } while (i7 >>> 0 < i9 >>> 0 & (i3 | 0) > -1);
      }
      _pad(i49, 48, i3 + 18 | 0, 18, 0);
      if (HEAP32[i49 >> 2] & 32) break;
      ___fwritex(i10, i41 - i10 | 0, i49) | 0;
     } while (0);
     _pad(i49, 32, i25, i14, i23 ^ 8192);
     i3 = (i14 | 0) < (i25 | 0) ? i25 : i14;
    } else {
     i9 = (i10 & 32 | 0) != 0;
     i8 = d6 != d6 | 0.0 != 0.0;
     i4 = i8 ? 0 : i21;
     i7 = i4 + 3 | 0;
     _pad(i49, 32, i25, i7, i5);
     i3 = HEAP32[i49 >> 2] | 0;
     if (!(i3 & 32)) {
      ___fwritex(i22, i4, i49) | 0;
      i3 = HEAP32[i49 >> 2] | 0;
     }
     if (!(i3 & 32)) ___fwritex(i8 ? (i9 ? 27005 : 27009) : i9 ? 26997 : 27001, 3, i49) | 0;
     _pad(i49, 32, i25, i7, i23 ^ 8192);
     i3 = (i7 | 0) < (i25 | 0) ? i25 : i7;
    } while (0);
    i12 = i24;
    continue L1;
   }
  default:
   {
    i5 = i23;
    i4 = i7;
    i9 = 0;
    i10 = 26961;
    i3 = i28;
   }
  } while (0);
  L313 : do if ((i26 | 0) == 64) {
   i5 = i43;
   i4 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[i5 + 4 >> 2] | 0;
   i8 = i10 & 32;
   if (!((i4 | 0) == 0 & (i5 | 0) == 0)) {
    i3 = i28;
    do {
     i3 = i3 + -1 | 0;
     HEAP8[i3 >> 0] = HEAPU8[26945 + (i4 & 15) >> 0] | i8;
     i4 = _bitshift64Lshr(i4 | 0, i5 | 0, 4) | 0;
     i5 = tempRet0;
    } while (!((i4 | 0) == 0 & (i5 | 0) == 0));
    i26 = i43;
    if ((i9 & 8 | 0) == 0 | (HEAP32[i26 >> 2] | 0) == 0 & (HEAP32[i26 + 4 >> 2] | 0) == 0) {
     i4 = i9;
     i9 = 0;
     i8 = 26961;
     i26 = 77;
    } else {
     i4 = i9;
     i9 = 2;
     i8 = 26961 + (i10 >> 4) | 0;
     i26 = 77;
    }
   } else {
    i3 = i28;
    i4 = i9;
    i9 = 0;
    i8 = 26961;
    i26 = 77;
   }
  } else if ((i26 | 0) == 76) {
   i3 = _fmt_u(i3, i4, i28) | 0;
   i4 = i23;
   i9 = i5;
   i26 = 77;
  } else if ((i26 | 0) == 82) {
   i26 = 0;
   i23 = _memchr(i3, 0, i7) | 0;
   i22 = (i23 | 0) == 0;
   i12 = i3;
   i4 = i22 ? i7 : i23 - i3 | 0;
   i9 = 0;
   i10 = 26961;
   i3 = i22 ? i3 + i7 | 0 : i23;
  } else if ((i26 | 0) == 86) {
   i26 = 0;
   i4 = 0;
   i3 = 0;
   i8 = HEAP32[i43 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i8 >> 2] | 0;
    if (!i5) break;
    i3 = _wctomb(i47, i5) | 0;
    if ((i3 | 0) < 0 | i3 >>> 0 > (i7 - i4 | 0) >>> 0) break;
    i4 = i3 + i4 | 0;
    if (i7 >>> 0 > i4 >>> 0) i8 = i8 + 4 | 0; else break;
   }
   if ((i3 | 0) < 0) {
    i1 = -1;
    break L1;
   }
   _pad(i49, 32, i25, i4, i23);
   if (!i4) {
    i3 = 0;
    i26 = 98;
   } else {
    i5 = 0;
    i7 = HEAP32[i43 >> 2] | 0;
    while (1) {
     i3 = HEAP32[i7 >> 2] | 0;
     if (!i3) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     i3 = _wctomb(i47, i3) | 0;
     i5 = i3 + i5 | 0;
     if ((i5 | 0) > (i4 | 0)) {
      i3 = i4;
      i26 = 98;
      break L313;
     }
     if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i47, i3, i49) | 0;
     if (i5 >>> 0 >= i4 >>> 0) {
      i3 = i4;
      i26 = 98;
      break;
     } else i7 = i7 + 4 | 0;
    }
   }
  } while (0);
  if ((i26 | 0) == 98) {
   i26 = 0;
   _pad(i49, 32, i25, i3, i23 ^ 8192);
   i12 = i24;
   i3 = (i25 | 0) > (i3 | 0) ? i25 : i3;
   continue;
  }
  if ((i26 | 0) == 77) {
   i26 = 0;
   i5 = (i7 | 0) > -1 ? i4 & -65537 : i4;
   i4 = i43;
   i4 = (HEAP32[i4 >> 2] | 0) != 0 | (HEAP32[i4 + 4 >> 2] | 0) != 0;
   if ((i7 | 0) != 0 | i4) {
    i4 = (i4 & 1 ^ 1) + (i35 - i3) | 0;
    i12 = i3;
    i4 = (i7 | 0) > (i4 | 0) ? i7 : i4;
    i10 = i8;
    i3 = i28;
   } else {
    i12 = i28;
    i4 = 0;
    i10 = i8;
    i3 = i28;
   }
  }
  i8 = i3 - i12 | 0;
  i4 = (i4 | 0) < (i8 | 0) ? i8 : i4;
  i7 = i9 + i4 | 0;
  i3 = (i25 | 0) < (i7 | 0) ? i7 : i25;
  _pad(i49, 32, i3, i7, i5);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i10, i9, i49) | 0;
  _pad(i49, 48, i3, i7, i5 ^ 65536);
  _pad(i49, 48, i4, i8, 0);
  if (!(HEAP32[i49 >> 2] & 32)) ___fwritex(i12, i8, i49) | 0;
  _pad(i49, 32, i3, i7, i5 ^ 8192);
  i12 = i24;
 }
 L348 : do if ((i26 | 0) == 245) if (!i49) if (i2) {
  i1 = 1;
  while (1) {
   i2 = HEAP32[i52 + (i1 << 2) >> 2] | 0;
   if (!i2) break;
   _pop_arg(i51 + (i1 << 3) | 0, i2, i50);
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break L348;
   }
  }
  if ((i1 | 0) < 10) while (1) {
   if (HEAP32[i52 + (i1 << 2) >> 2] | 0) {
    i1 = -1;
    break L348;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) >= 10) {
    i1 = 1;
    break;
   }
  } else i1 = 1;
 } else i1 = 0; while (0);
 STACKTOP = i53;
 return i1 | 0;
}

function ___floatscan(i24, i2, i21) {
 i24 = i24 | 0;
 i2 = i2 | 0;
 i21 = i21 | 0;
 var d1 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, d32 = 0.0;
 i31 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i27 = i31;
 switch (i2 | 0) {
 case 0:
  {
   i30 = 24;
   i29 = -149;
   i19 = 4;
   break;
  }
 case 1:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 case 2:
  {
   i30 = 53;
   i29 = -1074;
   i19 = 4;
   break;
  }
 default:
  d1 = 0.0;
 }
 L4 : do if ((i19 | 0) == 4) {
  i23 = i24 + 4 | 0;
  i22 = i24 + 100 | 0;
  do {
   i2 = HEAP32[i23 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
    HEAP32[i23 >> 2] = i2 + 1;
    i2 = HEAPU8[i2 >> 0] | 0;
   } else i2 = ___shgetc(i24) | 0;
  } while ((_isspace(i2) | 0) != 0);
  L13 : do switch (i2 | 0) {
  case 43:
  case 45:
   {
    i3 = 1 - (((i2 | 0) == 45 & 1) << 1) | 0;
    i2 = HEAP32[i23 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i2 + 1;
     i2 = HEAPU8[i2 >> 0] | 0;
     i28 = i3;
     break L13;
    } else {
     i2 = ___shgetc(i24) | 0;
     i28 = i3;
     break L13;
    }
   }
  default:
   i28 = 1;
  } while (0);
  i3 = i2;
  i2 = 0;
  do {
   if ((i3 | 32 | 0) != (HEAP8[24128 + i2 >> 0] | 0)) break;
   do if (i2 >>> 0 < 7) {
    i3 = HEAP32[i23 >> 2] | 0;
    if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
     HEAP32[i23 >> 2] = i3 + 1;
     i3 = HEAPU8[i3 >> 0] | 0;
     break;
    } else {
     i3 = ___shgetc(i24) | 0;
     break;
    }
   } while (0);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < 8);
  L29 : do switch (i2 | 0) {
  case 8:
   break;
  case 3:
   {
    i19 = 23;
    break;
   }
  default:
   {
    i5 = (i21 | 0) != 0;
    if (i5 & i2 >>> 0 > 3) if ((i2 | 0) == 8) break L29; else {
     i19 = 23;
     break L29;
    }
    L34 : do if (!i2) {
     i2 = 0;
     do {
      if ((i3 | 32 | 0) != (HEAP8[27005 + i2 >> 0] | 0)) break L34;
      do if (i2 >>> 0 < 2) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
        break;
       } else {
        i3 = ___shgetc(i24) | 0;
        break;
       }
      } while (0);
      i2 = i2 + 1 | 0;
     } while (i2 >>> 0 < 3);
    } while (0);
    switch (i2 | 0) {
    case 3:
     {
      i2 = HEAP32[i23 >> 2] | 0;
      if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
       HEAP32[i23 >> 2] = i2 + 1;
       i2 = HEAPU8[i2 >> 0] | 0;
      } else i2 = ___shgetc(i24) | 0;
      if ((i2 | 0) == 40) i2 = 1; else {
       if (!(HEAP32[i22 >> 2] | 0)) {
        d1 = nan;
        break L4;
       }
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       d1 = nan;
       break L4;
      }
      while (1) {
       i3 = HEAP32[i23 >> 2] | 0;
       if (i3 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i3 + 1;
        i3 = HEAPU8[i3 >> 0] | 0;
       } else i3 = ___shgetc(i24) | 0;
       if (!((i3 + -48 | 0) >>> 0 < 10 | (i3 + -65 | 0) >>> 0 < 26) ? !((i3 | 0) == 95 | (i3 + -97 | 0) >>> 0 < 26) : 0) break;
       i2 = i2 + 1 | 0;
      }
      if ((i3 | 0) == 41) {
       d1 = nan;
       break L4;
      }
      i3 = (HEAP32[i22 >> 2] | 0) == 0;
      if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      if (!i5) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
       break L4;
      }
      if (!i2) {
       d1 = nan;
       break L4;
      }
      while (1) {
       i2 = i2 + -1 | 0;
       if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (!i2) {
        d1 = nan;
        break L4;
       }
      }
     }
    case 0:
     {
      do if ((i3 | 0) == 48) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 32 | 0) != 120) {
        if (!(HEAP32[i22 >> 2] | 0)) {
         i2 = 48;
         break;
        }
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i2 = 48;
        break;
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 0;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 0;
       }
       L94 : while (1) {
        switch (i2 | 0) {
        case 46:
         {
          i19 = 74;
          break L94;
         }
        case 48:
         break;
        default:
         {
          i17 = 0;
          i6 = 0;
          i16 = 0;
          i3 = 0;
          i8 = i5;
          i9 = 0;
          i15 = 0;
          d7 = 1.0;
          i5 = 0;
          d1 = 0.0;
          break L94;
         }
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
         i5 = 1;
         continue;
        } else {
         i2 = ___shgetc(i24) | 0;
         i5 = 1;
         continue;
        }
       }
       if ((i19 | 0) == 74) {
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        if ((i2 | 0) == 48) {
         i5 = 0;
         i3 = 0;
         do {
          i2 = HEAP32[i23 >> 2] | 0;
          if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
           HEAP32[i23 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i24) | 0;
          i5 = _i64Add(i5 | 0, i3 | 0, -1, -1) | 0;
          i3 = tempRet0;
         } while ((i2 | 0) == 48);
         i17 = 0;
         i6 = 0;
         i16 = i5;
         i8 = 1;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        } else {
         i17 = 0;
         i6 = 0;
         i16 = 0;
         i3 = 0;
         i8 = i5;
         i9 = 1;
         i15 = 0;
         d7 = 1.0;
         i5 = 0;
         d1 = 0.0;
        }
       }
       while (1) {
        i13 = i2 + -48 | 0;
        i10 = i2 | 32;
        if (i13 >>> 0 >= 10) {
         i14 = (i2 | 0) == 46;
         if (!(i14 | (i10 + -97 | 0) >>> 0 < 6)) {
          i10 = i16;
          i13 = i17;
          break;
         }
         if (i14) if (!i9) {
          i14 = i6;
          i3 = i17;
          i13 = i17;
          i9 = 1;
          i10 = i15;
          d4 = d7;
         } else {
          i10 = i16;
          i13 = i17;
          i2 = 46;
          break;
         } else i19 = 86;
        } else i19 = 86;
        if ((i19 | 0) == 86) {
         i19 = 0;
         i2 = (i2 | 0) > 57 ? i10 + -87 | 0 : i13;
         do if (!((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 8)) {
          if ((i17 | 0) < 0 | (i17 | 0) == 0 & i6 >>> 0 < 14) {
           d12 = d7 * .0625;
           i10 = i15;
           d4 = d12;
           d1 = d1 + d12 * +(i2 | 0);
           break;
          }
          if ((i15 | 0) != 0 | (i2 | 0) == 0) {
           i10 = i15;
           d4 = d7;
          } else {
           i10 = 1;
           d4 = d7;
           d1 = d1 + d7 * .5;
          }
         } else {
          i10 = i15;
          d4 = d7;
          i5 = i2 + (i5 << 4) | 0;
         } while (0);
         i6 = _i64Add(i6 | 0, i17 | 0, 1, 0) | 0;
         i14 = i16;
         i13 = tempRet0;
         i8 = 1;
        }
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i17 = i13;
         i16 = i14;
         i2 = HEAPU8[i2 >> 0] | 0;
         i15 = i10;
         d7 = d4;
         continue;
        } else {
         i17 = i13;
         i16 = i14;
         i2 = ___shgetc(i24) | 0;
         i15 = i10;
         d7 = d4;
         continue;
        }
       }
       if (!i8) {
        i2 = (HEAP32[i22 >> 2] | 0) == 0;
        if (!i2) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        if (i21) {
         if (!i2 ? (i18 = HEAP32[i23 >> 2] | 0, HEAP32[i23 >> 2] = i18 + -1, (i9 | 0) != 0) : 0) HEAP32[i23 >> 2] = i18 + -2;
        } else ___shlim(i24, 0);
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       i8 = (i9 | 0) == 0;
       i9 = i8 ? i6 : i10;
       i8 = i8 ? i13 : i3;
       if ((i13 | 0) < 0 | (i13 | 0) == 0 & i6 >>> 0 < 8) {
        i3 = i13;
        do {
         i5 = i5 << 4;
         i6 = _i64Add(i6 | 0, i3 | 0, 1, 0) | 0;
         i3 = tempRet0;
        } while ((i3 | 0) < 0 | (i3 | 0) == 0 & i6 >>> 0 < 8);
       }
       if ((i2 | 32 | 0) == 112) {
        i3 = _scanexp(i24, i21) | 0;
        i2 = tempRet0;
        if ((i3 | 0) == 0 & (i2 | 0) == -2147483648) {
         if (!i21) {
          ___shlim(i24, 0);
          d1 = 0.0;
          break L4;
         }
         if (!(HEAP32[i22 >> 2] | 0)) {
          i3 = 0;
          i2 = 0;
         } else {
          HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
          i3 = 0;
          i2 = 0;
         }
        }
       } else if (!(HEAP32[i22 >> 2] | 0)) {
        i3 = 0;
        i2 = 0;
       } else {
        HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
        i3 = 0;
        i2 = 0;
       }
       i27 = _bitshift64Shl(i9 | 0, i8 | 0, 2) | 0;
       i27 = _i64Add(i27 | 0, tempRet0 | 0, -32, -1) | 0;
       i2 = _i64Add(i27 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
       i3 = tempRet0;
       if (!i5) {
        d1 = +(i28 | 0) * 0.0;
        break L4;
       }
       if ((i3 | 0) > 0 | (i3 | 0) == 0 & i2 >>> 0 > (0 - i29 | 0) >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break L4;
       }
       i27 = i29 + -106 | 0;
       i26 = ((i27 | 0) < 0) << 31 >> 31;
       if ((i3 | 0) < (i26 | 0) | (i3 | 0) == (i26 | 0) & i2 >>> 0 < i27 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break L4;
       }
       if ((i5 | 0) > -1) {
        do {
         i26 = !(d1 >= .5);
         i27 = i26 & 1 | i5 << 1;
         i5 = i27 ^ 1;
         d1 = d1 + (i26 ? d1 : d1 + -1.0);
         i2 = _i64Add(i2 | 0, i3 | 0, -1, -1) | 0;
         i3 = tempRet0;
        } while ((i27 | 0) > -1);
        i6 = i2;
        d7 = d1;
       } else {
        i6 = i2;
        d7 = d1;
       }
       i2 = _i64Subtract(32, 0, i29 | 0, ((i29 | 0) < 0) << 31 >> 31 | 0) | 0;
       i2 = _i64Add(i6 | 0, i3 | 0, i2 | 0, tempRet0 | 0) | 0;
       i29 = tempRet0;
       if (0 > (i29 | 0) | 0 == (i29 | 0) & i30 >>> 0 > i2 >>> 0) if ((i2 | 0) < 0) {
        i2 = 0;
        i19 = 127;
       } else i19 = 125; else {
        i2 = i30;
        i19 = 125;
       }
       if ((i19 | 0) == 125) if ((i2 | 0) < 53) i19 = 127; else {
        i3 = i2;
        d4 = +(i28 | 0);
        d1 = 0.0;
       }
       if ((i19 | 0) == 127) {
        d1 = +(i28 | 0);
        i3 = i2;
        d4 = d1;
        d1 = +_copysignl(+_scalbn(1.0, 84 - i2 | 0), d1);
       }
       i30 = (i5 & 1 | 0) == 0 & (d7 != 0.0 & (i3 | 0) < 32);
       d1 = d4 * (i30 ? 0.0 : d7) + (d1 + d4 * +(((i30 & 1) + i5 | 0) >>> 0)) - d1;
       if (!(d1 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
       d1 = +_scalbnl(d1, i6);
       break L4;
      } else i2 = i3; while (0);
      i25 = i29 + i30 | 0;
      i26 = 0 - i25 | 0;
      i5 = 0;
      L184 : while (1) {
       switch (i2 | 0) {
       case 46:
        {
         i19 = 138;
         break L184;
        }
       case 48:
        break;
       default:
        {
         i3 = 0;
         i10 = 0;
         i9 = 0;
         break L184;
        }
       }
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
        i5 = 1;
        continue;
       } else {
        i2 = ___shgetc(i24) | 0;
        i5 = 1;
        continue;
       }
      }
      if ((i19 | 0) == 138) {
       i2 = HEAP32[i23 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
        HEAP32[i23 >> 2] = i2 + 1;
        i2 = HEAPU8[i2 >> 0] | 0;
       } else i2 = ___shgetc(i24) | 0;
       if ((i2 | 0) == 48) {
        i3 = 0;
        i2 = 0;
        while (1) {
         i3 = _i64Add(i3 | 0, i2 | 0, -1, -1) | 0;
         i5 = tempRet0;
         i2 = HEAP32[i23 >> 2] | 0;
         if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
          HEAP32[i23 >> 2] = i2 + 1;
          i2 = HEAPU8[i2 >> 0] | 0;
         } else i2 = ___shgetc(i24) | 0;
         if ((i2 | 0) == 48) i2 = i5; else {
          i10 = i5;
          i5 = 1;
          i9 = 1;
          break;
         }
        }
       } else {
        i3 = 0;
        i10 = 0;
        i9 = 1;
       }
      }
      HEAP32[i27 >> 2] = 0;
      i8 = i2 + -48 | 0;
      i6 = (i2 | 0) == 46;
      L203 : do if (i6 | i8 >>> 0 < 10) {
       i20 = i27 + 496 | 0;
       i17 = 0;
       i14 = 0;
       i15 = i6;
       i19 = i10;
       i13 = i5;
       i18 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       L205 : while (1) {
        do if (i15) if (!i18) {
         i3 = i17;
         i10 = i14;
         i18 = 1;
        } else {
         i10 = i19;
         i2 = i17;
         i8 = i14;
         break L205;
        } else {
         i15 = _i64Add(i17 | 0, i14 | 0, 1, 0) | 0;
         i14 = tempRet0;
         i16 = (i2 | 0) != 48;
         if ((i6 | 0) >= 125) {
          if (!i16) {
           i10 = i19;
           i17 = i15;
           break;
          }
          HEAP32[i20 >> 2] = HEAP32[i20 >> 2] | 1;
          i10 = i19;
          i17 = i15;
          break;
         }
         i10 = i27 + (i6 << 2) | 0;
         if (i5) i8 = i2 + -48 + ((HEAP32[i10 >> 2] | 0) * 10 | 0) | 0;
         HEAP32[i10 >> 2] = i8;
         i5 = i5 + 1 | 0;
         i8 = (i5 | 0) == 9;
         i10 = i19;
         i17 = i15;
         i13 = 1;
         i5 = i8 ? 0 : i5;
         i6 = (i8 & 1) + i6 | 0;
         i9 = i16 ? i15 : i9;
        } while (0);
        i2 = HEAP32[i23 >> 2] | 0;
        if (i2 >>> 0 < (HEAP32[i22 >> 2] | 0) >>> 0) {
         HEAP32[i23 >> 2] = i2 + 1;
         i2 = HEAPU8[i2 >> 0] | 0;
        } else i2 = ___shgetc(i24) | 0;
        i8 = i2 + -48 | 0;
        i15 = (i2 | 0) == 46;
        if (!(i15 | i8 >>> 0 < 10)) {
         i8 = i18;
         i19 = 161;
         break L203;
        } else i19 = i10;
       }
       i13 = (i13 | 0) != 0;
       i19 = 169;
      } else {
       i17 = 0;
       i14 = 0;
       i13 = i5;
       i8 = i9;
       i5 = 0;
       i6 = 0;
       i9 = 0;
       i19 = 161;
      } while (0);
      do if ((i19 | 0) == 161) {
       i20 = (i8 | 0) == 0;
       i3 = i20 ? i17 : i3;
       i10 = i20 ? i14 : i10;
       i13 = (i13 | 0) != 0;
       if (!((i2 | 32 | 0) == 101 & i13)) if ((i2 | 0) > -1) {
        i2 = i17;
        i8 = i14;
        i19 = 169;
        break;
       } else {
        i2 = i17;
        i8 = i14;
        i19 = 171;
        break;
       }
       i8 = _scanexp(i24, i21) | 0;
       i2 = tempRet0;
       if ((i8 | 0) == 0 & (i2 | 0) == -2147483648) {
        if (!i21) {
         ___shlim(i24, 0);
         d1 = 0.0;
         break;
        }
        if (!(HEAP32[i22 >> 2] | 0)) {
         i8 = 0;
         i2 = 0;
        } else {
         HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
         i8 = 0;
         i2 = 0;
        }
       }
       i3 = _i64Add(i8 | 0, i2 | 0, i3 | 0, i10 | 0) | 0;
       i13 = i17;
       i10 = tempRet0;
       i8 = i14;
       i19 = 173;
      } while (0);
      if ((i19 | 0) == 169) if (HEAP32[i22 >> 2] | 0) {
       HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
       if (i13) {
        i13 = i2;
        i19 = 173;
       } else i19 = 172;
      } else i19 = 171;
      if ((i19 | 0) == 171) if (i13) {
       i13 = i2;
       i19 = 173;
      } else i19 = 172;
      do if ((i19 | 0) == 172) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim(i24, 0);
       d1 = 0.0;
      } else if ((i19 | 0) == 173) {
       i2 = HEAP32[i27 >> 2] | 0;
       if (!i2) {
        d1 = +(i28 | 0) * 0.0;
        break;
       }
       if (((i8 | 0) < 0 | (i8 | 0) == 0 & i13 >>> 0 < 10) & ((i3 | 0) == (i13 | 0) & (i10 | 0) == (i8 | 0)) ? i30 >>> 0 > 30 | (i2 >>> i30 | 0) == 0 : 0) {
        d1 = +(i28 | 0) * +(i2 >>> 0);
        break;
       }
       i24 = (i29 | 0) / -2 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) > (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 > i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 17976931348623157.0e292 * 17976931348623157.0e292;
        break;
       }
       i24 = i29 + -106 | 0;
       i23 = ((i24 | 0) < 0) << 31 >> 31;
       if ((i10 | 0) < (i23 | 0) | (i10 | 0) == (i23 | 0) & i3 >>> 0 < i24 >>> 0) {
        HEAP32[(___errno_location() | 0) >> 2] = 34;
        d1 = +(i28 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
        break;
       }
       if (i5) {
        if ((i5 | 0) < 9) {
         i8 = i27 + (i6 << 2) | 0;
         i2 = HEAP32[i8 >> 2] | 0;
         do {
          i2 = i2 * 10 | 0;
          i5 = i5 + 1 | 0;
         } while ((i5 | 0) != 9);
         HEAP32[i8 >> 2] = i2;
        }
        i6 = i6 + 1 | 0;
       }
       if ((i9 | 0) < 9 ? (i9 | 0) <= (i3 | 0) & (i3 | 0) < 18 : 0) {
        if ((i3 | 0) == 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0);
         break;
        }
        if ((i3 | 0) < 9) {
         d1 = +(i28 | 0) * +((HEAP32[i27 >> 2] | 0) >>> 0) / +(HEAP32[6604 + (8 - i3 << 2) >> 2] | 0);
         break;
        }
        i24 = i30 + 27 + (Math_imul(i3, -3) | 0) | 0;
        i2 = HEAP32[i27 >> 2] | 0;
        if ((i24 | 0) > 30 | (i2 >>> i24 | 0) == 0) {
         d1 = +(i28 | 0) * +(i2 >>> 0) * +(HEAP32[6604 + (i3 + -10 << 2) >> 2] | 0);
         break;
        }
       }
       i2 = (i3 | 0) % 9 | 0;
       if (!i2) {
        i5 = 0;
        i2 = 0;
       } else {
        i13 = (i3 | 0) > -1 ? i2 : i2 + 9 | 0;
        i8 = HEAP32[6604 + (8 - i13 << 2) >> 2] | 0;
        if (i6) {
         i9 = 1e9 / (i8 | 0) | 0;
         i5 = 0;
         i2 = 0;
         i10 = 0;
         do {
          i22 = i27 + (i10 << 2) | 0;
          i23 = HEAP32[i22 >> 2] | 0;
          i24 = ((i23 >>> 0) / (i8 >>> 0) | 0) + i2 | 0;
          HEAP32[i22 >> 2] = i24;
          i2 = Math_imul((i23 >>> 0) % (i8 >>> 0) | 0, i9) | 0;
          i24 = (i10 | 0) == (i5 | 0) & (i24 | 0) == 0;
          i10 = i10 + 1 | 0;
          i3 = i24 ? i3 + -9 | 0 : i3;
          i5 = i24 ? i10 & 127 : i5;
         } while ((i10 | 0) != (i6 | 0));
         if (i2) {
          HEAP32[i27 + (i6 << 2) >> 2] = i2;
          i6 = i6 + 1 | 0;
         }
        } else {
         i5 = 0;
         i6 = 0;
        }
        i2 = 0;
        i3 = 9 - i13 + i3 | 0;
       }
       L284 : while (1) {
        i14 = (i3 | 0) < 18;
        i15 = (i3 | 0) == 18;
        i16 = i27 + (i5 << 2) | 0;
        do {
         if (!i14) {
          if (!i15) break L284;
          if ((HEAP32[i16 >> 2] | 0) >>> 0 >= 9007199) {
           i3 = 18;
           break L284;
          }
         }
         i8 = 0;
         i9 = i6 + 127 | 0;
         while (1) {
          i13 = i9 & 127;
          i10 = i27 + (i13 << 2) | 0;
          i9 = _bitshift64Shl(HEAP32[i10 >> 2] | 0, 0, 29) | 0;
          i9 = _i64Add(i9 | 0, tempRet0 | 0, i8 | 0, 0) | 0;
          i8 = tempRet0;
          if (i8 >>> 0 > 0 | (i8 | 0) == 0 & i9 >>> 0 > 1e9) {
           i24 = ___udivdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i9 = ___uremdi3(i9 | 0, i8 | 0, 1e9, 0) | 0;
           i8 = i24;
          } else i8 = 0;
          HEAP32[i10 >> 2] = i9;
          i24 = (i13 | 0) == (i5 | 0);
          i6 = (i13 | 0) != (i6 + 127 & 127 | 0) | i24 ? i6 : (i9 | 0) == 0 ? i13 : i6;
          if (i24) break; else i9 = i13 + -1 | 0;
         }
         i2 = i2 + -29 | 0;
        } while ((i8 | 0) == 0);
        i5 = i5 + 127 & 127;
        if ((i5 | 0) == (i6 | 0)) {
         i24 = i6 + 127 & 127;
         i6 = i27 + ((i6 + 126 & 127) << 2) | 0;
         HEAP32[i6 >> 2] = HEAP32[i6 >> 2] | HEAP32[i27 + (i24 << 2) >> 2];
         i6 = i24;
        }
        HEAP32[i27 + (i5 << 2) >> 2] = i8;
        i3 = i3 + 9 | 0;
       }
       L302 : while (1) {
        i17 = i6 + 1 & 127;
        i16 = i27 + ((i6 + 127 & 127) << 2) | 0;
        while (1) {
         i14 = (i3 | 0) == 18;
         i15 = (i3 | 0) > 27 ? 9 : 1;
         i13 = i14 ^ 1;
         while (1) {
          i9 = i5 & 127;
          i10 = (i9 | 0) == (i6 | 0);
          do if (!i10) {
           i8 = HEAP32[i27 + (i9 << 2) >> 2] | 0;
           if (i8 >>> 0 < 9007199) {
            i19 = 219;
            break;
           }
           if (i8 >>> 0 > 9007199) break;
           i8 = i5 + 1 & 127;
           if ((i8 | 0) == (i6 | 0)) {
            i19 = 219;
            break;
           }
           i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
           if (i8 >>> 0 < 254740991) {
            i19 = 219;
            break;
           }
           if (!(i8 >>> 0 > 254740991 | i13)) {
            i3 = i9;
            break L302;
           }
          } else i19 = 219; while (0);
          if ((i19 | 0) == 219 ? (i19 = 0, i14) : 0) {
           i19 = 220;
           break L302;
          }
          i2 = i2 + i15 | 0;
          if ((i5 | 0) == (i6 | 0)) i5 = i6; else break;
         }
         i13 = (1 << i15) + -1 | 0;
         i14 = 1e9 >>> i15;
         i9 = i5;
         i8 = 0;
         i10 = i5;
         while (1) {
          i23 = i27 + (i10 << 2) | 0;
          i24 = HEAP32[i23 >> 2] | 0;
          i5 = (i24 >>> i15) + i8 | 0;
          HEAP32[i23 >> 2] = i5;
          i8 = Math_imul(i24 & i13, i14) | 0;
          i5 = (i10 | 0) == (i9 | 0) & (i5 | 0) == 0;
          i10 = i10 + 1 & 127;
          i3 = i5 ? i3 + -9 | 0 : i3;
          i5 = i5 ? i10 : i9;
          if ((i10 | 0) == (i6 | 0)) break; else i9 = i5;
         }
         if (!i8) continue;
         if ((i17 | 0) != (i5 | 0)) break;
         HEAP32[i16 >> 2] = HEAP32[i16 >> 2] | 1;
        }
        HEAP32[i27 + (i6 << 2) >> 2] = i8;
        i6 = i17;
       }
       if ((i19 | 0) == 220) if (i10) {
        HEAP32[i27 + (i17 + -1 << 2) >> 2] = 0;
        i3 = i6;
        i6 = i17;
       } else i3 = i9;
       d1 = +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0);
       i3 = i5 + 1 & 127;
       if ((i3 | 0) == (i6 | 0)) {
        i6 = i5 + 2 & 127;
        HEAP32[i27 + (i6 + -1 << 2) >> 2] = 0;
       }
       d12 = +(i28 | 0);
       d4 = d12 * (d1 * 1.0e9 + +((HEAP32[i27 + (i3 << 2) >> 2] | 0) >>> 0));
       i14 = i2 + 53 | 0;
       i10 = i14 - i29 | 0;
       i13 = (i10 | 0) < (i30 | 0);
       i3 = i13 & 1;
       i9 = i13 ? ((i10 | 0) < 0 ? 0 : i10) : i30;
       if ((i9 | 0) < 53) {
        d32 = +_copysignl(+_scalbn(1.0, 105 - i9 | 0), d4);
        d7 = +_fmodl(d4, +_scalbn(1.0, 53 - i9 | 0));
        d11 = d32;
        d1 = d7;
        d7 = d32 + (d4 - d7);
       } else {
        d11 = 0.0;
        d1 = 0.0;
        d7 = d4;
       }
       i8 = i5 + 2 & 127;
       do if ((i8 | 0) == (i6 | 0)) d4 = d1; else {
        i8 = HEAP32[i27 + (i8 << 2) >> 2] | 0;
        do if (i8 >>> 0 >= 5e8) {
         if (i8 >>> 0 > 5e8) {
          d1 = d12 * .75 + d1;
          break;
         }
         if ((i5 + 3 & 127 | 0) == (i6 | 0)) {
          d1 = d12 * .5 + d1;
          break;
         } else {
          d1 = d12 * .75 + d1;
          break;
         }
        } else {
         if ((i8 | 0) == 0 ? (i5 + 3 & 127 | 0) == (i6 | 0) : 0) break;
         d1 = d12 * .25 + d1;
        } while (0);
        if ((53 - i9 | 0) <= 1) {
         d4 = d1;
         break;
        }
        if (+_fmodl(d1, 1.0) != 0.0) {
         d4 = d1;
         break;
        }
        d4 = d1 + 1.0;
       } while (0);
       d1 = d7 + d4 - d11;
       do if ((i14 & 2147483647 | 0) > (-2 - i25 | 0)) {
        if (+Math_abs(+d1) >= 9007199254740992.0) {
         i3 = i13 & (i9 | 0) == (i10 | 0) ? 0 : i3;
         i2 = i2 + 1 | 0;
         d1 = d1 * .5;
        }
        if ((i2 + 50 | 0) <= (i26 | 0) ? !(d4 != 0.0 & (i3 | 0) != 0) : 0) break;
        HEAP32[(___errno_location() | 0) >> 2] = 34;
       } while (0);
       d1 = +_scalbnl(d1, i2);
      } while (0);
      break L4;
     }
    default:
     {
      if (HEAP32[i22 >> 2] | 0) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim(i24, 0);
      d1 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((i19 | 0) == 23) {
   i3 = (HEAP32[i22 >> 2] | 0) == 0;
   if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
   if ((i21 | 0) != 0 & i2 >>> 0 > 3) do {
    if (!i3) HEAP32[i23 >> 2] = (HEAP32[i23 >> 2] | 0) + -1;
    i2 = i2 + -1 | 0;
   } while (i2 >>> 0 > 3);
  }
  d1 = +(i28 | 0) * inf;
 } while (0);
 STACKTOP = i31;
 return +d1;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i37, i38, i2, i3, i4, i39, i31, i26, i34, i35, i1) {
 i37 = i37 | 0;
 i38 = i38 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i39 = i39 | 0;
 i31 = i31 | 0;
 i26 = i26 | 0;
 i34 = i34 | 0;
 i35 = i35 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i32 = 0, i33 = 0, i36 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0;
 i48 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i25 = i48 + 496 | 0;
 i8 = i48 + 96 | 0;
 i47 = i48 + 88 | 0;
 i30 = i48 + 80 | 0;
 i29 = i48 + 76 | 0;
 i32 = i48 + 500 | 0;
 i27 = i48 + 72 | 0;
 i33 = i48 + 68 | 0;
 i42 = i48 + 56 | 0;
 i46 = i48 + 44 | 0;
 i44 = i48 + 32 | 0;
 i43 = i48 + 20 | 0;
 i45 = i48 + 8 | 0;
 i28 = i48 + 4 | 0;
 i40 = i48;
 HEAP32[i25 >> 2] = i1;
 HEAP32[i47 >> 2] = i8;
 i41 = i47 + 4 | 0;
 HEAP32[i41 >> 2] = 184;
 HEAP32[i30 >> 2] = i8;
 HEAP32[i29 >> 2] = i8 + 400;
 HEAP32[i42 >> 2] = 0;
 HEAP32[i42 + 4 >> 2] = 0;
 HEAP32[i42 + 8 >> 2] = 0;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i44 >> 2] = 0;
 HEAP32[i44 + 4 >> 2] = 0;
 HEAP32[i44 + 8 >> 2] = 0;
 HEAP32[i43 >> 2] = 0;
 HEAP32[i43 + 4 >> 2] = 0;
 HEAP32[i43 + 8 >> 2] = 0;
 HEAP32[i45 >> 2] = 0;
 HEAP32[i45 + 4 >> 2] = 0;
 HEAP32[i45 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i2, i3, i32, i27, i33, i42, i46, i44, i43, i28);
 HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
 i21 = i44 + 4 | 0;
 i22 = i43 + 4 | 0;
 i23 = i43 + 8 | 0;
 i24 = i44 + 8 | 0;
 i13 = (i4 & 512 | 0) != 0;
 i14 = i46 + 8 | 0;
 i15 = i46 + 4 | 0;
 i16 = i45 + 4 | 0;
 i17 = i45 + 8 | 0;
 i18 = i32 + 3 | 0;
 i19 = i42 + 4 | 0;
 i20 = 0;
 i7 = 0;
 L1 : while (1) {
  i1 = HEAP32[i37 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i37 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i37 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i38 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i12 = i2;
    break;
   } else {
    i36 = 217;
    break L1;
   } else {
    HEAP32[i38 >> 2] = 0;
    i36 = 15;
    break;
   }
  } else i36 = 15; while (0);
  if ((i36 | 0) == 15) {
   i36 = 0;
   if (i3) {
    i36 = 217;
    break;
   } else i12 = 0;
  }
  L25 : do switch (HEAP8[i32 + i20 >> 0] | 0) {
  case 1:
   {
    if ((i20 | 0) != 3) {
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 31](i26, 8192, i1) | 0)) {
      i36 = 28;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i2 >> 2] = i3 + 4;
      i1 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 0:
   {
    if ((i20 | 0) != 3) {
     i1 = i12;
     i4 = i12;
     i36 = 30;
    }
    break;
   }
  case 3:
   {
    i5 = HEAP8[i44 >> 0] | 0;
    i1 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i21 >> 2] | 0;
    i3 = HEAP8[i43 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i22 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i4 = (i1 | 0) == 0;
     i6 = HEAP32[i37 >> 2] | 0;
     i9 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i9 | 0) == (i1 | 0);
     if (i4 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i9 >> 2] | 0;
      if (i4) {
       if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) break L25;
       i1 = HEAP32[i37 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
       HEAP8[i31 >> 0] = 1;
       i12 = HEAP8[i43 >> 0] | 0;
       i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
       break L25;
      }
      if ((i1 | 0) != (HEAP32[((HEAP8[i44 >> 0] & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
       HEAP8[i31 >> 0] = 1;
       break L25;
      }
      i1 = HEAP32[i37 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i2) {
      i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i37 >> 2] | 0;
      i5 = HEAP8[i44 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i4 = HEAP32[i9 >> 2] | 0;
      i3 = i9;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i4 | 0) == (HEAP32[((i5 & 1) == 0 ? i21 : HEAP32[i24 >> 2] | 0) >> 2] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 4;
      i12 = HEAP8[i44 >> 0] | 0;
      i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) >>> 0 > 1 ? i44 : i7;
      break L25;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAP32[i3 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[((HEAP8[i43 >> 0] & 1) == 0 ? i22 : HEAP32[i23 >> 2] | 0) >> 2] | 0)) {
      i36 = 86;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     HEAP8[i31 >> 0] = 1;
     i12 = HEAP8[i43 >> 0] | 0;
     i7 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i22 >> 2] | 0) >>> 0 > 1 ? i43 : i7;
    }
    break;
   }
  case 2:
   {
    if (!(i20 >>> 0 < 2 | (i7 | 0) != 0) ? !(i13 | (i20 | 0) == 2 & (HEAP8[i18 >> 0] | 0) != 0) : 0) {
     i7 = 0;
     break L25;
    }
    i4 = HEAP8[i46 >> 0] | 0;
    i3 = HEAP32[i14 >> 2] | 0;
    i2 = (i4 & 1) == 0 ? i15 : i3;
    i1 = i2;
    L86 : do if ((i20 | 0) != 0 ? (HEAPU8[i32 + (i20 + -1) >> 0] | 0) < 2 : 0) {
     i11 = (i4 & 1) == 0;
     L89 : do if ((i2 | 0) != ((i11 ? i15 : i3) + ((i11 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
      i4 = i2;
      while (1) {
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 31](i26, 8192, HEAP32[i4 >> 2] | 0) | 0)) break;
       i4 = i4 + 4 | 0;
       i1 = i4;
       i2 = HEAP8[i46 >> 0] | 0;
       i3 = HEAP32[i14 >> 2] | 0;
       i11 = (i2 & 1) == 0;
       if ((i4 | 0) == ((i11 ? i15 : i3) + ((i11 ? (i2 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) {
        i4 = i2;
        break L89;
       }
      }
      i4 = HEAP8[i46 >> 0] | 0;
      i3 = HEAP32[i14 >> 2] | 0;
     } while (0);
     i6 = (i4 & 1) == 0 ? i15 : i3;
     i2 = i6;
     i9 = i1 - i2 >> 2;
     i10 = HEAP8[i45 >> 0] | 0;
     i5 = (i10 & 1) == 0;
     i10 = i5 ? (i10 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     if (i10 >>> 0 >= i9 >>> 0) {
      i5 = i5 ? i16 : HEAP32[i17 >> 2] | 0;
      i11 = i5 + (i10 << 2) | 0;
      if (!i9) i2 = i1; else {
       i5 = i5 + (i10 - i9 << 2) | 0;
       while (1) {
        if ((HEAP32[i5 >> 2] | 0) != (HEAP32[i6 >> 2] | 0)) break L86;
        i5 = i5 + 4 | 0;
        if ((i5 | 0) == (i11 | 0)) {
         i2 = i1;
         break;
        } else i6 = i6 + 4 | 0;
       }
      }
     }
    } else i2 = i1; while (0);
    i1 = (i4 & 1) == 0;
    i1 = (i1 ? i15 : i3) + ((i1 ? (i4 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
    L101 : do if ((i2 | 0) != (i1 | 0)) {
     i5 = i12;
     i4 = i12;
     i1 = i2;
     while (1) {
      i2 = HEAP32[i37 >> 2] | 0;
      do if (i2) {
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if ((i2 | 0) == -1) {
        HEAP32[i37 >> 2] = 0;
        i3 = 1;
        break;
       } else {
        i3 = (HEAP32[i37 >> 2] | 0) == 0;
        break;
       }
      } else i3 = 1; while (0);
      do if (i4) {
       i2 = HEAP32[i4 + 12 >> 2] | 0;
       if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
       if ((i2 | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L101; else {
        HEAP32[i38 >> 2] = 0;
        i2 = 0;
        i36 = 114;
        break;
       }
      } else {
       i2 = i5;
       i36 = 114;
      } while (0);
      if ((i36 | 0) == 114) {
       i36 = 0;
       if (i3) break L101; else i6 = 0;
      }
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) != (HEAP32[i1 >> 2] | 0)) break L101;
      i3 = HEAP32[i37 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
      i1 = i1 + 4 | 0;
      i3 = HEAP8[i46 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + ((i12 ? (i3 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i46 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + ((i11 ? (i12 & 255) >>> 1 : HEAP32[i15 >> 2] | 0) << 2) | 0)) : 0) {
     i36 = 126;
     break L1;
    }
    break;
   }
  case 4:
   {
    i9 = HEAP32[i33 >> 2] | 0;
    i4 = i12;
    i5 = i12;
    i1 = 0;
    L138 : while (1) {
     i2 = HEAP32[i37 >> 2] | 0;
     do if (i2) {
      i3 = HEAP32[i2 + 12 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
      if ((i2 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i3 = 1;
       break;
      } else {
       i3 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i3 = 1; while (0);
     do if (i5) {
      i2 = HEAP32[i5 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i2 = HEAP32[i2 >> 2] | 0;
      if ((i2 | 0) != -1) if (i3 ^ (i4 | 0) == 0) {
       i2 = i4;
       i6 = i4;
       break;
      } else break L138; else {
       HEAP32[i38 >> 2] = 0;
       i2 = 0;
       i36 = 140;
       break;
      }
     } else {
      i2 = i4;
      i36 = 140;
     } while (0);
     if ((i36 | 0) == 140) {
      i36 = 0;
      if (i3) {
       i4 = i2;
       break;
      } else i6 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 31](i26, 2048, i4) | 0) {
      i3 = HEAP32[i35 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i25 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i3 = HEAP32[i35 >> 2] | 0;
      }
      HEAP32[i35 >> 2] = i3 + 4;
      HEAP32[i3 >> 2] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i42 >> 0] | 0;
      if (!((i4 | 0) == (i9 | 0) & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i19 >> 2] | 0) | 0) != 0 : 0))) {
       i4 = i2;
       break;
      }
      if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
       i8 = HEAP32[i30 >> 2] | 0;
      }
      i12 = i8 + 4 | 0;
      HEAP32[i30 >> 2] = i12;
      HEAP32[i8 >> 2] = i1;
      i8 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i37 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i4 = i2;
      i5 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 4;
      i4 = i2;
      i5 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i47 >> 2] | 0) != (i8 | 0) : 0) {
     if ((i8 | 0) == (HEAP32[i29 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i47, i30, i29);
      i8 = HEAP32[i30 >> 2] | 0;
     }
     i12 = i8 + 4 | 0;
     HEAP32[i30 >> 2] = i12;
     HEAP32[i8 >> 2] = i1;
     i8 = i12;
    }
    i6 = HEAP32[i28 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i37 >> 2] | 0;
     do if (i1) {
      i2 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
      if ((i1 | 0) == -1) {
       HEAP32[i37 >> 2] = 0;
       i2 = 1;
       break;
      } else {
       i2 = (HEAP32[i37 >> 2] | 0) == 0;
       break;
      }
     } else i2 = 1; while (0);
     do if (i4) {
      i1 = HEAP32[i4 + 12 >> 2] | 0;
      if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
      if ((i1 | 0) != -1) if (i2) break; else {
       i36 = 180;
       break L1;
      } else {
       HEAP32[i38 >> 2] = 0;
       i36 = 174;
       break;
      }
     } else i36 = 174; while (0);
     if ((i36 | 0) == 174) {
      i36 = 0;
      if (i2) {
       i36 = 180;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != (HEAP32[i27 >> 2] | 0)) {
      i36 = 180;
      break L1;
     }
     i1 = HEAP32[i37 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 4;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      i9 = i6;
      while (1) {
       i1 = HEAP32[i37 >> 2] | 0;
       do if (i1) {
        i2 = HEAP32[i1 + 12 >> 2] | 0;
        if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
        if ((i1 | 0) == -1) {
         HEAP32[i37 >> 2] = 0;
         i2 = 1;
         break;
        } else {
         i2 = (HEAP32[i37 >> 2] | 0) == 0;
         break;
        }
       } else i2 = 1; while (0);
       do if (i3) {
        i1 = HEAP32[i3 + 12 >> 2] | 0;
        if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
        if ((i1 | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i6 = i5;
         break;
        } else {
         i36 = 204;
         break L1;
        } else {
         HEAP32[i38 >> 2] = 0;
         i1 = 0;
         i36 = 198;
         break;
        }
       } else {
        i1 = i5;
        i36 = 198;
       } while (0);
       if ((i36 | 0) == 198) {
        i36 = 0;
        if (i2) {
         i36 = 204;
         break L1;
        } else i6 = 0;
       }
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 31](i26, 2048, i2) | 0)) {
        i36 = 204;
        break L1;
       }
       if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i25 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i34, i35, i25);
       i2 = HEAP32[i37 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
       i3 = HEAP32[i35 >> 2] | 0;
       HEAP32[i35 >> 2] = i3 + 4;
       HEAP32[i3 >> 2] = i2;
       i2 = i9;
       i9 = i9 + -1 | 0;
       HEAP32[i28 >> 2] = i9;
       i3 = HEAP32[i37 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 4;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i6;
       }
      }
     }
    }
    if ((HEAP32[i35 >> 2] | 0) == (HEAP32[i34 >> 2] | 0)) {
     i36 = 215;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L261 : do if ((i36 | 0) == 30) while (1) {
   i36 = 0;
   i2 = HEAP32[i37 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i37 >> 2] = 0;
     i3 = 1;
     break;
    } else {
     i3 = (HEAP32[i37 >> 2] | 0) == 0;
     break;
    }
   } else i3 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) != -1) if (i3 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L261; else {
     HEAP32[i38 >> 2] = 0;
     i1 = 0;
     i36 = 43;
     break;
    }
   } else i36 = 43; while (0);
   if ((i36 | 0) == 43) {
    i36 = 0;
    if (i3) break L261; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i26 >> 2] | 0) + 12 >> 2] & 31](i26, 8192, i1) | 0)) break L261;
   i1 = HEAP32[i37 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 4;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i45, i1);
   i1 = i5;
   i36 = 30;
  } while (0);
  i20 = i20 + 1 | 0;
  if (i20 >>> 0 >= 4) {
   i36 = 217;
   break;
  }
 }
 L296 : do if ((i36 | 0) == 28) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 86) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 126) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 180) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 204) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 215) {
  HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
  i2 = 0;
 } else if ((i36 | 0) == 217) {
  L298 : do if (i7) {
   i5 = i7 + 4 | 0;
   i6 = i7 + 8 | 0;
   i4 = 1;
   L300 : while (1) {
    i1 = HEAP8[i7 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 >> 2] | 0;
    if (i4 >>> 0 >= i1 >>> 0) break L298;
    i1 = HEAP32[i37 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) == -1) {
      HEAP32[i37 >> 2] = 0;
      i3 = 1;
      break;
     } else {
      i3 = (HEAP32[i37 >> 2] | 0) == 0;
      break;
     }
    } else i3 = 1; while (0);
    i1 = HEAP32[i38 >> 2] | 0;
    do if (i1) {
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
     if ((i1 | 0) != -1) if (i3) break; else break L300; else {
      HEAP32[i38 >> 2] = 0;
      i36 = 236;
      break;
     }
    } else i36 = 236; while (0);
    if ((i36 | 0) == 236 ? (i36 = 0, i3) : 0) break;
    i1 = HEAP32[i37 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
    if (!(HEAP8[i7 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 | 0) != (HEAP32[i2 + (i4 << 2) >> 2] | 0)) break;
    i1 = i4 + 1 | 0;
    i2 = HEAP32[i37 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i4 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 4;
     i4 = i1;
     continue;
    }
   }
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
   break L296;
  } while (0);
  i1 = HEAP32[i47 >> 2] | 0;
  if ((i1 | 0) != (i8 | 0) ? (HEAP32[i40 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i42, i1, i8, i40), (HEAP32[i40 >> 2] | 0) != 0) : 0) {
   HEAP32[i39 >> 2] = HEAP32[i39 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i45);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i43);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i44);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i46);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i42);
 i1 = HEAP32[i47 >> 2] | 0;
 HEAP32[i47 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i41 >> 2] & 255](i1);
 STACKTOP = i48;
 return i2 | 0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i41, i42, i3, i4, i5, i43, i35, i2, i38, i39, i1) {
 i41 = i41 | 0;
 i42 = i42 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i43 = i43 | 0;
 i35 = i35 | 0;
 i2 = i2 | 0;
 i38 = i38 | 0;
 i39 = i39 | 0;
 i1 = i1 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i36 = 0, i37 = 0, i40 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0;
 i52 = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 i30 = i52 + 88 | 0;
 i9 = i52 + 96 | 0;
 i51 = i52 + 80 | 0;
 i34 = i52 + 72 | 0;
 i33 = i52 + 68 | 0;
 i36 = i52 + 500 | 0;
 i31 = i52 + 497 | 0;
 i37 = i52 + 496 | 0;
 i46 = i52 + 56 | 0;
 i50 = i52 + 44 | 0;
 i48 = i52 + 32 | 0;
 i47 = i52 + 20 | 0;
 i49 = i52 + 8 | 0;
 i32 = i52 + 4 | 0;
 i44 = i52;
 HEAP32[i30 >> 2] = i1;
 HEAP32[i51 >> 2] = i9;
 i45 = i51 + 4 | 0;
 HEAP32[i45 >> 2] = 184;
 HEAP32[i34 >> 2] = i9;
 HEAP32[i33 >> 2] = i9 + 400;
 HEAP32[i46 >> 2] = 0;
 HEAP32[i46 + 4 >> 2] = 0;
 HEAP32[i46 + 8 >> 2] = 0;
 HEAP32[i50 >> 2] = 0;
 HEAP32[i50 + 4 >> 2] = 0;
 HEAP32[i50 + 8 >> 2] = 0;
 HEAP32[i48 >> 2] = 0;
 HEAP32[i48 + 4 >> 2] = 0;
 HEAP32[i48 + 8 >> 2] = 0;
 HEAP32[i47 >> 2] = 0;
 HEAP32[i47 + 4 >> 2] = 0;
 HEAP32[i47 + 8 >> 2] = 0;
 HEAP32[i49 >> 2] = 0;
 HEAP32[i49 + 4 >> 2] = 0;
 HEAP32[i49 + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i3, i4, i36, i31, i37, i46, i50, i48, i47, i32);
 HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
 i23 = i2 + 8 | 0;
 i24 = i48 + 4 | 0;
 i25 = i47 + 4 | 0;
 i26 = i47 + 8 | 0;
 i27 = i47 + 1 | 0;
 i28 = i48 + 8 | 0;
 i29 = i48 + 1 | 0;
 i13 = (i5 & 512 | 0) != 0;
 i14 = i50 + 8 | 0;
 i15 = i50 + 1 | 0;
 i16 = i50 + 4 | 0;
 i17 = i49 + 4 | 0;
 i18 = i49 + 8 | 0;
 i19 = i49 + 1 | 0;
 i20 = i36 + 3 | 0;
 i21 = i46 + 4 | 0;
 i22 = 0;
 i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i41 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i41 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i41 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i42 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else {
    i40 = 202;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else {
    i40 = 202;
    break L1;
   } else {
    HEAP32[i42 >> 2] = 0;
    i40 = 12;
    break;
   }
  } else i40 = 12; while (0);
  if ((i40 | 0) == 12) {
   i40 = 0;
   if (i1) {
    i40 = 202;
    break;
   } else i2 = 0;
  }
  L21 : do switch (HEAP8[i36 + i22 >> 0] | 0) {
  case 1:
   {
    if ((i22 | 0) != 3) {
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 <= -1) {
      i40 = 26;
      break L1;
     }
     if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) {
      i40 = 26;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i3 = i1 + 12 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
      HEAP32[i3 >> 2] = i4 + 1;
      i1 = HEAPU8[i4 >> 0] | 0;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 0:
   {
    if ((i22 | 0) != 3) {
     i1 = i2;
     i3 = i2;
     i40 = 28;
    }
    break;
   }
  case 3:
   {
    i4 = HEAP8[i48 >> 0] | 0;
    i1 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i24 >> 2] | 0;
    i3 = HEAP8[i47 >> 0] | 0;
    i3 = (i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i25 >> 2] | 0;
    if ((i1 | 0) != (0 - i3 | 0)) {
     i5 = (i1 | 0) == 0;
     i6 = HEAP32[i41 >> 2] | 0;
     i7 = HEAP32[i6 + 12 >> 2] | 0;
     i1 = HEAP32[i6 + 16 >> 2] | 0;
     i2 = (i7 | 0) == (i1 | 0);
     if (i5 | (i3 | 0) == 0) {
      if (i2) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i7 >> 0] | 0;
      i1 = i1 & 255;
      if (i5) {
       if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) break L21;
       i1 = HEAP32[i41 >> 2] | 0;
       i2 = i1 + 12 | 0;
       i3 = HEAP32[i2 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
       HEAP8[i35 >> 0] = 1;
       i12 = HEAP8[i47 >> 0] | 0;
       i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
       break L21;
      }
      if (i1 << 24 >> 24 != (HEAP8[((HEAP8[i48 >> 0] & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
       HEAP8[i35 >> 0] = 1;
       break L21;
      }
      i1 = HEAP32[i41 >> 2] | 0;
      i2 = i1 + 12 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i2) {
      i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0;
      i1 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP8[i48 >> 0] | 0;
      i6 = i1;
      i3 = HEAP32[i1 + 12 >> 2] | 0;
      i1 = HEAP32[i1 + 16 >> 2] | 0;
     } else {
      i5 = HEAPU8[i7 >> 0] | 0;
      i3 = i7;
     }
     i2 = i6 + 12 | 0;
     i1 = (i3 | 0) == (i1 | 0);
     if ((i5 & 255) << 24 >> 24 == (HEAP8[((i4 & 1) == 0 ? i29 : HEAP32[i28 >> 2] | 0) >> 0] | 0)) {
      if (i1) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 40 >> 2] & 127](i6) | 0; else HEAP32[i2 >> 2] = i3 + 1;
      i12 = HEAP8[i48 >> 0] | 0;
      i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i24 >> 2] | 0) >>> 0 > 1 ? i48 : i8;
      break L21;
     }
     if (i1) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[((HEAP8[i47 >> 0] & 1) == 0 ? i27 : HEAP32[i26 >> 2] | 0) >> 0] | 0)) {
      i40 = 82;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     HEAP8[i35 >> 0] = 1;
     i12 = HEAP8[i47 >> 0] | 0;
     i8 = ((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i25 >> 2] | 0) >>> 0 > 1 ? i47 : i8;
    }
    break;
   }
  case 2:
   {
    if (!(i22 >>> 0 < 2 | (i8 | 0) != 0) ? !(i13 | (i22 | 0) == 2 & (HEAP8[i20 >> 0] | 0) != 0) : 0) {
     i8 = 0;
     break L21;
    }
    i11 = HEAP8[i50 >> 0] | 0;
    i1 = (i11 & 1) == 0;
    i12 = HEAP32[i14 >> 2] | 0;
    i4 = i1 ? i15 : i12;
    i10 = i4;
    L83 : do if ((i22 | 0) != 0 ? (HEAPU8[i36 + (i22 + -1) >> 0] | 0) < 2 : 0) {
     i7 = i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0;
     i5 = i4 + i7 | 0;
     i6 = HEAP32[i23 >> 2] | 0;
     L86 : do if (!i7) i3 = i10; else {
      i7 = i4;
      i3 = i10;
      do {
       i1 = HEAP8[i7 >> 0] | 0;
       if (i1 << 24 >> 24 <= -1) break L86;
       if (!(HEAP16[i6 + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L86;
       i7 = i7 + 1 | 0;
       i3 = i7;
      } while ((i7 | 0) != (i5 | 0));
     } while (0);
     i5 = i3 - i10 | 0;
     i6 = HEAP8[i49 >> 0] | 0;
     i1 = (i6 & 1) == 0;
     i6 = i1 ? (i6 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
     if (i6 >>> 0 >= i5 >>> 0) {
      i1 = i1 ? i19 : HEAP32[i18 >> 2] | 0;
      i7 = i1 + i6 | 0;
      if ((i3 | 0) != (i10 | 0)) {
       i1 = i1 + (i6 - i5) | 0;
       while (1) {
        if ((HEAP8[i1 >> 0] | 0) != (HEAP8[i4 >> 0] | 0)) {
         i3 = i10;
         break L83;
        }
        i1 = i1 + 1 | 0;
        if ((i1 | 0) == (i7 | 0)) break; else i4 = i4 + 1 | 0;
       }
      }
     } else i3 = i10;
    } else i3 = i10; while (0);
    i1 = (i11 & 1) == 0;
    i1 = (i1 ? i15 : i12) + (i1 ? (i11 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
    L98 : do if ((i3 | 0) != (i1 | 0)) {
     i5 = i2;
     i4 = i2;
     i1 = i3;
     while (1) {
      i2 = HEAP32[i41 >> 2] | 0;
      do if (i2) {
       if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
        HEAP32[i41 >> 2] = 0;
        i2 = 0;
        break;
       } else {
        i2 = HEAP32[i41 >> 2] | 0;
        break;
       }
      } else i2 = 0; while (0);
      i3 = (i2 | 0) == 0;
      do if (i4) {
       if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
        i2 = i5;
        i6 = i4;
        break;
       } else break L98;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
        i2 = i5;
        i6 = i5;
        break;
       } else break L98; else {
        HEAP32[i42 >> 2] = 0;
        i2 = 0;
        i40 = 107;
        break;
       }
      } else {
       i2 = i5;
       i40 = 107;
      } while (0);
      if ((i40 | 0) == 107) {
       i40 = 0;
       if (i3) break L98; else i6 = 0;
      }
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = HEAP32[i3 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 != (HEAP8[i1 >> 0] | 0)) break L98;
      i3 = HEAP32[i41 >> 2] | 0;
      i4 = i3 + 12 | 0;
      i5 = HEAP32[i4 >> 2] | 0;
      if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
      i1 = i1 + 1 | 0;
      i3 = HEAP8[i50 >> 0] | 0;
      i12 = (i3 & 1) == 0;
      i3 = (i12 ? i15 : HEAP32[i14 >> 2] | 0) + (i12 ? (i3 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0;
      if ((i1 | 0) == (i3 | 0)) {
       i1 = i3;
       break;
      } else {
       i5 = i2;
       i4 = i6;
      }
     }
    } while (0);
    if (i13 ? (i12 = HEAP8[i50 >> 0] | 0, i11 = (i12 & 1) == 0, (i1 | 0) != ((i11 ? i15 : HEAP32[i14 >> 2] | 0) + (i11 ? (i12 & 255) >>> 1 : HEAP32[i16 >> 2] | 0) | 0)) : 0) {
     i40 = 119;
     break L1;
    }
    break;
   }
  case 4:
   {
    i7 = HEAP8[i37 >> 0] | 0;
    i5 = i2;
    i4 = i2;
    i1 = 0;
    L131 : while (1) {
     i2 = HEAP32[i41 >> 2] | 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i2 = 0;
       break;
      } else {
       i2 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i2 = 0; while (0);
     i3 = (i2 | 0) == 0;
     do if (i4) {
      if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i3) {
       i2 = i5;
       i6 = i4;
       break;
      } else {
       i2 = i5;
       break L131;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i3 ^ (i5 | 0) == 0) {
       i2 = i5;
       i6 = i5;
       break;
      } else {
       i2 = i5;
       break L131;
      } else {
       HEAP32[i42 >> 2] = 0;
       i2 = 0;
       i40 = 130;
       break;
      }
     } else {
      i2 = i5;
      i40 = 130;
     } while (0);
     if ((i40 | 0) == 130) {
      i40 = 0;
      if (i3) break; else i6 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = HEAP32[i3 + 12 >> 2] | 0;
     if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
     i4 = i3 & 255;
     if (i4 << 24 >> 24 > -1 ? (HEAP16[(HEAP32[i23 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 2048) != 0 : 0) {
      i3 = HEAP32[i39 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i30 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i3 = HEAP32[i39 >> 2] | 0;
      }
      HEAP32[i39 >> 2] = i3 + 1;
      HEAP8[i3 >> 0] = i4;
      i1 = i1 + 1 | 0;
     } else {
      i12 = HEAP8[i46 >> 0] | 0;
      if (!(i4 << 24 >> 24 == i7 << 24 >> 24 & ((i1 | 0) != 0 ? (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i21 >> 2] | 0) | 0) != 0 : 0))) break;
      if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
       i9 = HEAP32[i34 >> 2] | 0;
      }
      i12 = i9 + 4 | 0;
      HEAP32[i34 >> 2] = i12;
      HEAP32[i9 >> 2] = i1;
      i9 = i12;
      i1 = 0;
     }
     i3 = HEAP32[i41 >> 2] | 0;
     i4 = i3 + 12 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
      i5 = i2;
      i4 = i6;
      continue;
     } else {
      HEAP32[i4 >> 2] = i5 + 1;
      i5 = i2;
      i4 = i6;
      continue;
     }
    }
    if ((i1 | 0) != 0 ? (HEAP32[i51 >> 2] | 0) != (i9 | 0) : 0) {
     if ((i9 | 0) == (HEAP32[i33 >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i51, i34, i33);
      i9 = HEAP32[i34 >> 2] | 0;
     }
     i12 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i12;
     HEAP32[i9 >> 2] = i1;
     i9 = i12;
    }
    i6 = HEAP32[i32 >> 2] | 0;
    if ((i6 | 0) > 0) {
     i1 = HEAP32[i41 >> 2] | 0;
     do if (i1) {
      if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
       HEAP32[i41 >> 2] = 0;
       i1 = 0;
       break;
      } else {
       i1 = HEAP32[i41 >> 2] | 0;
       break;
      }
     } else i1 = 0; while (0);
     i1 = (i1 | 0) == 0;
     do if (i2) {
      if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
       HEAP32[i42 >> 2] = 0;
       i40 = 162;
       break;
      }
      if (i1) i4 = i2; else {
       i40 = 167;
       break L1;
      }
     } else i40 = 162; while (0);
     if ((i40 | 0) == 162) {
      i40 = 0;
      if (i1) {
       i40 = 167;
       break L1;
      } else i4 = 0;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = HEAP32[i1 + 12 >> 2] | 0;
     if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
     if ((i1 & 255) << 24 >> 24 != (HEAP8[i31 >> 0] | 0)) {
      i40 = 167;
      break L1;
     }
     i1 = HEAP32[i41 >> 2] | 0;
     i2 = i1 + 12 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i2 >> 2] = i3 + 1;
     if ((i6 | 0) > 0) {
      i5 = i4;
      i3 = i4;
      while (1) {
       i1 = HEAP32[i41 >> 2] | 0;
       do if (i1) {
        if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
         HEAP32[i41 >> 2] = 0;
         i1 = 0;
         break;
        } else {
         i1 = HEAP32[i41 >> 2] | 0;
         break;
        }
       } else i1 = 0; while (0);
       i2 = (i1 | 0) == 0;
       do if (i3) {
        if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
         i1 = i5;
         i7 = i3;
         break;
        } else {
         i40 = 189;
         break L1;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i5 | 0) == 0) {
         i1 = i5;
         i7 = i5;
         break;
        } else {
         i40 = 189;
         break L1;
        } else {
         HEAP32[i42 >> 2] = 0;
         i1 = 0;
         i40 = 182;
         break;
        }
       } else {
        i1 = i5;
        i40 = 182;
       } while (0);
       if ((i40 | 0) == 182) {
        i40 = 0;
        if (i2) {
         i40 = 189;
         break L1;
        } else i7 = 0;
       }
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       if ((i2 & 255) << 24 >> 24 <= -1) {
        i40 = 189;
        break L1;
       }
       if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) {
        i40 = 189;
        break L1;
       }
       if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i30 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i38, i39, i30);
       i2 = HEAP32[i41 >> 2] | 0;
       i3 = HEAP32[i2 + 12 >> 2] | 0;
       if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
       i3 = HEAP32[i39 >> 2] | 0;
       HEAP32[i39 >> 2] = i3 + 1;
       HEAP8[i3 >> 0] = i2;
       i2 = i6;
       i6 = i6 + -1 | 0;
       HEAP32[i32 >> 2] = i6;
       i3 = HEAP32[i41 >> 2] | 0;
       i4 = i3 + 12 | 0;
       i5 = HEAP32[i4 >> 2] | 0;
       if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
       if ((i2 | 0) <= 1) break; else {
        i5 = i1;
        i3 = i7;
       }
      }
     }
    }
    if ((HEAP32[i39 >> 2] | 0) == (HEAP32[i38 >> 2] | 0)) {
     i40 = 200;
     break L1;
    }
    break;
   }
  default:
   {}
  } while (0);
  L243 : do if ((i40 | 0) == 28) while (1) {
   i40 = 0;
   i2 = HEAP32[i41 >> 2] | 0;
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i41 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i41 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i2) {
     i5 = i1;
     i4 = i3;
     break;
    } else break L243;
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i2 ^ (i1 | 0) == 0) {
     i5 = i1;
     i4 = i1;
     break;
    } else break L243; else {
     HEAP32[i42 >> 2] = 0;
     i1 = 0;
     i40 = 38;
     break;
    }
   } else i40 = 38; while (0);
   if ((i40 | 0) == 38) {
    i40 = 0;
    if (i2) break L243; else {
     i5 = i1;
     i4 = 0;
    }
   }
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
   if ((i1 & 255) << 24 >> 24 <= -1) break L243;
   if (!(HEAP16[(HEAP32[i23 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break L243;
   i1 = HEAP32[i41 >> 2] | 0;
   i2 = i1 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else {
    HEAP32[i2 >> 2] = i3 + 1;
    i1 = HEAPU8[i3 >> 0] | 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i49, i1 & 255);
   i1 = i5;
   i3 = i4;
   i40 = 28;
  } while (0);
  i22 = i22 + 1 | 0;
  if (i22 >>> 0 >= 4) {
   i40 = 202;
   break;
  }
 }
 L275 : do if ((i40 | 0) == 26) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 82) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 119) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 167) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 189) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 200) {
  HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
  i2 = 0;
 } else if ((i40 | 0) == 202) {
  L277 : do if (i8) {
   i5 = i8 + 1 | 0;
   i6 = i8 + 8 | 0;
   i7 = i8 + 4 | 0;
   i3 = 1;
   L279 : while (1) {
    i1 = HEAP8[i8 >> 0] | 0;
    if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i7 >> 2] | 0;
    if (i3 >>> 0 >= i1 >>> 0) break L277;
    i1 = HEAP32[i41 >> 2] | 0;
    do if (i1) {
     if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
      HEAP32[i41 >> 2] = 0;
      i1 = 0;
      break;
     } else {
      i1 = HEAP32[i41 >> 2] | 0;
      break;
     }
    } else i1 = 0; while (0);
    i1 = (i1 | 0) == 0;
    i2 = HEAP32[i42 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
      HEAP32[i42 >> 2] = 0;
      i40 = 218;
      break;
     }
     if (!i1) break L279;
    } else i40 = 218; while (0);
    if ((i40 | 0) == 218 ? (i40 = 0, i1) : 0) break;
    i1 = HEAP32[i41 >> 2] | 0;
    i2 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
    if (!(HEAP8[i8 >> 0] & 1)) i2 = i5; else i2 = HEAP32[i6 >> 2] | 0;
    if ((i1 & 255) << 24 >> 24 != (HEAP8[i2 + i3 >> 0] | 0)) break;
    i1 = i3 + 1 | 0;
    i2 = HEAP32[i41 >> 2] | 0;
    i3 = i2 + 12 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i3 = i1;
     continue;
    } else {
     HEAP32[i3 >> 2] = i4 + 1;
     i3 = i1;
     continue;
    }
   }
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
   break L275;
  } while (0);
  i1 = HEAP32[i51 >> 2] | 0;
  if ((i1 | 0) != (i9 | 0) ? (HEAP32[i44 >> 2] = 0, __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i46, i1, i9, i44), (HEAP32[i44 >> 2] | 0) != 0) : 0) {
   HEAP32[i43 >> 2] = HEAP32[i43 >> 2] | 4;
   i2 = 0;
  } else i2 = 1;
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i47);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i48);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i50);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i46);
 i1 = HEAP32[i51 >> 2] | 0;
 HEAP32[i51 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i45 >> 2] & 255](i1);
 STACKTOP = i52;
 return i2 | 0;
}

function __ZN5Agent18computeNewVelocityEP6VODump(i77, i74) {
 i77 = i77 | 0;
 i74 = i74 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, d21 = 0.0, d22 = 0.0, d23 = 0.0, d24 = 0.0, d25 = 0.0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, d52 = 0.0, d53 = 0.0, d54 = 0.0, d55 = 0.0, i56 = 0, d57 = 0.0, d58 = 0.0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, d63 = 0.0, d64 = 0.0, d65 = 0.0, d66 = 0.0, d67 = 0.0, d68 = 0.0, i69 = 0, i70 = 0, i71 = 0, i72 = 0, i73 = 0, i75 = 0, i76 = 0, i78 = 0, i79 = 0;
 i78 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i48 = i78 + 56 | 0;
 i16 = i78 + 172 | 0;
 i15 = i78 + 168 | 0;
 i17 = i78 + 164 | 0;
 i18 = i78 + 160 | 0;
 i19 = i78 + 156 | 0;
 i20 = i78 + 48 | 0;
 i49 = i78 + 40 | 0;
 i50 = i78 + 32 | 0;
 i69 = i78 + 16 | 0;
 i75 = i78 + 8 | 0;
 i76 = i78 + 152 | 0;
 i73 = i78;
 i72 = i78 + 148 | 0;
 i51 = i78 + 144 | 0;
 i70 = i78 + 112 | 0;
 if (!(HEAP8[19840] | 0)) {
  i1 = 0;
  do {
   HEAPF32[3428 + (i1 << 2) >> 2] = +Math_sin(+(+(i1 | 0) * 3.1415927410125732 * .00390625));
   i1 = i1 + 1 | 0;
  } while ((i1 | 0) != 512);
  HEAP8[19840] = 1;
 }
 i71 = i77 + 108 | 0;
 i13 = HEAP32[i71 >> 2] | 0;
 i56 = i77 + 112 | 0;
 i1 = HEAP32[i56 >> 2] | 0;
 i3 = i13;
 if ((i1 | 0) == (i13 | 0)) i2 = i13; else {
  i2 = i1 + (~(((i1 + -52 - i3 | 0) >>> 0) / 52 | 0) * 52 | 0) | 0;
  HEAP32[i56 >> 2] = i2;
 }
 i46 = i77 + 132 | 0;
 i1 = HEAP32[i46 >> 2] | 0;
 i14 = i77 + 128 | 0;
 i12 = HEAP32[i14 >> 2] | 0;
 i11 = i1 - i12 >> 3;
 i47 = i77 + 116 | 0;
 if ((((HEAP32[i47 >> 2] | 0) - i3 | 0) / 52 | 0) >>> 0 < i11 >>> 0) {
  i2 = i2 - i3 | 0;
  i3 = (i2 | 0) / 52 | 0;
  if (!i11) i10 = 0; else i10 = __Znwj(i11 * 52 | 0) | 0;
  i45 = i10 + ((((i2 | 0) / -52 | 0) + i3 | 0) * 52 | 0) | 0;
  _memcpy(i45 | 0, i13 | 0, i2 | 0) | 0;
  HEAP32[i71 >> 2] = i45;
  HEAP32[i56 >> 2] = i10 + (i3 * 52 | 0);
  HEAP32[i47 >> 2] = i10 + (i11 * 52 | 0);
  if (i13) {
   __ZdlPv(i13);
   i1 = HEAP32[i46 >> 2] | 0;
   i12 = HEAP32[i14 >> 2] | 0;
  }
 }
 i11 = i77 + 124 | 0;
 if (HEAP8[i11 >> 0] | 0) {
  i3 = i12;
  i2 = i1 - i3 | 0;
  if ((i2 | 0) > 8) {
   i10 = i12 + 4 | 0;
   i2 = i2 >> 3;
   do {
    i45 = i1;
    i1 = i45 + -8 | 0;
    i44 = HEAP32[i12 >> 2] | 0;
    HEAP32[i12 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i44;
    i45 = i45 + -4 | 0;
    i44 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i45 >> 2];
    HEAP32[i45 >> 2] = i44;
    HEAP32[i17 >> 2] = i3;
    i2 = i2 + -1 | 0;
    HEAP32[i19 >> 2] = i3;
    HEAP32[i15 >> 2] = HEAP32[i17 >> 2];
    HEAP32[i16 >> 2] = HEAP32[i18 >> 2];
    HEAP32[i48 >> 2] = HEAP32[i19 >> 2];
    __ZNSt3__111__sift_downIRNS_6__lessINS_4pairIfP6ObjectEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeESB_(i15, i16, i20, i2, i48);
   } while ((i2 | 0) > 1);
  }
 } else __ZNSt3__16__sortIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEvT0_S9_T_(i12, i1, i48);
 HEAP8[i11 >> 0] = 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i46 >> 2] | 0)) i12 = i77 + 76 | 0; else {
  i18 = i48 + 24 | 0;
  i19 = i48 + 28 | 0;
  i20 = i48 + 32 | 0;
  i27 = i48 + 36 | 0;
  i28 = i48 + 40 | 0;
  i29 = i48 + 44 | 0;
  i30 = i48 + 48 | 0;
  i31 = i48 + 49 | 0;
  i32 = i77 + 12 | 0;
  i33 = i77 + 16 | 0;
  i34 = i77 + 28 | 0;
  i35 = i48 + 8 | 0;
  i36 = i48 + 12 | 0;
  i37 = i48 + 16 | 0;
  i38 = i48 + 20 | 0;
  i39 = i77 + 72 | 0;
  i12 = i77 + 76 | 0;
  i40 = i77 + 92 | 0;
  i41 = i77 + 96 | 0;
  i42 = i48 + 4 | 0;
  i43 = i48 + 16 | 0;
  i44 = i48 + 24 | 0;
  i45 = i48 + 32 | 0;
  i15 = i49 + 4 | 0;
  i16 = i50 + 4 | 0;
  i17 = i77 + 12 | 0;
  do {
   HEAP32[i48 >> 2] = 0;
   HEAP32[i48 + 4 >> 2] = 0;
   HEAP32[i48 + 8 >> 2] = 0;
   HEAP32[i48 + 12 >> 2] = 0;
   HEAP32[i48 + 16 >> 2] = 0;
   HEAP32[i48 + 20 >> 2] = 0;
   HEAPF32[i18 >> 2] = 34028234663852886.0e22;
   HEAPF32[i19 >> 2] = 34028234663852886.0e22;
   HEAPF32[i20 >> 2] = 34028234663852886.0e22;
   HEAPF32[i27 >> 2] = 34028234663852886.0e22;
   HEAPF32[i28 >> 2] = 34028234663852886.0e22;
   HEAPF32[i29 >> 2] = 34028234663852886.0e22;
   HEAP8[i30 >> 0] = 0;
   HEAP8[i31 >> 0] = 0;
   i13 = HEAP32[i1 + 4 >> 2] | 0;
   i14 = HEAP32[i13 + 4 >> 2] | 0;
   L30 : do if ((i14 + -1 | 0) >>> 0 < 2) {
    d4 = +HEAPF32[i13 + 12 >> 2];
    d5 = +HEAPF32[i32 >> 2];
    d24 = d4 - d5;
    d25 = +HEAPF32[i13 + 16 >> 2] - +HEAPF32[i33 >> 2];
    d6 = d25 * d25;
    d7 = d24 * d24 + d6;
    d8 = +HEAPF32[i13 + 28 >> 2] + +HEAPF32[i34 >> 2];
    if (!(d7 > d8 * d8)) {
     if ((i14 | 0) == 2) {
      i26 = i13 + 92 | 0;
      d24 = (+HEAPF32[i26 + 4 >> 2] + +HEAPF32[i41 >> 2]) * .5;
      HEAPF32[i48 >> 2] = (+HEAPF32[i26 >> 2] + +HEAPF32[i40 >> 2]) * .5;
      HEAPF32[i42 >> 2] = d24;
     } else {
      HEAP32[i48 >> 2] = 0;
      HEAP32[i42 >> 2] = 0;
     }
     d22 = d5 - d4;
     d23 = 1.0 / +Math_sqrt(+(d6 + d22 * d22));
     d24 = d25 * d23;
     d25 = d22 * d23;
     HEAPF32[i35 >> 2] = d24;
     HEAPF32[i36 >> 2] = d25;
     HEAPF32[i43 >> 2] = -d24;
     HEAPF32[i38 >> 2] = -d25;
     i26 = 40;
     break;
    }
    if (d24 == 0.0 & d25 == 0.0) d4 = 0.0; else {
     i11 = d24 < 0.0;
     d4 = i11 ? -d24 : d24;
     i26 = d25 < 0.0;
     d23 = i26 ? -d25 : d25;
     i10 = d4 < d23;
     d23 = (i10 ? d4 : d23) * (1.0 / (d4 > d23 ? d4 : d23));
     d4 = d23 * d23;
     d4 = d23 * (d4 * (d4 * (d4 * (d4 * (.05747731402516365 - d4 * .013480469584465027) + -.121239073574543) + .19563592970371246) + -.33299461007118225) + .9999956488609314);
     d4 = i10 ? 1.5707963705062866 - d4 : d4;
     d4 = i11 ? 3.1415927410125732 - d4 : d4;
     d4 = i26 ? -d4 : d4;
    }
    d22 = d8 / +Math_sqrt(+d7);
    i79 = d22 < 0.0;
    d22 = i79 ? -d22 : d22;
    d22 = 1.570796326794895 - +Math_sqrt(+(1.0 - d22)) * (d22 * (d22 * (d22 * -.018729299306869507 + .074261) + -.2121144) + 1.5707288);
    d22 = d22 - +(i79 & 1) * 2.0 * d22;
    i79 = ~~((d4 - d22) * 256.0 / 3.1415927410125732);
    i11 = (i79 | 0) < 0;
    i26 = 0 - i79 | 0;
    i2 = HEAP32[3428 + (((i11 ? i26 : i79) + 128 & 511) << 2) >> 2] | 0;
    i79 = HEAP32[3428 + ((i11 ? 512 - (i26 & 511) | 0 : i79 & 511) << 2) >> 2] | 0;
    HEAP32[i35 >> 2] = i2;
    HEAP32[i36 >> 2] = i79;
    i26 = ~~((d4 + d22) * 256.0 / 3.1415927410125732);
    i11 = (i26 | 0) < 0;
    i10 = 0 - i26 | 0;
    i3 = HEAP32[3428 + (((i11 ? i10 : i26) + 128 & 511) << 2) >> 2] | 0;
    d9 = (HEAP32[tempDoublePtr >> 2] = i79, +HEAPF32[tempDoublePtr >> 2]);
    d21 = (HEAP32[tempDoublePtr >> 2] = i2, +HEAPF32[tempDoublePtr >> 2]);
    i26 = HEAP32[3428 + ((i11 ? 512 - (i10 & 511) | 0 : i26 & 511) << 2) >> 2] | 0;
    HEAP32[i37 >> 2] = i3;
    HEAP32[i38 >> 2] = i26;
    i10 = ~~(d22 * 256.0 / 3.1415927410125732);
    i11 = (i10 | 0) < 0;
    d22 = (HEAP32[tempDoublePtr >> 2] = i3, +HEAPF32[tempDoublePtr >> 2]);
    d23 = (HEAP32[tempDoublePtr >> 2] = i26, +HEAPF32[tempDoublePtr >> 2]);
    if (i11) {
     i3 = 0 - i10 | 0;
     i2 = 512 - (i3 & 511) | 0;
    } else {
     i2 = i10 & 511;
     i3 = 0 - i10 | 0;
    }
    d8 = +HEAPF32[3428 + (i2 << 2) >> 2] * 2.0 * +HEAPF32[3428 + (((i11 ? i3 : i10) + 128 & 511) << 2) >> 2];
    if ((i14 | 0) != 2) {
     HEAP32[i48 >> 2] = 0;
     HEAP32[i42 >> 2] = 0;
     i26 = 40;
     break;
    }
    i79 = i13 + 72 | 0;
    i26 = i13 + 92 | 0;
    d4 = +HEAPF32[i26 >> 2];
    d5 = +HEAPF32[i40 >> 2] - d4;
    d6 = +HEAPF32[i26 + 4 >> 2];
    d7 = +HEAPF32[i41 >> 2] - d6;
    if (d24 * (+HEAPF32[i12 >> 2] - +HEAPF32[i79 + 4 >> 2]) - d25 * (+HEAPF32[i39 >> 2] - +HEAPF32[i79 >> 2]) > 0.0) {
     d25 = (d5 * d23 - d7 * d22) * .5 / d8;
     HEAPF32[i48 >> 2] = d4 + d25 * d21;
     HEAPF32[i42 >> 2] = d6 + d25 * d9;
     i26 = 40;
     break;
    } else {
     d25 = (d5 * d9 - d7 * d21) * .5 / d8;
     HEAPF32[i48 >> 2] = d4 + d25 * d22;
     HEAPF32[i42 >> 2] = d6 + d25 * d23;
     i26 = 40;
     break;
    }
   } else {
    HEAP32[i48 >> 2] = 0;
    HEAP32[i42 >> 2] = 0;
    HEAPF32[i49 >> 2] = 0.0;
    HEAPF32[i15 >> 2] = 0.0;
    HEAPF32[i50 >> 2] = 0.0;
    HEAPF32[i16 >> 2] = 0.0;
    i79 = FUNCTION_TABLE_iiidii[HEAP32[(HEAP32[i13 >> 2] | 0) + 12 >> 2] & 3](i13, i17, +HEAPF32[i34 >> 2], i49, i50) | 0;
    d6 = +HEAPF32[i17 >> 2];
    d4 = +HEAPF32[i49 >> 2] - d6;
    d25 = +HEAPF32[i33 >> 2];
    d7 = +HEAPF32[i15 >> 2] - d25;
    d5 = 1.0 / +Math_sqrt(+(d4 * d4 + d7 * d7));
    d4 = d4 * d5;
    d5 = d7 * d5;
    HEAPF32[i35 >> 2] = d4;
    HEAPF32[i36 >> 2] = d5;
    d6 = +HEAPF32[i50 >> 2] - d6;
    d25 = +HEAPF32[i16 >> 2] - d25;
    d7 = 1.0 / +Math_sqrt(+(d6 * d6 + d25 * d25));
    d6 = d6 * d7;
    d7 = d25 * d7;
    if (i79) {
     HEAPF32[i37 >> 2] = d6;
     HEAPF32[i38 >> 2] = d7;
     if (d4 * d7 - d5 * d6 < 0.0) break;
    } else {
     HEAPF32[i43 >> 2] = d6;
     HEAPF32[i38 >> 2] = d7;
    }
    i79 = i49;
    i13 = HEAP32[i79 >> 2] | 0;
    i79 = HEAP32[i79 + 4 >> 2] | 0;
    i26 = i44;
    HEAP32[i26 >> 2] = i13;
    HEAP32[i26 + 4 >> 2] = i79;
    i26 = i50;
    i14 = HEAP32[i26 >> 2] | 0;
    i26 = HEAP32[i26 + 4 >> 2] | 0;
    i11 = i45;
    HEAP32[i11 >> 2] = i14;
    HEAP32[i11 + 4 >> 2] = i26;
    HEAP8[i31 >> 0] = 1;
    d4 = (HEAP32[tempDoublePtr >> 2] = i13, +HEAPF32[tempDoublePtr >> 2]);
    d5 = (HEAP32[tempDoublePtr >> 2] = i14, +HEAPF32[tempDoublePtr >> 2]);
    d6 = (HEAP32[tempDoublePtr >> 2] = i26, +HEAPF32[tempDoublePtr >> 2]);
    d7 = (HEAP32[tempDoublePtr >> 2] = i79, +HEAPF32[tempDoublePtr >> 2]);
    if (d4 != 34028234663852886.0e22) {
     i3 = HEAP32[i71 >> 2] | 0;
     i2 = HEAP32[i56 >> 2] | 0;
     if ((i3 | 0) != (i2 | 0)) {
      while (1) {
       i10 = i3 + 24 | 0;
       if (+HEAPF32[i10 >> 2] == d5 ? +HEAPF32[i3 + 28 >> 2] == d6 : 0) {
        i2 = i10;
        i26 = 44;
        break;
       }
       i10 = i3 + 32 | 0;
       if (+HEAPF32[i10 >> 2] == d4 ? +HEAPF32[i3 + 36 >> 2] == d7 : 0) {
        i2 = i10;
        i26 = 47;
        break;
       }
       i3 = i3 + 52 | 0;
       if ((i3 | 0) == (i2 | 0)) {
        i26 = 49;
        break L30;
       }
      }
      if ((i26 | 0) == 44) {
       i26 = 0;
       HEAP8[i3 + 48 >> 0] = 1;
       i79 = i3 + 8 | 0;
       i13 = i79;
       i14 = HEAP32[i13 + 4 >> 2] | 0;
       i11 = i3 + 40 | 0;
       HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i11 + 4 >> 2] = i14;
       i11 = i44;
       i14 = HEAP32[i11 + 4 >> 2] | 0;
       i13 = i2;
       HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
       HEAP32[i13 + 4 >> 2] = i14;
       i13 = i35;
       i14 = HEAP32[i13 + 4 >> 2] | 0;
       HEAP32[i79 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i79 + 4 >> 2] = i14;
       break;
      } else if ((i26 | 0) == 47) {
       i26 = 0;
       HEAP8[i3 + 48 >> 0] = 1;
       i79 = i3 + 16 | 0;
       i13 = i79;
       i14 = HEAP32[i13 + 4 >> 2] | 0;
       i11 = i3 + 40 | 0;
       HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i11 + 4 >> 2] = i14;
       i11 = i45;
       i14 = HEAP32[i11 + 4 >> 2] | 0;
       i13 = i2;
       HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
       HEAP32[i13 + 4 >> 2] = i14;
       i13 = i37;
       i14 = HEAP32[i13 + 4 >> 2] | 0;
       HEAP32[i79 >> 2] = HEAP32[i13 >> 2];
       HEAP32[i79 + 4 >> 2] = i14;
       break;
      }
     } else i26 = 49;
    } else i26 = 40;
   } while (0);
   if ((i26 | 0) == 40) {
    i2 = HEAP32[i56 >> 2] | 0;
    i26 = 49;
   }
   do if ((i26 | 0) == 49) {
    i26 = 0;
    if ((i2 | 0) == (HEAP32[i47 >> 2] | 0)) {
     __ZNSt3__16vectorI16VelocityObstacleNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i71, i48);
     break;
    } else {
     i3 = i48;
     i10 = i2 + 52 | 0;
     do {
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      i2 = i2 + 4 | 0;
      i3 = i3 + 4 | 0;
     } while ((i2 | 0) < (i10 | 0));
     HEAP32[i56 >> 2] = (HEAP32[i56 >> 2] | 0) + 52;
     break;
    }
   } while (0);
   i1 = i1 + 8 | 0;
  } while ((i1 | 0) != (HEAP32[i46 >> 2] | 0));
 };
 HEAP32[i69 >> 2] = 0;
 HEAP32[i69 + 4 >> 2] = 0;
 HEAP32[i69 + 8 >> 2] = 0;
 HEAP32[i69 + 12 >> 2] = 0;
 HEAPF32[i75 >> 2] = 0.0;
 HEAPF32[i75 + 4 >> 2] = 0.0;
 HEAPF32[i76 >> 2] = 34028234663852886.0e22;
 HEAPF32[i73 >> 2] = 0.0;
 HEAPF32[i73 + 4 >> 2] = 0.0;
 HEAP32[i72 >> 2] = -1;
 HEAPF32[i51 >> 2] = 34028234663852886.0e22;
 HEAP32[i70 >> 2] = i77;
 HEAP32[i70 + 4 >> 2] = i69;
 HEAP32[i70 + 8 >> 2] = i76;
 HEAP32[i70 + 12 >> 2] = i71;
 HEAP32[i70 + 16 >> 2] = i72;
 HEAP32[i70 + 20 >> 2] = i51;
 HEAP32[i70 + 24 >> 2] = i73;
 HEAP32[i70 + 28 >> 2] = i75;
 i13 = i69 + 8 | 0;
 HEAP32[i13 >> 2] = 2147483647;
 i14 = i69 + 12 | 0;
 HEAP32[i14 >> 2] = 2147483647;
 i11 = i77 + 72 | 0;
 d4 = +HEAPF32[i11 >> 2];
 d5 = +HEAPF32[i12 >> 2];
 d6 = d4 * d4 + d5 * d5;
 i15 = i77 + 64 | 0;
 d7 = +HEAPF32[i15 >> 2];
 if (d6 < d7 * d7) {
  i50 = i11;
  i51 = HEAP32[i50 + 4 >> 2] | 0;
  i79 = i69;
  HEAP32[i79 >> 2] = HEAP32[i50 >> 2];
  HEAP32[i79 + 4 >> 2] = i51;
 } else {
  d25 = 1.0 / +Math_sqrt(+d6);
  HEAPF32[i69 >> 2] = d7 * (d4 * d25);
  HEAPF32[i69 + 4 >> 2] = d7 * (d5 * d25);
 }
 __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
 i2 = HEAP32[i56 >> 2] | 0;
 i3 = HEAP32[i71 >> 2] | 0;
 if ((i2 - i3 | 0) > 0) {
  i10 = i69 + 4 | 0;
  i1 = 0;
  do {
   HEAP32[i13 >> 2] = 2147483647;
   HEAP32[i14 >> 2] = i1;
   d5 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2];
   d25 = +HEAPF32[i11 >> 2] - d5;
   d6 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2];
   d24 = +HEAPF32[i12 >> 2] - d6;
   d7 = +HEAPF32[i3 + (i1 * 52 | 0) + 8 >> 2];
   d8 = +HEAPF32[i3 + (i1 * 52 | 0) + 12 >> 2];
   d9 = d25 * d7 + d24 * d8;
   d4 = d25 * +HEAPF32[i3 + (i1 * 52 | 0) + 16 >> 2] + d24 * +HEAPF32[i3 + (i1 * 52 | 0) + 20 >> 2];
   if ((d9 > 0.0 ? d7 * d24 - d25 * d8 > 0.0 : 0) ? (d24 = d5 + d7 * d9, d23 = d6 + d8 * d9, HEAPF32[i69 >> 2] = d24, HEAPF32[i10 >> 2] = d23, d25 = +HEAPF32[i15 >> 2], d23 * d23 + d24 * d24 < d25 * d25) : 0) __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
   HEAP32[i13 >> 2] = i1;
   HEAP32[i14 >> 2] = 2147483647;
   if ((d4 > 0.0 ? (i79 = HEAP32[i71 >> 2] | 0, d52 = +HEAPF32[i79 + (i1 * 52 | 0) >> 2], d53 = +HEAPF32[i79 + (i1 * 52 | 0) + 4 >> 2], d54 = +HEAPF32[i79 + (i1 * 52 | 0) + 16 >> 2], d55 = +HEAPF32[i79 + (i1 * 52 | 0) + 20 >> 2], d54 * (+HEAPF32[i12 >> 2] - d53) - (+HEAPF32[i11 >> 2] - d52) * d55 < 0.0) : 0) ? (d24 = d52 + d4 * d54, d23 = d53 + d4 * d55, HEAPF32[i69 >> 2] = d24, HEAPF32[i10 >> 2] = d23, d25 = +HEAPF32[i15 >> 2], d23 * d23 + d24 * d24 < d25 * d25) : 0) __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
   i1 = i1 + 1 | 0;
   i2 = HEAP32[i56 >> 2] | 0;
   i3 = HEAP32[i71 >> 2] | 0;
  } while ((i1 | 0) < ((i2 - i3 | 0) / 52 | 0 | 0));
 }
 if ((i2 - i3 | 0) > 0) {
  i10 = i69 + 4 | 0;
  i1 = 0;
  do {
   HEAP32[i13 >> 2] = 2147483647;
   HEAP32[i14 >> 2] = i1;
   d55 = +HEAPF32[i15 >> 2];
   d7 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2];
   d8 = +HEAPF32[i3 + (i1 * 52 | 0) + 12 >> 2];
   d9 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2];
   d6 = +HEAPF32[i3 + (i1 * 52 | 0) + 8 >> 2];
   d4 = d7 * d8 - d9 * d6;
   d4 = d55 * d55 - d4 * d4;
   if (d4 > 0.0) {
    d5 = +Math_sqrt(+d4);
    d55 = d8 * d9 + d7 * d6;
    d4 = d5 - d55;
    d5 = -d55 - d5;
    if (d4 >= 0.0) {
     HEAPF32[i69 >> 2] = d7 + d6 * d4;
     HEAPF32[i10 >> 2] = d9 + d8 * d4;
     __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
    }
    if (d5 >= 0.0) {
     i79 = HEAP32[i71 >> 2] | 0;
     d55 = d5 * +HEAPF32[i79 + (i1 * 52 | 0) + 12 >> 2] + +HEAPF32[i79 + (i1 * 52 | 0) + 4 >> 2];
     HEAPF32[i69 >> 2] = d5 * +HEAPF32[i79 + (i1 * 52 | 0) + 8 >> 2] + +HEAPF32[i79 + (i1 * 52 | 0) >> 2];
     HEAPF32[i10 >> 2] = d55;
     __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
    }
   }
   HEAP32[i13 >> 2] = i1;
   HEAP32[i14 >> 2] = 2147483647;
   d55 = +HEAPF32[i15 >> 2];
   i79 = HEAP32[i71 >> 2] | 0;
   d6 = +HEAPF32[i79 + (i1 * 52 | 0) >> 2];
   d7 = +HEAPF32[i79 + (i1 * 52 | 0) + 20 >> 2];
   d8 = +HEAPF32[i79 + (i1 * 52 | 0) + 4 >> 2];
   d9 = +HEAPF32[i79 + (i1 * 52 | 0) + 16 >> 2];
   d4 = d6 * d7 - d8 * d9;
   d4 = d55 * d55 - d4 * d4;
   if (d4 > 0.0) {
    d5 = +Math_sqrt(+d4);
    d55 = d7 * d8 + d6 * d9;
    d4 = d5 - d55;
    d5 = -d55 - d5;
    if (d4 >= 0.0) {
     HEAPF32[i69 >> 2] = d6 + d9 * d4;
     HEAPF32[i10 >> 2] = d8 + d7 * d4;
     __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
    }
    if (d5 >= 0.0) {
     i79 = HEAP32[i71 >> 2] | 0;
     d55 = d5 * +HEAPF32[i79 + (i1 * 52 | 0) + 20 >> 2] + +HEAPF32[i79 + (i1 * 52 | 0) + 4 >> 2];
     HEAPF32[i69 >> 2] = d5 * +HEAPF32[i79 + (i1 * 52 | 0) + 16 >> 2] + +HEAPF32[i79 + (i1 * 52 | 0) >> 2];
     HEAPF32[i10 >> 2] = d55;
     __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
    }
   }
   i1 = i1 + 1 | 0;
   i2 = HEAP32[i56 >> 2] | 0;
   i3 = HEAP32[i71 >> 2] | 0;
  } while ((i1 | 0) < ((i2 - i3 | 0) / 52 | 0 | 0));
 }
 if ((i2 - i3 | 0) > 52) {
  i12 = i69 + 4 | 0;
  i11 = 0;
  do {
   i10 = i11;
   i11 = i11 + 1 | 0;
   if ((i11 | 0) < ((i2 - i3 | 0) / 52 | 0 | 0)) {
    i1 = i11;
    do {
     HEAP32[i13 >> 2] = i10;
     HEAP32[i14 >> 2] = i1;
     d4 = +HEAPF32[i3 + (i10 * 52 | 0) + 8 >> 2];
     d5 = +HEAPF32[i3 + (i1 * 52 | 0) + 12 >> 2];
     d6 = +HEAPF32[i3 + (i10 * 52 | 0) + 12 >> 2];
     d7 = +HEAPF32[i3 + (i1 * 52 | 0) + 8 >> 2];
     d8 = d4 * d5 - d6 * d7;
     if ((d8 != 0.0 ? (d57 = +HEAPF32[i3 + (i10 * 52 | 0) >> 2], d54 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2] - d57, d58 = +HEAPF32[i3 + (i10 * 52 | 0) + 4 >> 2], d55 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2] - d58, d59 = (d5 * d54 - d7 * d55) / d8, d59 >= 0.0 ? (d6 * d54 - d4 * d55) / d8 >= 0.0 : 0) : 0) ? (d54 = d57 + d4 * d59, d53 = d58 + d6 * d59, HEAPF32[i69 >> 2] = d54, HEAPF32[i12 >> 2] = d53, d55 = +HEAPF32[i15 >> 2], d53 * d53 + d54 * d54 < d55 * d55) : 0) {
      __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
      i3 = HEAP32[i71 >> 2] | 0;
     }
     d4 = +HEAPF32[i3 + (i10 * 52 | 0) + 16 >> 2];
     d5 = +HEAPF32[i3 + (i1 * 52 | 0) + 12 >> 2];
     d6 = +HEAPF32[i3 + (i10 * 52 | 0) + 20 >> 2];
     d7 = +HEAPF32[i3 + (i1 * 52 | 0) + 8 >> 2];
     d8 = d4 * d5 - d6 * d7;
     if ((d8 != 0.0 ? (d60 = +HEAPF32[i3 + (i10 * 52 | 0) >> 2], d54 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2] - d60, d61 = +HEAPF32[i3 + (i10 * 52 | 0) + 4 >> 2], d55 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2] - d61, d62 = (d5 * d54 - d7 * d55) / d8, d62 >= 0.0 ? (d6 * d54 - d4 * d55) / d8 >= 0.0 : 0) : 0) ? (d54 = d60 + d4 * d62, d53 = d61 + d6 * d62, HEAPF32[i69 >> 2] = d54, HEAPF32[i12 >> 2] = d53, d55 = +HEAPF32[i15 >> 2], d53 * d53 + d54 * d54 < d55 * d55) : 0) {
      __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
      i3 = HEAP32[i71 >> 2] | 0;
     }
     d4 = +HEAPF32[i3 + (i10 * 52 | 0) + 8 >> 2];
     d5 = +HEAPF32[i3 + (i1 * 52 | 0) + 20 >> 2];
     d6 = +HEAPF32[i3 + (i10 * 52 | 0) + 12 >> 2];
     d7 = +HEAPF32[i3 + (i1 * 52 | 0) + 16 >> 2];
     d8 = d4 * d5 - d6 * d7;
     if ((d8 != 0.0 ? (d63 = +HEAPF32[i3 + (i10 * 52 | 0) >> 2], d54 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2] - d63, d64 = +HEAPF32[i3 + (i10 * 52 | 0) + 4 >> 2], d55 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2] - d64, d65 = (d5 * d54 - d7 * d55) / d8, d65 >= 0.0 ? (d6 * d54 - d4 * d55) / d8 >= 0.0 : 0) : 0) ? (d54 = d63 + d4 * d65, d53 = d64 + d6 * d65, HEAPF32[i69 >> 2] = d54, HEAPF32[i12 >> 2] = d53, d55 = +HEAPF32[i15 >> 2], d53 * d53 + d54 * d54 < d55 * d55) : 0) {
      __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
      i3 = HEAP32[i71 >> 2] | 0;
     }
     d4 = +HEAPF32[i3 + (i10 * 52 | 0) + 16 >> 2];
     d5 = +HEAPF32[i3 + (i1 * 52 | 0) + 20 >> 2];
     d6 = +HEAPF32[i3 + (i10 * 52 | 0) + 20 >> 2];
     d7 = +HEAPF32[i3 + (i1 * 52 | 0) + 16 >> 2];
     d8 = d4 * d5 - d6 * d7;
     do if (d8 != 0.0 ? (d66 = +HEAPF32[i3 + (i10 * 52 | 0) >> 2], d54 = +HEAPF32[i3 + (i1 * 52 | 0) >> 2] - d66, d67 = +HEAPF32[i3 + (i10 * 52 | 0) + 4 >> 2], d55 = +HEAPF32[i3 + (i1 * 52 | 0) + 4 >> 2] - d67, d68 = (d5 * d54 - d7 * d55) / d8, d68 >= 0.0 ? (d6 * d54 - d4 * d55) / d8 >= 0.0 : 0) : 0) {
      d54 = d66 + d4 * d68;
      d53 = d67 + d6 * d68;
      HEAPF32[i69 >> 2] = d54;
      HEAPF32[i12 >> 2] = d53;
      d55 = +HEAPF32[i15 >> 2];
      if (!(d53 * d53 + d54 * d54 < d55 * d55)) break;
      __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i70);
      i3 = HEAP32[i71 >> 2] | 0;
     } while (0);
     i1 = i1 + 1 | 0;
     i2 = HEAP32[i56 >> 2] | 0;
    } while ((i1 | 0) < ((i2 - i3 | 0) / 52 | 0 | 0));
   }
  } while ((i11 | 0) < (((i2 - i3 | 0) / 52 | 0) + -1 | 0));
 }
 i1 = i77 + 100 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i77 + 104 >> 2] = 0;
 if (!(+HEAPF32[i76 >> 2] != 34028234663852886.0e22)) {
  if ((HEAP32[i72 >> 2] | 0) != -1) {
   i76 = i73;
   i77 = HEAP32[i76 + 4 >> 2] | 0;
   i79 = i1;
   HEAP32[i79 >> 2] = HEAP32[i76 >> 2];
   HEAP32[i79 + 4 >> 2] = i77;
  }
 } else {
  i76 = i75;
  i77 = HEAP32[i76 + 4 >> 2] | 0;
  i79 = i1;
  HEAP32[i79 >> 2] = HEAP32[i76 >> 2];
  HEAP32[i79 + 4 >> 2] = i77;
 }
 if (!i74) {
  STACKTOP = i78;
  return;
 }
 if ((i74 | 0) != (i71 | 0)) __ZNSt3__16vectorI16VelocityObstacleNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(i74, i3, i2);
 i76 = i1;
 i77 = HEAP32[i76 + 4 >> 2] | 0;
 i79 = i74 + 24 | 0;
 HEAP32[i79 >> 2] = HEAP32[i76 >> 2];
 HEAP32[i79 + 4 >> 2] = i77;
 STACKTOP = i78;
 return;
}

function __Z6runTriP6MapDefR4Mesh(i1, i48) {
 i1 = i1 | 0;
 i48 = i48 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, d55 = 0.0;
 i54 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i44 = i54 + 304 | 0;
 i53 = i54 + 292 | 0;
 i51 = i54 + 40 | 0;
 i49 = i54 + 280 | 0;
 i25 = i54;
 i26 = i54 + 268 | 0;
 i27 = i54 + 264 | 0;
 i28 = i54 + 252 | 0;
 i50 = i54 + 240 | 0;
 i45 = i54 + 228 | 0;
 i47 = i54 + 216 | 0;
 i41 = i54 + 204 | 0;
 i42 = i54 + 192 | 0;
 i46 = i54 + 180 | 0;
 i43 = i54 + 176 | 0;
 i9 = i1 + 16 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i7 = i1 + 12 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) {
  STACKTOP = i54;
  return;
 } else {
  i2 = i1;
  i1 = 0;
 }
 do {
  i52 = HEAP32[i2 >> 2] | 0;
  i1 = ((HEAP32[i52 + 4 >> 2] | 0) - (HEAP32[i52 >> 2] | 0) >> 2) + i1 | 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) != (i3 | 0));
 HEAP32[i53 >> 2] = 0;
 i52 = i53 + 4 | 0;
 HEAP32[i52 >> 2] = 0;
 HEAP32[i53 + 8 >> 2] = 0;
 __ZNSt3__16vectorIN3p2t5PointENS_9allocatorIS2_EEE7reserveEj(i53, i1);
 i6 = i1 + 2 | 0;
 i40 = i48 + 8 | 0;
 i4 = HEAP32[i48 >> 2] | 0;
 i1 = i4;
 if ((((HEAP32[i40 >> 2] | 0) - i1 | 0) / 12 | 0) >>> 0 < i6 >>> 0) {
  i5 = i48 + 4 | 0;
  i1 = (HEAP32[i5 >> 2] | 0) - i1 | 0;
  i2 = (i1 | 0) / 12 | 0;
  if (!i6) i3 = 0; else i3 = __Znwj(i6 * 12 | 0) | 0;
  i39 = i3 + ((((i1 | 0) / -12 | 0) + i2 | 0) * 12 | 0) | 0;
  _memcpy(i39 | 0, i4 | 0, i1 | 0) | 0;
  HEAP32[i48 >> 2] = i39;
  HEAP32[i5 >> 2] = i3 + (i2 * 12 | 0);
  HEAP32[i40 >> 2] = i3 + (i6 * 12 | 0);
  if (i4) __ZdlPv(i4);
 }
 __ZN3p2t12SweepContextC2Ev(i51);
 HEAP32[i51 + 120 >> 2] = 0;
 HEAP32[i51 + 124 >> 2] = 0;
 HEAP32[i51 + 128 >> 2] = 0;
 i38 = i51 + 56 | 0;
 i39 = i51 + 64 | 0;
 i3 = HEAP32[i38 >> 2] | 0;
 i1 = i3;
 if ((HEAP32[i39 >> 2] | 0) - i1 >> 2 >>> 0 < i6 >>> 0) {
  i4 = i51 + 60 | 0;
  i1 = (HEAP32[i4 >> 2] | 0) - i1 | 0;
  if (!i6) i2 = 0; else i2 = __Znwj(i6 << 2) | 0;
  _memcpy(i2 | 0, i3 | 0, i1 | 0) | 0;
  HEAP32[i38 >> 2] = i2;
  HEAP32[i4 >> 2] = i2 + (i1 >> 2 << 2);
  HEAP32[i39 >> 2] = i2 + (i6 << 2);
  if (i3) __ZdlPv(i3);
 }
 HEAP32[i49 >> 2] = 0;
 i37 = i49 + 4 | 0;
 HEAP32[i37 >> 2] = 0;
 HEAP32[i49 + 8 >> 2] = 0;
 i2 = HEAP32[i7 >> 2] | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 L20 : do if ((i2 | 0) != (i9 | 0)) {
  i10 = i28 + 4 | 0;
  i11 = i28 + 8 | 0;
  i12 = i28 + 8 | 0;
  i13 = i48 + 4 | 0;
  i14 = i25 + 4 | 0;
  i15 = i25 + 8 | 0;
  i16 = i25 + 16 | 0;
  i17 = i25 + 24 | 0;
  i18 = i25 + 28 | 0;
  i19 = i25 + 32 | 0;
  i20 = i53 + 8 | 0;
  i21 = i25 + 24 | 0;
  i22 = i25 + 32 | 0;
  i23 = i26 + 4 | 0;
  i24 = i49 + 8 | 0;
  i3 = 0;
  i5 = 0;
  i1 = 0;
  while (1) {
   if ((i5 | 0) != (i3 | 0)) {
    i5 = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2) | 0;
    HEAP32[i37 >> 2] = i5;
   }
   i35 = HEAP32[i2 >> 2] | 0;
   i4 = HEAP32[i35 >> 2] | 0;
   if ((HEAP32[i35 + 4 >> 2] | 0) == (i4 | 0)) i4 = i5; else {
    i7 = 0;
    do {
     i3 = HEAP32[i4 + (i7 << 2) >> 2] | 0;
     if ((i7 | 0) > 0) {
      i35 = HEAP32[i4 + (i7 + -1 << 2) >> 2] | 0;
      d8 = +HEAPF32[i3 + 4 >> 2];
      if (!(d8 == +HEAPF32[i35 + 4 >> 2] ? +HEAPF32[i3 + 8 >> 2] == +HEAPF32[i35 + 8 >> 2] : 0)) i36 = 22;
     } else {
      d8 = +HEAPF32[i3 + 4 >> 2];
      i36 = 22;
     }
     do if ((i36 | 0) == 22) {
      i36 = 0;
      i6 = i3 + 4 | 0;
      d55 = +HEAPF32[i3 + 8 >> 2];
      HEAP32[i25 >> 2] = ((HEAP32[i13 >> 2] | 0) - (HEAP32[i48 >> 2] | 0) | 0) / 12 | 0;
      HEAP8[i14 >> 0] = 0;
      HEAPF64[i15 >> 3] = d8;
      HEAPF64[i16 >> 3] = d55;
      HEAP32[i17 >> 2] = 0;
      HEAP32[i18 >> 2] = 0;
      HEAP32[i19 >> 2] = 0;
      i3 = HEAP32[i52 >> 2] | 0;
      if (i3 >>> 0 >= (HEAP32[i20 >> 2] | 0) >>> 0) {
       __ZNSt3__16vectorIN3p2t5PointENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i53, i25);
       i3 = HEAP32[i17 >> 2] | 0;
       i4 = i3;
       if (i3) {
        i5 = HEAP32[i18 >> 2] | 0;
        if ((i5 | 0) != (i3 | 0)) HEAP32[i18 >> 2] = i5 + (~((i5 + -4 - i4 | 0) >>> 2) << 2);
        __ZdlPv(i3);
       }
      } else {
       HEAP32[i3 >> 2] = HEAP32[i25 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i25 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i25 + 8 >> 2];
       HEAP32[i3 + 12 >> 2] = HEAP32[i25 + 12 >> 2];
       HEAP32[i3 + 16 >> 2] = HEAP32[i25 + 16 >> 2];
       HEAP32[i3 + 20 >> 2] = HEAP32[i25 + 20 >> 2];
       i35 = i3 + 24 | 0;
       HEAP32[i35 >> 2] = 0;
       HEAP32[i35 + 4 >> 2] = 0;
       HEAP32[i35 + 8 >> 2] = 0;
       HEAP32[i22 >> 2] = 0;
       HEAP32[i18 >> 2] = 0;
       HEAP32[i21 >> 2] = 0;
       HEAP32[i52 >> 2] = (HEAP32[i52 >> 2] | 0) + 40;
      }
      i3 = HEAP32[i13 >> 2] | 0;
      HEAP32[i26 >> 2] = (i3 - (HEAP32[i48 >> 2] | 0) | 0) / 12 | 0;
      i33 = i6;
      i34 = HEAP32[i33 + 4 >> 2] | 0;
      i35 = i23;
      HEAP32[i35 >> 2] = HEAP32[i33 >> 2];
      HEAP32[i35 + 4 >> 2] = i34;
      if (i3 >>> 0 < (HEAP32[i40 >> 2] | 0) >>> 0) {
       HEAP32[i3 >> 2] = HEAP32[i26 >> 2];
       HEAP32[i3 + 4 >> 2] = HEAP32[i26 + 4 >> 2];
       HEAP32[i3 + 8 >> 2] = HEAP32[i26 + 8 >> 2];
       HEAP32[i13 >> 2] = (HEAP32[i13 >> 2] | 0) + 12;
      } else __ZNSt3__16vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i48, i26);
      i3 = (HEAP32[i52 >> 2] | 0) + -40 | 0;
      HEAP32[i27 >> 2] = i3;
      i4 = HEAP32[i37 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0) {
       HEAP32[i4 >> 2] = i3;
       HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 4;
       break;
      } else {
       __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i49, i27);
       break;
      }
     } while (0);
     i7 = i7 + 1 | 0;
     i35 = HEAP32[i2 >> 2] | 0;
     i4 = HEAP32[i35 >> 2] | 0;
    } while (i7 >>> 0 < (HEAP32[i35 + 4 >> 2] | 0) - i4 >> 2 >>> 0);
    i4 = HEAP32[i37 >> 2] | 0;
    i3 = HEAP32[i49 >> 2] | 0;
   }
   i3 = i4 - i3 | 0;
   i4 = i3 >> 2;
   if (i4 >>> 0 >= 3) {
    HEAP32[i28 >> 2] = 0;
    HEAP32[i10 >> 2] = 0;
    HEAP32[i11 >> 2] = 0;
    if (i4 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i28);
    i5 = __Znwj(i3) | 0;
    HEAP32[i10 >> 2] = i5;
    HEAP32[i28 >> 2] = i5;
    HEAP32[i12 >> 2] = i5 + (i4 << 2);
    i3 = HEAP32[i49 >> 2] | 0;
    i6 = HEAP32[i37 >> 2] | 0;
    if ((i3 | 0) != (i6 | 0)) {
     i4 = i5;
     do {
      HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
      i4 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
      HEAP32[i10 >> 2] = i4;
      i3 = i3 + 4 | 0;
     } while ((i3 | 0) != (i6 | 0));
    }
    __ZN3p2t12SweepContext7AddHoleENSt3__16vectorIPNS_5PointENS1_9allocatorIS4_EEEE(i51, i28);
    i3 = HEAP32[i28 >> 2] | 0;
    i4 = i3;
    if (i3) {
     i5 = HEAP32[i10 >> 2] | 0;
     if ((i5 | 0) != (i3 | 0)) HEAP32[i10 >> 2] = i5 + (~((i5 + -4 - i4 | 0) >>> 2) << 2);
     __ZdlPv(i3);
    }
    i1 = i1 + 1 | 0;
   }
   i2 = i2 + 4 | 0;
   if ((i2 | 0) == (i9 | 0)) break;
   i3 = HEAP32[i49 >> 2] | 0;
   i5 = HEAP32[i37 >> 2] | 0;
  }
  if (i1) {
   i14 = i51 + 120 | 0;
   i15 = i48 + 12 | 0;
   i16 = i48 + 16 | 0;
   i17 = i50 + 4 | 0;
   i18 = i48 + 20 | 0;
   i19 = i45 + 4 | 0;
   i20 = i45 + 8 | 0;
   i21 = i45 + 4 | 0;
   i22 = i46 + 4 | 0;
   i23 = i46 + 8 | 0;
   i13 = i51 + 60 | 0;
   i24 = i46 + 8 | 0;
   i25 = i48 + 4 | 0;
   i26 = i21;
   i27 = i42 + 4 | 0;
   i28 = i42 + 8 | 0;
   i29 = i47 + 4 | 0;
   i30 = i47 + 8 | 0;
   i31 = i44 + 4 | 0;
   i32 = i44 + 8 | 0;
   i33 = i44 + 32 | 0;
   i34 = i44 + 28 | 0;
   i35 = i44 + 24 | 0;
   L74 : while (1) {
    __ZN3p2t5Sweep11TriangulateERNS_12SweepContextE(i14, i51);
    __ZN3p2t12SweepContext12GetTrianglesEv(i50, i51);
    i2 = HEAP32[i15 >> 2] | 0;
    i36 = i2;
    i3 = (HEAP32[i16 >> 2] | 0) - i36 | 0;
    i4 = (i3 | 0) / 36 | 0;
    i7 = HEAP32[i17 >> 2] | 0;
    i1 = HEAP32[i50 >> 2] | 0;
    i5 = (i7 - i1 >> 2) + i4 | 0;
    if ((((HEAP32[i18 >> 2] | 0) - i36 | 0) / 36 | 0) >>> 0 < i5 >>> 0) {
     if (!i5) i6 = 0; else i6 = __Znwj(i5 * 36 | 0) | 0;
     i36 = i6 + ((((i3 | 0) / -36 | 0) + i4 | 0) * 36 | 0) | 0;
     _memcpy(i36 | 0, i2 | 0, i3 | 0) | 0;
     HEAP32[i15 >> 2] = i36;
     HEAP32[i16 >> 2] = i6 + (i4 * 36 | 0);
     HEAP32[i18 >> 2] = i6 + (i5 * 36 | 0);
     if (i2) {
      __ZdlPv(i2);
      i1 = HEAP32[i50 >> 2] | 0;
      i7 = HEAP32[i17 >> 2] | 0;
     }
    }
    HEAP32[i19 >> 2] = 0;
    HEAP32[i20 >> 2] = 0;
    HEAP32[i45 >> 2] = i21;
    if ((i1 | 0) != (i7 | 0)) do {
     i11 = HEAP32[i1 >> 2] | 0;
     i12 = 0;
     do {
      i10 = HEAP32[i11 + 8 + (i12 << 2) >> 2] | 0;
      i9 = i10;
      i2 = HEAP32[i10 >> 2] | 0;
      HEAP8[i10 + 4 >> 0] = 1;
      do if ((i2 | 0) < 0) {
       i4 = HEAP32[i21 >> 2] | 0;
       i5 = (i4 | 0) == 0;
       if (!i5) {
        i2 = i21;
        i3 = i4;
        L91 : do {
         while (1) {
          if ((HEAP32[i3 + 16 >> 2] | 0) >>> 0 >= i10 >>> 0) {
           i2 = i3;
           break;
          }
          i3 = HEAP32[i3 + 4 >> 2] | 0;
          if (!i3) break L91;
         }
         i3 = HEAP32[i2 >> 2] | 0;
        } while ((i3 | 0) != 0);
        if ((i2 | 0) != (i21 | 0) ? i10 >>> 0 >= (HEAP32[i2 + 16 >> 2] | 0) >>> 0 : 0) {
         i2 = HEAP32[i2 + 20 >> 2] | 0;
         break;
        }
       }
       if ((HEAP32[i20 >> 2] | 0) >>> 0 >= 2) break L74;
       i6 = HEAP32[i25 >> 2] | 0;
       i2 = (i6 - (HEAP32[i48 >> 2] | 0) | 0) / 12 | 0;
       do if (!i5) {
        i5 = i4;
        while (1) {
         i3 = HEAP32[i5 + 16 >> 2] | 0;
         if (i10 >>> 0 < i3 >>> 0) {
          i3 = HEAP32[i5 >> 2] | 0;
          if (!i3) {
           i4 = i5;
           i3 = i5;
           i36 = 72;
           break;
          }
         } else {
          if (i3 >>> 0 >= i10 >>> 0) {
           i3 = i5;
           i36 = 78;
           break;
          }
          i4 = i5 + 4 | 0;
          i3 = HEAP32[i4 >> 2] | 0;
          if (!i3) {
           i3 = i5;
           i36 = 76;
           break;
          }
         }
         i5 = i3;
        }
        if ((i36 | 0) == 72) {
         HEAP32[i44 >> 2] = i3;
         i36 = 79;
         break;
        } else if ((i36 | 0) == 76) {
         HEAP32[i44 >> 2] = i3;
         i36 = 79;
         break;
        } else if ((i36 | 0) == 78) {
         i36 = 0;
         HEAP32[i44 >> 2] = i3;
         if (!i3) {
          i4 = i44;
          i36 = 79;
          break;
         } else {
          i4 = i6;
          break;
         }
        }
       } else {
        HEAP32[i44 >> 2] = i21;
        i4 = i21;
        i3 = i26;
        i36 = 79;
       } while (0);
       if ((i36 | 0) == 79) {
        i5 = __Znwj(24) | 0;
        HEAP32[i5 + 16 >> 2] = i9;
        HEAP32[i5 + 20 >> 2] = 0;
        HEAP32[i5 >> 2] = 0;
        HEAP32[i5 + 4 >> 2] = 0;
        HEAP32[i5 + 8 >> 2] = i3;
        HEAP32[i4 >> 2] = i5;
        i3 = HEAP32[HEAP32[i45 >> 2] >> 2] | 0;
        if (!i3) i3 = i5; else {
         HEAP32[i45 >> 2] = i3;
         i3 = HEAP32[i4 >> 2] | 0;
        }
        __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i19 >> 2] | 0, i3);
        HEAP32[i20 >> 2] = (HEAP32[i20 >> 2] | 0) + 1;
        i4 = HEAP32[i25 >> 2] | 0;
        i3 = i5;
       }
       HEAP32[i3 + 20 >> 2] = i2;
       d8 = +HEAPF64[i10 + 8 >> 3];
       d55 = +HEAPF64[i10 + 16 >> 3];
       HEAP32[i42 >> 2] = i2;
       HEAPF32[i27 >> 2] = d8;
       HEAPF32[i28 >> 2] = d55;
       if (i4 >>> 0 < (HEAP32[i40 >> 2] | 0) >>> 0) {
        HEAP32[i4 >> 2] = HEAP32[i42 >> 2];
        HEAP32[i4 + 4 >> 2] = HEAP32[i42 + 4 >> 2];
        HEAP32[i4 + 8 >> 2] = HEAP32[i42 + 8 >> 2];
        HEAP32[i25 >> 2] = (HEAP32[i25 >> 2] | 0) + 12;
        break;
       } else {
        __ZNSt3__16vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i48, i42);
        break;
       }
      } while (0);
      HEAP32[i47 + (i12 << 2) >> 2] = (HEAP32[i48 >> 2] | 0) + (i2 * 12 | 0);
      i12 = i12 + 1 | 0;
     } while ((i12 | 0) < 3);
     i36 = HEAP32[i29 >> 2] | 0;
     i2 = HEAP32[i30 >> 2] | 0;
     HEAP32[i44 >> 2] = HEAP32[i47 >> 2];
     HEAP32[i31 >> 2] = i36;
     HEAP32[i32 >> 2] = i2;
     HEAP32[i33 >> 2] = 0;
     HEAP32[i34 >> 2] = 0;
     HEAP32[i35 >> 2] = 0;
     i2 = HEAP32[i16 >> 2] | 0;
     if (i2 >>> 0 < (HEAP32[i18 >> 2] | 0) >>> 0) {
      i3 = i44;
      i4 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i4 | 0));
      HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 36;
     } else __ZNSt3__16vectorI8TriangleNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i15, i44);
     i1 = i1 + 4 | 0;
    } while ((i1 | 0) != (i7 | 0));
    HEAP32[i46 >> 2] = 0;
    HEAP32[i22 >> 2] = 0;
    HEAP32[i23 >> 2] = 0;
    i1 = HEAP32[i53 >> 2] | 0;
    i3 = HEAP32[i52 >> 2] | 0;
    if ((i1 | 0) == (i3 | 0)) {
     i3 = 0;
     i4 = 0;
     i1 = 0;
     i2 = 0;
    } else {
     do {
      do if (!(HEAP8[i1 + 4 >> 0] | 0)) {
       HEAP32[i43 >> 2] = i1;
       i2 = HEAP32[i22 >> 2] | 0;
       if (i2 >>> 0 < (HEAP32[i24 >> 2] | 0) >>> 0) {
        HEAP32[i2 >> 2] = i1;
        HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 4;
        break;
       } else {
        __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i46, i43);
        break;
       }
      } while (0);
      i1 = i1 + 40 | 0;
     } while ((i1 | 0) != (i3 | 0));
     i1 = HEAP32[i22 >> 2] | 0;
     i2 = HEAP32[i46 >> 2] | 0;
     i3 = i1;
     i4 = i2;
    }
    if (i3 - i4 >> 2 >>> 0 < 3) {
     i5 = 0;
     i1 = i4;
    } else {
     i3 = HEAP32[i38 >> 2] | 0;
     i4 = i3;
     if (i3) {
      i1 = HEAP32[i13 >> 2] | 0;
      if ((i1 | 0) != (i3 | 0)) HEAP32[i13 >> 2] = i1 + (~((i1 + -4 - i4 | 0) >>> 2) << 2);
      __ZdlPv(i3);
      HEAP32[i39 >> 2] = 0;
      HEAP32[i13 >> 2] = 0;
      HEAP32[i38 >> 2] = 0;
      i2 = HEAP32[i46 >> 2] | 0;
      i1 = HEAP32[i22 >> 2] | 0;
     }
     HEAP32[i38 >> 2] = i2;
     HEAP32[i13 >> 2] = i1;
     HEAP32[i39 >> 2] = HEAP32[i24 >> 2];
     HEAP32[i24 >> 2] = 0;
     HEAP32[i22 >> 2] = 0;
     HEAP32[i46 >> 2] = 0;
     __ZN3p2t12SweepContext8clearMapEv(i51);
     i5 = 1;
     i1 = HEAP32[i46 >> 2] | 0;
    }
    i2 = i1;
    if (i1) {
     i3 = HEAP32[i22 >> 2] | 0;
     if ((i3 | 0) != (i1 | 0)) HEAP32[i22 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
     __ZdlPv(i1);
    }
    __ZNSt3__16__treeINS_12__value_typeIPN3p2t5PointEiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i45, HEAP32[i21 >> 2] | 0);
    i1 = HEAP32[i50 >> 2] | 0;
    i2 = i1;
    if (i1) {
     i3 = HEAP32[i17 >> 2] | 0;
     if ((i3 | 0) != (i1 | 0)) HEAP32[i17 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
     __ZdlPv(i1);
    }
    if (!i5) break L20;
   }
   i54 = ___cxa_allocate_exception(16) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i41, 20025, 25);
   __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i54, i41);
   ___cxa_throw(i54 | 0, 16, 12);
  }
 } while (0);
 i1 = HEAP32[i49 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i37 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i37 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 __ZN3p2t5SweepD2Ev(i51 + 120 | 0);
 __ZN3p2t12SweepContextD2Ev(i51);
 i1 = HEAP32[i53 >> 2] | 0;
 if (!i1) {
  STACKTOP = i54;
  return;
 }
 i2 = HEAP32[i52 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i3 = i2 + -40 | 0;
   HEAP32[i52 >> 2] = i3;
   i4 = HEAP32[i2 + -16 >> 2] | 0;
   i5 = i4;
   if (!i4) i2 = i3; else {
    i2 = i2 + -12 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
    __ZdlPv(i4);
    i2 = HEAP32[i52 >> 2] | 0;
   }
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i53 >> 2] | 0;
 }
 __ZdlPv(i1);
 STACKTOP = i54;
 return;
}

function _vfscanf(i33, i2, i24) {
 i33 = i33 | 0;
 i2 = i2 | 0;
 i24 = i24 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i34 = 0, i35 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 i25 = i34 + 16 | 0;
 i27 = i34 + 8 | 0;
 i26 = i34 + 33 | 0;
 i28 = i34;
 i16 = i34 + 32 | 0;
 if ((HEAP32[i33 + 76 >> 2] | 0) > -1) i32 = ___lockfile(i33) | 0; else i32 = 0;
 i1 = HEAP8[i2 >> 0] | 0;
 L4 : do if (i1 << 24 >> 24) {
  i29 = i33 + 4 | 0;
  i30 = i33 + 100 | 0;
  i23 = i33 + 108 | 0;
  i17 = i33 + 8 | 0;
  i18 = i26 + 10 | 0;
  i19 = i26 + 33 | 0;
  i20 = i27 + 4 | 0;
  i21 = i26 + 46 | 0;
  i22 = i26 + 94 | 0;
  i4 = i1;
  i1 = 0;
  i5 = i2;
  i10 = 0;
  i3 = 0;
  i2 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace(i4 & 255) | 0)) {
    i4 = (HEAP8[i5 >> 0] | 0) == 37;
    L10 : do if (i4) {
     i8 = i5 + 1 | 0;
     i6 = HEAP8[i8 >> 0] | 0;
     L12 : do switch (i6 << 24 >> 24) {
     case 37:
      break L10;
     case 42:
      {
       i15 = 0;
       i6 = i5 + 2 | 0;
       break;
      }
     default:
      {
       i6 = (i6 & 255) + -48 | 0;
       if (i6 >>> 0 < 10 ? (HEAP8[i5 + 2 >> 0] | 0) == 36 : 0) {
        HEAP32[i25 >> 2] = HEAP32[i24 >> 2];
        while (1) {
         i15 = (HEAP32[i25 >> 2] | 0) + (4 - 1) & ~(4 - 1);
         i4 = HEAP32[i15 >> 2] | 0;
         HEAP32[i25 >> 2] = i15 + 4;
         if (i6 >>> 0 > 1) i6 = i6 + -1 | 0; else break;
        }
        i15 = i4;
        i6 = i5 + 3 | 0;
        break L12;
       }
       i6 = (HEAP32[i24 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       i15 = HEAP32[i6 >> 2] | 0;
       HEAP32[i24 >> 2] = i6 + 4;
       i6 = i8;
      }
     } while (0);
     i4 = HEAP8[i6 >> 0] | 0;
     i5 = i4 & 255;
     if ((i5 + -48 | 0) >>> 0 < 10) {
      i4 = 0;
      while (1) {
       i8 = (i4 * 10 | 0) + -48 + i5 | 0;
       i6 = i6 + 1 | 0;
       i4 = HEAP8[i6 >> 0] | 0;
       i5 = i4 & 255;
       if ((i5 + -48 | 0) >>> 0 >= 10) break; else i4 = i8;
      }
     } else i8 = 0;
     if (i4 << 24 >> 24 == 109) {
      i6 = i6 + 1 | 0;
      i9 = HEAP8[i6 >> 0] | 0;
      i4 = (i15 | 0) != 0 & 1;
      i3 = 0;
      i2 = 0;
     } else {
      i9 = i4;
      i4 = 0;
     }
     i5 = i6 + 1 | 0;
     switch (i9 & 255 | 0) {
     case 104:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 104;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? -2 : -1;
       break;
      }
     case 108:
      {
       i14 = (HEAP8[i5 >> 0] | 0) == 108;
       i5 = i14 ? i6 + 2 | 0 : i5;
       i6 = i14 ? 3 : 1;
       break;
      }
     case 106:
      {
       i6 = 3;
       break;
      }
     case 116:
     case 122:
      {
       i6 = 1;
       break;
      }
     case 76:
      {
       i6 = 2;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       i5 = i6;
       i6 = 0;
       break;
      }
     default:
      {
       i31 = 152;
       break L6;
      }
     }
     i9 = HEAPU8[i5 >> 0] | 0;
     i11 = (i9 & 47 | 0) == 3;
     i9 = i11 ? i9 | 32 : i9;
     i11 = i11 ? 1 : i6;
     switch (i9 | 0) {
     case 99:
      {
       i14 = i10;
       i13 = (i8 | 0) < 1 ? 1 : i8;
       break;
      }
     case 91:
      {
       i14 = i10;
       i13 = i8;
       break;
      }
     case 110:
      {
       if (!i15) {
        i6 = i10;
        break L8;
       }
       switch (i11 | 0) {
       case -2:
        {
         HEAP8[i15 >> 0] = i10;
         i6 = i10;
         break L8;
        }
       case -1:
        {
         HEAP16[i15 >> 1] = i10;
         i6 = i10;
         break L8;
        }
       case 0:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 1:
        {
         HEAP32[i15 >> 2] = i10;
         i6 = i10;
         break L8;
        }
       case 3:
        {
         i6 = i15;
         HEAP32[i6 >> 2] = i10;
         HEAP32[i6 + 4 >> 2] = ((i10 | 0) < 0) << 31 >> 31;
         i6 = i10;
         break L8;
        }
       default:
        {
         i6 = i10;
         break L8;
        }
       }
      }
     default:
      {
       ___shlim(i33, 0);
       do {
        i6 = HEAP32[i29 >> 2] | 0;
        if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
         HEAP32[i29 >> 2] = i6 + 1;
         i6 = HEAPU8[i6 >> 0] | 0;
        } else i6 = ___shgetc(i33) | 0;
       } while ((_isspace(i6) | 0) != 0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i14 = (HEAP32[i23 >> 2] | 0) + i10 + i6 - (HEAP32[i17 >> 2] | 0) | 0;
       i13 = i8;
      }
     }
     ___shlim(i33, i13);
     i6 = HEAP32[i29 >> 2] | 0;
     i8 = HEAP32[i30 >> 2] | 0;
     if (i6 >>> 0 < i8 >>> 0) HEAP32[i29 >> 2] = i6 + 1; else {
      if ((___shgetc(i33) | 0) < 0) {
       i31 = 152;
       break L6;
      }
      i8 = HEAP32[i30 >> 2] | 0;
     }
     if (i8) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
     L67 : do switch (i9 | 0) {
     case 91:
     case 99:
     case 115:
      {
       i12 = (i9 | 0) == 99;
       L69 : do if ((i9 & 239 | 0) == 99) {
        _memset(i26 | 0, -1, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        if ((i9 | 0) == 115) {
         HEAP8[i19 >> 0] = 0;
         HEAP8[i18 >> 0] = 0;
         HEAP8[i18 + 1 >> 0] = 0;
         HEAP8[i18 + 2 >> 0] = 0;
         HEAP8[i18 + 3 >> 0] = 0;
         HEAP8[i18 + 4 >> 0] = 0;
        }
       } else {
        i35 = i5 + 1 | 0;
        i10 = (HEAP8[i35 >> 0] | 0) == 94;
        i6 = i10 & 1;
        i9 = i10 ? i35 : i5;
        i5 = i10 ? i5 + 2 | 0 : i35;
        _memset(i26 | 0, i10 & 1 | 0, 257) | 0;
        HEAP8[i26 >> 0] = 0;
        switch (HEAP8[i5 >> 0] | 0) {
        case 45:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i21 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        case 93:
         {
          i10 = (i6 ^ 1) & 255;
          HEAP8[i22 >> 0] = i10;
          i5 = i9 + 2 | 0;
          break;
         }
        default:
         i10 = (i6 ^ 1) & 255;
        }
        while (1) {
         i6 = HEAP8[i5 >> 0] | 0;
         L80 : do switch (i6 << 24 >> 24) {
         case 0:
          {
           i31 = 152;
           break L6;
          }
         case 93:
          break L69;
         case 45:
          {
           i9 = i5 + 1 | 0;
           i6 = HEAP8[i9 >> 0] | 0;
           switch (i6 << 24 >> 24) {
           case 93:
           case 0:
            {
             i6 = 45;
             break L80;
            }
           default:
            {}
           }
           i5 = HEAP8[i5 + -1 >> 0] | 0;
           if ((i5 & 255) < (i6 & 255)) {
            i5 = i5 & 255;
            do {
             i5 = i5 + 1 | 0;
             HEAP8[i26 + i5 >> 0] = i10;
             i6 = HEAP8[i9 >> 0] | 0;
            } while ((i5 | 0) < (i6 & 255 | 0));
            i5 = i9;
           } else i5 = i9;
           break;
          }
         default:
          {}
         } while (0);
         HEAP8[i26 + ((i6 & 255) + 1) >> 0] = i10;
         i5 = i5 + 1 | 0;
        }
       } while (0);
       i9 = i12 ? i13 + 1 | 0 : 31;
       i10 = (i11 | 0) == 1;
       i11 = (i4 | 0) != 0;
       L88 : do if (i10) {
        if (i11) {
         i2 = _malloc(i9 << 2) | 0;
         if (!i2) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
        } else i2 = i15;
        HEAP32[i27 >> 2] = 0;
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        L94 : while (1) {
         i8 = (i2 | 0) == 0;
         do {
          L98 : while (1) {
           i6 = HEAP32[i29 >> 2] | 0;
           if (i6 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i6 + 1;
            i6 = HEAPU8[i6 >> 0] | 0;
           } else i6 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i6 + 1) >> 0] | 0)) break L94;
           HEAP8[i16 >> 0] = i6;
           switch (_mbrtowc(i28, i16, 1, i27) | 0) {
           case -1:
            {
             i3 = 0;
             i31 = 152;
             break L6;
            }
           case -2:
            break;
           default:
            break L98;
           }
          }
          if (!i8) {
           HEAP32[i2 + (i3 << 2) >> 2] = HEAP32[i28 >> 2];
           i3 = i3 + 1 | 0;
          }
         } while (!(i11 & (i3 | 0) == (i9 | 0)));
         i3 = i9 << 1 | 1;
         i6 = _realloc(i2, i3 << 2) | 0;
         if (!i6) {
          i3 = 0;
          i31 = 152;
          break L6;
         }
         i35 = i9;
         i9 = i3;
         i2 = i6;
         i3 = i35;
        }
        if (!(_mbsinit(i27) | 0)) {
         i3 = 0;
         i31 = 152;
         break L6;
        } else {
         i8 = i3;
         i3 = 0;
        }
       } else {
        if (i11) {
         i3 = _malloc(i9) | 0;
         if (!i3) {
          i3 = 0;
          i2 = 0;
          i31 = 152;
          break L6;
         } else i6 = 0;
         while (1) {
          do {
           i2 = HEAP32[i29 >> 2] | 0;
           if (i2 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
            HEAP32[i29 >> 2] = i2 + 1;
            i2 = HEAPU8[i2 >> 0] | 0;
           } else i2 = ___shgetc(i33) | 0;
           if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
            i8 = i6;
            i2 = 0;
            break L88;
           }
           HEAP8[i3 + i6 >> 0] = i2;
           i6 = i6 + 1 | 0;
          } while ((i6 | 0) != (i9 | 0));
          i2 = i9 << 1 | 1;
          i6 = _realloc(i3, i2) | 0;
          if (!i6) {
           i2 = 0;
           i31 = 152;
           break L6;
          } else {
           i35 = i9;
           i9 = i2;
           i3 = i6;
           i6 = i35;
          }
         }
        }
        if (!i15) {
         i3 = i8;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i3 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = 0;
           i3 = 0;
           i2 = 0;
           break L88;
          }
          i3 = HEAP32[i30 >> 2] | 0;
         }
        } else {
         i3 = 0;
         while (1) {
          i2 = HEAP32[i29 >> 2] | 0;
          if (i2 >>> 0 < i8 >>> 0) {
           HEAP32[i29 >> 2] = i2 + 1;
           i2 = HEAPU8[i2 >> 0] | 0;
          } else i2 = ___shgetc(i33) | 0;
          if (!(HEAP8[i26 + (i2 + 1) >> 0] | 0)) {
           i8 = i3;
           i3 = i15;
           i2 = 0;
           break L88;
          }
          HEAP8[i15 + i3 >> 0] = i2;
          i8 = HEAP32[i30 >> 2] | 0;
          i3 = i3 + 1 | 0;
         }
        }
       } while (0);
       i6 = HEAP32[i29 >> 2] | 0;
       if (HEAP32[i30 >> 2] | 0) {
        i6 = i6 + -1 | 0;
        HEAP32[i29 >> 2] = i6;
       }
       i6 = i6 - (HEAP32[i17 >> 2] | 0) + (HEAP32[i23 >> 2] | 0) | 0;
       if (!i6) break L6;
       if (!((i6 | 0) == (i13 | 0) | i12 ^ 1)) break L6;
       do if (i11) if (i10) {
        HEAP32[i15 >> 2] = i2;
        break;
       } else {
        HEAP32[i15 >> 2] = i3;
        break;
       } while (0);
       if (!i12) {
        if (i2) HEAP32[i2 + (i8 << 2) >> 2] = 0;
        if (!i3) {
         i3 = 0;
         break L67;
        }
        HEAP8[i3 + i8 >> 0] = 0;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       i6 = 16;
       i31 = 134;
       break;
      }
     case 111:
      {
       i6 = 8;
       i31 = 134;
       break;
      }
     case 117:
     case 100:
      {
       i6 = 10;
       i31 = 134;
       break;
      }
     case 105:
      {
       i6 = 0;
       i31 = 134;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       d7 = +___floatscan(i33, i11, 0);
       if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
       if (i15) switch (i11 | 0) {
       case 0:
        {
         HEAPF32[i15 >> 2] = d7;
         break L67;
        }
       case 1:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       case 2:
        {
         HEAPF64[i15 >> 3] = d7;
         break L67;
        }
       default:
        break L67;
       }
       break;
      }
     default:
      {}
     } while (0);
     L168 : do if ((i31 | 0) == 134) {
      i31 = 0;
      i6 = ___intscan(i33, i6, 0, -1, -1) | 0;
      if ((HEAP32[i23 >> 2] | 0) == ((HEAP32[i17 >> 2] | 0) - (HEAP32[i29 >> 2] | 0) | 0)) break L6;
      if ((i15 | 0) != 0 & (i9 | 0) == 112) {
       HEAP32[i15 >> 2] = i6;
       break;
      }
      if (i15) switch (i11 | 0) {
      case -2:
       {
        HEAP8[i15 >> 0] = i6;
        break L168;
       }
      case -1:
       {
        HEAP16[i15 >> 1] = i6;
        break L168;
       }
      case 0:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 1:
       {
        HEAP32[i15 >> 2] = i6;
        break L168;
       }
      case 3:
       {
        i35 = i15;
        HEAP32[i35 >> 2] = i6;
        HEAP32[i35 + 4 >> 2] = tempRet0;
        break L168;
       }
      default:
       break L168;
      }
     } while (0);
     i1 = ((i15 | 0) != 0 & 1) + i1 | 0;
     i6 = (HEAP32[i23 >> 2] | 0) + i14 + (HEAP32[i29 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) | 0;
     break L8;
    } while (0);
    i5 = i5 + (i4 & 1) | 0;
    ___shlim(i33, 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
     HEAP32[i29 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i33) | 0;
    if ((i4 | 0) != (HEAPU8[i5 >> 0] | 0)) {
     i31 = 21;
     break L6;
    }
    i6 = i10 + 1 | 0;
   } else {
    while (1) {
     i4 = i5 + 1 | 0;
     if (!(_isspace(HEAPU8[i4 >> 0] | 0) | 0)) break; else i5 = i4;
    }
    ___shlim(i33, 0);
    do {
     i4 = HEAP32[i29 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i30 >> 2] | 0) >>> 0) {
      HEAP32[i29 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i33) | 0;
    } while ((_isspace(i4) | 0) != 0);
    i4 = HEAP32[i29 >> 2] | 0;
    if (HEAP32[i30 >> 2] | 0) {
     i4 = i4 + -1 | 0;
     HEAP32[i29 >> 2] = i4;
    }
    i6 = (HEAP32[i23 >> 2] | 0) + i10 + i4 - (HEAP32[i17 >> 2] | 0) | 0;
   } while (0);
   i5 = i5 + 1 | 0;
   i4 = HEAP8[i5 >> 0] | 0;
   if (!(i4 << 24 >> 24)) break L4; else i10 = i6;
  }
  if ((i31 | 0) == 21) {
   if (HEAP32[i30 >> 2] | 0) HEAP32[i29 >> 2] = (HEAP32[i29 >> 2] | 0) + -1;
   if ((i1 | 0) != 0 | (i4 | 0) > -1) break; else {
    i1 = 0;
    i31 = 153;
   }
  } else if ((i31 | 0) == 152) if (!i1) {
   i1 = i4;
   i31 = 153;
  }
  if ((i31 | 0) == 153) {
   i4 = i1;
   i1 = -1;
  }
  if (i4) {
   _free(i3);
   _free(i2);
  }
 } else i1 = 0; while (0);
 if (i32) ___unlockfile(i33);
 STACKTOP = i34;
 return i1 | 0;
}

function __ZN4Mesh16edgesAstarSearchERK4Vec2S2_P8TriangleS4_RNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEf(i49, i43, i22, i25, i21, i48, d26) {
 i49 = i49 | 0;
 i43 = i43 | 0;
 i22 = i22 | 0;
 i25 = i25 | 0;
 i21 = i21 | 0;
 i48 = i48 | 0;
 d26 = +d26;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i24 = 0, d27 = 0.0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, d33 = 0.0, d34 = 0.0, d35 = 0.0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, d59 = 0.0, d60 = 0.0, d61 = 0.0, d62 = 0.0, i63 = 0, i64 = 0, i65 = 0;
 i58 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i41 = i58 + 32 | 0;
 i46 = i58 + 120 | 0;
 i56 = i58 + 104 | 0;
 i54 = i58 + 88 | 0;
 i52 = i58 + 76 | 0;
 i50 = i58 + 64 | 0;
 i24 = i58 + 60 | 0;
 i7 = i58 + 24 | 0;
 i9 = i58 + 56 | 0;
 i15 = i58 + 16 | 0;
 i19 = i58 + 8 | 0;
 i42 = i58 + 48 | 0;
 i44 = i58 + 40 | 0;
 i40 = i58;
 HEAP32[i46 >> 2] = i21;
 i47 = i21;
 if ((i25 | 0) == (i21 | 0)) {
  i57 = 0;
  STACKTOP = i58;
  return i57 | 0;
 }
 HEAP32[i56 >> 2] = 0;
 i57 = i56 + 4 | 0;
 HEAP32[i57 >> 2] = 0;
 HEAP32[i56 + 8 >> 2] = 0;
 i28 = i56 + 12 | 0;
 HEAP32[i28 >> 2] = 31;
 HEAP32[i54 >> 2] = 0;
 i55 = i54 + 4 | 0;
 HEAP32[i55 >> 2] = 0;
 HEAP32[i54 + 8 >> 2] = 0;
 i8 = i54 + 8 | 0;
 i53 = __Znwj(12) | 0;
 HEAP32[i54 >> 2] = i53;
 HEAP32[i55 >> 2] = i53;
 HEAP32[i8 >> 2] = i53 + 12;
 HEAP32[i52 >> 2] = 0;
 i53 = i52 + 4 | 0;
 HEAP32[i53 >> 2] = 0;
 HEAP32[i52 + 8 >> 2] = 0;
 i10 = i52 + 8 | 0;
 i51 = __Znwj(12) | 0;
 HEAP32[i52 >> 2] = i51;
 HEAP32[i53 >> 2] = i51;
 HEAP32[i10 >> 2] = i51 + 12;
 HEAP32[i50 >> 2] = 0;
 i51 = i50 + 4 | 0;
 HEAP32[i51 >> 2] = 0;
 HEAP32[i50 + 8 >> 2] = 0;
 i14 = i50 + 8 | 0;
 i16 = __Znwj(48) | 0;
 HEAP32[i50 >> 2] = i16;
 HEAP32[i51 >> 2] = i16;
 HEAP32[i14 >> 2] = i16 + 48;
 i16 = i22 + 4 | 0;
 i17 = i15 + 4 | 0;
 i30 = i43 + 4 | 0;
 i18 = i19 + 4 | 0;
 i32 = i56 + 8 | 0;
 i20 = i7 + 4 | 0;
 i23 = 0;
 do {
  i3 = HEAP32[i25 + 12 + (i23 << 2) >> 2] | 0;
  HEAP32[i24 >> 2] = i3;
  i4 = i3 + 8 | 0;
  i5 = i3;
  do if (HEAP32[i4 >> 2] | 0) {
   i6 = HEAP32[i3 + 4 >> 2] | 0;
   i1 = HEAP32[i3 >> 2] | 0;
   d62 = +HEAPF32[i6 + 4 >> 2];
   d61 = +HEAPF32[i1 + 4 >> 2] - d62;
   d60 = +HEAPF32[i6 + 8 >> 2];
   d59 = +HEAPF32[i1 + 8 >> 2] - d60;
   d27 = (d61 * (+HEAPF32[i43 >> 2] - d62) + d59 * (+HEAPF32[i30 >> 2] - d60)) / (d61 * d61 + d59 * d59);
   d27 = d27 < 0.0 ? 0.0 : d27;
   d27 = d27 > 1.0 ? 1.0 : d27;
   HEAPF32[i7 >> 2] = d62 + d61 * d27;
   HEAPF32[i20 >> 2] = d60 + d59 * d27;
   i1 = HEAP32[i51 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    i63 = i7;
    i6 = HEAP32[i63 + 4 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i1 + 4 >> 2] = i6;
    i1 = (HEAP32[i51 >> 2] | 0) + 8 | 0;
    HEAP32[i51 >> 2] = i1;
   } else {
    __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i50, i7);
    i1 = HEAP32[i51 >> 2] | 0;
   }
   i1 = i1 + -8 | 0;
   HEAP32[i3 + 40 >> 2] = i1;
   HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] = i1;
   i1 = HEAP32[i55 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i8 >> 2] | 0)) __ZNSt3__16vectorIP8HalfEdgeNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i54, i24); else {
    HEAP32[i1 >> 2] = i5;
    HEAP32[i55 >> 2] = (HEAP32[i55 >> 2] | 0) + 4;
   }
   HEAPF32[i9 >> 2] = 34028234663852886.0e22;
   i1 = HEAP32[i53 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = 2139095039;
    HEAP32[i53 >> 2] = i1 + 4;
    break;
   } else {
    __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(i52, i9);
    break;
   }
  } while (0);
  i5 = HEAP32[(HEAP32[i21 + 12 + (i23 << 2) >> 2] | 0) + 8 >> 2] | 0;
  if (i5) {
   i63 = HEAP32[i5 + 4 >> 2] | 0;
   i1 = HEAP32[i5 >> 2] | 0;
   d27 = +HEAPF32[i63 + 4 >> 2];
   d59 = +HEAPF32[i1 + 4 >> 2] - d27;
   d60 = +HEAPF32[i63 + 8 >> 2];
   d61 = +HEAPF32[i1 + 8 >> 2] - d60;
   d62 = (d59 * (+HEAPF32[i22 >> 2] - d27) + d61 * (+HEAPF32[i16 >> 2] - d60)) / (d59 * d59 + d61 * d61);
   d62 = d62 < 0.0 ? 0.0 : d62;
   d62 = d62 > 1.0 ? 1.0 : d62;
   HEAPF32[i15 >> 2] = d27 + d59 * d62;
   HEAPF32[i17 >> 2] = d60 + d61 * d62;
   i1 = HEAP32[i51 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    i6 = i15;
    i63 = HEAP32[i6 + 4 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i1 + 4 >> 2] = i63;
    i1 = (HEAP32[i51 >> 2] | 0) + 8 | 0;
    HEAP32[i51 >> 2] = i1;
   } else {
    __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i50, i15);
    i1 = HEAP32[i51 >> 2] | 0;
   }
   i1 = i1 + -8 | 0;
   i3 = i5 + 40 | 0;
   HEAP32[i3 >> 2] = i1;
   i4 = HEAP32[i5 + 8 >> 2] | 0;
   if (i4) {
    HEAP32[i4 + 40 >> 2] = i1;
    i1 = HEAP32[i3 >> 2] | 0;
   }
   d60 = +HEAPF32[i1 >> 2];
   d59 = +HEAPF32[i22 >> 2] - d60;
   d61 = +HEAPF32[i1 + 4 >> 2];
   d62 = +HEAPF32[i16 >> 2] - d61;
   d62 = +Math_sqrt(+(d59 * d59 + d62 * d62));
   HEAPF32[i5 + 48 >> 2] = d62;
   HEAP32[i5 + 44 >> 2] = 255;
   d60 = d60 - +HEAPF32[i43 >> 2];
   d61 = d61 - +HEAPF32[i30 >> 2];
   d62 = +Math_sqrt(+(d60 * d60 + d61 * d61)) + d62;
   HEAP32[i19 >> 2] = i5;
   HEAPF32[i18 >> 2] = d62;
   i1 = HEAP32[i57 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i32 >> 2] | 0) >>> 0) {
    i6 = i19;
    i63 = HEAP32[i6 + 4 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i1 + 4 >> 2] = i63;
    i1 = (HEAP32[i57 >> 2] | 0) + 8 | 0;
    HEAP32[i57 >> 2] = i1;
   } else {
    __ZNSt3__16vectorI8PrioNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i56, i19);
    i1 = HEAP32[i57 >> 2] | 0;
   }
   i5 = HEAP32[i56 >> 2] | 0;
   i6 = HEAP32[i28 >> 2] | 0;
   i3 = i1 - i5 | 0;
   if ((i3 | 0) > 8 ? (i11 = ((i3 >> 3) + -2 | 0) / 2 | 0, i12 = i5 + (i11 << 3) | 0, i13 = i1 + -8 | 0, FUNCTION_TABLE_iii[i6 & 31](i12, i13) | 0) : 0) {
    i3 = i13;
    i1 = HEAP32[i3 + 4 >> 2] | 0;
    i4 = i41;
    HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i4 + 4 >> 2] = i1;
    i4 = i11;
    i1 = i12;
    i3 = i13;
    while (1) {
     i65 = i1;
     i64 = HEAP32[i65 + 4 >> 2] | 0;
     i63 = i3;
     HEAP32[i63 >> 2] = HEAP32[i65 >> 2];
     HEAP32[i63 + 4 >> 2] = i64;
     if (!i4) break;
     i4 = (i4 + -1 | 0) / 2 | 0;
     i3 = i5 + (i4 << 3) | 0;
     if (!(FUNCTION_TABLE_iii[i6 & 31](i3, i41) | 0)) break; else {
      i65 = i1;
      i1 = i3;
      i3 = i65;
     }
    }
    i63 = i41;
    i64 = HEAP32[i63 + 4 >> 2] | 0;
    i65 = i1;
    HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
    HEAP32[i65 + 4 >> 2] = i64;
   }
  }
  i23 = i23 + 1 | 0;
 } while ((i23 | 0) < 3);
 d62 = d26 * 1.4142135381698608;
 d27 = d62 * 2.0;
 d27 = d27 * d27;
 d26 = d62 + d26 * 2.0;
 d26 = d26 * d26;
 i13 = i42 + 4 | 0;
 i14 = i44 + 4 | 0;
 i15 = i40 + 4 | 0;
 i4 = HEAP32[i57 >> 2] | 0;
 i1 = 0;
 L43 : do {
  i3 = HEAP32[i56 >> 2] | 0;
  if ((i3 | 0) == (i4 | 0)) break;
  while (1) {
   i12 = HEAP32[i3 >> 2] | 0;
   i11 = HEAP32[i3 + 4 >> 2] | 0;
   i10 = HEAP32[i28 >> 2] | 0;
   i5 = i4 - i3 | 0;
   i6 = i5 >> 3;
   if ((i5 | 0) > 8) {
    i9 = i4 + -8 | 0;
    i65 = i3;
    i64 = HEAP32[i65 >> 2] | 0;
    i65 = HEAP32[i65 + 4 >> 2] | 0;
    i24 = i9;
    i25 = HEAP32[i24 + 4 >> 2] | 0;
    i63 = i3;
    HEAP32[i63 >> 2] = HEAP32[i24 >> 2];
    HEAP32[i63 + 4 >> 2] = i25;
    HEAP32[i9 >> 2] = i64;
    HEAP32[i9 + 4 >> 2] = i65;
    i9 = i6 + -1 | 0;
    if ((i5 | 0) >= 24 ? (i65 = i6 + -3 | 0, i29 = (i65 | 0) / 2 | 0, (i65 | 0) >= -1) : 0) {
     i4 = i3 + 8 | 0;
     i5 = i4;
     if ((i9 | 0) > 2) {
      i65 = i3 + 16 | 0;
      i4 = FUNCTION_TABLE_iii[i10 & 31](i4, i65) | 0;
      i5 = i4 ? i65 : i5;
      i4 = i4 ? 2 : 1;
     } else i4 = 1;
     if (!(FUNCTION_TABLE_iii[i10 & 31](i5, i3) | 0)) {
      i64 = i3;
      i65 = HEAP32[i64 + 4 >> 2] | 0;
      i6 = i41;
      HEAP32[i6 >> 2] = HEAP32[i64 >> 2];
      HEAP32[i6 + 4 >> 2] = i65;
      i6 = i3;
      while (1) {
       i8 = i5;
       i63 = i8;
       i64 = HEAP32[i63 + 4 >> 2] | 0;
       i65 = i6;
       HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
       HEAP32[i65 + 4 >> 2] = i64;
       if ((i29 | 0) < (i4 | 0)) {
        i3 = i8;
        break;
       }
       i4 = i4 << 1 | 1;
       i6 = i3 + (i4 << 3) | 0;
       i5 = i6;
       i7 = i4 + 1 | 0;
       if ((i7 | 0) < (i9 | 0)) {
        i64 = i3 + (i7 << 3) | 0;
        i65 = FUNCTION_TABLE_iii[i10 & 31](i6, i64) | 0;
        i5 = i65 ? i64 : i5;
        i4 = i65 ? i7 : i4;
       }
       if (FUNCTION_TABLE_iii[i10 & 31](i5, i41) | 0) {
        i3 = i8;
        break;
       } else i6 = i8;
      }
      i63 = i41;
      i64 = HEAP32[i63 + 4 >> 2] | 0;
      i65 = i3;
      HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
      HEAP32[i65 + 4 >> 2] = i64;
     }
    }
    i3 = HEAP32[i57 >> 2] | 0;
   } else i3 = i4;
   i4 = i3 + -8 | 0;
   HEAP32[i57 >> 2] = i4;
   i5 = HEAP32[i54 >> 2] | 0;
   i6 = HEAP32[i55 >> 2] | 0;
   L65 : do if ((i5 | 0) == (i6 | 0)) {
    i31 = i5;
    i45 = 50;
   } else {
    i3 = i12;
    i7 = i5;
    do {
     if ((HEAP32[i7 >> 2] | 0) == (i3 | 0)) {
      i31 = i7;
      i45 = 50;
      break L65;
     }
     i7 = i7 + 4 | 0;
    } while ((i7 | 0) != (i6 | 0));
   } while (0);
   if ((i45 | 0) == 50 ? (i45 = 0, (i31 | 0) != (i6 | 0)) : 0) {
    i7 = i11;
    i3 = i31;
    break;
   }
   i9 = i12;
   i8 = i9 + 12 | 0;
   HEAP32[i42 >> 2] = HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2];
   HEAP32[i13 >> 2] = HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2];
   HEAP32[i44 >> 2] = HEAP32[i9 + 28 >> 2];
   HEAP32[i14 >> 2] = HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 12 >> 2] | 0) + 28 >> 2];
   i8 = i9 + 48 | 0;
   i9 = i9 + 40 | 0;
   i10 = 0;
   do {
    i3 = HEAP32[i42 + (i10 << 2) >> 2] | 0;
    if ((((i3 | 0) != 0 ? !(+HEAPF32[i3 + 24 >> 2] < d27) : 0) ? !(+HEAPF32[i44 + (i10 << 2) >> 2] < d26) : 0) ? (i36 = HEAP32[i9 >> 2] | 0, i65 = HEAP32[i3 + 40 >> 2] | 0, d33 = +HEAPF32[i65 >> 2], d62 = +HEAPF32[i36 >> 2] - d33, d34 = +HEAPF32[i65 + 4 >> 2], d35 = +HEAPF32[i36 + 4 >> 2] - d34, d35 = +HEAPF32[i8 >> 2] + +Math_sqrt(+(d62 * d62 + d35 * d35)), i36 = i3 + 48 | 0, !(d35 >= +HEAPF32[i36 >> 2])) : 0) {
     HEAPF32[i36 >> 2] = d35;
     HEAP32[i3 + 44 >> 2] = i12;
     d61 = d33 - +HEAPF32[i43 >> 2];
     d62 = d34 - +HEAPF32[i30 >> 2];
     d62 = d35 + +Math_sqrt(+(d61 * d61 + d62 * d62));
     HEAP32[i40 >> 2] = i3;
     HEAPF32[i15 >> 2] = d62;
     i3 = HEAP32[i57 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i32 >> 2] | 0) >>> 0) {
      i64 = i40;
      i65 = HEAP32[i64 + 4 >> 2] | 0;
      HEAP32[i3 >> 2] = HEAP32[i64 >> 2];
      HEAP32[i3 + 4 >> 2] = i65;
      i3 = (HEAP32[i57 >> 2] | 0) + 8 | 0;
      HEAP32[i57 >> 2] = i3;
     } else {
      __ZNSt3__16vectorI8PrioNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i56, i40);
      i3 = HEAP32[i57 >> 2] | 0;
     }
     i6 = HEAP32[i56 >> 2] | 0;
     i7 = HEAP32[i28 >> 2] | 0;
     i4 = i3 - i6 | 0;
     if ((i4 | 0) > 8 ? (i37 = ((i4 >> 3) + -2 | 0) / 2 | 0, i38 = i6 + (i37 << 3) | 0, i39 = i3 + -8 | 0, FUNCTION_TABLE_iii[i7 & 31](i38, i39) | 0) : 0) {
      i4 = i39;
      i3 = HEAP32[i4 + 4 >> 2] | 0;
      i5 = i41;
      HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
      HEAP32[i5 + 4 >> 2] = i3;
      i5 = i37;
      i3 = i38;
      i4 = i39;
      while (1) {
       i63 = i3;
       i64 = HEAP32[i63 + 4 >> 2] | 0;
       i65 = i4;
       HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
       HEAP32[i65 + 4 >> 2] = i64;
       if (!i5) break;
       i5 = (i5 + -1 | 0) / 2 | 0;
       i4 = i6 + (i5 << 3) | 0;
       if (!(FUNCTION_TABLE_iii[i7 & 31](i4, i41) | 0)) break; else {
        i65 = i3;
        i3 = i4;
        i4 = i65;
       }
      }
      i63 = i41;
      i64 = HEAP32[i63 + 4 >> 2] | 0;
      i65 = i3;
      HEAP32[i65 >> 2] = HEAP32[i63 >> 2];
      HEAP32[i65 + 4 >> 2] = i64;
     }
    }
    i10 = i10 + 1 | 0;
   } while ((i10 | 0) < 2);
   i3 = HEAP32[i56 >> 2] | 0;
   i4 = HEAP32[i57 >> 2] | 0;
   if ((i3 | 0) == (i4 | 0)) break L43;
  }
  i65 = i5;
  HEAP32[(HEAP32[i52 >> 2] | 0) + (i3 - i65 >> 2 << 2) >> 2] = i7;
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 <= i6 - i65 >> 2 >>> 0);
 i9 = (i1 | 0) != 0;
 do if (i9) {
  i5 = HEAP32[i52 >> 2] | 0;
  i4 = HEAP32[i53 >> 2] | 0;
  if ((i5 | 0) != (i4 | 0) ? (i2 = i5 + 4 | 0, (i2 | 0) != (i4 | 0)) : 0) {
   i3 = i5;
   i1 = i5;
   do {
    i65 = +HEAPF32[i2 >> 2] < +HEAPF32[i3 >> 2];
    i1 = i65 ? i2 : i1;
    i3 = i65 ? i2 : i3;
    i2 = i2 + 4 | 0;
   } while ((i2 | 0) != (i4 | 0));
  } else i1 = i5;
  i3 = HEAP32[(HEAP32[i54 >> 2] | 0) + (i1 - i5 >> 2 << 2) >> 2] | 0;
  i7 = (i3 | 0) == 255;
  if (i7) i1 = 1; else {
   i2 = i3;
   i1 = 1;
   do {
    i2 = HEAP32[i2 + 44 >> 2] | 0;
    i1 = i1 + 1 | 0;
   } while ((i2 | 0) != 255);
  }
  i8 = i48 + 8 | 0;
  i5 = HEAP32[i48 >> 2] | 0;
  i2 = i5;
  if ((HEAP32[i8 >> 2] | 0) - i2 >> 2 >>> 0 < i1 >>> 0) {
   i6 = i48 + 4 | 0;
   i2 = (HEAP32[i6 >> 2] | 0) - i2 | 0;
   if (!i1) i4 = 0; else i4 = __Znwj(i1 << 2) | 0;
   _memcpy(i4 | 0, i5 | 0, i2 | 0) | 0;
   HEAP32[i48 >> 2] = i4;
   HEAP32[i6 >> 2] = i4 + (i2 >> 2 << 2);
   HEAP32[i8 >> 2] = i4 + (i1 << 2);
   if (i5) __ZdlPv(i5);
  }
  i4 = i48 + 4 | 0;
  if (!i7) do {
   i1 = i3 + 16 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i8 >> 2] | 0)) __ZNSt3__16vectorIP8TriangleNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i48, i1); else {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
   }
   i3 = HEAP32[i3 + 44 >> 2] | 0;
  } while ((i3 | 0) != 255);
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i8 >> 2] | 0)) {
   __ZNSt3__16vectorIP8TriangleNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i48, i46);
   break;
  } else {
   HEAP32[i1 >> 2] = i47;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
   break;
  }
 } while (0);
 i1 = HEAP32[i49 + 36 >> 2] | 0;
 i2 = HEAP32[i49 + 40 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  HEAP32[i1 + 44 >> 2] = 0;
  HEAPF32[i1 + 48 >> 2] = 34028234663852886.0e22;
  HEAP32[i1 + 40 >> 2] = i1 + 32;
  i1 = i1 + 52 | 0;
 } while ((i1 | 0) != (i2 | 0));
 i1 = HEAP32[i50 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i51 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i51 >> 2] = i3 + (~((i3 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i52 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i53 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i53 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i54 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i55 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i55 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i56 >> 2] | 0;
 if (!i1) {
  i65 = i9;
  STACKTOP = i58;
  return i65 | 0;
 }
 i2 = HEAP32[i57 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i57 >> 2] = i2 + (~((i2 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 i65 = i9;
 STACKTOP = i58;
 return i65 | 0;
}

function __ZN4Mesh10connectTriEv(i32) {
 i32 = i32 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, d15 = 0.0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0;
 i39 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i31 = i39 + 40 | 0;
 i35 = i39 + 12 | 0;
 i38 = i39;
 __ZNSt3__16__treeINS_12__value_typeINS_4pairIP6VertexS4_EEP8HalfEdgeEENS_19__map_value_compareIS5_S8_NS_4lessIS5_EELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(5836, HEAP32[1460] | 0);
 HEAP32[1461] = 0;
 HEAP32[1459] = 5840;
 HEAP32[1460] = 0;
 i36 = i32 + 24 | 0;
 i7 = HEAP32[i36 >> 2] | 0;
 i37 = i32 + 28 | 0;
 i1 = HEAP32[i37 >> 2] | 0;
 if ((i1 | 0) != (i7 | 0)) do {
  i6 = i1 + -28 | 0;
  HEAP32[i37 >> 2] = i6;
  i2 = HEAP32[i1 + -16 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + -12 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  i3 = HEAP32[i6 >> 2] | 0;
  i4 = i3;
  if (i3) {
   i1 = i1 + -24 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -4 - i4 | 0) >>> 2) << 2);
   __ZdlPv(i3);
  }
  i1 = HEAP32[i37 >> 2] | 0;
 } while ((i1 | 0) != (i7 | 0));
 i33 = i32 + 36 | 0;
 i7 = HEAP32[i33 >> 2] | 0;
 i34 = i32 + 40 | 0;
 i1 = HEAP32[i34 >> 2] | 0;
 i2 = i7;
 if ((i1 | 0) == (i7 | 0)) i1 = i7; else {
  i1 = i1 + (~(((i1 + -52 - i2 | 0) >>> 0) / 52 | 0) * 52 | 0) | 0;
  HEAP32[i34 >> 2] = i1;
 }
 i30 = i32 + 16 | 0;
 i8 = HEAP32[i30 >> 2] | 0;
 i28 = i32 + 12 | 0;
 i5 = HEAP32[i28 >> 2] | 0;
 i4 = (i8 - i5 | 0) / 36 | 0;
 i6 = i4 * 3 | 0;
 i29 = i32 + 44 | 0;
 if ((((HEAP32[i29 >> 2] | 0) - i2 | 0) / 52 | 0) >>> 0 < i6 >>> 0) {
  i2 = i1 - i2 | 0;
  i3 = (i2 | 0) / 52 | 0;
  if ((i8 | 0) == (i5 | 0)) i1 = 0; else i1 = __Znwj(i4 * 156 | 0) | 0;
  i27 = i1 + ((((i2 | 0) / -52 | 0) + i3 | 0) * 52 | 0) | 0;
  _memcpy(i27 | 0, i7 | 0, i2 | 0) | 0;
  HEAP32[i33 >> 2] = i27;
  HEAP32[i34 >> 2] = i1 + (i3 * 52 | 0);
  HEAP32[i29 >> 2] = i1 + (i6 * 52 | 0);
  if (i7) {
   __ZdlPv(i7);
   i5 = HEAP32[i28 >> 2] | 0;
   i8 = HEAP32[i30 >> 2] | 0;
  }
 }
 if ((i5 | 0) != (i8 | 0)) {
  i19 = i31 + 28 | 0;
  i20 = i31 + 32 | 0;
  i21 = i31 + 48 | 0;
  i22 = i31 + 28 | 0;
  i23 = i31 + 32 | 0;
  i24 = i31 + 48 | 0;
  i25 = i31 + 28 | 0;
  i26 = i31 + 32 | 0;
  i27 = i31 + 48 | 0;
  do {
   HEAP32[i31 >> 2] = 0;
   HEAP32[i31 + 4 >> 2] = 0;
   HEAP32[i31 + 8 >> 2] = 0;
   HEAP32[i31 + 12 >> 2] = 0;
   HEAP32[i31 + 16 >> 2] = 0;
   HEAP32[i31 + 20 >> 2] = 0;
   HEAP32[i31 + 24 >> 2] = 0;
   HEAP32[i31 + 28 >> 2] = 0;
   HEAPF32[i19 >> 2] = 34028234663852886.0e22;
   HEAP32[i20 >> 2] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
   HEAP32[i20 + 8 >> 2] = 0;
   HEAP32[i20 + 12 >> 2] = 0;
   HEAPF32[i21 >> 2] = 34028234663852886.0e22;
   i1 = HEAP32[i34 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i29 >> 2] | 0) >>> 0) {
    i2 = i31;
    i3 = i1 + 52 | 0;
    do {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    } while ((i1 | 0) < (i3 | 0));
    i17 = (HEAP32[i34 >> 2] | 0) + 52 | 0;
    HEAP32[i34 >> 2] = i17;
   } else {
    __ZNSt3__16vectorI8HalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i33, i31);
    i17 = HEAP32[i34 >> 2] | 0;
   }
   HEAP32[i17 + -32 >> 2] = ((i17 - (HEAP32[i33 >> 2] | 0) | 0) / 52 | 0) + -1;
   i18 = i17 + -52 | 0;
   HEAP32[i17 + -36 >> 2] = i5;
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i17 + -48 >> 2] = i4;
   i7 = i5 + 4 | 0;
   i16 = HEAP32[i7 >> 2] | 0;
   HEAP32[i18 >> 2] = i16;
   i3 = HEAP32[i7 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   d9 = (+HEAPF32[i3 + 8 >> 2] + +HEAPF32[i6 + 8 >> 2]) * .5;
   HEAPF32[i17 + -20 >> 2] = (+HEAPF32[i3 + 4 >> 2] + +HEAPF32[i6 + 4 >> 2]) * .5;
   HEAPF32[i17 + -16 >> 2] = d9;
   d9 = +HEAPF32[i16 + 4 >> 2];
   d12 = +HEAPF32[i4 + 4 >> 2] - d9;
   d10 = +HEAPF32[i16 + 8 >> 2];
   d11 = +HEAPF32[i4 + 8 >> 2] - d10;
   HEAPF32[i17 + -28 >> 2] = d12 * d12 + d11 * d11;
   i4 = HEAP32[i5 >> 2] | 0;
   i16 = i5 + 8 | 0;
   i6 = HEAP32[i16 >> 2] | 0;
   d11 = +HEAPF32[i4 + 4 >> 2];
   d12 = +HEAPF32[i6 + 4 >> 2] - d11;
   d13 = +HEAPF32[i4 + 8 >> 2];
   d14 = +HEAPF32[i6 + 8 >> 2] - d13;
   d15 = (d12 * (d9 - d11) + d14 * (d10 - d13)) / (d12 * d12 + d14 * d14);
   if (d15 < 0.0 | d15 > 1.0) d9 = 34028234663852886.0e22; else {
    d12 = d11 + d12 * d15 - d9;
    d9 = d13 + d14 * d15 - d10;
    d9 = d12 * d12 + d9 * d9;
   }
   HEAPF32[i17 + -24 >> 2] = d9;
   HEAP32[i5 + 12 >> 2] = i18;
   HEAP32[i31 >> 2] = 0;
   HEAP32[i31 + 4 >> 2] = 0;
   HEAP32[i31 + 8 >> 2] = 0;
   HEAP32[i31 + 12 >> 2] = 0;
   HEAP32[i31 + 16 >> 2] = 0;
   HEAP32[i31 + 20 >> 2] = 0;
   HEAP32[i31 + 24 >> 2] = 0;
   HEAP32[i31 + 28 >> 2] = 0;
   HEAPF32[i22 >> 2] = 34028234663852886.0e22;
   HEAP32[i23 >> 2] = 0;
   HEAP32[i23 + 4 >> 2] = 0;
   HEAP32[i23 + 8 >> 2] = 0;
   HEAP32[i23 + 12 >> 2] = 0;
   HEAPF32[i24 >> 2] = 34028234663852886.0e22;
   i1 = HEAP32[i34 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i29 >> 2] | 0) >>> 0) {
    i2 = i31;
    i3 = i1 + 52 | 0;
    do {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    } while ((i1 | 0) < (i3 | 0));
    i4 = (HEAP32[i34 >> 2] | 0) + 52 | 0;
    HEAP32[i34 >> 2] = i4;
   } else {
    __ZNSt3__16vectorI8HalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i33, i31);
    i4 = HEAP32[i34 >> 2] | 0;
   }
   HEAP32[i4 + -32 >> 2] = ((i4 - (HEAP32[i33 >> 2] | 0) | 0) / 52 | 0) + -1;
   i6 = i4 + -52 | 0;
   HEAP32[i4 + -36 >> 2] = i5;
   i2 = HEAP32[i7 >> 2] | 0;
   HEAP32[i4 + -48 >> 2] = i2;
   i3 = HEAP32[i16 >> 2] | 0;
   HEAP32[i6 >> 2] = i3;
   i40 = HEAP32[i16 >> 2] | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   d9 = (+HEAPF32[i40 + 8 >> 2] + +HEAPF32[i1 + 8 >> 2]) * .5;
   HEAPF32[i4 + -20 >> 2] = (+HEAPF32[i40 + 4 >> 2] + +HEAPF32[i1 + 4 >> 2]) * .5;
   HEAPF32[i4 + -16 >> 2] = d9;
   d9 = +HEAPF32[i3 + 4 >> 2];
   d12 = +HEAPF32[i2 + 4 >> 2] - d9;
   d10 = +HEAPF32[i3 + 8 >> 2];
   d11 = +HEAPF32[i2 + 8 >> 2] - d10;
   HEAPF32[i4 + -28 >> 2] = d12 * d12 + d11 * d11;
   i2 = HEAP32[i7 >> 2] | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   d11 = +HEAPF32[i2 + 4 >> 2];
   d12 = +HEAPF32[i3 + 4 >> 2] - d11;
   d13 = +HEAPF32[i2 + 8 >> 2];
   d14 = +HEAPF32[i3 + 8 >> 2] - d13;
   d15 = (d12 * (d9 - d11) + d14 * (d10 - d13)) / (d12 * d12 + d14 * d14);
   if (d15 < 0.0 | d15 > 1.0) d9 = 34028234663852886.0e22; else {
    d12 = d11 + d12 * d15 - d9;
    d9 = d13 + d14 * d15 - d10;
    d9 = d12 * d12 + d9 * d9;
   }
   HEAPF32[i4 + -24 >> 2] = d9;
   HEAP32[i5 + 16 >> 2] = i6;
   HEAP32[i31 >> 2] = 0;
   HEAP32[i31 + 4 >> 2] = 0;
   HEAP32[i31 + 8 >> 2] = 0;
   HEAP32[i31 + 12 >> 2] = 0;
   HEAP32[i31 + 16 >> 2] = 0;
   HEAP32[i31 + 20 >> 2] = 0;
   HEAP32[i31 + 24 >> 2] = 0;
   HEAP32[i31 + 28 >> 2] = 0;
   HEAPF32[i25 >> 2] = 34028234663852886.0e22;
   HEAP32[i26 >> 2] = 0;
   HEAP32[i26 + 4 >> 2] = 0;
   HEAP32[i26 + 8 >> 2] = 0;
   HEAP32[i26 + 12 >> 2] = 0;
   HEAPF32[i27 >> 2] = 34028234663852886.0e22;
   i1 = HEAP32[i34 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i29 >> 2] | 0) >>> 0) {
    i2 = i31;
    i3 = i1 + 52 | 0;
    do {
     HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
     i1 = i1 + 4 | 0;
     i2 = i2 + 4 | 0;
    } while ((i1 | 0) < (i3 | 0));
    i1 = (HEAP32[i34 >> 2] | 0) + 52 | 0;
    HEAP32[i34 >> 2] = i1;
   } else {
    __ZNSt3__16vectorI8HalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i33, i31);
    i1 = HEAP32[i34 >> 2] | 0;
   }
   HEAP32[i1 + -32 >> 2] = ((i1 - (HEAP32[i33 >> 2] | 0) | 0) / 52 | 0) + -1;
   i2 = i1 + -52 | 0;
   HEAP32[i1 + -36 >> 2] = i5;
   i3 = HEAP32[i16 >> 2] | 0;
   HEAP32[i1 + -48 >> 2] = i3;
   i40 = HEAP32[i5 >> 2] | 0;
   HEAP32[i2 >> 2] = i40;
   i42 = HEAP32[i5 >> 2] | 0;
   i41 = HEAP32[i16 >> 2] | 0;
   d9 = (+HEAPF32[i42 + 8 >> 2] + +HEAPF32[i41 + 8 >> 2]) * .5;
   HEAPF32[i1 + -20 >> 2] = (+HEAPF32[i42 + 4 >> 2] + +HEAPF32[i41 + 4 >> 2]) * .5;
   HEAPF32[i1 + -16 >> 2] = d9;
   d9 = +HEAPF32[i40 + 4 >> 2];
   d12 = +HEAPF32[i3 + 4 >> 2] - d9;
   d10 = +HEAPF32[i40 + 8 >> 2];
   d11 = +HEAPF32[i3 + 8 >> 2] - d10;
   HEAPF32[i1 + -28 >> 2] = d12 * d12 + d11 * d11;
   i3 = HEAP32[i16 >> 2] | 0;
   i40 = HEAP32[i7 >> 2] | 0;
   d11 = +HEAPF32[i3 + 4 >> 2];
   d12 = +HEAPF32[i40 + 4 >> 2] - d11;
   d13 = +HEAPF32[i3 + 8 >> 2];
   d14 = +HEAPF32[i40 + 8 >> 2] - d13;
   d15 = (d12 * (d9 - d11) + d14 * (d10 - d13)) / (d12 * d12 + d14 * d14);
   if (d15 < 0.0 | d15 > 1.0) d9 = 34028234663852886.0e22; else {
    d12 = d11 + d12 * d15 - d9;
    d9 = d13 + d14 * d15 - d10;
    d9 = d12 * d12 + d9 * d9;
   }
   HEAPF32[i1 + -24 >> 2] = d9;
   HEAP32[i5 + 20 >> 2] = i2;
   HEAP32[i17 + -40 >> 2] = i6;
   HEAP32[i4 + -40 >> 2] = i2;
   HEAP32[i1 + -40 >> 2] = i18;
   __Z8seekPairP6VertexS0_P8HalfEdge(HEAP32[i5 >> 2] | 0, HEAP32[i7 >> 2] | 0, i18);
   __Z8seekPairP6VertexS0_P8HalfEdge(HEAP32[i7 >> 2] | 0, HEAP32[i16 >> 2] | 0, i6);
   __Z8seekPairP6VertexS0_P8HalfEdge(HEAP32[i16 >> 2] | 0, HEAP32[i5 >> 2] | 0, i2);
   i5 = i5 + 36 | 0;
  } while ((i5 | 0) != (i8 | 0));
  i1 = HEAP32[i28 >> 2] | 0;
  i3 = HEAP32[i30 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) do {
   i2 = HEAP32[(HEAP32[i1 + 12 >> 2] | 0) + 8 >> 2] | 0;
   if (i2) HEAP32[i1 + 24 >> 2] = HEAP32[i2 + 16 >> 2];
   i2 = HEAP32[(HEAP32[i1 + 16 >> 2] | 0) + 8 >> 2] | 0;
   if (i2) HEAP32[i1 + 28 >> 2] = HEAP32[i2 + 16 >> 2];
   i2 = HEAP32[(HEAP32[i1 + 20 >> 2] | 0) + 8 >> 2] | 0;
   if (i2) HEAP32[i1 + 32 >> 2] = HEAP32[i2 + 16 >> 2];
   i1 = i1 + 36 | 0;
  } while ((i1 | 0) != (i3 | 0));
 }
 L65 : do if (HEAP32[1461] | 0) {
  i19 = i32 + 32 | 0;
  i20 = i35 + 4 | 0;
  i21 = i35 + 8 | 0;
  i22 = i35 + 12 | 0;
  i23 = i35 + 16 | 0;
  i24 = i35 + 20 | 0;
  i25 = i35 + 12 | 0;
  L67 : while (1) {
   HEAP32[i35 >> 2] = 0;
   HEAP32[i35 + 4 >> 2] = 0;
   HEAP32[i35 + 8 >> 2] = 0;
   HEAP32[i35 + 12 >> 2] = 0;
   HEAP32[i35 + 16 >> 2] = 0;
   HEAP32[i35 + 20 >> 2] = 0;
   HEAP32[i35 + 24 >> 2] = 0;
   i1 = HEAP32[i37 >> 2] | 0;
   if (i1 >>> 0 >= (HEAP32[i19 >> 2] | 0) >>> 0) {
    __ZNSt3__16vectorI8PolylineNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i36, i35);
    i1 = HEAP32[i25 >> 2] | 0;
    i2 = i1;
    if (i1) {
     i3 = HEAP32[i23 >> 2] | 0;
     if ((i3 | 0) != (i1 | 0)) HEAP32[i23 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
     __ZdlPv(i1);
    }
   } else {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    HEAP32[i21 >> 2] = 0;
    HEAP32[i20 >> 2] = 0;
    HEAP32[i35 >> 2] = 0;
    i42 = i1 + 12 | 0;
    HEAP32[i42 >> 2] = 0;
    HEAP32[i42 + 4 >> 2] = 0;
    HEAP32[i42 + 8 >> 2] = 0;
    HEAP32[i24 >> 2] = 0;
    HEAP32[i23 >> 2] = 0;
    HEAP32[i22 >> 2] = 0;
    HEAP8[i1 + 24 >> 0] = 0;
    HEAP32[i37 >> 2] = (HEAP32[i37 >> 2] | 0) + 28;
   }
   i1 = HEAP32[i35 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = HEAP32[i20 >> 2] | 0;
    if ((i3 | 0) != (i1 | 0)) HEAP32[i20 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   i4 = HEAP32[i37 >> 2] | 0;
   i3 = HEAP32[1459] | 0;
   i18 = HEAP32[i3 + 24 >> 2] | 0;
   i1 = HEAP32[i3 + 4 >> 2] | 0;
   if (!i1) {
    i2 = i3;
    while (1) {
     i1 = HEAP32[i2 + 8 >> 2] | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
    }
   } else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   HEAP32[1459] = i1;
   HEAP32[1461] = (HEAP32[1461] | 0) + -1;
   __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[1460] | 0, i3);
   __ZdlPv(i3);
   i16 = i4 + -24 | 0;
   i17 = i4 + -20 | 0;
   i8 = i4 + -28 | 0;
   i1 = i18;
   while (1) {
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i16 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i17 >> 2] | 0)) {
     __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i8, i2);
     i2 = i1;
    } else {
     HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
     HEAP32[i16 >> 2] = (HEAP32[i16 >> 2] | 0) + 4;
     i2 = i1;
    }
    do {
     i1 = HEAP32[i2 + 12 >> 2] | 0;
     i2 = HEAP32[i1 + 8 >> 2] | 0;
    } while ((i2 | 0) != 0);
    if ((i1 | 0) == (i18 | 0)) break;
    i7 = HEAP32[1460] | 0;
    if (!i7) {
     i1 = 75;
     break L67;
    }
    i5 = HEAP32[i1 + 4 >> 2] | 0;
    i6 = HEAP32[i1 >> 2] | 0;
    i2 = 5840;
    i3 = i7;
    L100 : while (1) {
     while (1) {
      i4 = HEAP32[i3 + 16 >> 2] | 0;
      if (i4 >>> 0 >= i5 >>> 0) {
       if (i5 >>> 0 < i4 >>> 0) {
        i2 = i3;
        break;
       }
       if ((HEAP32[i3 + 20 >> 2] | 0) >>> 0 >= i6 >>> 0) {
        i2 = i3;
        break;
       }
      }
      i3 = HEAP32[i3 + 4 >> 2] | 0;
      if (!i3) {
       i4 = i2;
       break L100;
      }
     }
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) {
      i4 = i2;
      break;
     }
    }
    if ((i4 | 0) == 5840) {
     i1 = 75;
     break L67;
    }
    i2 = HEAP32[i4 + 16 >> 2] | 0;
    if (i5 >>> 0 < i2 >>> 0) {
     i1 = 75;
     break L67;
    }
    if (i2 >>> 0 >= i5 >>> 0 ? i6 >>> 0 < (HEAP32[i4 + 20 >> 2] | 0) >>> 0 : 0) {
     i1 = 75;
     break L67;
    }
    i2 = HEAP32[i4 + 4 >> 2] | 0;
    if (!i2) {
     i3 = i4;
     while (1) {
      i2 = HEAP32[i3 + 8 >> 2] | 0;
      if ((HEAP32[i2 >> 2] | 0) == (i3 | 0)) break; else i3 = i2;
     }
    } else while (1) {
     i3 = HEAP32[i2 >> 2] | 0;
     if (!i3) break; else i2 = i3;
    }
    if ((HEAP32[1459] | 0) == (i4 | 0)) HEAP32[1459] = i2;
    HEAP32[1461] = (HEAP32[1461] | 0) + -1;
    __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(i7, i4);
    __ZdlPv(i4);
   }
   if (!(HEAP32[1461] | 0)) break L65;
  }
  if ((i1 | 0) == 75) {
   i42 = ___cxa_allocate_exception(16) | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i38, 21084, 27);
   __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i42, i38);
   ___cxa_throw(i42 | 0, 16, 12);
  }
 } while (0);
 i1 = HEAP32[i33 >> 2] | 0;
 i2 = HEAP32[i34 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  STACKTOP = i39;
  return;
 }
 do {
  HEAP32[i1 + 40 >> 2] = i1 + 32;
  i1 = i1 + 52 | 0;
 } while ((i1 | 0) != (i2 | 0));
 STACKTOP = i39;
 return;
}

function __ZN8Document9serializeERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEE(i17, i21) {
 i17 = i17 | 0;
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i19 = i23 + 24 | 0;
 i22 = i23 + 12 | 0;
 i20 = i23;
 HEAP32[i22 + 4 >> 2] = 0;
 HEAP32[i22 + 8 >> 2] = 0;
 i18 = i22 + 4 | 0;
 HEAP32[i22 >> 2] = i18;
 i1 = HEAP32[i17 + 60 >> 2] | 0;
 i12 = i17 + 64 | 0;
 L1 : do if ((i1 | 0) != (i12 | 0)) {
  i2 = i1;
  i1 = 0;
  while (1) {
   i9 = i2 + 20 | 0;
   L5 : do if (!i1) i13 = 10; else {
    i7 = HEAP8[i9 >> 0] | 0;
    i8 = (i7 & 1) == 0;
    i7 = i8 ? (i7 & 255) >>> 1 : HEAP32[i2 + 24 >> 2] | 0;
    i8 = i8 ? i9 + 1 | 0 : HEAP32[i2 + 28 >> 2] | 0;
    while (1) {
     i4 = i1 + 16 | 0;
     i3 = HEAP8[i4 >> 0] | 0;
     i5 = (i3 & 1) == 0;
     i3 = i5 ? (i3 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0;
     i4 = i5 ? i4 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0;
     i5 = i3 >>> 0 < i7 >>> 0;
     i16 = _memcmp(i8, i4, i5 ? i3 : i7) | 0;
     i6 = i7 >>> 0 < i3 >>> 0;
     if ((((i16 | 0) == 0 ? (i6 ? -2147483648 : 0) : i16) | 0) >= 0) {
      i16 = _memcmp(i4, i8, i6 ? i7 : i3) | 0;
      if ((((i16 | 0) == 0 ? (i5 ? -2147483648 : 0) : i16) | 0) >= 0) break L5;
      i1 = i1 + 4 | 0;
     }
     i1 = HEAP32[i1 >> 2] | 0;
     if (!i1) {
      i13 = 10;
      break;
     }
    }
   } while (0);
   if ((i13 | 0) == 10) {
    i13 = 0;
    __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE15__insert_uniqueERKS6_(i19, i22, i9);
    i14 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20453, 2) | 0;
    i16 = HEAP8[i9 >> 0] | 0;
    i15 = (i16 & 1) == 0;
    __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i14, i15 ? i9 + 1 | 0 : HEAP32[i2 + 28 >> 2] | 0, i15 ? (i16 & 255) >>> 1 : HEAP32[i2 + 24 >> 2] | 0) | 0, 20456, 2) | 0;
   }
   i1 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i1) while (1) {
    i1 = HEAP32[i2 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
   } else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   if ((i1 | 0) == (i12 | 0)) break L1;
   i2 = i1;
   i1 = HEAP32[i18 >> 2] | 0;
  }
 } while (0);
 i1 = HEAP32[i17 + 24 >> 2] | 0;
 i5 = HEAP32[i17 + 28 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) do {
  i4 = HEAP32[i1 >> 2] | 0;
  do if ((HEAP32[i4 + 4 >> 2] | 0) != (HEAP32[i4 >> 2] | 0)) {
   i3 = HEAP32[i12 >> 2] | 0;
   if (i3) {
    i2 = i12;
    L33 : do {
     while (1) {
      if ((HEAP32[i3 + 16 >> 2] | 0) >>> 0 >= i4 >>> 0) {
       i2 = i3;
       break;
      }
      i3 = HEAP32[i3 + 4 >> 2] | 0;
      if (!i3) break L33;
     }
     i3 = HEAP32[i2 >> 2] | 0;
    } while ((i3 | 0) != 0);
    if ((i2 | 0) != (i12 | 0) ? i4 >>> 0 >= (HEAP32[i2 + 16 >> 2] | 0) >>> 0 : 0) break;
   }
   if ((HEAP8[i4 + 24 >> 0] | 0) == 0 ? (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20459, 3) | 0, i11 = HEAP32[i1 >> 2] | 0, i10 = HEAP32[i11 >> 2] | 0, i11 = HEAP32[i11 + 4 >> 2] | 0, (i10 | 0) != (i11 | 0)) : 0) {
    i2 = i10;
    do {
     i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20463, 2) | 0;
     i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[i2 >> 2] | 0) + 4 >> 2]) | 0, 20466, 1) | 0;
     __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[i2 >> 2] | 0) + 8 >> 2]) | 0, 20456, 2) | 0;
     i2 = i2 + 4 | 0;
    } while ((i2 | 0) != (i11 | 0));
   }
  } while (0);
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i5 | 0));
 i1 = HEAP32[i17 + 36 >> 2] | 0;
 i2 = HEAP32[i17 + 40 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20468, 2) | 0;
  i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) + 4 >> 2]) | 0, 20466, 1) | 0;
  i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[HEAP32[i1 >> 2] >> 2] | 0) + 8 >> 2]) | 0, 20466, 1) | 0;
  i16 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2]) | 0, 20466, 1) | 0;
  __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i16, +HEAPF32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0) + 8 >> 2]) | 0, 20456, 2) | 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i2 | 0));
 i14 = i20 + 4 | 0;
 HEAP32[i14 >> 2] = 0;
 i15 = i20 + 8 | 0;
 HEAP32[i15 >> 2] = 0;
 i16 = i20 + 4 | 0;
 HEAP32[i20 >> 2] = i16;
 i10 = i17 + 196 | 0;
 i11 = i17 + 192 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) != (i1 | 0)) {
  i12 = i16;
  i9 = 0;
  do {
   i7 = i1 + (i9 << 2) | 0;
   i8 = HEAP32[i7 >> 2] | 0;
   i1 = HEAP32[i8 + 16 >> 2] | 0;
   i8 = HEAP32[i8 + 20 >> 2] | 0;
   if ((i1 | 0) != (i8 | 0)) do {
    i6 = HEAP32[i1 >> 2] | 0;
    i2 = HEAP32[i16 >> 2] | 0;
    do if (i2) {
     i5 = i6;
     while (1) {
      i3 = HEAP32[i2 + 16 >> 2] | 0;
      if (i5 >>> 0 < i3 >>> 0) {
       i3 = HEAP32[i2 >> 2] | 0;
       if (!i3) {
        i3 = i2;
        i13 = 40;
        break;
       } else i2 = i3;
      } else {
       if (i3 >>> 0 >= i5 >>> 0) {
        i13 = 46;
        break;
       }
       i3 = i2 + 4 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if (!i4) {
        i13 = 44;
        break;
       } else i2 = i4;
      }
     }
     if ((i13 | 0) == 40) {
      HEAP32[i19 >> 2] = i2;
      i13 = 47;
      break;
     } else if ((i13 | 0) == 44) {
      HEAP32[i19 >> 2] = i2;
      i13 = 47;
      break;
     } else if ((i13 | 0) == 46) {
      i13 = 0;
      HEAP32[i19 >> 2] = i2;
      if (!i2) {
       i3 = i19;
       i13 = 47;
       break;
      } else break;
     }
    } else {
     HEAP32[i19 >> 2] = i16;
     i3 = i16;
     i2 = i12;
     i13 = 47;
    } while (0);
    if ((i13 | 0) == 47) {
     i4 = __Znwj(24) | 0;
     HEAP32[i4 + 16 >> 2] = i6;
     HEAP32[i4 + 20 >> 2] = 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = i2;
     HEAP32[i3 >> 2] = i4;
     i2 = HEAP32[HEAP32[i20 >> 2] >> 2] | 0;
     if (!i2) i2 = i4; else {
      HEAP32[i20 >> 2] = i2;
      i2 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i14 >> 2] | 0, i2);
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     i2 = i4;
    }
    HEAP32[i2 + 20 >> 2] = i9;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) != (i8 | 0));
   i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20471, 2) | 0;
   i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i1, +HEAPF32[HEAP32[i7 >> 2] >> 2]) | 0, 20466, 1) | 0;
   i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i1, +HEAPF32[(HEAP32[i7 >> 2] | 0) + 4 >> 2]) | 0, 20466, 1) | 0;
   i1 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i1, +HEAPF32[(HEAP32[i7 >> 2] | 0) + 8 >> 2]) | 0, 20466, 1) | 0;
   __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i1, HEAP32[(HEAP32[i7 >> 2] | 0) + 12 >> 2] | 0) | 0, 20456, 2) | 0;
   i9 = i9 + 1 | 0;
   i1 = HEAP32[i11 >> 2] | 0;
  } while (i9 >>> 0 < (HEAP32[i10 >> 2] | 0) - i1 >> 2 >>> 0);
 }
 i1 = HEAP32[i17 >> 2] | 0;
 i8 = HEAP32[i17 + 4 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) {
  i21 = HEAP32[i16 >> 2] | 0;
  __ZNSt3__16__treeINS_12__value_typeIP5AgentiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i20, i21);
  i21 = HEAP32[i18 >> 2] | 0;
  __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i22, i21);
  STACKTOP = i23;
  return;
 }
 do {
  i6 = HEAP32[i1 >> 2] | 0;
  i4 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i21, 20474, 2) | 0;
  i7 = i6;
  i4 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i4, +HEAPF32[i7 + 12 >> 2]) | 0, 20466, 1) | 0;
  i7 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i4, +HEAPF32[i7 + 16 >> 2]) | 0, 20466, 1) | 0;
  i4 = HEAP32[i16 >> 2] | 0;
  if (i4) {
   i5 = i6;
   i2 = i16;
   i3 = i4;
   L87 : do {
    while (1) {
     if ((HEAP32[i3 + 16 >> 2] | 0) >>> 0 >= i5 >>> 0) {
      i2 = i3;
      break;
     }
     i3 = HEAP32[i3 + 4 >> 2] | 0;
     if (!i3) break L87;
    }
    i3 = HEAP32[i2 >> 2] | 0;
   } while ((i3 | 0) != 0);
   if ((i2 | 0) != (i16 | 0) ? i5 >>> 0 >= (HEAP32[i2 + 16 >> 2] | 0) >>> 0 : 0) {
    while (1) {
     i2 = HEAP32[i4 + 16 >> 2] | 0;
     if (i5 >>> 0 < i2 >>> 0) {
      i2 = HEAP32[i4 >> 2] | 0;
      if (!i2) {
       i3 = i4;
       i2 = i4;
       i13 = 65;
       break;
      }
     } else {
      if (i2 >>> 0 >= i5 >>> 0) {
       i2 = i4;
       i13 = 70;
       break;
      }
      i3 = i4 + 4 | 0;
      i2 = HEAP32[i3 >> 2] | 0;
      if (!i2) {
       i2 = i4;
       i13 = 69;
       break;
      }
     }
     i4 = i2;
    }
    if ((i13 | 0) == 65) {
     HEAP32[i19 >> 2] = i2;
     i13 = 71;
    } else if ((i13 | 0) == 69) {
     HEAP32[i19 >> 2] = i2;
     i13 = 71;
    } else if ((i13 | 0) == 70) {
     i13 = 0;
     HEAP32[i19 >> 2] = i2;
     if (!i2) {
      i3 = i19;
      i13 = 71;
     }
    }
    if ((i13 | 0) == 71) {
     i4 = __Znwj(24) | 0;
     HEAP32[i4 + 16 >> 2] = i6;
     HEAP32[i4 + 20 >> 2] = 0;
     HEAP32[i4 >> 2] = 0;
     HEAP32[i4 + 4 >> 2] = 0;
     HEAP32[i4 + 8 >> 2] = i2;
     HEAP32[i3 >> 2] = i4;
     i2 = HEAP32[HEAP32[i20 >> 2] >> 2] | 0;
     if (!i2) i2 = i4; else {
      HEAP32[i20 >> 2] = i2;
      i2 = HEAP32[i3 >> 2] | 0;
     }
     __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i14 >> 2] | 0, i2);
     HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + 1;
     i2 = i4;
    }
    i2 = HEAP32[i2 + 20 >> 2] | 0;
   } else i2 = -1;
  } else i2 = -1;
  i13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i7, i2) | 0, 20466, 1) | 0;
  i17 = i6;
  i13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i13, +HEAPF32[i17 + 92 >> 2]) | 0, 20466, 1) | 0;
  i13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i13, +HEAPF32[i17 + 96 >> 2]) | 0, 20466, 1) | 0;
  i13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i13, +HEAPF32[i6 + 28 >> 2]) | 0, 20466, 1) | 0;
  i13 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i13, +HEAPF32[i17 + 68 >> 2]) | 0, 20466, 1) | 0;
  __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i13, +HEAPF32[i17 + 64 >> 2]) | 0, 20456, 2) | 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i8 | 0));
 i21 = HEAP32[i16 >> 2] | 0;
 __ZNSt3__16__treeINS_12__value_typeIP5AgentiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i20, i21);
 i21 = HEAP32[i18 >> 2] | 0;
 __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i22, i21);
 STACKTOP = i23;
 return;
}

function __ZN8Document10readStreamERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEERSE_(i43, i34, i33, i35) {
 i43 = i43 | 0;
 i34 = i34 | 0;
 i33 = i33 | 0;
 i35 = i35 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0, i40 = 0, i41 = 0, i42 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0, i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0;
 i52 = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 i31 = i52 + 144 | 0;
 i1 = i52 + 140 | 0;
 i30 = i52 + 136 | 0;
 i2 = i52 + 116 | 0;
 i51 = i52 + 124 | 0;
 i4 = i52 + 120 | 0;
 i5 = i52 + 112 | 0;
 i6 = i52 + 108 | 0;
 i49 = i52 + 96 | 0;
 i45 = i52 + 8 | 0;
 i46 = i52 + 88 | 0;
 i41 = i52 + 84 | 0;
 i44 = i52 + 80 | 0;
 i39 = i52 + 72 | 0;
 i47 = i52;
 i32 = i52 + 68 | 0;
 i42 = i52 + 64 | 0;
 i40 = i52 + 60 | 0;
 i36 = i52 + 56 | 0;
 i37 = i52 + 48 | 0;
 i38 = i52 + 40 | 0;
 i50 = i52 + 28 | 0;
 i48 = i52 + 16 | 0;
 i3 = __ZNSt3__15ctypeIcE13classic_tableEv() | 0;
 __ZNSt3__16vectorItNS_9allocatorItEEEC2IPKtEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE(i51, i3, (__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + 512 | 0);
 i3 = (HEAP32[i51 >> 2] | 0) + 88 | 0;
 HEAP16[i3 >> 1] = HEAPU16[i3 >> 1] ^ 8192;
 i3 = HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0;
 i29 = i34 + i3 | 0;
 HEAP32[i6 >> 2] = __ZNKSt3__18ios_base6getlocEv(10660 + (HEAP32[(HEAP32[2665] | 0) + -12 >> 2] | 0) | 0) | 0;
 i28 = __Znwj(16) | 0;
 __ZNSt3__15ctypeIcEC2EPKtbj(i28, HEAP32[i51 >> 2] | 0, 0, 0);
 __ZNSt3__16locale14__install_ctorERKS0_PNS0_5facetEl(i5, i6, i28, __ZNSt3__16locale2id5__getEv(13432) | 0);
 HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i29) | 0;
 HEAP32[i30 >> 2] = __ZNSt3__18ios_base5imbueERKNS_6localeE(i29, i5) | 0;
 __ZNSt3__16localeD2Ev(i30);
 i3 = HEAP32[i34 + (i3 + 24) >> 2] | 0;
 if (i3) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 63](i3, i5);
  i30 = i3 + 4 | 0;
  __ZNSt3__16localeC2ERKS0_(i31, i30);
  __ZNSt3__16localeaSERKS0_(i30, i5) | 0;
  HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
  __ZNSt3__16localeD2Ev(i2);
 }
 HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
 __ZNSt3__16localeD2Ev(i4);
 __ZNSt3__16localeD2Ev(i5);
 __ZNSt3__16localeD2Ev(i6);
 L4 : do if (!(HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 2)) {
  i4 = i49 + 8 | 0;
  i5 = i49 + 1 | 0;
  i6 = i43 + 12 | 0;
  i8 = i45 + 4 | 0;
  i9 = i43 + 24 | 0;
  i10 = i43 + 28 | 0;
  i11 = i43 + 16 | 0;
  i12 = i43 + 20 | 0;
  i13 = i46 + 4 | 0;
  i14 = i39 + 4 | 0;
  i15 = i47 + 4 | 0;
  i16 = i43 + 196 | 0;
  i17 = i43 + 192 | 0;
  i18 = i37 + 4 | 0;
  i19 = i38 + 4 | 0;
  i20 = i33 + 4 | 0;
  i21 = i31 + 60 | 0;
  i22 = i31 + 8 | 0;
  i23 = i31 + 4 | 0;
  i24 = i31 + 60 | 0;
  i25 = i31 + 60 | 0;
  i26 = i31 + 132 | 0;
  i27 = i31 + 136 | 0;
  i28 = i31 + 40 | 0;
  i29 = i31 + 56 | 0;
  i30 = i49 + 4 | 0;
  L6 : while (1) {
   HEAP32[i49 >> 2] = 0;
   HEAP32[i49 + 4 >> 2] = 0;
   HEAP32[i49 + 8 >> 2] = 0;
   __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i34, i49) | 0;
   i1 = HEAP8[i49 >> 0] | 0;
   i2 = (i1 & 1) == 0;
   switch (HEAP8[(i2 ? i5 : HEAP32[i4 >> 2] | 0) >> 0] | 0) {
   case 101:
    {
     i1 = 30;
     break L6;
    }
   case 112:
    {
     __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i6, i35) | 0;
     break;
    }
   case 118:
    {
     HEAPF32[i45 >> 2] = 0.0;
     HEAPF32[i8 >> 2] = 0.0;
     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(i34, i45) | 0, i8) | 0;
     if (HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5) {
      i1 = 30;
      break L6;
     }
     if ((HEAP32[i9 >> 2] | 0) == (HEAP32[i10 >> 2] | 0)) __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i6, i35) | 0;
     i3 = __Znwj(12) | 0;
     i2 = HEAP32[i11 >> 2] | 0;
     HEAP32[i3 >> 2] = i2 - (HEAP32[i6 >> 2] | 0) >> 2;
     i54 = i45;
     i53 = HEAP32[i54 + 4 >> 2] | 0;
     i1 = i3 + 4 | 0;
     HEAP32[i1 >> 2] = HEAP32[i54 >> 2];
     HEAP32[i1 + 4 >> 2] = i53;
     i1 = i3;
     HEAP32[i31 >> 2] = i1;
     if (i2 >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) {
      __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i6, i31);
      i1 = HEAP32[i31 >> 2] | 0;
      HEAP32[i31 >> 2] = 0;
      if (i1) __ZdlPv(i1);
     } else {
      HEAP32[i2 >> 2] = i1;
      HEAP32[i11 >> 2] = i2 + 4;
      HEAP32[i31 >> 2] = 0;
     }
     __ZN6MapDef9addToLastEP6VertexRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i6, i3, i35) | 0;
     break;
    }
   case 103:
    {
     HEAPF32[i46 >> 2] = 0.0;
     HEAPF32[i13 >> 2] = 0.0;
     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(i34, i46) | 0, i13) | 0, i41) | 0, i44) | 0;
     if (HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5) {
      i1 = 30;
      break L6;
     }
     __ZN8Document7addGoalERK4Vec2f9EGoalType(i43, i46, +HEAPF32[i41 >> 2], HEAP32[i44 >> 2] | 0) | 0;
     break;
    }
   case 97:
    {
     HEAPF32[i39 >> 2] = 0.0;
     HEAPF32[i14 >> 2] = 0.0;
     HEAPF32[i47 >> 2] = 0.0;
     HEAPF32[i15 >> 2] = 0.0;
     HEAP32[i32 >> 2] = 0;
     HEAPF32[i42 >> 2] = 0.0;
     HEAPF32[i40 >> 2] = 0.0;
     HEAPF32[i36 >> 2] = 0.0;
     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(i34, i39) | 0, i14) | 0, i32) | 0, i47) | 0, i15) | 0, i42) | 0, i40) | 0, i36) | 0;
     if (HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5) {
      i1 = 30;
      break L6;
     }
     i1 = HEAP32[i32 >> 2] | 0;
     i2 = HEAP32[i17 >> 2] | 0;
     d7 = +HEAPF32[i42 >> 2];
     if (d7 <= 0.0 ? 1 : (i1 | 0) >= ((HEAP32[i16 >> 2] | 0) - i2 >> 2 | 0)) {
      i1 = 30;
      break L6;
     }
     if ((i1 | 0) > -1) i1 = HEAP32[i2 + (i1 << 2) >> 2] | 0; else i1 = 0;
     i54 = (__ZN8Document8addAgentERK4Vec2P4Goalfff(i43, i39, i1, d7, +HEAPF32[i40 >> 2], +HEAPF32[i36 >> 2]) | 0) + 92 | 0;
     i3 = i47;
     i53 = HEAP32[i3 + 4 >> 2] | 0;
     HEAP32[i54 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i54 + 4 >> 2] = i53;
     break;
    }
   case 98:
    {
     HEAPF32[i37 >> 2] = 0.0;
     HEAPF32[i18 >> 2] = 0.0;
     HEAPF32[i38 >> 2] = 0.0;
     HEAPF32[i19 >> 2] = 0.0;
     __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(i34, i37) | 0, i18) | 0, i38) | 0, i19) | 0;
     if (HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 5) {
      i1 = 30;
      break L6;
     }
     __ZN6MapDef6addBoxERK4Vec2S2_(i6, i37, i38) | 0;
     break;
    }
   case 105:
    {
     HEAP32[i50 >> 2] = 0;
     HEAP32[i50 + 4 >> 2] = 0;
     HEAP32[i50 + 8 >> 2] = 0;
     __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i34, i50) | 0;
     i1 = __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(i33, i50) | 0;
     if ((i1 | 0) == (i20 | 0)) {
      i1 = 25;
      break L6;
     }
     HEAP32[i31 >> 2] = 3232;
     HEAP32[i21 >> 2] = 3252;
     HEAP32[i23 >> 2] = 0;
     __ZNSt3__18ios_base4initEPv(i24, i22);
     HEAP32[i26 >> 2] = 0;
     HEAP32[i27 >> 2] = -1;
     HEAP32[i31 >> 2] = 3176;
     HEAP32[i25 >> 2] = 3196;
     __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i22);
     HEAP32[i22 >> 2] = 3108;
     HEAP32[i28 >> 2] = 0;
     HEAP32[i28 + 4 >> 2] = 0;
     HEAP32[i28 + 8 >> 2] = 0;
     HEAP32[i28 + 12 >> 2] = 0;
     HEAP32[i29 >> 2] = 8;
     __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i22, i1 + 28 | 0);
     __ZN8Document10readStreamERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEERSE_(i43, i31, i33, i50);
     HEAP32[i31 >> 2] = 3176;
     HEAP32[i21 >> 2] = 3196;
     HEAP32[i22 >> 2] = 3108;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i28);
     __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i22);
     __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i21);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i50);
     break;
    }
   default:
    if ((i2 ? (i1 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0) {
     i3 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(10748, 20502, 12) | 0;
     i54 = HEAP8[i49 >> 0] | 0;
     i53 = (i54 & 1) == 0;
     i54 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i3, i53 ? i5 : HEAP32[i4 >> 2] | 0, i53 ? (i54 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0;
     HEAP32[i31 >> 2] = __ZNKSt3__18ios_base6getlocEv(i54 + (HEAP32[(HEAP32[i54 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
     i53 = __ZNKSt3__16locale9use_facetERNS0_2idE(i31, 13432) | 0;
     i53 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i53 >> 2] | 0) + 28 >> 2] & 31](i53, 10) | 0;
     __ZNSt3__16localeD2Ev(i31);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i54, i53) | 0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i54) | 0;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
   if (HEAP32[i34 + ((HEAP32[(HEAP32[i34 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] & 2) break L4;
  }
  if ((i1 | 0) == 25) {
   i54 = ___cxa_allocate_exception(16) | 0;
   HEAP32[i48 >> 2] = 0;
   HEAP32[i48 + 4 >> 2] = 0;
   HEAP32[i48 + 8 >> 2] = 0;
   i53 = HEAP8[i50 >> 0] | 0;
   i53 = (i53 & 1) == 0 ? (i53 & 255) >>> 1 : HEAP32[i50 + 4 >> 2] | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj(i48, 20477, 24, i53 + 24 | 0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i48, (HEAP8[i50 >> 0] & 1) == 0 ? i50 + 1 | 0 : HEAP32[i50 + 8 >> 2] | 0, i53) | 0;
   __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i54, i48);
   ___cxa_throw(i54 | 0, 16, 12);
  } else if ((i1 | 0) == 30) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i49);
   break;
  }
 } while (0);
 i3 = HEAP32[i51 >> 2] | 0;
 if (!i3) {
  STACKTOP = i52;
  return;
 }
 i1 = i51 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -2 - i3 | 0) >>> 1) << 1);
 __ZdlPv(i3);
 STACKTOP = i52;
 return;
}

function __ZNSt3__16__sortIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEvT0_S9_T_(i2, i1, i24) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i12 = i1;
 L1 : while (1) {
  i17 = i12;
  i1 = i12 + -8 | 0;
  i18 = i12 + -16 | 0;
  i19 = i12 + -4 | 0;
  L3 : while (1) {
   i16 = i2;
   i3 = i17 - i16 | 0;
   i4 = i3 >> 3;
   switch (i4 | 0) {
   case 2:
    {
     i1 = i12;
     i3 = i19;
     i8 = i19;
     i13 = 4;
     break L1;
    }
   case 3:
    {
     i13 = 10;
     break L1;
    }
   case 4:
    {
     i13 = 11;
     break L1;
    }
   case 5:
    {
     i13 = 12;
     break L1;
    }
   case 1:
   case 0:
    {
     i13 = 94;
     break L1;
    }
   default:
    {}
   }
   if ((i3 | 0) < 56) {
    i13 = 14;
    break L1;
   }
   i5 = (i4 | 0) / 2 | 0;
   i11 = i2 + (i5 << 3) | 0;
   if ((i3 | 0) > 7992) {
    i3 = (i4 | 0) / 4 | 0;
    i3 = __ZNSt3__17__sort5IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i2, i2 + (i3 << 3) | 0, i11, i2 + (i3 + i5 << 3) | 0, i1, i24) | 0;
   } else i3 = __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i2, i11, i1, i24) | 0;
   i10 = HEAP32[i2 >> 2] | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   L11 : do if ((i10 | 0) < (i7 | 0)) i5 = i1; else {
    if ((i7 | 0) >= (i10 | 0) ? (HEAP32[i2 + 4 >> 2] | 0) >>> 0 < (HEAP32[i2 + (i5 << 3) + 4 >> 2] | 0) >>> 0 : 0) {
     i5 = i1;
     break;
    }
    L16 : do if ((i2 | 0) != (i18 | 0)) {
     i5 = i2 + (i5 << 3) + 4 | 0;
     i8 = i18;
     i4 = i1;
     while (1) {
      i6 = HEAP32[i8 >> 2] | 0;
      if ((i6 | 0) < (i7 | 0)) {
       i5 = i8;
       i7 = i8;
       i13 = 62;
       break;
      }
      if ((i7 | 0) >= (i6 | 0) ? (i20 = i4 + -4 | 0, i21 = HEAP32[i20 >> 2] | 0, i21 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) : 0) {
       i5 = i8;
       i4 = i20;
       i7 = i21;
       i13 = 65;
       break;
      }
      i4 = i8 + -8 | 0;
      if ((i2 | 0) == (i4 | 0)) break L16; else {
       i15 = i8;
       i8 = i4;
       i4 = i15;
      }
     }
     if ((i13 | 0) == 62) {
      i15 = i4 + -4 | 0;
      i4 = i15;
      i8 = i7;
      i7 = HEAP32[i15 >> 2] | 0;
     }
     HEAP32[i2 >> 2] = i6;
     HEAP32[i8 >> 2] = i10;
     i14 = i2 + 4 | 0;
     i15 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i7;
     HEAP32[i4 >> 2] = i15;
     i3 = i3 + 1 | 0;
     break L11;
    } while (0);
    i3 = i2 + 8 | 0;
    i9 = HEAP32[i1 >> 2] | 0;
    do if ((i10 | 0) >= (i9 | 0)) {
     if ((i9 | 0) >= (i10 | 0) ? (HEAP32[i2 + 4 >> 2] | 0) >>> 0 < (HEAP32[i19 >> 2] | 0) >>> 0 : 0) break;
     if ((i3 | 0) == (i1 | 0)) {
      i13 = 94;
      break L1;
     }
     i6 = i2 + 4 | 0;
     i4 = i2;
     while (1) {
      i5 = i4 + 8 | 0;
      i8 = HEAP32[i5 >> 2] | 0;
      if ((i10 | 0) < (i8 | 0)) {
       i7 = i4;
       i3 = i8;
       i13 = 43;
       break;
      }
      if ((i8 | 0) >= (i10 | 0) ? (i22 = i4 + 12 | 0, i23 = HEAP32[i22 >> 2] | 0, (HEAP32[i6 >> 2] | 0) >>> 0 < i23 >>> 0) : 0) {
       i7 = i4;
       i3 = i8;
       i4 = i22;
       i6 = i23;
       i13 = 46;
       break;
      }
      i4 = i3 + 8 | 0;
      if ((i4 | 0) == (i1 | 0)) {
       i13 = 94;
       break L1;
      } else {
       i16 = i3;
       i3 = i4;
       i4 = i16;
      }
     }
     if ((i13 | 0) == 43) {
      i6 = i7 + 12 | 0;
      i4 = i6;
      i6 = HEAP32[i6 >> 2] | 0;
     }
     HEAP32[i5 >> 2] = i9;
     HEAP32[i1 >> 2] = i3;
     HEAP32[i4 >> 2] = HEAP32[i19 >> 2];
     HEAP32[i19 >> 2] = i6;
     i3 = i7 + 16 | 0;
    } while (0);
    if ((i3 | 0) == (i1 | 0)) {
     i13 = 94;
     break L1;
    }
    i11 = i2 + 4 | 0;
    i7 = i1;
    while (1) {
     i9 = HEAP32[i2 >> 2] | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     L49 : do if ((i9 | 0) < (i4 | 0)) {
      i10 = i3;
      i8 = i3;
     } else {
      i5 = i3;
      while (1) {
       if ((i4 | 0) >= (i9 | 0) ? (HEAP32[i11 >> 2] | 0) >>> 0 < (HEAP32[i5 + 4 >> 2] | 0) >>> 0 : 0) {
        i10 = i3;
        i8 = i3;
        break L49;
       }
       i3 = i5 + 8 | 0;
       i4 = HEAP32[i3 >> 2] | 0;
       if ((i9 | 0) < (i4 | 0)) {
        i10 = i3;
        i8 = i3;
        break;
       } else i5 = i3;
      }
     } while (0);
     i3 = i7;
     while (1) {
      i6 = i3 + -8 | 0;
      i5 = HEAP32[i6 >> 2] | 0;
      if ((i9 | 0) < (i5 | 0)) {
       i3 = i6;
       continue;
      }
      if ((i5 | 0) < (i9 | 0)) {
       i7 = i6;
       break;
      }
      if ((HEAP32[i11 >> 2] | 0) >>> 0 < (HEAP32[i3 + -4 >> 2] | 0) >>> 0) i3 = i6; else {
       i7 = i6;
       break;
      }
     }
     if (i8 >>> 0 >= i7 >>> 0) {
      i2 = i8;
      continue L3;
     }
     HEAP32[i10 >> 2] = i5;
     HEAP32[i6 >> 2] = i4;
     i15 = i8 + 4 | 0;
     i3 = i3 + -4 | 0;
     i16 = HEAP32[i15 >> 2] | 0;
     HEAP32[i15 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i16;
     i3 = i8 + 8 | 0;
    }
   } while (0);
   i4 = i2 + 8 | 0;
   L63 : do if (i4 >>> 0 < i5 >>> 0) while (1) {
    i10 = HEAP32[i11 >> 2] | 0;
    i13 = i11 + 4 | 0;
    while (1) {
     i6 = HEAP32[i4 >> 2] | 0;
     if ((i6 | 0) >= (i10 | 0)) {
      if ((i10 | 0) < (i6 | 0)) {
       i15 = i4;
       i14 = i4;
       break;
      }
      if ((HEAP32[i4 + 4 >> 2] | 0) >>> 0 >= (HEAP32[i13 >> 2] | 0) >>> 0) {
       i15 = i4;
       i14 = i4;
       break;
      }
     }
     i4 = i4 + 8 | 0;
    }
    i7 = i5 + -8 | 0;
    i4 = HEAP32[i7 >> 2] | 0;
    L73 : do if ((i4 | 0) < (i10 | 0)) i8 = i7; else {
     i8 = i7;
     i9 = i7;
     while (1) {
      if ((i10 | 0) >= (i4 | 0) ? (HEAP32[i5 + -4 >> 2] | 0) >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0 : 0) {
       i8 = i9;
       i7 = i9;
       break L73;
      }
      i5 = i8 + -8 | 0;
      i4 = HEAP32[i5 >> 2] | 0;
      if ((i4 | 0) < (i10 | 0)) {
       i8 = i5;
       i7 = i5;
       i5 = i9;
       break;
      } else {
       i7 = i9;
       i8 = i5;
       i9 = i5;
       i5 = i7;
      }
     }
    } while (0);
    if (i14 >>> 0 > i8 >>> 0) {
     i4 = i14;
     break L63;
    }
    HEAP32[i15 >> 2] = i4;
    HEAP32[i7 >> 2] = i6;
    i15 = i14 + 4 | 0;
    i4 = i5 + -4 | 0;
    i5 = HEAP32[i15 >> 2] | 0;
    HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i4 >> 2] = i5;
    i4 = i14 + 8 | 0;
    i5 = i8;
    i11 = (i11 | 0) == (i14 | 0) ? i8 : i11;
    i3 = i3 + 1 | 0;
   } while (0);
   do if ((i4 | 0) != (i11 | 0)) {
    i9 = HEAP32[i11 >> 2] | 0;
    i10 = HEAP32[i4 >> 2] | 0;
    if ((i9 | 0) < (i10 | 0)) {
     i6 = i4 + 4 | 0;
     i8 = i11 + 4 | 0;
     i5 = i6;
     i7 = i8;
     i8 = HEAP32[i8 >> 2] | 0;
     i6 = HEAP32[i6 >> 2] | 0;
    } else {
     if ((i10 | 0) < (i9 | 0)) break;
     i7 = i11 + 4 | 0;
     i8 = HEAP32[i7 >> 2] | 0;
     i5 = i4 + 4 | 0;
     i6 = HEAP32[i5 >> 2] | 0;
     if (i8 >>> 0 >= i6 >>> 0) break;
    }
    HEAP32[i4 >> 2] = i9;
    HEAP32[i11 >> 2] = i10;
    HEAP32[i5 >> 2] = i8;
    HEAP32[i7 >> 2] = i6;
    i3 = i3 + 1 | 0;
   } while (0);
   if (!i3) {
    i5 = __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEbT0_S9_T_(i2, i4, i24) | 0;
    i3 = i4 + 8 | 0;
    if (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEbT0_S9_T_(i3, i12, i24) | 0) {
     i13 = 89;
     break;
    }
    if (i5) {
     i2 = i3;
     continue;
    }
   }
   i15 = i4;
   if ((i15 - i16 | 0) >= (i17 - i15 | 0)) {
    i1 = i4;
    i13 = 93;
    break;
   }
   __ZNSt3__16__sortIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEvT0_S9_T_(i2, i4, i24);
   i2 = i4 + 8 | 0;
  }
  if ((i13 | 0) == 89) if (i5) {
   i13 = 94;
   break;
  } else {
   i12 = i4;
   continue;
  } else if ((i13 | 0) == 93) {
   __ZNSt3__16__sortIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEvT0_S9_T_(i1 + 8 | 0, i12, i24);
   i12 = i1;
   continue;
  }
 }
 if ((i13 | 0) == 4) {
  i5 = i1 + -8 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  i7 = HEAP32[i2 >> 2] | 0;
  do if ((i6 | 0) >= (i7 | 0)) {
   if ((i7 | 0) < (i6 | 0)) return;
   i4 = HEAP32[i3 >> 2] | 0;
   i1 = i2 + 4 | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if (i4 >>> 0 < i3 >>> 0) break; else return;
  } else {
   i3 = i2 + 4 | 0;
   i1 = i3;
   i4 = HEAP32[i8 >> 2] | 0;
   i3 = HEAP32[i3 >> 2] | 0;
  } while (0);
  HEAP32[i2 >> 2] = i6;
  HEAP32[i5 >> 2] = i7;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i8 >> 2] = i3;
  return;
 } else if ((i13 | 0) == 10) {
  __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i2, i2 + 8 | 0, i1, i24) | 0;
  return;
 } else if ((i13 | 0) == 11) {
  __ZNSt3__17__sort4IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_T_(i2, i2 + 8 | 0, i2 + 16 | 0, i1, i24) | 0;
  return;
 } else if ((i13 | 0) == 12) {
  __ZNSt3__17__sort5IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i2, i2 + 8 | 0, i2 + 16 | 0, i2 + 24 | 0, i1, i24) | 0;
  return;
 } else if ((i13 | 0) == 14) {
  i3 = i2 + 16 | 0;
  __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i2, i2 + 8 | 0, i3, i24) | 0;
  i1 = i2 + 24 | 0;
  if ((i1 | 0) == (i12 | 0)) return;
  while (1) {
   i10 = HEAP32[i1 >> 2] | 0;
   i6 = HEAP32[i3 >> 2] | 0;
   if ((i10 | 0) >= (i6 | 0)) {
    if ((i6 | 0) >= (i10 | 0) ? (i25 = i1 + 4 | 0, i26 = HEAP32[i25 >> 2] | 0, i27 = i3 + 4 | 0, i28 = HEAP32[i27 >> 2] | 0, i26 >>> 0 < i28 >>> 0) : 0) {
     i5 = i25;
     i4 = i27;
     i11 = i26;
     i7 = i28;
     i13 = 20;
    }
   } else {
    i11 = i1 + 4 | 0;
    i7 = i3 + 4 | 0;
    i5 = i11;
    i4 = i7;
    i11 = HEAP32[i11 >> 2] | 0;
    i7 = HEAP32[i7 >> 2] | 0;
    i13 = 20;
   }
   if ((i13 | 0) == 20) {
    i13 = 0;
    i9 = i11;
    HEAP32[i1 >> 2] = i6;
    HEAP32[i5 >> 2] = i7;
    L113 : do if ((i3 | 0) != (i2 | 0)) {
     i7 = i3;
     while (1) {
      i3 = i7 + -8 | 0;
      i8 = HEAP32[i3 >> 2] | 0;
      if ((i10 | 0) < (i8 | 0)) {
       i5 = i7 + -4 | 0;
       i4 = i5;
       i5 = HEAP32[i5 >> 2] | 0;
      } else {
       if ((i8 | 0) < (i10 | 0)) {
        i3 = i7;
        break L113;
       }
       i6 = i7 + -4 | 0;
       i5 = HEAP32[i6 >> 2] | 0;
       if (i9 >>> 0 >= i5 >>> 0) {
        i3 = i7;
        break L113;
       }
       i4 = i6;
      }
      HEAP32[i7 >> 2] = i8;
      HEAP32[i7 + 4 >> 2] = i5;
      if ((i3 | 0) == (i2 | 0)) break; else i7 = i3;
     }
    } while (0);
    HEAP32[i3 >> 2] = i10;
    HEAP32[i4 >> 2] = i11;
   }
   i3 = i1 + 8 | 0;
   if ((i3 | 0) == (i12 | 0)) break; else {
    i24 = i1;
    i1 = i3;
    i3 = i24;
   }
  }
  return;
 } else if ((i13 | 0) == 94) return;
}

function __ZN8Document10updatePlanEP5Agent(i17, i1) {
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i29 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i25 = i29 + 152 | 0;
 i26 = i29 + 148 | 0;
 i4 = i29 + 136 | 0;
 i28 = i29 + 124 | 0;
 i27 = i29 + 112 | 0;
 i13 = i29 + 108 | 0;
 i24 = i29 + 96 | 0;
 i23 = i29 + 40 | 0;
 i22 = i29 + 16 | 0;
 i16 = i29 + 64 | 0;
 i20 = i29 + 8 | 0;
 i19 = i29;
 HEAP32[i26 >> 2] = i1;
 i9 = i17 + 132 | 0;
 if ((HEAP32[i9 >> 2] | 0) == (HEAP32[i17 + 136 >> 2] | 0)) {
  STACKTOP = i29;
  return;
 }
 i15 = i1 + 32 | 0;
 if (!(+HEAPF32[i15 >> 2] != 34028234663852886.0e22)) {
  STACKTOP = i29;
  return;
 }
 i14 = i1 + 12 | 0;
 i3 = i17 + 184 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if (!i2) {
  i29 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, 20417, 17);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i29, i4);
  ___cxa_throw(i29 | 0, 16, 12);
 }
 d6 = +HEAPF32[i1 + 28 >> 2];
 i1 = i3;
 L10 : do {
  while (1) {
   if (!(+HEAPF32[i2 + 16 >> 2] < d6)) {
    i1 = i2;
    break;
   }
   i2 = HEAP32[i2 + 4 >> 2] | 0;
   if (!i2) break L10;
  }
  i2 = HEAP32[i1 >> 2] | 0;
 } while ((i2 | 0) != 0);
 if ((i1 | 0) == (i3 | 0)) {
  i29 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, 20417, 17);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i29, i4);
  ___cxa_throw(i29 | 0, 16, 12);
 }
 if (d6 < +HEAPF32[i1 + 16 >> 2]) {
  i29 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4, 20417, 17);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i29, i4);
  ___cxa_throw(i29 | 0, 16, 12);
 }
 __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEEC2ERKS4_(i28, i1 + 20 | 0);
 i7 = __ZN4Mesh14findContainingERK4Vec2RNSt3__16vectorIS0_NS3_9allocatorIS0_EEEE(i9, i14, i28) | 0;
 i8 = __ZN4Mesh14findContainingERK4Vec2RNSt3__16vectorIS0_NS3_9allocatorIS0_EEEE(i9, i15, i28) | 0;
 i4 = HEAP32[i26 >> 2] | 0;
 i2 = HEAP32[i4 + 152 >> 2] | 0;
 i3 = i4 + 156 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i18 = i1 + -40 | 0;
  HEAP32[i3 >> 2] = i18;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i18 >> 2] >> 2] & 255](i18);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 i1 = HEAP32[i4 + 140 >> 2] | 0;
 i2 = i4 + 144 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 HEAPF32[i4 + 168 >> 2] = 34028234663852886.0e22;
 HEAPF32[i4 + 172 >> 2] = 34028234663852886.0e22;
 HEAPF32[i4 + 176 >> 2] = 0.0;
 i5 = HEAP32[i26 >> 2] | 0;
 HEAP8[i5 + 89 >> 0] = 0;
 i4 = (i7 | 0) == (i8 | 0);
 if (!(i4 | ((i7 | 0) == 0 | (i8 | 0) == 0))) {
  HEAP32[i27 >> 2] = 0;
  i18 = i27 + 4 | 0;
  HEAP32[i18 >> 2] = 0;
  HEAP32[i27 + 8 >> 2] = 0;
  i12 = __ZN4Mesh16edgesAstarSearchERK4Vec2S2_P8TriangleS4_RNSt3__16vectorIS4_NS5_9allocatorIS4_EEEEf(i9, i14, i15, i7, i8, i27, +HEAPF32[i5 + 28 >> 2]) | 0;
  i10 = HEAP32[i26 >> 2] | 0;
  i9 = i10 + 140 | 0;
  if (i12) {
   i2 = (HEAP32[i18 >> 2] | 0) - (HEAP32[i27 >> 2] | 0) | 0;
   i8 = i2 >> 1;
   i4 = i10 + 148 | 0;
   i5 = HEAP32[i9 >> 2] | 0;
   i1 = i5;
   if ((HEAP32[i4 >> 2] | 0) - i1 >> 2 >>> 0 < i8 >>> 0) {
    i7 = i10 + 144 | 0;
    i3 = (HEAP32[i7 >> 2] | 0) - i1 | 0;
    if (!i8) i1 = 0; else i1 = __Znwj(i2 << 1) | 0;
    _memcpy(i1 | 0, i5 | 0, i3 | 0) | 0;
    HEAP32[i9 >> 2] = i1;
    HEAP32[i7 >> 2] = i1 + (i3 >> 2 << 2);
    HEAP32[i4 >> 2] = i1 + (i8 << 2);
    if (i5) __ZdlPv(i5);
   }
   i11 = i10 + 152 | 0;
   i3 = i8 + -1 | 0;
   i12 = i10 + 160 | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   i5 = i7;
   if ((((HEAP32[i12 >> 2] | 0) - i5 | 0) / 40 | 0) >>> 0 < i3 >>> 0) {
    i8 = i10 + 156 | 0;
    i4 = HEAP32[i8 >> 2] | 0;
    i1 = i4;
    i9 = __Znwj(i3 * 40 | 0) | 0;
    i2 = i9 + (((i1 - i5 | 0) / 40 | 0) * 40 | 0) | 0;
    i10 = i2;
    i9 = i9 + (i3 * 40 | 0) | 0;
    if ((i4 | 0) == (i7 | 0)) {
     i3 = i11;
     i4 = i8;
     i2 = i10;
    } else {
     i1 = i10;
     do {
      HEAP32[i2 + -40 >> 2] = 5612;
      i2 = i2 + -36 | 0;
      i3 = i4 + -36 | 0;
      i4 = i4 + -40 | 0;
      i5 = i2 + 36 | 0;
      do {
       HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
       i2 = i2 + 4 | 0;
       i3 = i3 + 4 | 0;
      } while ((i2 | 0) < (i5 | 0));
      i2 = i1 + -40 | 0;
      i1 = i2;
     } while ((i4 | 0) != (i7 | 0));
     i3 = i11;
     i4 = i8;
     i2 = i1;
     i5 = HEAP32[i11 >> 2] | 0;
     i1 = HEAP32[i8 >> 2] | 0;
    }
    HEAP32[i3 >> 2] = i2;
    HEAP32[i4 >> 2] = i10;
    HEAP32[i12 >> 2] = i9;
    i2 = i5;
    if ((i1 | 0) != (i2 | 0)) do {
     i1 = i1 + -40 | 0;
     FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 >> 2] >> 2] & 255](i1);
    } while ((i1 | 0) != (i2 | 0));
    if (i5) __ZdlPv(i5);
   }
   HEAP32[i13 >> 2] = -2;
   HEAP32[i24 >> 2] = 0;
   i11 = i24 + 4 | 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i24 + 8 >> 2] = 0;
   i10 = i23 + 16 | 0;
   HEAP32[i10 >> 2] = i23;
   HEAP32[i23 >> 2] = 5644;
   HEAP32[i23 + 4 >> 2] = i13;
   HEAP32[i23 + 8 >> 2] = i24;
   i9 = i22 + 16 | 0;
   HEAP32[i9 >> 2] = i22;
   HEAP32[i22 >> 2] = 5688;
   HEAP32[i22 + 4 >> 2] = i17;
   HEAP32[i22 + 8 >> 2] = i26;
   HEAP32[i16 >> 2] = i23;
   HEAP32[i16 + 4 >> 2] = i22;
   HEAP32[i16 + 8 >> 2] = -1;
   HEAPF32[i16 + 12 >> 2] = 0.0;
   HEAPF32[i16 + 16 >> 2] = 0.0;
   HEAP32[i16 + 20 >> 2] = -1;
   HEAPF32[i16 + 24 >> 2] = 0.0;
   HEAPF32[i16 + 28 >> 2] = 0.0;
   __ZN9PathMaker8makePathERKNSt3__16vectorIP8TriangleNS0_9allocatorIS3_EEEERK4Vec2SB_(i16, i27, i14, i15);
   i1 = HEAP32[i24 >> 2] | 0;
   if ((HEAP32[i11 >> 2] | 0) != (i1 | 0)) {
    i7 = i17 + 120 | 0;
    i8 = i20 + 4 | 0;
    i5 = 0;
    do {
     i2 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) < 0) {
      i4 = HEAP32[i26 >> 2] | 0;
      d6 = +HEAPF32[i4 + 40 >> 2];
      i3 = i2 + 4 | 0;
      i2 = HEAP32[i3 + 4 >> 2] | 0;
      i1 = i4 + 168 | 0;
      HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i1 + 4 >> 2] = i2;
      HEAPF32[i4 + 176 >> 2] = d6 * d6;
      i1 = i4 + 164 | 0;
      HEAP32[i25 >> 2] = i1;
      i2 = i4 + 144 | 0;
      i3 = HEAP32[i2 >> 2] | 0;
      if (i3 >>> 0 < (HEAP32[i4 + 148 >> 2] | 0) >>> 0) {
       HEAP32[i3 >> 2] = i1;
       HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
      } else __ZNSt3__16vectorIP8ISubGoalNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i4 + 140 | 0, i25);
     } else {
      i4 = HEAP32[i7 >> 2] | 0;
      i3 = HEAP32[i4 + (i3 << 2) >> 2] | 0;
      HEAPF32[i20 >> 2] = 0.0;
      HEAPF32[i8 >> 2] = 0.0;
      if (i3) {
       i2 = HEAP32[i1 + (i5 + 1 << 2) >> 2] | 0;
       i1 = HEAP32[i2 >> 2] | 0;
       do if ((i1 | 0) < 0) i21 = 46; else {
        i1 = HEAP32[i4 + (i1 << 2) >> 2] | 0;
        if (!i1) {
         i21 = 46;
         break;
        }
        FUNCTION_TABLE_viid[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 3](i19, i1, +HEAPF32[(HEAP32[i26 >> 2] | 0) + 28 >> 2]);
        i1 = i19;
       } while (0);
       if ((i21 | 0) == 46) {
        i21 = 0;
        i1 = i2 + 4 | 0;
       }
       i15 = i1;
       i16 = HEAP32[i15 + 4 >> 2] | 0;
       i17 = i20;
       HEAP32[i17 >> 2] = HEAP32[i15 >> 2];
       HEAP32[i17 + 4 >> 2] = i16;
       i17 = HEAP32[i26 >> 2] | 0;
       FUNCTION_TABLE_vidii[HEAP32[(HEAP32[i3 >> 2] | 0) + 8 >> 2] & 3](i3, +HEAPF32[i17 + 28 >> 2], i20, i17 + 140 | 0);
      }
     }
     i5 = i5 + 1 | 0;
     i1 = HEAP32[i24 >> 2] | 0;
    } while (i5 >>> 0 < (HEAP32[i11 >> 2] | 0) - i1 >> 2 >>> 0);
   }
   i1 = HEAP32[i26 >> 2] | 0;
   HEAP32[i1 + 80 >> 2] = 0;
   HEAP32[i1 + 84 >> 2] = HEAP32[HEAP32[i1 + 140 >> 2] >> 2];
   HEAP8[(HEAP32[i26 >> 2] | 0) + 89 >> 0] = 1;
   i1 = HEAP32[i9 >> 2] | 0;
   if ((i1 | 0) != (i22 | 0)) {
    if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 255](i1);
   } else FUNCTION_TABLE_vi[HEAP32[(HEAP32[i22 >> 2] | 0) + 16 >> 2] & 255](i22);
   i1 = HEAP32[i10 >> 2] | 0;
   if ((i1 | 0) != (i23 | 0)) {
    if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 255](i1);
   } else FUNCTION_TABLE_vi[HEAP32[(HEAP32[i23 >> 2] | 0) + 16 >> 2] & 255](i23);
   i1 = HEAP32[i24 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = HEAP32[i11 >> 2] | 0;
    if ((i3 | 0) != (i1 | 0)) HEAP32[i11 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
  } else {
   d6 = +HEAPF32[i10 + 40 >> 2];
   i3 = i15;
   i2 = HEAP32[i3 + 4 >> 2] | 0;
   i1 = i10 + 168 | 0;
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i1 + 4 >> 2] = i2;
   HEAPF32[i10 + 176 >> 2] = d6 * d6;
   i1 = i10 + 164 | 0;
   HEAP32[i25 >> 2] = i1;
   i2 = i10 + 144 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i10 + 148 >> 2] | 0) >>> 0) {
    HEAP32[i3 >> 2] = i1;
    HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
   } else __ZNSt3__16vectorIP8ISubGoalNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i9, i25);
   i26 = HEAP32[i26 >> 2] | 0;
   HEAP32[i26 + 80 >> 2] = 0;
   HEAP32[i26 + 84 >> 2] = HEAP32[HEAP32[i26 + 140 >> 2] >> 2];
  }
  i1 = HEAP32[i27 >> 2] | 0;
  i2 = i1;
  if (i1) {
   i3 = HEAP32[i18 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) HEAP32[i18 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
   __ZdlPv(i1);
  }
 } else {
  d6 = +HEAPF32[i5 + 40 >> 2];
  i3 = i15;
  i2 = HEAP32[i3 + 4 >> 2] | 0;
  i1 = i5 + 168 | 0;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = i2;
  HEAPF32[i5 + 176 >> 2] = d6 * d6;
  i1 = i5 + 164 | 0;
  HEAP32[i25 >> 2] = i1;
  i2 = i5 + 144 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < (HEAP32[i5 + 148 >> 2] | 0) >>> 0) {
   HEAP32[i3 >> 2] = i1;
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
  } else __ZNSt3__16vectorIP8ISubGoalNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i5 + 140 | 0, i25);
  i27 = HEAP32[i26 >> 2] | 0;
  HEAP32[i27 + 80 >> 2] = 0;
  HEAP32[i27 + 84 >> 2] = HEAP32[HEAP32[i27 + 140 >> 2] >> 2];
  HEAP8[(HEAP32[i26 >> 2] | 0) + 89 >> 0] = i4 & 1;
 }
 i3 = HEAP32[i28 >> 2] | 0;
 if (!i3) {
  STACKTOP = i29;
  return;
 }
 i1 = i28 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -8 - i3 | 0) >>> 3) << 3);
 __ZdlPv(i3);
 STACKTOP = i29;
 return;
}

function __ZNSt3__16__sortIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEvT0_S9_T_(i2, i1, i23) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i23 = i23 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0;
 i12 = i1;
 L1 : while (1) {
  i16 = i12;
  i1 = i12 + -8 | 0;
  i17 = i12 + -16 | 0;
  i20 = i12 + -4 | 0;
  L3 : while (1) {
   i15 = i2;
   i3 = i16 - i15 | 0;
   i4 = i3 >> 3;
   switch (i4 | 0) {
   case 2:
    {
     i8 = i1;
     i3 = i20;
     i7 = i20;
     i14 = 4;
     break L1;
    }
   case 3:
    {
     i14 = 10;
     break L1;
    }
   case 4:
    {
     i14 = 11;
     break L1;
    }
   case 5:
    {
     i14 = 12;
     break L1;
    }
   case 1:
   case 0:
    {
     i14 = 94;
     break L1;
    }
   default:
    {}
   }
   if ((i3 | 0) < 56) {
    i14 = 14;
    break L1;
   }
   i7 = (i4 | 0) / 2 | 0;
   i11 = i2 + (i7 << 3) | 0;
   if ((i3 | 0) > 7992) {
    i3 = (i4 | 0) / 4 | 0;
    i3 = __ZNSt3__17__sort5IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i2, i2 + (i3 << 3) | 0, i11, i2 + (i3 + i7 << 3) | 0, i1, i23) | 0;
   } else i3 = __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i2, i11, i1, i23) | 0;
   d13 = +HEAPF32[i2 >> 2];
   d6 = +HEAPF32[i11 >> 2];
   L11 : do if (d13 < d6) i7 = i1; else {
    if (!(d6 < d13) ? (HEAP32[i2 + 4 >> 2] | 0) >>> 0 < (HEAP32[i2 + (i7 << 3) + 4 >> 2] | 0) >>> 0 : 0) {
     i7 = i1;
     break;
    }
    L16 : do if ((i2 | 0) != (i17 | 0)) {
     i8 = i2 + (i7 << 3) + 4 | 0;
     i7 = i17;
     i4 = i1;
     while (1) {
      d5 = +HEAPF32[i7 >> 2];
      if (d5 < d6) {
       i14 = 62;
       break;
      }
      if (!(d6 < d5) ? (i18 = i4 + -4 | 0, i19 = HEAP32[i18 >> 2] | 0, i19 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) : 0) {
       i4 = i18;
       i8 = i19;
       i14 = 65;
       break;
      }
      i4 = i7 + -8 | 0;
      if ((i2 | 0) == (i4 | 0)) break L16; else {
       i14 = i7;
       i7 = i4;
       i4 = i14;
      }
     }
     if ((i14 | 0) == 62) {
      i8 = i4 + -4 | 0;
      i4 = i8;
      i8 = HEAP32[i8 >> 2] | 0;
     }
     HEAPF32[i2 >> 2] = d5;
     HEAPF32[i7 >> 2] = d13;
     i10 = i2 + 4 | 0;
     i14 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i8;
     HEAP32[i4 >> 2] = i14;
     i3 = i3 + 1 | 0;
     break L11;
    } while (0);
    i3 = i2 + 8 | 0;
    d6 = +HEAPF32[i1 >> 2];
    do if (!(d13 < d6)) {
     if (!(d6 < d13) ? (HEAP32[i2 + 4 >> 2] | 0) >>> 0 < (HEAP32[i20 >> 2] | 0) >>> 0 : 0) break;
     if ((i3 | 0) == (i1 | 0)) {
      i14 = 94;
      break L1;
     }
     i7 = i2 + 4 | 0;
     i4 = i2;
     while (1) {
      d5 = +HEAPF32[i4 + 8 >> 2];
      if (d13 < d5) {
       i14 = 43;
       break;
      }
      if (!(d5 < d13) ? (i21 = i4 + 12 | 0, i22 = HEAP32[i21 >> 2] | 0, (HEAP32[i7 >> 2] | 0) >>> 0 < i22 >>> 0) : 0) {
       i7 = i21;
       i8 = i22;
       i14 = 46;
       break;
      }
      i4 = i3 + 8 | 0;
      if ((i4 | 0) == (i1 | 0)) {
       i14 = 94;
       break L1;
      } else {
       i15 = i3;
       i3 = i4;
       i4 = i15;
      }
     }
     if ((i14 | 0) == 43) {
      i8 = i4 + 12 | 0;
      i7 = i8;
      i8 = HEAP32[i8 >> 2] | 0;
     }
     i3 = HEAP32[i3 >> 2] | 0;
     HEAPF32[i4 + 8 >> 2] = d6;
     HEAP32[i1 >> 2] = i3;
     HEAP32[i7 >> 2] = HEAP32[i20 >> 2];
     HEAP32[i20 >> 2] = i8;
     i3 = i4 + 16 | 0;
    } while (0);
    if ((i3 | 0) == (i1 | 0)) {
     i14 = 94;
     break L1;
    }
    i8 = i2 + 4 | 0;
    i4 = i1;
    while (1) {
     d6 = +HEAPF32[i2 >> 2];
     d5 = +HEAPF32[i3 >> 2];
     L49 : do if (!(d6 < d5)) do {
      if (!(d5 < d6) ? (HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i3 + 4 >> 2] | 0) >>> 0 : 0) break L49;
      i3 = i3 + 8 | 0;
      d5 = +HEAPF32[i3 >> 2];
     } while (!(d6 < d5)); while (0);
     while (1) {
      i7 = i4 + -8 | 0;
      d5 = +HEAPF32[i7 >> 2];
      if (d6 < d5) {
       i4 = i7;
       continue;
      }
      if (d5 < d6) break;
      if ((HEAP32[i8 >> 2] | 0) >>> 0 < (HEAP32[i4 + -4 >> 2] | 0) >>> 0) i4 = i7; else break;
     }
     if (i3 >>> 0 >= i7 >>> 0) {
      i2 = i3;
      continue L3;
     }
     i14 = HEAP32[i3 >> 2] | 0;
     HEAPF32[i3 >> 2] = d5;
     HEAP32[i7 >> 2] = i14;
     i14 = i3 + 4 | 0;
     i4 = i4 + -4 | 0;
     i15 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i4 >> 2] = i15;
     i3 = i3 + 8 | 0;
     i4 = i7;
    }
   } while (0);
   i4 = i2 + 8 | 0;
   L63 : do if (i4 >>> 0 < i7 >>> 0) while (1) {
    d13 = +HEAPF32[i11 >> 2];
    i10 = i11 + 4 | 0;
    while (1) {
     d5 = +HEAPF32[i4 >> 2];
     if (!(d5 < d13)) {
      if (d13 < d5) {
       i14 = i4;
       break;
      }
      if ((HEAP32[i4 + 4 >> 2] | 0) >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) {
       i14 = i4;
       break;
      }
     }
     i4 = i4 + 8 | 0;
    }
    i8 = i7 + -8 | 0;
    d6 = +HEAPF32[i8 >> 2];
    L73 : do if (!(d6 < d13)) {
     i9 = i8;
     while (1) {
      if (!(d13 < d6) ? (HEAP32[i7 + -4 >> 2] | 0) >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0 : 0) {
       i8 = i9;
       break L73;
      }
      i4 = i9 + -8 | 0;
      d6 = +HEAPF32[i4 >> 2];
      if (d6 < d13) {
       i8 = i4;
       i7 = i9;
       break;
      } else {
       i7 = i9;
       i9 = i4;
      }
     }
    } while (0);
    if (i14 >>> 0 > i8 >>> 0) {
     i4 = i14;
     break L63;
    }
    HEAP32[i14 >> 2] = HEAP32[i8 >> 2];
    HEAPF32[i8 >> 2] = d5;
    i10 = i14 + 4 | 0;
    i4 = i7 + -4 | 0;
    i7 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i4 >> 2] = i7;
    i4 = i14 + 8 | 0;
    i7 = i8;
    i11 = (i11 | 0) == (i14 | 0) ? i8 : i11;
    i3 = i3 + 1 | 0;
   } while (0);
   do if ((i4 | 0) != (i11 | 0)) {
    d5 = +HEAPF32[i11 >> 2];
    d6 = +HEAPF32[i4 >> 2];
    if (d5 < d6) {
     i8 = i4 + 4 | 0;
     i10 = i11 + 4 | 0;
     i7 = i8;
     i9 = i10;
     i10 = HEAP32[i10 >> 2] | 0;
     i8 = HEAP32[i8 >> 2] | 0;
    } else {
     if (d6 < d5) break;
     i9 = i11 + 4 | 0;
     i10 = HEAP32[i9 >> 2] | 0;
     i7 = i4 + 4 | 0;
     i8 = HEAP32[i7 >> 2] | 0;
     if (i10 >>> 0 >= i8 >>> 0) break;
    }
    HEAPF32[i4 >> 2] = d5;
    HEAPF32[i11 >> 2] = d6;
    HEAP32[i7 >> 2] = i10;
    HEAP32[i9 >> 2] = i8;
    i3 = i3 + 1 | 0;
   } while (0);
   if (!i3) {
    i7 = __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEbT0_S9_T_(i2, i4, i23) | 0;
    i3 = i4 + 8 | 0;
    if (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEbT0_S9_T_(i3, i12, i23) | 0) {
     i14 = 89;
     break;
    }
    if (i7) {
     i2 = i3;
     continue;
    }
   }
   i14 = i4;
   if ((i14 - i15 | 0) >= (i16 - i14 | 0)) {
    i1 = i4;
    i14 = 93;
    break;
   }
   __ZNSt3__16__sortIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEvT0_S9_T_(i2, i4, i23);
   i2 = i4 + 8 | 0;
  }
  if ((i14 | 0) == 89) if (i7) {
   i14 = 94;
   break;
  } else {
   i12 = i4;
   continue;
  } else if ((i14 | 0) == 93) {
   __ZNSt3__16__sortIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEvT0_S9_T_(i1 + 8 | 0, i12, i23);
   i12 = i1;
   continue;
  }
 }
 if ((i14 | 0) == 4) {
  d5 = +HEAPF32[i1 >> 2];
  d6 = +HEAPF32[i2 >> 2];
  do if (!(d5 < d6)) {
   if (d6 < d5) return;
   i4 = HEAP32[i3 >> 2] | 0;
   i1 = i2 + 4 | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if (i4 >>> 0 < i3 >>> 0) break; else return;
  } else {
   i3 = i2 + 4 | 0;
   i1 = i3;
   i4 = HEAP32[i7 >> 2] | 0;
   i3 = HEAP32[i3 >> 2] | 0;
  } while (0);
  HEAPF32[i2 >> 2] = d5;
  HEAPF32[i8 >> 2] = d6;
  HEAP32[i1 >> 2] = i4;
  HEAP32[i7 >> 2] = i3;
  return;
 } else if ((i14 | 0) == 10) {
  __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i2, i2 + 8 | 0, i1, i23) | 0;
  return;
 } else if ((i14 | 0) == 11) {
  __ZNSt3__17__sort4IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_T_(i2, i2 + 8 | 0, i2 + 16 | 0, i1, i23) | 0;
  return;
 } else if ((i14 | 0) == 12) {
  __ZNSt3__17__sort5IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i2, i2 + 8 | 0, i2 + 16 | 0, i2 + 24 | 0, i1, i23) | 0;
  return;
 } else if ((i14 | 0) == 14) {
  i3 = i2 + 16 | 0;
  __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i2, i2 + 8 | 0, i3, i23) | 0;
  i1 = i2 + 24 | 0;
  if ((i1 | 0) == (i12 | 0)) return;
  while (1) {
   d6 = +HEAPF32[i1 >> 2];
   d5 = +HEAPF32[i3 >> 2];
   if (!(d6 < d5)) {
    if (!(d5 < d6) ? (i24 = i1 + 4 | 0, i25 = HEAP32[i24 >> 2] | 0, i26 = i3 + 4 | 0, i27 = HEAP32[i26 >> 2] | 0, i25 >>> 0 < i27 >>> 0) : 0) {
     i7 = i24;
     i4 = i26;
     i11 = i25;
     i8 = i27;
     i14 = 20;
    }
   } else {
    i11 = i1 + 4 | 0;
    i8 = i3 + 4 | 0;
    i7 = i11;
    i4 = i8;
    i11 = HEAP32[i11 >> 2] | 0;
    i8 = HEAP32[i8 >> 2] | 0;
    i14 = 20;
   }
   if ((i14 | 0) == 20) {
    i14 = 0;
    i10 = i11;
    HEAPF32[i1 >> 2] = d5;
    HEAP32[i7 >> 2] = i8;
    L113 : do if ((i3 | 0) != (i2 | 0)) {
     i9 = i3;
     while (1) {
      i3 = i9 + -8 | 0;
      d5 = +HEAPF32[i3 >> 2];
      if (d6 < d5) {
       i7 = i9 + -4 | 0;
       i4 = i7;
       i7 = HEAP32[i7 >> 2] | 0;
      } else {
       if (d5 < d6) {
        i3 = i9;
        break L113;
       }
       i8 = i9 + -4 | 0;
       i7 = HEAP32[i8 >> 2] | 0;
       if (i10 >>> 0 >= i7 >>> 0) {
        i3 = i9;
        break L113;
       }
       i4 = i8;
      }
      HEAPF32[i9 >> 2] = d5;
      HEAP32[i9 + 4 >> 2] = i7;
      if ((i3 | 0) == (i2 | 0)) break; else i9 = i3;
     }
    } while (0);
    HEAPF32[i3 >> 2] = d6;
    HEAP32[i4 >> 2] = i11;
   }
   i3 = i1 + 8 | 0;
   if ((i3 | 0) == (i12 | 0)) break; else {
    i23 = i1;
    i1 = i3;
    i3 = i23;
   }
  }
  return;
 } else if ((i14 | 0) == 94) return;
}

function _free(i15) {
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0;
 if (!i15) return;
 i1 = i15 + -8 | 0;
 i7 = HEAP32[2545] | 0;
 if (i1 >>> 0 < i7 >>> 0) _abort();
 i2 = HEAP32[i15 + -4 >> 2] | 0;
 i3 = i2 & 3;
 if ((i3 | 0) == 1) _abort();
 i13 = i2 & -8;
 i16 = i15 + (i13 + -8) | 0;
 do if (!(i2 & 1)) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i3) return;
  i8 = -8 - i1 | 0;
  i10 = i15 + i8 | 0;
  i11 = i1 + i13 | 0;
  if (i10 >>> 0 < i7 >>> 0) _abort();
  if ((i10 | 0) == (HEAP32[2546] | 0)) {
   i1 = i15 + (i13 + -4) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 & 3 | 0) != 3) {
    i20 = i10;
    i5 = i11;
    break;
   }
   HEAP32[2543] = i11;
   HEAP32[i1 >> 2] = i2 & -2;
   HEAP32[i15 + (i8 + 4) >> 2] = i11 | 1;
   HEAP32[i16 >> 2] = i11;
   return;
  }
  i4 = i1 >>> 3;
  if (i1 >>> 0 < 256) {
   i3 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   i2 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
   i1 = 10204 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i10 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[2541] = HEAP32[2541] & ~(1 << i4);
    i20 = i10;
    i5 = i11;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i20 = i10;
   i5 = i11;
   break;
  }
  i6 = HEAP32[i15 + (i8 + 24) >> 2] | 0;
  i3 = HEAP32[i15 + (i8 + 12) >> 2] | 0;
  do if ((i3 | 0) == (i10 | 0)) {
   i2 = i15 + (i8 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i8 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i15 + (i8 + 8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i10 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i10 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i15 + (i8 + 28) >> 2] | 0;
   i2 = 10468 + (i1 << 2) | 0;
   if ((i10 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
     i20 = i10;
     i5 = i11;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i10 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i20 = i10;
     i5 = i11;
     break;
    }
   }
   i2 = HEAP32[2545] | 0;
   if (i9 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = HEAP32[i15 + (i8 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i8 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i20 = i10;
    i5 = i11;
    break;
   } else {
    i20 = i10;
    i5 = i11;
   }
  } else {
   i20 = i10;
   i5 = i11;
  }
 } else {
  i20 = i1;
  i5 = i13;
 } while (0);
 if (i20 >>> 0 >= i16 >>> 0) _abort();
 i1 = i15 + (i13 + -4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 1)) _abort();
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[2547] | 0)) {
   i19 = (HEAP32[2544] | 0) + i5 | 0;
   HEAP32[2544] = i19;
   HEAP32[2547] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   if ((i20 | 0) != (HEAP32[2546] | 0)) return;
   HEAP32[2546] = 0;
   HEAP32[2543] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[2546] | 0)) {
   i19 = (HEAP32[2543] | 0) + i5 | 0;
   HEAP32[2543] = i19;
   HEAP32[2546] = i20;
   HEAP32[i20 + 4 >> 2] = i19 | 1;
   HEAP32[i20 + i19 >> 2] = i19;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i15 + (i13 + 16) >> 2] | 0;
   i1 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   do if ((i1 | 0) == (i16 | 0)) {
    i2 = i15 + (i13 + 12) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i15 + (i13 + 8) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i14 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i14 = i1;
     break;
    }
   } else {
    i2 = HEAP32[i15 + i13 >> 2] | 0;
    if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i3 = i2 + 12 | 0;
    if ((HEAP32[i3 >> 2] | 0) != (i16 | 0)) _abort();
    i4 = i1 + 8 | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i3 >> 2] = i1;
     HEAP32[i4 >> 2] = i2;
     i14 = i1;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i15 + (i13 + 20) >> 2] | 0;
    i2 = 10468 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i14;
     if (!i14) {
      HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i14; else HEAP32[i6 + 20 >> 2] = i14;
     if (!i14) break;
    }
    i2 = HEAP32[2545] | 0;
    if (i14 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i14 + 24 >> 2] = i6;
    i1 = HEAP32[i15 + (i13 + 8) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i14 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    } while (0);
    i1 = HEAP32[i15 + (i13 + 12) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
     HEAP32[i14 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i14;
     break;
    }
   }
  } else {
   i3 = HEAP32[i15 + i13 >> 2] | 0;
   i2 = HEAP32[i15 + (i13 | 4) >> 2] | 0;
   i1 = 10204 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[2541] = HEAP32[2541] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
  if ((i20 | 0) == (HEAP32[2546] | 0)) {
   HEAP32[2543] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i20 + 4 >> 2] = i5 | 1;
  HEAP32[i20 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 10204 + (i2 << 2) | 0;
  i3 = HEAP32[2541] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 10204 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[2541] = i3 | i1;
   i17 = 10204 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i20;
  HEAP32[i18 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i18;
  HEAP32[i20 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 10468 + (i4 << 2) | 0;
 HEAP32[i20 + 28 >> 2] = i4;
 HEAP32[i20 + 20 >> 2] = 0;
 HEAP32[i20 + 16 >> 2] = 0;
 i2 = HEAP32[2542] | 0;
 i3 = 1 << i4;
 L199 : do if (i2 & i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  L202 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
   i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
   while (1) {
    i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) break;
    if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
     i19 = i3;
     break L202;
    } else {
     i4 = i4 << 1;
     i1 = i3;
    }
   }
   if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = i20;
    HEAP32[i20 + 24 >> 2] = i1;
    HEAP32[i20 + 12 >> 2] = i20;
    HEAP32[i20 + 8 >> 2] = i20;
    break L199;
   }
  } else i19 = i1; while (0);
  i1 = i19 + 8 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i18 = HEAP32[2545] | 0;
  if (i2 >>> 0 >= i18 >>> 0 & i19 >>> 0 >= i18 >>> 0) {
   HEAP32[i2 + 12 >> 2] = i20;
   HEAP32[i1 >> 2] = i20;
   HEAP32[i20 + 8 >> 2] = i2;
   HEAP32[i20 + 12 >> 2] = i19;
   HEAP32[i20 + 24 >> 2] = 0;
   break;
  } else _abort();
 } else {
  HEAP32[2542] = i2 | i3;
  HEAP32[i1 >> 2] = i20;
  HEAP32[i20 + 24 >> 2] = i1;
  HEAP32[i20 + 12 >> 2] = i20;
  HEAP32[i20 + 8 >> 2] = i20;
 } while (0);
 i20 = (HEAP32[2549] | 0) + -1 | 0;
 HEAP32[2549] = i20;
 if (!i20) i1 = 10620; else return;
 while (1) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (!i1) break; else i1 = i1 + 8 | 0;
 }
 HEAP32[2549] = -1;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 12 >> 2] & 127](i44) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 14032, 14064) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 14064, 14096) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 14096, 14140) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 14140, 14160) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, 14160, 14192) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i44 = i41 + 8 | 0;
   i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i44 >> 2] | 0) + 24 >> 2] & 127](i44) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i44 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i43 = i44 + 4 | 0;
   i44 = i36 ? i43 : HEAP32[i44 + 8 >> 2] | 0;
   i43 = i44 + ((i36 ? (i38 & 255) >>> 1 : HEAP32[i43 >> 2] | 0) << 2) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc(i41, i35, i36, i39, i37, i40, i38, i1) {
 i41 = i41 | 0;
 i35 = i35 | 0;
 i36 = i36 | 0;
 i39 = i39 | 0;
 i37 = i37 | 0;
 i40 = i40 | 0;
 i38 = i38 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i42 = 0, i43 = 0, i44 = 0;
 i42 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i2 = i42 + 132 | 0;
 i1 = i42 + 116 | 0;
 i28 = i42 + 128 | 0;
 i13 = i42 + 124 | 0;
 i24 = i42 + 120 | 0;
 i29 = i42 + 112 | 0;
 i30 = i42 + 108 | 0;
 i31 = i42 + 104 | 0;
 i32 = i42 + 100 | 0;
 i33 = i42 + 96 | 0;
 i34 = i42 + 92 | 0;
 i3 = i42 + 88 | 0;
 i4 = i42 + 84 | 0;
 i5 = i42 + 80 | 0;
 i6 = i42 + 76 | 0;
 i7 = i42 + 72 | 0;
 i8 = i42 + 68 | 0;
 i9 = i42 + 64 | 0;
 i10 = i42 + 60 | 0;
 i11 = i42 + 56 | 0;
 i12 = i42 + 52 | 0;
 i14 = i42 + 48 | 0;
 i15 = i42 + 44 | 0;
 i16 = i42 + 40 | 0;
 i17 = i42 + 36 | 0;
 i18 = i42 + 32 | 0;
 i19 = i42 + 28 | 0;
 i20 = i42 + 24 | 0;
 i21 = i42 + 20 | 0;
 i22 = i42 + 16 | 0;
 i23 = i42 + 12 | 0;
 i25 = i42 + 8 | 0;
 i26 = i42 + 4 | 0;
 i27 = i42;
 HEAP32[i37 >> 2] = 0;
 i44 = __ZNKSt3__18ios_base6getlocEv(i39) | 0;
 HEAP32[i28 >> 2] = i44;
 i28 = __ZNKSt3__16locale9use_facetERNS0_2idE(i28, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i44) | 0;
 do switch (i38 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[i13 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[i24 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i24 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 99:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 12 >> 2] & 127](i43) | 0;
   HEAP32[i29 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i30 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i29 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i30 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[i31 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i31 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 12 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 68:
  {
   HEAP32[i32 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i33 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i32 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i33 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 29060, 29068) | 0;
   i43 = 26;
   break;
  }
 case 70:
  {
   HEAP32[i34 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i3 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i34 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 29068, 29076) | 0;
   i43 = 26;
   break;
  }
 case 72:
  {
   HEAP32[i4 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 73:
  {
   HEAP32[i5 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 106:
  {
   HEAP32[i6 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 28 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 109:
  {
   HEAP32[i7 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 16 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 77:
  {
   HEAP32[i8 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 4 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[i9 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 112:
  {
   HEAP32[i10 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 8 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 114:
  {
   HEAP32[i11 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i12 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i11 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 29076, 29087) | 0;
   i43 = 26;
   break;
  }
 case 82:
  {
   HEAP32[i14 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i15 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 29087, 29092) | 0;
   i43 = 26;
   break;
  }
 case 83:
  {
   HEAP32[i16 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i16 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 84:
  {
   HEAP32[i17 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i18 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i18 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, 29092, 29100) | 0;
   i43 = 26;
   break;
  }
 case 119:
  {
   HEAP32[i19 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i19 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 24 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 120:
  {
   i44 = HEAP32[(HEAP32[i41 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[i20 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i21 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i1 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i21 >> 2];
   i1 = FUNCTION_TABLE_iiiiiii[i44 & 63](i41, i1, i2, i39, i37, i40) | 0;
   break;
  }
 case 88:
  {
   i43 = i41 + 8 | 0;
   i43 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i43 >> 2] | 0) + 24 >> 2] & 127](i43) | 0;
   HEAP32[i22 >> 2] = HEAP32[i35 >> 2];
   HEAP32[i23 >> 2] = HEAP32[i36 >> 2];
   i38 = HEAP8[i43 >> 0] | 0;
   i36 = (i38 & 1) == 0;
   i44 = i36 ? i43 + 1 | 0 : HEAP32[i43 + 8 >> 2] | 0;
   i43 = i44 + (i36 ? (i38 & 255) >>> 1 : HEAP32[i43 + 4 >> 2] | 0) | 0;
   HEAP32[i1 >> 2] = HEAP32[i22 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i23 >> 2];
   HEAP32[i35 >> 2] = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i41, i1, i2, i39, i37, i40, i44, i43) | 0;
   i43 = 26;
   break;
  }
 case 121:
  {
   HEAP32[i25 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i25 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 89:
  {
   HEAP32[i26 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i26 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i41, i40 + 20 | 0, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 case 37:
  {
   HEAP32[i27 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i2 >> 2] = HEAP32[i27 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i41, i35, i2, i37, i28);
   i43 = 26;
   break;
  }
 default:
  {
   HEAP32[i37 >> 2] = HEAP32[i37 >> 2] | 4;
   i43 = 26;
  }
 } while (0);
 if ((i43 | 0) == 26) i1 = HEAP32[i35 >> 2] | 0;
 STACKTOP = i42;
 return i1 | 0;
}

function _dispose_chunk(i14, i15) {
 i14 = i14 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = i14 + i15 | 0;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 do if (!(i1 & 1)) {
  i8 = HEAP32[i14 >> 2] | 0;
  if (!(i1 & 3)) return;
  i11 = i14 + (0 - i8) | 0;
  i10 = i8 + i15 | 0;
  i7 = HEAP32[2545] | 0;
  if (i11 >>> 0 < i7 >>> 0) _abort();
  if ((i11 | 0) == (HEAP32[2546] | 0)) {
   i2 = i14 + (i15 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 & 3 | 0) != 3) {
    i19 = i11;
    i5 = i10;
    break;
   }
   HEAP32[2543] = i10;
   HEAP32[i2 >> 2] = i1 & -2;
   HEAP32[i14 + (4 - i8) >> 2] = i10 | 1;
   HEAP32[i16 >> 2] = i10;
   return;
  }
  i4 = i8 >>> 3;
  if (i8 >>> 0 < 256) {
   i3 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   i2 = HEAP32[i14 + (12 - i8) >> 2] | 0;
   i1 = 10204 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i11 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[2541] = HEAP32[2541] & ~(1 << i4);
    i19 = i11;
    i5 = i10;
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) i6 = i1; else _abort();
   } else i6 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i19 = i11;
   i5 = i10;
   break;
  }
  i6 = HEAP32[i14 + (24 - i8) >> 2] | 0;
  i3 = HEAP32[i14 + (12 - i8) >> 2] | 0;
  do if ((i3 | 0) == (i11 | 0)) {
   i3 = 16 - i8 | 0;
   i2 = i14 + (i3 + 4) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i14 + i3 | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i9 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i7 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i9 = i1;
    break;
   }
  } else {
   i4 = HEAP32[i14 + (8 - i8) >> 2] | 0;
   if (i4 >>> 0 < i7 >>> 0) _abort();
   i1 = i4 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i11 | 0)) _abort();
   i2 = i3 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i11 | 0)) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i2 >> 2] = i4;
    i9 = i3;
    break;
   } else _abort();
  } while (0);
  if (i6) {
   i1 = HEAP32[i14 + (28 - i8) >> 2] | 0;
   i2 = 10468 + (i1 << 2) | 0;
   if ((i11 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i9;
    if (!i9) {
     HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
     i19 = i11;
     i5 = i10;
     break;
    }
   } else {
    if (i6 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i1 = i6 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i11 | 0)) HEAP32[i1 >> 2] = i9; else HEAP32[i6 + 20 >> 2] = i9;
    if (!i9) {
     i19 = i11;
     i5 = i10;
     break;
    }
   }
   i3 = HEAP32[2545] | 0;
   if (i9 >>> 0 < i3 >>> 0) _abort();
   HEAP32[i9 + 24 >> 2] = i6;
   i1 = 16 - i8 | 0;
   i2 = HEAP32[i14 + i1 >> 2] | 0;
   do if (i2) if (i2 >>> 0 < i3 >>> 0) _abort(); else {
    HEAP32[i9 + 16 >> 2] = i2;
    HEAP32[i2 + 24 >> 2] = i9;
    break;
   } while (0);
   i1 = HEAP32[i14 + (i1 + 4) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    HEAP32[i9 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i9;
    i19 = i11;
    i5 = i10;
    break;
   } else {
    i19 = i11;
    i5 = i10;
   }
  } else {
   i19 = i11;
   i5 = i10;
  }
 } else {
  i19 = i14;
  i5 = i15;
 } while (0);
 i7 = HEAP32[2545] | 0;
 if (i16 >>> 0 < i7 >>> 0) _abort();
 i1 = i14 + (i15 + 4) | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!(i2 & 2)) {
  if ((i16 | 0) == (HEAP32[2547] | 0)) {
   i18 = (HEAP32[2544] | 0) + i5 | 0;
   HEAP32[2544] = i18;
   HEAP32[2547] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   if ((i19 | 0) != (HEAP32[2546] | 0)) return;
   HEAP32[2546] = 0;
   HEAP32[2543] = 0;
   return;
  }
  if ((i16 | 0) == (HEAP32[2546] | 0)) {
   i18 = (HEAP32[2543] | 0) + i5 | 0;
   HEAP32[2543] = i18;
   HEAP32[2546] = i19;
   HEAP32[i19 + 4 >> 2] = i18 | 1;
   HEAP32[i19 + i18 >> 2] = i18;
   return;
  }
  i5 = (i2 & -8) + i5 | 0;
  i4 = i2 >>> 3;
  do if (i2 >>> 0 >= 256) {
   i6 = HEAP32[i14 + (i15 + 24) >> 2] | 0;
   i3 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   do if ((i3 | 0) == (i16 | 0)) {
    i2 = i14 + (i15 + 20) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i2 = i14 + (i15 + 16) | 0;
     i1 = HEAP32[i2 >> 2] | 0;
     if (!i1) {
      i13 = 0;
      break;
     }
    }
    while (1) {
     i3 = i1 + 20 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (i4) {
      i1 = i4;
      i2 = i3;
      continue;
     }
     i3 = i1 + 16 | 0;
     i4 = HEAP32[i3 >> 2] | 0;
     if (!i4) break; else {
      i1 = i4;
      i2 = i3;
     }
    }
    if (i2 >>> 0 < i7 >>> 0) _abort(); else {
     HEAP32[i2 >> 2] = 0;
     i13 = i1;
     break;
    }
   } else {
    i4 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
    if (i4 >>> 0 < i7 >>> 0) _abort();
    i1 = i4 + 12 | 0;
    if ((HEAP32[i1 >> 2] | 0) != (i16 | 0)) _abort();
    i2 = i3 + 8 | 0;
    if ((HEAP32[i2 >> 2] | 0) == (i16 | 0)) {
     HEAP32[i1 >> 2] = i3;
     HEAP32[i2 >> 2] = i4;
     i13 = i3;
     break;
    } else _abort();
   } while (0);
   if (i6) {
    i1 = HEAP32[i14 + (i15 + 28) >> 2] | 0;
    i2 = 10468 + (i1 << 2) | 0;
    if ((i16 | 0) == (HEAP32[i2 >> 2] | 0)) {
     HEAP32[i2 >> 2] = i13;
     if (!i13) {
      HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
      break;
     }
    } else {
     if (i6 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
     i1 = i6 + 16 | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) HEAP32[i1 >> 2] = i13; else HEAP32[i6 + 20 >> 2] = i13;
     if (!i13) break;
    }
    i2 = HEAP32[2545] | 0;
    if (i13 >>> 0 < i2 >>> 0) _abort();
    HEAP32[i13 + 24 >> 2] = i6;
    i1 = HEAP32[i14 + (i15 + 16) >> 2] | 0;
    do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
     HEAP32[i13 + 16 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    } while (0);
    i1 = HEAP32[i14 + (i15 + 20) >> 2] | 0;
    if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
     HEAP32[i13 + 20 >> 2] = i1;
     HEAP32[i1 + 24 >> 2] = i13;
     break;
    }
   }
  } else {
   i3 = HEAP32[i14 + (i15 + 8) >> 2] | 0;
   i2 = HEAP32[i14 + (i15 + 12) >> 2] | 0;
   i1 = 10204 + (i4 << 1 << 2) | 0;
   if ((i3 | 0) != (i1 | 0)) {
    if (i3 >>> 0 < i7 >>> 0) _abort();
    if ((HEAP32[i3 + 12 >> 2] | 0) != (i16 | 0)) _abort();
   }
   if ((i2 | 0) == (i3 | 0)) {
    HEAP32[2541] = HEAP32[2541] & ~(1 << i4);
    break;
   }
   if ((i2 | 0) != (i1 | 0)) {
    if (i2 >>> 0 < i7 >>> 0) _abort();
    i1 = i2 + 8 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i16 | 0)) i12 = i1; else _abort();
   } else i12 = i2 + 8 | 0;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i12 >> 2] = i3;
  } while (0);
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
  if ((i19 | 0) == (HEAP32[2546] | 0)) {
   HEAP32[2543] = i5;
   return;
  }
 } else {
  HEAP32[i1 >> 2] = i2 & -2;
  HEAP32[i19 + 4 >> 2] = i5 | 1;
  HEAP32[i19 + i5 >> 2] = i5;
 }
 i1 = i5 >>> 3;
 if (i5 >>> 0 < 256) {
  i2 = i1 << 1;
  i4 = 10204 + (i2 << 2) | 0;
  i3 = HEAP32[2541] | 0;
  i1 = 1 << i1;
  if (i3 & i1) {
   i1 = 10204 + (i2 + 2 << 2) | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    i17 = i1;
    i18 = i2;
   }
  } else {
   HEAP32[2541] = i3 | i1;
   i17 = 10204 + (i2 + 2 << 2) | 0;
   i18 = i4;
  }
  HEAP32[i17 >> 2] = i19;
  HEAP32[i18 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i18;
  HEAP32[i19 + 12 >> 2] = i4;
  return;
 }
 i1 = i5 >>> 8;
 if (i1) if (i5 >>> 0 > 16777215) i4 = 31; else {
  i17 = (i1 + 1048320 | 0) >>> 16 & 8;
  i18 = i1 << i17;
  i16 = (i18 + 520192 | 0) >>> 16 & 4;
  i18 = i18 << i16;
  i4 = (i18 + 245760 | 0) >>> 16 & 2;
  i4 = 14 - (i16 | i17 | i4) + (i18 << i4 >>> 15) | 0;
  i4 = i5 >>> (i4 + 7 | 0) & 1 | i4 << 1;
 } else i4 = 0;
 i1 = 10468 + (i4 << 2) | 0;
 HEAP32[i19 + 28 >> 2] = i4;
 HEAP32[i19 + 20 >> 2] = 0;
 HEAP32[i19 + 16 >> 2] = 0;
 i2 = HEAP32[2542] | 0;
 i3 = 1 << i4;
 if (!(i2 & i3)) {
  HEAP32[2542] = i2 | i3;
  HEAP32[i1 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 }
 i1 = HEAP32[i1 >> 2] | 0;
 L191 : do if ((HEAP32[i1 + 4 >> 2] & -8 | 0) != (i5 | 0)) {
  i4 = i5 << ((i4 | 0) == 31 ? 0 : 25 - (i4 >>> 1) | 0);
  while (1) {
   i2 = i1 + 16 + (i4 >>> 31 << 2) | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) break;
   if ((HEAP32[i3 + 4 >> 2] & -8 | 0) == (i5 | 0)) {
    i1 = i3;
    break L191;
   } else {
    i4 = i4 << 1;
    i1 = i3;
   }
  }
  if (i2 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
  HEAP32[i2 >> 2] = i19;
  HEAP32[i19 + 24 >> 2] = i1;
  HEAP32[i19 + 12 >> 2] = i19;
  HEAP32[i19 + 8 >> 2] = i19;
  return;
 } while (0);
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i18 = HEAP32[2545] | 0;
 if (!(i3 >>> 0 >= i18 >>> 0 & i1 >>> 0 >= i18 >>> 0)) _abort();
 HEAP32[i3 + 12 >> 2] = i19;
 HEAP32[i2 >> 2] = i19;
 HEAP32[i19 + 8 >> 2] = i3;
 HEAP32[i19 + 12 >> 2] = i1;
 HEAP32[i19 + 24 >> 2] = 0;
 return;
}

function __ZNSt3__16__sortIRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i2, i1, i13) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : while (1) {
  i10 = i1;
  i11 = i1 + -4 | 0;
  L3 : while (1) {
   i9 = i2;
   i3 = i10 - i9 | 0;
   i4 = i3 >> 2;
   switch (i4 | 0) {
   case 2:
    {
     i3 = i11;
     i1 = i11;
     i12 = 4;
     break L1;
    }
   case 3:
    {
     i6 = i11;
     i5 = i11;
     i12 = 6;
     break L1;
    }
   case 4:
    {
     i1 = i11;
     i12 = 14;
     break L1;
    }
   case 5:
    {
     i6 = i11;
     i5 = i11;
     i12 = 15;
     break L1;
    }
   case 1:
   case 0:
    {
     i12 = 69;
     break L1;
    }
   default:
    {}
   }
   if ((i3 | 0) < 124) {
    i12 = 21;
    break L1;
   }
   i5 = (i4 | 0) / 2 | 0;
   i8 = i2 + (i5 << 2) | 0;
   do if ((i3 | 0) > 3996) {
    i3 = (i4 | 0) / 4 | 0;
    i6 = i2 + (i3 << 2) | 0;
    i3 = i2 + (i3 + i5 << 2) | 0;
    i4 = __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i2, i6, i8, i3, i13) | 0;
    if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i11 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) {
     i5 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i11 >> 2] = i5;
     i5 = i4 + 1 | 0;
     if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) {
      i7 = HEAP32[i8 >> 2] | 0;
      HEAP32[i8 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i3 >> 2] = i7;
      i3 = i4 + 2 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) {
       i7 = HEAP32[i6 >> 2] | 0;
       HEAP32[i6 >> 2] = HEAP32[i8 >> 2];
       HEAP32[i8 >> 2] = i7;
       if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) {
        i7 = HEAP32[i2 >> 2] | 0;
        HEAP32[i2 >> 2] = HEAP32[i6 >> 2];
        HEAP32[i6 >> 2] = i7;
        i4 = i4 + 4 | 0;
       } else i4 = i4 + 3 | 0;
      } else i4 = i3;
     } else i4 = i5;
    }
   } else {
    i7 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
    i3 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i11 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0;
    if (!i7) {
     if (!i3) {
      i4 = 0;
      break;
     }
     i7 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i11 >> 2] = i7;
     if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0)) {
      i4 = 1;
      break;
     }
     i4 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
     HEAP32[i8 >> 2] = i4;
     i4 = 2;
     break;
    }
    i4 = HEAP32[i2 >> 2] | 0;
    if (i3) {
     HEAP32[i2 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i11 >> 2] = i4;
     i4 = 1;
     break;
    }
    HEAP32[i2 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i8 >> 2] = i4;
    if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i11 >> 2] | 0, i4) | 0) {
     i4 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i11 >> 2] = i4;
     i4 = 2;
    } else i4 = 1;
   } while (0);
   do if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) i5 = i11; else {
    i3 = i11;
    while (1) {
     i3 = i3 + -4 | 0;
     if ((i2 | 0) == (i3 | 0)) break;
     if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) {
      i12 = 51;
      break;
     }
    }
    if ((i12 | 0) == 51) {
     i12 = 0;
     i5 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i5;
     i5 = i3;
     i4 = i4 + 1 | 0;
     break;
    }
    i3 = i2 + 4 | 0;
    if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i11 >> 2] | 0) | 0)) {
     if ((i3 | 0) == (i11 | 0)) {
      i12 = 69;
      break L1;
     } else i4 = i2;
     while (1) {
      if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) break;
      i4 = i3 + 4 | 0;
      if ((i4 | 0) == (i11 | 0)) {
       i12 = 69;
       break L1;
      } else {
       i9 = i3;
       i3 = i4;
       i4 = i9;
      }
     }
     i9 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = HEAP32[i11 >> 2];
     HEAP32[i11 >> 2] = i9;
     i3 = i4 + 8 | 0;
    }
    if ((i3 | 0) == (i11 | 0)) {
     i12 = 69;
     break L1;
    } else i4 = i11;
    while (1) {
     i5 = i3;
     while (1) {
      i3 = i5 + 4 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0) break; else i5 = i3;
     }
     do i4 = i4 + -4 | 0; while (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0);
     if (i5 >>> 0 >= i4 >>> 0) {
      i2 = i5;
      continue L3;
     }
     i9 = HEAP32[i5 >> 2] | 0;
     HEAP32[i5 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i4 >> 2] = i9;
    }
   } while (0);
   i3 = i2 + 4 | 0;
   L48 : do if (i3 >>> 0 < i5 >>> 0) {
    i7 = i5;
    while (1) {
     i5 = i3;
     while (1) {
      i3 = i5 + 4 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0) i5 = i3; else {
       i6 = i5;
       break;
      }
     }
     i5 = i7;
     do i5 = i5 + -4 | 0; while (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i8 >> 2] | 0) | 0));
     if (i6 >>> 0 > i5 >>> 0) {
      i3 = i6;
      i5 = i8;
      break L48;
     }
     i7 = HEAP32[i6 >> 2] | 0;
     HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
     HEAP32[i5 >> 2] = i7;
     i7 = i5;
     i8 = (i8 | 0) == (i6 | 0) ? i5 : i8;
     i4 = i4 + 1 | 0;
    }
   } else i5 = i8; while (0);
   if ((i3 | 0) != (i5 | 0) ? FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0 : 0) {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP32[i3 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i5 >> 2] = i8;
    i4 = i4 + 1 | 0;
   }
   if (!i4) {
    i4 = __ZNSt3__127__insertion_sort_incompleteIRPFbPKN3p2t5PointES4_EPPS2_EEbT0_SA_T_(i2, i3, i13) | 0;
    i5 = i3 + 4 | 0;
    if (__ZNSt3__127__insertion_sort_incompleteIRPFbPKN3p2t5PointES4_EPPS2_EEbT0_SA_T_(i5, i1, i13) | 0) {
     i12 = 64;
     break;
    }
    if (i4) {
     i2 = i5;
     continue;
    }
   }
   i8 = i3;
   if ((i8 - i9 | 0) >= (i10 - i8 | 0)) {
    i12 = 68;
    break;
   }
   __ZNSt3__16__sortIRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i2, i3, i13);
   i2 = i3 + 4 | 0;
  }
  if ((i12 | 0) == 64) {
   i12 = 0;
   if (i4) {
    i12 = 69;
    break;
   } else {
    i1 = i3;
    continue;
   }
  } else if ((i12 | 0) == 68) {
   i12 = 0;
   __ZNSt3__16__sortIRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i3 + 4 | 0, i1, i13);
   i1 = i3;
   continue;
  }
 }
 if ((i12 | 0) == 4) {
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0)) return;
  i13 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i13;
  return;
 } else if ((i12 | 0) == 6) {
  i1 = i2 + 4 | 0;
  i12 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0;
  i3 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  if (!i12) {
   if (!i3) return;
   i12 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i5 >> 2] = i12;
   if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0)) return;
   i13 = HEAP32[i2 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i1 >> 2] = i13;
   return;
  }
  i4 = HEAP32[i2 >> 2] | 0;
  if (i3) {
   HEAP32[i2 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i5 >> 2] = i4;
   return;
  }
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i4;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, i4) | 0)) return;
  i13 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i13;
  return;
 } else if ((i12 | 0) == 14) {
  __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i2, i2 + 4 | 0, i2 + 8 | 0, i1, i13) | 0;
  return;
 } else if ((i12 | 0) == 15) {
  i1 = i2 + 4 | 0;
  i3 = i2 + 8 | 0;
  i4 = i2 + 12 | 0;
  __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i2, i1, i3, i4, i13) | 0;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0)) return;
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i12;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0)) return;
  i11 = HEAP32[i3 >> 2] | 0;
  i12 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 >> 2] = i12;
  HEAP32[i4 >> 2] = i11;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](i12, HEAP32[i1 >> 2] | 0) | 0)) return;
  i11 = HEAP32[i1 >> 2] | 0;
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP32[i1 >> 2] = i12;
  HEAP32[i3 >> 2] = i11;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](i12, HEAP32[i2 >> 2] | 0) | 0)) return;
  i13 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i13;
  return;
 } else if ((i12 | 0) == 21) {
  __ZNSt3__118__insertion_sort_3IRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i2, i1, i13);
  return;
 } else if ((i12 | 0) == 69) return;
}

function __ZN7NavCtrl7readDocEv(i21) {
 i21 = i21 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i8 = i22 + 40 | 0;
 i13 = i22 + 32 | 0;
 i15 = i22 + 24 | 0;
 i18 = i22 + 16 | 0;
 i19 = i22 + 8 | 0;
 i20 = i22;
 i9 = i21 + 24 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i10 = i21 + 28 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  while (1) {
   i1 = i2 + -8 | 0;
   HEAP32[i10 >> 2] = i1;
   i2 = HEAP32[i2 + -4 >> 2] | 0;
   if (i2) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
    i1 = HEAP32[i10 >> 2] | 0;
   }
   if ((i1 | 0) == (i3 | 0)) break; else i2 = i1;
  }
 }
 i11 = i21 + 36 | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i12 = i21 + 40 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = i1 + -8 | 0;
  HEAP32[i12 >> 2] = i2;
  i1 = HEAP32[i1 + -4 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
   i1 = HEAP32[i12 >> 2] | 0;
  }
 } while ((i1 | 0) != (i3 | 0));
 i3 = HEAP32[i21 >> 2] | 0;
 i14 = i21 + 4 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = i1 + -8 | 0;
  HEAP32[i14 >> 2] = i2;
  i1 = HEAP32[i1 + -4 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
   i1 = HEAP32[i14 >> 2] | 0;
  }
 } while ((i1 | 0) != (i3 | 0));
 i16 = i21 + 48 | 0;
 i3 = HEAP32[i16 >> 2] | 0;
 i17 = i21 + 52 | 0;
 i1 = HEAP32[i17 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = i1 + -8 | 0;
  HEAP32[i17 >> 2] = i2;
  i1 = HEAP32[i1 + -4 >> 2] | 0;
  if (!i1) i1 = i2; else {
   __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
   i1 = HEAP32[i17 >> 2] | 0;
  }
 } while ((i1 | 0) != (i3 | 0));
 i1 = HEAP32[i21 + 72 >> 2] | 0;
 i5 = HEAP32[i21 + 76 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) {
  i6 = i8 + 4 | 0;
  i7 = i21 + 32 | 0;
  do {
   i3 = HEAP32[i1 >> 2] | 0;
   i2 = __Znwj(16) | 0;
   HEAP32[i2 + 4 >> 2] = i21;
   HEAP8[i2 + 8 >> 0] = 1;
   HEAP32[i2 >> 2] = 2876;
   HEAP32[i2 + 12 >> 2] = i3;
   _emscripten_asm_const_5(5, i2 | 0, 20, +(+HEAPF32[i3 + 12 >> 2]), +(+HEAPF32[i3 + 16 >> 2]), +(+HEAPF32[i3 + 28 >> 2])) | 0;
   HEAP32[i8 >> 2] = i2;
   i3 = __Znwj(16) | 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 >> 2] = 3296;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i4 = HEAP32[i10 >> 2] | 0;
   if (i4 >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
    __ZNSt3__16vectorINS_10shared_ptrI9AgentItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9, i8);
    i2 = HEAP32[i6 >> 2] | 0;
    if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
   } else {
    HEAP32[i4 >> 2] = i2;
    HEAP32[i4 + 4 >> 2] = i3;
    HEAP32[i8 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i10 >> 2] = i4 + 8;
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i5 | 0));
 }
 i1 = HEAP32[i21 + 264 >> 2] | 0;
 i5 = HEAP32[i21 + 268 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) {
  i6 = i13 + 4 | 0;
  i7 = i21 + 44 | 0;
  do {
   i2 = __Znwj(16) | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   HEAP32[i2 + 4 >> 2] = i21;
   HEAP8[i2 + 8 >> 0] = 1;
   HEAP32[i2 >> 2] = 2896;
   HEAP32[i2 + 12 >> 2] = i3;
   _emscripten_asm_const_6(6, i2 | 0, 25, +(+HEAPF32[i3 >> 2]), +(+HEAPF32[i3 + 4 >> 2]), HEAP32[i3 + 12 >> 2] | 0, +(+HEAPF32[i3 + 8 >> 2])) | 0;
   HEAP32[i13 >> 2] = i2;
   i3 = __Znwj(16) | 0;
   HEAP32[i3 + 4 >> 2] = 0;
   HEAP32[i3 + 8 >> 2] = 0;
   HEAP32[i3 >> 2] = 3324;
   HEAP32[i3 + 12 >> 2] = i2;
   HEAP32[i6 >> 2] = i3;
   i4 = HEAP32[i12 >> 2] | 0;
   if (i4 >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
    __ZNSt3__16vectorINS_10shared_ptrI8GoalItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i13);
    i2 = HEAP32[i6 >> 2] | 0;
    if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
   } else {
    HEAP32[i4 >> 2] = i2;
    HEAP32[i4 + 4 >> 2] = i3;
    HEAP32[i13 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
    HEAP32[i12 >> 2] = i4 + 8;
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i5 | 0));
 }
 i1 = HEAP32[i21 + 96 >> 2] | 0;
 i9 = HEAP32[i21 + 100 >> 2] | 0;
 if ((i1 | 0) != (i9 | 0)) {
  i10 = i15 + 4 | 0;
  i11 = i21 + 8 | 0;
  i2 = 0;
  do {
   i3 = HEAP32[i1 >> 2] | 0;
   if (!(HEAP8[i3 + 24 >> 0] | 0)) {
    i4 = HEAP32[i3 >> 2] | 0;
    i8 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i4 | 0) != (i8 | 0)) {
     i7 = 0;
     do {
      i5 = HEAP32[i4 >> 2] | 0;
      i3 = __Znwj(28) | 0;
      HEAP32[i3 + 4 >> 2] = i21;
      HEAP8[i3 + 8 >> 0] = 1;
      HEAP32[i3 >> 2] = 2856;
      HEAP32[i3 + 12 >> 2] = i5;
      HEAP8[i3 + 16 >> 0] = 0;
      HEAP32[i3 + 20 >> 2] = i2;
      HEAP32[i3 + 24 >> 2] = i7;
      i7 = i7 + 1 | 0;
      _emscripten_asm_const_4(7, i3 | 0, 10, +(+HEAPF32[i5 + 4 >> 2]), +(+HEAPF32[i5 + 8 >> 2])) | 0;
      HEAP32[i15 >> 2] = i3;
      i5 = __Znwj(16) | 0;
      HEAP32[i5 + 4 >> 2] = 0;
      HEAP32[i5 + 8 >> 2] = 0;
      HEAP32[i5 >> 2] = 3268;
      HEAP32[i5 + 12 >> 2] = i3;
      HEAP32[i10 >> 2] = i5;
      i6 = HEAP32[i14 >> 2] | 0;
      if (i6 >>> 0 >= (HEAP32[i11 >> 2] | 0) >>> 0) {
       __ZNSt3__16vectorINS_10shared_ptrI13PolyPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i21, i15);
       i3 = HEAP32[i10 >> 2] | 0;
       if (i3) __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
      } else {
       HEAP32[i6 >> 2] = i3;
       HEAP32[i6 + 4 >> 2] = i5;
       HEAP32[i15 >> 2] = 0;
       HEAP32[i10 >> 2] = 0;
       HEAP32[i14 >> 2] = i6 + 8;
      }
      i4 = i4 + 4 | 0;
     } while ((i4 | 0) != (i8 | 0));
    }
    i2 = i2 + 1 | 0;
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i9 | 0));
 }
 i1 = HEAP32[i21 + 108 >> 2] | 0;
 i6 = HEAP32[i21 + 112 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  STACKTOP = i22;
  return;
 }
 i7 = i21 + 60 | 0;
 i8 = i18 + 4 | 0;
 i9 = i21 + 64 | 0;
 i10 = i21 + 68 | 0;
 i11 = i19 + 4 | 0;
 i12 = i21 + 56 | 0;
 i13 = i20 + 4 | 0;
 do {
  i5 = __Znwj(36) | 0;
  __ZN16BuildingMoveItemC2EP7NavCtrlP5AABox(i5, i21, HEAP32[i1 >> 2] | 0);
  HEAP32[i18 >> 2] = i5;
  i2 = i5;
  i3 = __Znwj(16) | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 3352;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i8 >> 2] = i3;
  i4 = HEAP32[i9 >> 2] | 0;
  if (i4 >>> 0 >= (HEAP32[i10 >> 2] | 0) >>> 0) {
   __ZNSt3__16vectorINS_10shared_ptrI16BuildingMoveItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i7, i18);
   i2 = HEAP32[i8 >> 2] | 0;
   if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
  } else {
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = i3;
   HEAP32[i18 >> 2] = 0;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i9 >> 2] = i4 + 8;
  }
  i2 = __Znwj(28) | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i4 >> 2] | 0;
  i15 = HEAP32[i4 + 4 >> 2] | 0;
  i4 = HEAP32[i4 + 12 >> 2] | 0;
  HEAP32[i2 + 4 >> 2] = i21;
  HEAP8[i2 + 8 >> 0] = 1;
  HEAP32[i2 >> 2] = 2916;
  HEAP32[i2 + 12 >> 2] = i3;
  HEAP32[i2 + 16 >> 2] = i15;
  HEAP32[i2 + 20 >> 2] = i4;
  HEAP32[i2 + 24 >> 2] = i5;
  _emscripten_asm_const_4(8, i2 | 0, 10, +(+HEAPF32[i3 + 4 >> 2]), +(+HEAPF32[i3 + 8 >> 2])) | 0;
  HEAP32[i5 + 24 >> 2] = i2;
  HEAP32[i19 >> 2] = i2;
  i3 = __Znwj(16) | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 3380;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i11 >> 2] = i3;
  i4 = HEAP32[i17 >> 2] | 0;
  if (i4 >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) {
   __ZNSt3__16vectorINS_10shared_ptrI17BuildingPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i16, i19);
   i2 = HEAP32[i11 >> 2] | 0;
   if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
  } else {
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = i3;
   HEAP32[i19 >> 2] = 0;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i17 >> 2] = i4 + 8;
  }
  i2 = __Znwj(28) | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i4 + 8 >> 2] | 0;
  i15 = HEAP32[i4 + 12 >> 2] | 0;
  i4 = HEAP32[i4 + 4 >> 2] | 0;
  HEAP32[i2 + 4 >> 2] = i21;
  HEAP8[i2 + 8 >> 0] = 1;
  HEAP32[i2 >> 2] = 2916;
  HEAP32[i2 + 12 >> 2] = i3;
  HEAP32[i2 + 16 >> 2] = i15;
  HEAP32[i2 + 20 >> 2] = i4;
  HEAP32[i2 + 24 >> 2] = i5;
  _emscripten_asm_const_4(8, i2 | 0, 10, +(+HEAPF32[i3 + 4 >> 2]), +(+HEAPF32[i3 + 8 >> 2])) | 0;
  HEAP32[i5 + 28 >> 2] = i2;
  HEAP32[i20 >> 2] = i2;
  i3 = __Znwj(16) | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 3380;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i13 >> 2] = i3;
  i4 = HEAP32[i17 >> 2] | 0;
  if (i4 >>> 0 >= (HEAP32[i12 >> 2] | 0) >>> 0) {
   __ZNSt3__16vectorINS_10shared_ptrI17BuildingPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i16, i20);
   i2 = HEAP32[i13 >> 2] | 0;
   if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
  } else {
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = i3;
   HEAP32[i20 >> 2] = 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i17 >> 2] = i4 + 8;
  }
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i6 | 0));
 STACKTOP = i22;
 return;
}

function __ZNSt3__113__nth_elementIRPFbPK6ObjectS3_ENS_11__wrap_iterIPPS1_EEEEvT0_SB_SB_T_(i9, i10, i11, i13) {
 i9 = i9 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) return;
 i2 = i1;
 L4 : while (1) {
  i1 = HEAP32[i9 >> 2] | 0;
  i5 = i1;
  i3 = i2 - i5 | 0;
  i4 = i3 >> 2;
  switch (i4 | 0) {
  case 2:
   {
    i4 = i1;
    i3 = i1;
    i12 = 4;
    break L4;
   }
  case 3:
   {
    i5 = i1;
    i6 = i1;
    i12 = 6;
    break L4;
   }
  case 1:
  case 0:
   {
    i12 = 73;
    break L4;
   }
  default:
   {}
  }
  if ((i3 | 0) < 32) {
   i8 = i2;
   i2 = i5;
   i12 = 15;
   break;
  }
  i6 = i1 + (((i4 | 0) / 2 | 0) << 2) | 0;
  i7 = i6;
  i2 = i2 + -4 | 0;
  i5 = i2;
  i8 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
  i3 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0;
  do if (i8) {
   i4 = HEAP32[i1 >> 2] | 0;
   if (i3) {
    HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i2 >> 2] = i4;
    i2 = 1;
    break;
   }
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = i4;
   if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, i4) | 0) {
    i8 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i2 >> 2] = i8;
    i2 = 2;
   } else i2 = 1;
  } else if (i3) {
   i8 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i8;
   if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
    HEAP32[i6 >> 2] = i2;
    i2 = 2;
   } else i2 = 1;
  } else i2 = 0; while (0);
  i4 = HEAP32[i9 >> 2] | 0;
  i8 = i4;
  do if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) {
   i3 = i5;
   i12 = 50;
  } else {
   i1 = i5;
   while (1) {
    i3 = i1 + -4 | 0;
    i1 = i3;
    if ((i8 | 0) == (i3 | 0)) break;
    if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) {
     i12 = 49;
     break;
    }
   }
   if ((i12 | 0) == 49) {
    i5 = i4;
    i6 = HEAP32[i5 >> 2] | 0;
    HEAP32[i5 >> 2] = HEAP32[i3 >> 2];
    HEAP32[i3 >> 2] = i6;
    i3 = i1;
    i2 = i2 + 1 | 0;
    i12 = 50;
    break;
   }
   i2 = i8 + 4 | 0;
   i1 = i2;
   i5 = (HEAP32[i11 >> 2] | 0) + -4 | 0;
   i3 = i5;
   if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
    if ((i2 | 0) == (i5 | 0)) {
     i12 = 73;
     break L4;
    } else {
     i4 = i2;
     i2 = i8;
    }
    while (1) {
     if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i8 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) break;
     i1 = i4 + 4 | 0;
     if ((i1 | 0) == (i5 | 0)) {
      i12 = 73;
      break L4;
     } else {
      i2 = i4;
      i4 = i1;
     }
    }
    i8 = i1;
    i1 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i5 >> 2];
    HEAP32[i5 >> 2] = i1;
    i1 = i2 + 8 | 0;
   }
   if ((i1 | 0) == (i5 | 0)) {
    i12 = 73;
    break L4;
   }
   while (1) {
    i5 = HEAP32[i9 >> 2] | 0;
    i2 = i1;
    if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0)) {
     do i2 = i2 + 4 | 0; while (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0));
     i1 = i2;
    }
    do {
     i4 = i3 + -4 | 0;
     i3 = i4;
    } while (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0);
    if (i2 >>> 0 >= i4 >>> 0) {
     i3 = i1;
     break;
    }
    i8 = i1;
    i1 = HEAP32[i8 >> 2] | 0;
    HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i4 >> 2] = i1;
    i1 = i2 + 4 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
   if (i1 >>> 0 < i2 >>> 0) {
    i12 = 73;
    break L4;
   }
   HEAP32[i9 >> 2] = i3;
  } while (0);
  do if ((i12 | 0) == 50) {
   i12 = 0;
   i8 = i8 + 4 | 0;
   i1 = i8;
   L47 : do if (i8 >>> 0 < i3 >>> 0) {
    i4 = i3;
    while (1) {
     i3 = i1;
     i6 = i7;
     if (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0) {
      i1 = i3;
      do i1 = i1 + 4 | 0; while (FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0);
      i3 = i1;
      i1 = i3;
      i5 = i3;
     } else i5 = i3;
     i3 = i4;
     do {
      i4 = i3 + -4 | 0;
      i3 = i4;
     } while (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0));
     if (i5 >>> 0 >= i4 >>> 0) {
      i6 = i1;
      i3 = i7;
      break L47;
     }
     i8 = i1;
     i1 = HEAP32[i8 >> 2] | 0;
     HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
     HEAP32[i4 >> 2] = i1;
     i7 = (i6 | 0) == (i5 | 0) ? i3 : i7;
     i1 = i5 + 4 | 0;
     i4 = i3;
     i2 = i2 + 1 | 0;
    }
   } else {
    i6 = i1;
    i3 = i7;
   } while (0);
   i5 = i6;
   i1 = i3;
   if ((i5 | 0) != (i1 | 0) ? FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0 : 0) {
    i4 = i6;
    i7 = HEAP32[i4 >> 2] | 0;
    i8 = i3;
    HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i8 >> 2] = i7;
    i2 = i2 + 1 | 0;
   }
   i1 = HEAP32[i10 >> 2] | 0;
   if ((i1 | 0) == (i5 | 0)) {
    i12 = 73;
    break L4;
   }
   if (!i2) if (i1 >>> 0 < i5 >>> 0) {
    i2 = HEAP32[i9 >> 2] | 0;
    do {
     i3 = i2;
     i2 = i3 + 4 | 0;
     if ((i2 | 0) == (i5 | 0)) {
      i12 = 73;
      break L4;
     }
    } while (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0));
   } else {
    i2 = HEAP32[i11 >> 2] | 0;
    i3 = i6;
    do {
     i4 = i3;
     i3 = i4 + 4 | 0;
     if ((i3 | 0) == (i2 | 0)) {
      i12 = 73;
      break L4;
     }
    } while (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0));
   }
   if (i1 >>> 0 < i5 >>> 0) {
    HEAP32[i11 >> 2] = i6;
    break;
   } else {
    HEAP32[i9 >> 2] = i5 + 4;
    break;
   }
  } while (0);
  i2 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   i12 = 73;
   break;
  }
 }
 if ((i12 | 0) == 4) {
  i13 = HEAP32[i13 >> 2] | 0;
  i1 = i2 + -4 | 0;
  HEAP32[i11 >> 2] = i1;
  if (!(FUNCTION_TABLE_iii[i13 & 31](HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0)) return;
  i13 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i13;
  return;
 } else if ((i12 | 0) == 6) {
  i4 = i5 + 4 | 0;
  i3 = i2 + -4 | 0;
  HEAP32[i11 >> 2] = i3;
  i12 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
  i2 = FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
  if (!i12) {
   if (!i2) return;
   i12 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i3 >> 2] = i12;
   if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) return;
   i13 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = i13;
   return;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  if (i2) {
   HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i3 >> 2] = i1;
   return;
  }
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i4 >> 2] = i1;
  if (!(FUNCTION_TABLE_iii[HEAP32[i13 >> 2] & 31](HEAP32[i3 >> 2] | 0, i1) | 0)) return;
  i13 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i3 >> 2] = i13;
  return;
 } else if ((i12 | 0) == 15) {
  i7 = i8 + -4 | 0;
  if ((i1 | 0) == (i7 | 0)) return; else i6 = i2;
  while (1) {
   i5 = HEAP32[i13 >> 2] | 0;
   if ((i1 | 0) != (i8 | 0)) {
    i2 = i1 + 4 | 0;
    if ((i2 | 0) != (i8 | 0)) {
     i3 = i2;
     i4 = i1;
     i2 = i1;
     do {
      i12 = FUNCTION_TABLE_iii[i5 & 31](HEAP32[i3 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
      i2 = i12 ? i3 : i2;
      i4 = i12 ? i3 : i4;
      i3 = i3 + 4 | 0;
     } while ((i3 | 0) != (i8 | 0));
     if ((i2 | 0) != (i1 | 0)) {
      i12 = HEAP32[i1 >> 2] | 0;
      HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
      HEAP32[i2 >> 2] = i12;
      i1 = i6;
     }
    }
   } else i1 = i8;
   i2 = i1 + 4 | 0;
   if ((i2 | 0) == (i7 | 0)) break; else {
    i1 = i2;
    i6 = i2;
   }
  }
  return;
 } else if ((i12 | 0) == 73) return;
}

function ___intscan(i13, i3, i6, i1, i2) {
 i13 = i13 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 L1 : do if (i3 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  i2 = 0;
  i1 = 0;
 } else {
  i15 = i13 + 4 | 0;
  i14 = i13 + 100 | 0;
  do {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
  } while ((_isspace(i4) | 0) != 0);
  L11 : do switch (i4 | 0) {
  case 43:
  case 45:
   {
    i5 = ((i4 | 0) == 45) << 31 >> 31;
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
     i12 = i5;
     break L11;
    } else {
     i4 = ___shgetc(i13) | 0;
     i12 = i5;
     break L11;
    }
   }
  default:
   i12 = 0;
  } while (0);
  i5 = (i3 | 0) == 0;
  do if ((i3 & -17 | 0) == 0 & (i4 | 0) == 48) {
   i4 = HEAP32[i15 >> 2] | 0;
   if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i4 + 1;
    i4 = HEAPU8[i4 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((i4 | 32 | 0) != 120) if (i5) {
    i3 = 8;
    i10 = 46;
    break;
   } else {
    i10 = 32;
    break;
   }
   i3 = HEAP32[i15 >> 2] | 0;
   if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i15 >> 2] = i3 + 1;
    i4 = HEAPU8[i3 >> 0] | 0;
   } else i4 = ___shgetc(i13) | 0;
   if ((HEAPU8[24137 + (i4 + 1) >> 0] | 0) > 15) {
    i1 = (HEAP32[i14 >> 2] | 0) == 0;
    if (!i1) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    if (!i6) {
     ___shlim(i13, 0);
     i2 = 0;
     i1 = 0;
     break L1;
    }
    if (i1) {
     i2 = 0;
     i1 = 0;
     break L1;
    }
    HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    i2 = 0;
    i1 = 0;
    break L1;
   } else {
    i3 = 16;
    i10 = 46;
   }
  } else {
   i3 = i5 ? 10 : i3;
   if ((HEAPU8[24137 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) i10 = 32; else {
    if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
    ___shlim(i13, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    i2 = 0;
    i1 = 0;
    break L1;
   }
  } while (0);
  if ((i10 | 0) == 32) if ((i3 | 0) == 10) {
   i3 = i4 + -48 | 0;
   if (i3 >>> 0 < 10) {
    i4 = 0;
    while (1) {
     i5 = (i4 * 10 | 0) + i3 | 0;
     i3 = HEAP32[i15 >> 2] | 0;
     if (i3 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i3 + 1;
      i4 = HEAPU8[i3 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i3 = i4 + -48 | 0;
     if (!(i3 >>> 0 < 10 & i5 >>> 0 < 429496729)) {
      i3 = i5;
      break;
     } else i4 = i5;
    }
    i5 = 0;
   } else {
    i3 = 0;
    i5 = 0;
   }
   i6 = i4 + -48 | 0;
   if (i6 >>> 0 < 10) {
    while (1) {
     i7 = ___muldi3(i3 | 0, i5 | 0, 10, 0) | 0;
     i8 = tempRet0;
     i9 = ((i6 | 0) < 0) << 31 >> 31;
     i11 = ~i9;
     if (i8 >>> 0 > i11 >>> 0 | (i8 | 0) == (i11 | 0) & i7 >>> 0 > ~i6 >>> 0) {
      i7 = i3;
      break;
     }
     i3 = _i64Add(i7 | 0, i8 | 0, i6 | 0, i9 | 0) | 0;
     i5 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i6 = i4 + -48 | 0;
     if (!(i6 >>> 0 < 10 & (i5 >>> 0 < 429496729 | (i5 | 0) == 429496729 & i3 >>> 0 < 2576980378))) {
      i7 = i3;
      break;
     }
    }
    if (i6 >>> 0 > 9) {
     i4 = i7;
     i3 = i12;
    } else {
     i3 = 10;
     i10 = 72;
    }
   } else {
    i4 = i3;
    i3 = i12;
   }
  } else i10 = 46;
  L63 : do if ((i10 | 0) == 46) {
   if (!(i3 + -1 & i3)) {
    i10 = HEAP8[24394 + ((i3 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
    i6 = i5 & 255;
    if (i6 >>> 0 < i3 >>> 0) {
     i4 = 0;
     while (1) {
      i7 = i6 | i4 << i10;
      i4 = HEAP32[i15 >> 2] | 0;
      if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
       HEAP32[i15 >> 2] = i4 + 1;
       i4 = HEAPU8[i4 >> 0] | 0;
      } else i4 = ___shgetc(i13) | 0;
      i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
      i6 = i5 & 255;
      if (!(i7 >>> 0 < 134217728 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
     }
     i6 = 0;
    } else {
     i6 = 0;
     i7 = 0;
    }
    i8 = _bitshift64Lshr(-1, -1, i10 | 0) | 0;
    i9 = tempRet0;
    if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
     i5 = i6;
     i10 = 72;
     break;
    } else i4 = i6;
    while (1) {
     i7 = _bitshift64Shl(i7 | 0, i4 | 0, i10 | 0) | 0;
     i6 = tempRet0;
     i7 = i5 & 255 | i7;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0 | (i6 >>> 0 > i9 >>> 0 | (i6 | 0) == (i9 | 0) & i7 >>> 0 > i8 >>> 0)) {
      i5 = i6;
      i10 = 72;
      break L63;
     } else i4 = i6;
    }
   }
   i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
   i6 = i5 & 255;
   if (i6 >>> 0 < i3 >>> 0) {
    i4 = 0;
    while (1) {
     i7 = i6 + (Math_imul(i4, i3) | 0) | 0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
     i6 = i5 & 255;
     if (!(i7 >>> 0 < 119304647 & i6 >>> 0 < i3 >>> 0)) break; else i4 = i7;
    }
    i6 = 0;
   } else {
    i7 = 0;
    i6 = 0;
   }
   if ((i5 & 255) >>> 0 < i3 >>> 0) {
    i10 = ___udivdi3(-1, -1, i3 | 0, 0) | 0;
    i11 = tempRet0;
    i9 = i6;
    while (1) {
     if (i9 >>> 0 > i11 >>> 0 | (i9 | 0) == (i11 | 0) & i7 >>> 0 > i10 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i6 = ___muldi3(i7 | 0, i9 | 0, i3 | 0, 0) | 0;
     i8 = tempRet0;
     i5 = i5 & 255;
     if (i8 >>> 0 > 4294967295 | (i8 | 0) == -1 & i6 >>> 0 > ~i5 >>> 0) {
      i5 = i9;
      i10 = 72;
      break L63;
     }
     i7 = _i64Add(i5 | 0, 0, i6 | 0, i8 | 0) | 0;
     i6 = tempRet0;
     i4 = HEAP32[i15 >> 2] | 0;
     if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
      HEAP32[i15 >> 2] = i4 + 1;
      i4 = HEAPU8[i4 >> 0] | 0;
     } else i4 = ___shgetc(i13) | 0;
     i5 = HEAP8[24137 + (i4 + 1) >> 0] | 0;
     if ((i5 & 255) >>> 0 >= i3 >>> 0) {
      i5 = i6;
      i10 = 72;
      break;
     } else i9 = i6;
    }
   } else {
    i5 = i6;
    i10 = 72;
   }
  } while (0);
  if ((i10 | 0) == 72) if ((HEAPU8[24137 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0) {
   do {
    i4 = HEAP32[i15 >> 2] | 0;
    if (i4 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
     HEAP32[i15 >> 2] = i4 + 1;
     i4 = HEAPU8[i4 >> 0] | 0;
    } else i4 = ___shgetc(i13) | 0;
   } while ((HEAPU8[24137 + (i4 + 1) >> 0] | 0) >>> 0 < i3 >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   i5 = i2;
   i4 = i1;
   i3 = (i1 & 1 | 0) == 0 & 0 == 0 ? i12 : 0;
  } else {
   i4 = i7;
   i3 = i12;
  }
  if (HEAP32[i14 >> 2] | 0) HEAP32[i15 >> 2] = (HEAP32[i15 >> 2] | 0) + -1;
  if (!(i5 >>> 0 < i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 < i1 >>> 0)) {
   if (!((i1 & 1 | 0) != 0 | 0 != 0 | (i3 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    i1 = _i64Add(i1 | 0, i2 | 0, -1, -1) | 0;
    i2 = tempRet0;
    break;
   }
   if (i5 >>> 0 > i2 >>> 0 | (i5 | 0) == (i2 | 0) & i4 >>> 0 > i1 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    break;
   }
  }
  i1 = ((i3 | 0) < 0) << 31 >> 31;
  i1 = _i64Subtract(i4 ^ i3 | 0, i5 ^ i1 | 0, i3 | 0, i1 | 0) | 0;
  i2 = tempRet0;
 } while (0);
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i1, i15, i2, i16, i18, i21, i19, i20, i17, i22) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i21 = i21 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i17 = i17 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i5 = i23 + 92 | 0;
 i6 = i23 + 80 | 0;
 i13 = i23 + 68 | 0;
 i14 = i23 + 56 | 0;
 i7 = i23 + 52 | 0;
 i8 = i23 + 40 | 0;
 i9 = i23 + 36 | 0;
 i10 = i23 + 24 | 0;
 i11 = i23 + 12 | 0;
 i12 = i23;
 if (i1) {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13040) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 63](i3, i2);
   i15 = HEAP32[i3 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i4, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 63](i5, i2);
   i15 = HEAP32[i5 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i6, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
   HEAP32[i6 >> 2] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
   HEAP32[i6 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i13, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i13 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i13 + 8 >> 2];
  HEAP32[i13 >> 2] = 0;
  HEAP32[i13 + 4 >> 2] = 0;
  HEAP32[i13 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i14, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
  HEAP32[i14 >> 2] = 0;
  HEAP32[i14 + 4 >> 2] = 0;
  HEAP32[i14 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 } else {
  i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 12976) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i15) {
   FUNCTION_TABLE_vii[HEAP32[i1 + 44 >> 2] & 63](i7, i2);
   i15 = HEAP32[i7 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 32 >> 2] & 63](i8, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   i1 = i2;
  } else {
   FUNCTION_TABLE_vii[HEAP32[i1 + 40 >> 2] & 63](i9, i2);
   i15 = HEAP32[i9 >> 2] | 0;
   HEAP8[i16 >> 0] = i15;
   HEAP8[i16 + 1 >> 0] = i15 >> 8;
   HEAP8[i16 + 2 >> 0] = i15 >> 16;
   HEAP8[i16 + 3 >> 0] = i15 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 28 >> 2] & 63](i10, i2);
   if (!(HEAP8[i17 >> 0] & 1)) {
    HEAP8[i17 + 1 >> 0] = 0;
    HEAP8[i17 >> 0] = 0;
   } else {
    HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
    HEAP32[i17 + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
   HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
   HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
   HEAP32[i10 >> 2] = 0;
   HEAP32[i10 + 4 >> 2] = 0;
   HEAP32[i10 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
   i1 = i2;
  }
  HEAP8[i18 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 127](i2) | 0;
  HEAP8[i21 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 16 >> 2] & 127](i2) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i2);
  if (!(HEAP8[i19 >> 0] & 1)) {
   HEAP8[i19 + 1 >> 0] = 0;
   HEAP8[i19 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i19 + 8 >> 2] >> 0] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i19, 0);
  HEAP32[i19 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i19 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i19 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i2);
  if (!(HEAP8[i20 >> 0] & 1)) {
   HEAP8[i20 + 1 >> 0] = 0;
   HEAP8[i20 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i20 + 8 >> 2] >> 0] = 0;
   HEAP32[i20 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i1, i17, i2, i18, i15, i21, i16, i20, i19, i22) {
 i1 = i1 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i18 = i18 | 0;
 i15 = i15 | 0;
 i21 = i21 | 0;
 i16 = i16 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i22 = i22 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23 + 108 | 0;
 i4 = i23 + 96 | 0;
 i7 = i23 + 92 | 0;
 i8 = i23 + 80 | 0;
 i9 = i23 + 68 | 0;
 i10 = i23 + 56 | 0;
 i11 = i23 + 52 | 0;
 i12 = i23 + 40 | 0;
 i13 = i23 + 36 | 0;
 i14 = i23 + 24 | 0;
 i5 = i23 + 12 | 0;
 i6 = i23;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13168) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 63](i3, i1);
   i17 = HEAP32[i3 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   HEAP32[i4 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 63](i7, i1);
   i17 = HEAP32[i7 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i8, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i8 >> 2] = 0;
   HEAP32[i8 + 4 >> 2] = 0;
   HEAP32[i8 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i9, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i10, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13104) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i17) {
   FUNCTION_TABLE_vii[HEAP32[i2 + 44 >> 2] & 63](i11, i1);
   i17 = HEAP32[i11 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i12, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i12 + 4 >> 2] = 0;
   HEAP32[i12 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  } else {
   FUNCTION_TABLE_vii[HEAP32[i2 + 40 >> 2] & 63](i13, i1);
   i17 = HEAP32[i13 >> 2] | 0;
   HEAP8[i18 >> 0] = i17;
   HEAP8[i18 + 1 >> 0] = i17 >> 8;
   HEAP8[i18 + 2 >> 0] = i17 >> 16;
   HEAP8[i18 + 3 >> 0] = i17 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i14, i1);
   if (!(HEAP8[i19 >> 0] & 1)) HEAP8[i19 >> 0] = 0; else HEAP32[HEAP32[i19 + 8 >> 2] >> 2] = 0;
   HEAP32[i19 + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i19, 0);
   HEAP32[i19 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i19 + 4 >> 2] = HEAP32[i14 + 4 >> 2];
   HEAP32[i19 + 8 >> 2] = HEAP32[i14 + 8 >> 2];
   HEAP32[i14 >> 2] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
   HEAP32[i14 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i14);
  }
  HEAP32[i15 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
  if (!(HEAP8[i16 >> 0] & 1)) {
   HEAP8[i16 + 1 >> 0] = 0;
   HEAP8[i16 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i16 + 8 >> 2] >> 0] = 0;
   HEAP32[i16 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i16, 0);
  HEAP32[i16 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i16 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i16 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i6, i1);
  if (!(HEAP8[i20 >> 0] & 1)) HEAP8[i20 >> 0] = 0; else HEAP32[HEAP32[i20 + 8 >> 2] >> 2] = 0;
  HEAP32[i20 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i20, 0);
  HEAP32[i20 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i20 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i20 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i6);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i22 >> 2] = i1;
 STACKTOP = i23;
 return;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13040) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 12976) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) {
   HEAP8[i15 + 1 >> 0] = 0;
   HEAP8[i15 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i15 + 8 >> 2] >> 0] = 0;
   HEAP32[i15 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) {
   HEAP8[i17 + 1 >> 0] = 0;
   HEAP8[i17 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i17 + 8 >> 2] >> 0] = 0;
   HEAP32[i17 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  HEAP8[i13 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP8[i19 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) {
   HEAP8[i18 + 1 >> 0] = 0;
   HEAP8[i18 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i18 + 8 >> 2] >> 0] = 0;
   HEAP32[i18 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i16, i17, i18, i14, i19, i15, i2, i13) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i2 = i2 | 0;
 i13 = i13 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i20 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i21 + 16 | 0;
 i8 = i21 + 12 | 0;
 i12 = i21 + 8 | 0;
 i10 = i21 + 4 | 0;
 i11 = i21;
 i1 = __ZNKSt3__18ios_base6getlocEv(i14) | 0;
 HEAP32[i12 >> 2] = i1;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i19 >> 2] = 0;
 i1 = HEAP32[i17 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i13 | 0)) {
  L2 : while (1) {
   i4 = i1;
   if (i1) {
    i3 = HEAP32[i1 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
    if ((i3 | 0) == -1) {
     HEAP32[i17 >> 2] = 0;
     i1 = 0;
     i6 = 1;
     i7 = 0;
    } else {
     i6 = 0;
     i7 = i4;
    }
   } else {
    i1 = 0;
    i6 = 1;
    i7 = i4;
   }
   i5 = HEAP32[i18 >> 2] | 0;
   i3 = i5;
   do if (i5) {
    i4 = HEAP32[i5 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
    if ((i4 | 0) != -1) if (i6) break; else {
     i20 = 16;
     break L2;
    } else {
     HEAP32[i18 >> 2] = 0;
     i3 = 0;
     i20 = 14;
     break;
    }
   } else i20 = 14; while (0);
   if ((i20 | 0) == 14) {
    i20 = 0;
    if (i6) {
     i20 = 16;
     break;
    } else i5 = 0;
   }
   L24 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 31](i12, HEAP32[i2 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    i4 = i2 + 4 | 0;
    if ((i4 | 0) == (i13 | 0)) {
     i20 = 19;
     break L2;
    }
    i6 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 31](i12, HEAP32[i4 >> 2] | 0, 0) | 0;
    switch (i6 << 24 >> 24) {
    case 48:
    case 69:
     {
      i5 = i2 + 8 | 0;
      if ((i5 | 0) == (i13 | 0)) {
       i20 = 22;
       break L2;
      }
      i2 = i4;
      i4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 52 >> 2] & 31](i12, HEAP32[i5 >> 2] | 0, 0) | 0;
      i1 = i6;
      break;
     }
    default:
     {
      i4 = i6;
      i1 = 0;
     }
    }
    i6 = HEAP32[(HEAP32[i16 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i7;
    HEAP32[i11 >> 2] = i3;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i17 >> 2] = FUNCTION_TABLE_iiiiiiiii[i6 & 15](i16, i8, i9, i14, i19, i15, i4, i1) | 0;
    i2 = i2 + 8 | 0;
   } else {
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, 8192, HEAP32[i2 >> 2] | 0) | 0)) {
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 31](i12, i3) | 0;
     if ((i7 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 28 >> 2] & 31](i12, HEAP32[i2 >> 2] | 0) | 0)) {
      i20 = 59;
      break L2;
     }
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 4;
     i2 = i2 + 4 | 0;
     break;
    }
    do {
     i2 = i2 + 4 | 0;
     if ((i2 | 0) == (i13 | 0)) {
      i2 = i13;
      break;
     }
    } while (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, 8192, HEAP32[i2 >> 2] | 0) | 0);
    i3 = i5;
    i6 = i5;
    while (1) {
     if (i1) {
      i4 = HEAP32[i1 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) == -1) {
       HEAP32[i17 >> 2] = 0;
       i5 = 1;
       i1 = 0;
      } else i5 = 0;
     } else {
      i5 = 1;
      i1 = 0;
     }
     do if (i6) {
      i4 = HEAP32[i6 + 12 >> 2] | 0;
      if ((i4 | 0) == (HEAP32[i6 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0; else i4 = HEAP32[i4 >> 2] | 0;
      if ((i4 | 0) != -1) if (i5 ^ (i3 | 0) == 0) {
       i7 = i3;
       i6 = i3;
       break;
      } else break L24; else {
       HEAP32[i18 >> 2] = 0;
       i3 = 0;
       i20 = 42;
       break;
      }
     } else i20 = 42; while (0);
     if ((i20 | 0) == 42) {
      i20 = 0;
      if (i5) break L24; else {
       i7 = i3;
       i6 = 0;
      }
     }
     i4 = i1 + 12 | 0;
     i3 = HEAP32[i4 >> 2] | 0;
     i5 = i1 + 16 | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAP32[i3 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, 8192, i3) | 0)) break L24;
     i3 = HEAP32[i4 >> 2] | 0;
     if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
      i3 = i7;
      continue;
     } else {
      HEAP32[i4 >> 2] = i3 + 4;
      i3 = i7;
      continue;
     }
    }
   } while (0);
   i1 = HEAP32[i17 >> 2] | 0;
   if (!((i2 | 0) != (i13 | 0) & (HEAP32[i19 >> 2] | 0) == 0)) break L1;
  }
  if ((i20 | 0) == 16) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 19) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 22) {
   HEAP32[i19 >> 2] = 4;
   break;
  } else if ((i20 | 0) == 59) {
   HEAP32[i19 >> 2] = 4;
   i1 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAP32[i2 >> 2] | 0;
  if ((i2 | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i1 = 0;
   i4 = 1;
  } else i4 = 0;
 } else {
  i1 = 0;
  i4 = 1;
 }
 i2 = HEAP32[i18 >> 2] | 0;
 do if (i2) {
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
  if ((i2 | 0) != -1) if (i4) break; else {
   i20 = 74;
   break;
  } else {
   HEAP32[i18 >> 2] = 0;
   i20 = 72;
   break;
  }
 } else i20 = 72; while (0);
 if ((i20 | 0) == 72 ? i4 : 0) i20 = 74;
 if ((i20 | 0) == 74) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 STACKTOP = i21;
 return i1 | 0;
}

function __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(i1, i11) {
 i1 = i1 | 0;
 i11 = i11 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i3 = HEAP32[i11 >> 2] | 0;
 do if (i3) {
  i2 = HEAP32[i11 + 4 >> 2] | 0;
  if (!i2) {
   i4 = i11;
   i2 = i11;
   i6 = 7;
   break;
  } else while (1) {
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) {
    i6 = 5;
    break;
   } else i2 = i3;
  }
 } else {
  i2 = i11;
  i6 = 5;
 } while (0);
 if ((i6 | 0) == 5) {
  i3 = HEAP32[i2 + 4 >> 2] | 0;
  if (!i3) {
   i8 = i2 + 8 | 0;
   i9 = i2;
   i3 = 0;
   i10 = 0;
   i7 = i2;
  } else {
   i4 = i2;
   i6 = 7;
  }
 }
 if ((i6 | 0) == 7) {
  i8 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i8 >> 2];
  i9 = i4;
  i10 = 1;
  i7 = i2;
 }
 i4 = HEAP32[i8 >> 2] | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) == (i9 | 0)) {
  HEAP32[i4 >> 2] = i3;
  if ((i9 | 0) == (i1 | 0)) {
   i1 = i3;
   i2 = 0;
  } else i2 = HEAP32[i4 + 4 >> 2] | 0;
 } else HEAP32[i4 + 4 >> 2] = i3;
 i5 = i9 + 12 | 0;
 i6 = (HEAP8[i5 >> 0] | 0) != 0;
 if ((i9 | 0) != (i11 | 0)) {
  i12 = i11 + 8 | 0;
  i4 = HEAP32[i12 >> 2] | 0;
  HEAP32[i8 >> 2] = i4;
  if ((HEAP32[HEAP32[i12 >> 2] >> 2] | 0) == (i11 | 0)) HEAP32[i4 >> 2] = i9; else HEAP32[i4 + 4 >> 2] = i9;
  i4 = HEAP32[i11 >> 2] | 0;
  HEAP32[i7 >> 2] = i4;
  HEAP32[i4 + 8 >> 2] = i9;
  i4 = HEAP32[i11 + 4 >> 2] | 0;
  HEAP32[i9 + 4 >> 2] = i4;
  if (i4) HEAP32[i4 + 8 >> 2] = i9;
  HEAP8[i5 >> 0] = HEAP8[i11 + 12 >> 0] | 0;
  i1 = (i1 | 0) == (i11 | 0) ? i9 : i1;
 }
 if (!(i6 & (i1 | 0) != 0)) return;
 if (i10) {
  HEAP8[i3 + 12 >> 0] = 1;
  return;
 }
 while (1) {
  i7 = HEAP32[i2 + 8 >> 2] | 0;
  i3 = i2 + 12 | 0;
  i4 = (HEAP8[i3 >> 0] | 0) != 0;
  if ((HEAP32[i7 >> 2] | 0) == (i2 | 0)) {
   if (i4) i4 = i1; else {
    HEAP8[i3 >> 0] = 1;
    HEAP8[i7 + 12 >> 0] = 0;
    i5 = HEAP32[i7 >> 2] | 0;
    i6 = i5 + 4 | 0;
    i3 = HEAP32[i6 >> 2] | 0;
    HEAP32[i7 >> 2] = i3;
    if (i3) HEAP32[i3 + 8 >> 2] = i7;
    i3 = i7 + 8 | 0;
    HEAP32[i5 + 8 >> 2] = HEAP32[i3 >> 2];
    i4 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i7 | 0)) HEAP32[i4 >> 2] = i5; else HEAP32[i4 + 4 >> 2] = i5;
    HEAP32[i6 >> 2] = i7;
    HEAP32[i3 >> 2] = i5;
    i12 = HEAP32[i2 + 4 >> 2] | 0;
    i4 = (i1 | 0) == (i12 | 0) ? i2 : i1;
    i2 = HEAP32[i12 >> 2] | 0;
   }
   i1 = HEAP32[i2 >> 2] | 0;
   i3 = (i1 | 0) == 0;
   if (!i3 ? (HEAP8[i1 + 12 >> 0] | 0) == 0 : 0) {
    i6 = 68;
    break;
   }
   i12 = HEAP32[i2 + 4 >> 2] | 0;
   if ((i12 | 0) != 0 ? (HEAP8[i12 + 12 >> 0] | 0) == 0 : 0) {
    i6 = 67;
    break;
   }
   HEAP8[i2 + 12 >> 0] = 0;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   i1 = i2 + 12 | 0;
   if ((i2 | 0) == (i4 | 0) | (HEAP8[i1 >> 0] | 0) == 0) {
    i6 = 64;
    break;
   }
   i12 = HEAP32[i2 + 8 >> 2] | 0;
   i1 = i4;
   i2 = (HEAP32[i12 >> 2] | 0) == (i2 | 0) ? i12 + 4 | 0 : i12;
  } else {
   if (!i4) {
    HEAP8[i3 >> 0] = 1;
    HEAP8[i7 + 12 >> 0] = 0;
    i12 = i7 + 4 | 0;
    i5 = HEAP32[i12 >> 2] | 0;
    i3 = HEAP32[i5 >> 2] | 0;
    HEAP32[i12 >> 2] = i3;
    if (i3) HEAP32[i3 + 8 >> 2] = i7;
    i3 = i7 + 8 | 0;
    HEAP32[i5 + 8 >> 2] = HEAP32[i3 >> 2];
    i4 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i4 >> 2] | 0) == (i7 | 0)) HEAP32[i4 >> 2] = i5; else HEAP32[i4 + 4 >> 2] = i5;
    HEAP32[i5 >> 2] = i7;
    HEAP32[i3 >> 2] = i5;
    i12 = HEAP32[i2 >> 2] | 0;
    i1 = (i1 | 0) == (i12 | 0) ? i2 : i1;
    i2 = HEAP32[i12 + 4 >> 2] | 0;
   }
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != 0 ? (HEAP8[i3 + 12 >> 0] | 0) == 0 : 0) {
    i4 = i2;
    i1 = i3;
    i5 = i2;
    i6 = 38;
    break;
   }
   i4 = HEAP32[i2 + 4 >> 2] | 0;
   if ((i4 | 0) != 0 ? (HEAP8[i4 + 12 >> 0] | 0) == 0 : 0) {
    i1 = i3;
    i3 = i2;
    i5 = i2;
    i6 = 39;
    break;
   }
   HEAP8[i2 + 12 >> 0] = 0;
   i2 = HEAP32[i2 + 8 >> 2] | 0;
   if ((i2 | 0) == (i1 | 0)) {
    i6 = 36;
    break;
   }
   if (!(HEAP8[i2 + 12 >> 0] | 0)) {
    i1 = i2;
    i6 = 36;
    break;
   }
   i12 = HEAP32[i2 + 8 >> 2] | 0;
   i2 = (HEAP32[i12 >> 2] | 0) == (i2 | 0) ? i12 + 4 | 0 : i12;
  }
  i2 = HEAP32[i2 >> 2] | 0;
 }
 if ((i6 | 0) == 36) {
  HEAP8[i1 + 12 >> 0] = 1;
  return;
 } else if ((i6 | 0) == 38) {
  i2 = HEAP32[i5 + 4 >> 2] | 0;
  if (!i2) {
   i3 = i4;
   i6 = 40;
  } else {
   i3 = i4;
   i4 = i2;
   i6 = 39;
  }
 } else if ((i6 | 0) == 64) {
  HEAP8[i1 >> 0] = 1;
  return;
 } else if ((i6 | 0) == 67) if (i3) {
  i4 = i2;
  i6 = 69;
 } else i6 = 68;
 if ((i6 | 0) == 39) if (!(HEAP8[i4 + 12 >> 0] | 0)) {
  i2 = i4;
  i1 = i5;
  i6 = 46;
 } else i6 = 40; else if ((i6 | 0) == 68) if (!(HEAP8[i1 + 12 >> 0] | 0)) i6 = 75; else {
  i4 = i2;
  i6 = 69;
 }
 if ((i6 | 0) == 40) {
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i5 + 12 >> 0] = 0;
  i4 = i1 + 4 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  HEAP32[i3 >> 2] = i2;
  if (i2) HEAP32[i2 + 8 >> 2] = i5;
  i2 = i5 + 8 | 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i2 >> 2];
  i3 = HEAP32[i2 >> 2] | 0;
  if ((HEAP32[i3 >> 2] | 0) == (i5 | 0)) HEAP32[i3 >> 2] = i1; else HEAP32[i3 + 4 >> 2] = i1;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i2 >> 2] = i1;
  i2 = i5;
  i6 = 46;
 } else if ((i6 | 0) == 69) {
  i12 = i4 + 4 | 0;
  i3 = HEAP32[i12 >> 2] | 0;
  HEAP8[i3 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i12 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  i1 = i4;
  i2 = i3;
  i6 = 75;
 }
 if ((i6 | 0) == 46) {
  i4 = HEAP32[i1 + 8 >> 2] | 0;
  i12 = i4 + 12 | 0;
  HEAP8[i1 + 12 >> 0] = HEAP8[i12 >> 0] | 0;
  HEAP8[i12 >> 0] = 1;
  HEAP8[i2 + 12 >> 0] = 1;
  i12 = i4 + 4 | 0;
  i3 = HEAP32[i12 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i12 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i6 | 0) == 75) {
  i5 = HEAP32[i2 + 8 >> 2] | 0;
  i3 = i5 + 12 | 0;
  HEAP8[i2 + 12 >> 0] = HEAP8[i3 >> 0] | 0;
  HEAP8[i3 >> 0] = 1;
  HEAP8[i1 + 12 >> 0] = 1;
  i3 = HEAP32[i5 >> 2] | 0;
  i4 = i3 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i5;
  i1 = i5 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i1 >> 2] = i3;
  return;
 }
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri(i1, i2, i16, i13, i19, i14, i18, i17, i15, i20) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i16 = i16 | 0;
 i13 = i13 | 0;
 i19 = i19 | 0;
 i14 = i14 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i20 = i20 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i21 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i21 + 100 | 0;
 i4 = i21 + 88 | 0;
 i5 = i21 + 76 | 0;
 i6 = i21 + 64 | 0;
 i7 = i21 + 52 | 0;
 i8 = i21 + 48 | 0;
 i9 = i21 + 36 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 12 | 0;
 i12 = i21;
 if (i1) {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13168) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i3, i1);
  i12 = HEAP32[i3 >> 2] | 0;
  HEAP8[i16 >> 0] = i12;
  HEAP8[i16 + 1 >> 0] = i12 >> 8;
  HEAP8[i16 + 2 >> 0] = i12 >> 16;
  HEAP8[i16 + 3 >> 0] = i12 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i4, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i4 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i4 + 8 >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i4 + 4 >> 2] = 0;
  HEAP32[i4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i5, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i5 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i5 + 8 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i5 + 4 >> 2] = 0;
  HEAP32[i5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i5);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i6, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i7, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i7);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 } else {
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i2, 13104) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 63](i8, i1);
  i8 = HEAP32[i8 >> 2] | 0;
  HEAP8[i16 >> 0] = i8;
  HEAP8[i16 + 1 >> 0] = i8 >> 8;
  HEAP8[i16 + 2 >> 0] = i8 >> 16;
  HEAP8[i16 + 3 >> 0] = i8 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 63](i9, i1);
  if (!(HEAP8[i15 >> 0] & 1)) HEAP8[i15 >> 0] = 0; else HEAP32[HEAP32[i15 + 8 >> 2] >> 2] = 0;
  HEAP32[i15 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i15, 0);
  HEAP32[i15 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i15 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  HEAP32[i15 + 8 >> 2] = HEAP32[i9 + 8 >> 2];
  HEAP32[i9 >> 2] = 0;
  HEAP32[i9 + 4 >> 2] = 0;
  HEAP32[i9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 63](i10, i1);
  if (!(HEAP8[i17 >> 0] & 1)) HEAP8[i17 >> 0] = 0; else HEAP32[HEAP32[i17 + 8 >> 2] >> 2] = 0;
  HEAP32[i17 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i17, 0);
  HEAP32[i17 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i17 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  HEAP32[i17 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
  HEAP32[i13 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
  HEAP32[i19 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i11, i1);
  if (!(HEAP8[i14 >> 0] & 1)) {
   HEAP8[i14 + 1 >> 0] = 0;
   HEAP8[i14 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i14 + 8 >> 2] >> 0] = 0;
   HEAP32[i14 + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i14, 0);
  HEAP32[i14 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i14 + 4 >> 2] = HEAP32[i11 + 4 >> 2];
  HEAP32[i14 + 8 >> 2] = HEAP32[i11 + 8 >> 2];
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  HEAP32[i11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i12, i1);
  if (!(HEAP8[i18 >> 0] & 1)) HEAP8[i18 >> 0] = 0; else HEAP32[HEAP32[i18 + 8 >> 2] >> 2] = 0;
  HEAP32[i18 + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i18, 0);
  HEAP32[i18 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i18 + 4 >> 2] = HEAP32[i12 + 4 >> 2];
  HEAP32[i18 + 8 >> 2] = HEAP32[i12 + 8 >> 2];
  HEAP32[i12 >> 2] = 0;
  HEAP32[i12 + 4 >> 2] = 0;
  HEAP32[i12 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i12);
  i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0;
 }
 HEAP32[i20 >> 2] = i1;
 STACKTOP = i21;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i18, i19, i20, i16, i21, i17, i2, i15) {
 i18 = i18 | 0;
 i19 = i19 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i21 = i21 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i15 = i15 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i23 + 16 | 0;
 i8 = i23 + 12 | 0;
 i12 = i23 + 8 | 0;
 i10 = i23 + 4 | 0;
 i11 = i23;
 i13 = __ZNKSt3__18ios_base6getlocEv(i16) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i21 >> 2] = 0;
 i13 = i12 + 8 | 0;
 i1 = HEAP32[i19 >> 2] | 0;
 L1 : do if ((i2 | 0) != (i15 | 0)) {
  L2 : while (1) {
   i3 = i1;
   if (i1) {
    if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
     HEAP32[i19 >> 2] = 0;
     i1 = 0;
     i3 = 0;
    }
   } else i1 = 0;
   i6 = (i1 | 0) == 0;
   i5 = HEAP32[i20 >> 2] | 0;
   i4 = i5;
   do if (i5) {
    if ((HEAP32[i5 + 12 >> 2] | 0) == (HEAP32[i5 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) == -1 : 0) {
     HEAP32[i20 >> 2] = 0;
     i4 = 0;
     i22 = 11;
     break;
    }
    if (!i6) {
     i22 = 12;
     break L2;
    }
   } else i22 = 11; while (0);
   if ((i22 | 0) == 11) {
    i22 = 0;
    if (i6) {
     i22 = 12;
     break;
    } else i5 = 0;
   }
   L18 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 31](i12, HEAP8[i2 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    i5 = i2 + 1 | 0;
    if ((i5 | 0) == (i15 | 0)) {
     i22 = 15;
     break L2;
    }
    i7 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 31](i12, HEAP8[i5 >> 0] | 0, 0) | 0;
    switch (i7 << 24 >> 24) {
    case 48:
    case 69:
     {
      i6 = i2 + 2 | 0;
      if ((i6 | 0) == (i15 | 0)) {
       i22 = 18;
       break L2;
      }
      i2 = i5;
      i5 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 36 >> 2] & 31](i12, HEAP8[i6 >> 0] | 0, 0) | 0;
      i1 = i7;
      break;
     }
    default:
     {
      i5 = i7;
      i1 = 0;
     }
    }
    i7 = HEAP32[(HEAP32[i18 >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[i10 >> 2] = i3;
    HEAP32[i11 >> 2] = i4;
    HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i19 >> 2] = FUNCTION_TABLE_iiiiiiiii[i7 & 15](i18, i8, i9, i16, i21, i17, i5, i1) | 0;
    i2 = i2 + 2 | 0;
   } else {
    i3 = HEAP8[i2 >> 0] | 0;
    if (i3 << 24 >> 24 > -1 ? (i14 = HEAP32[i13 >> 2] | 0, (HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0) : 0) {
     do {
      i2 = i2 + 1 | 0;
      if ((i2 | 0) == (i15 | 0)) {
       i2 = i15;
       break;
      }
      i3 = HEAP8[i2 >> 0] | 0;
      if (i3 << 24 >> 24 <= -1) break;
     } while ((HEAP16[i14 + (i3 << 24 >> 24 << 1) >> 1] & 8192) != 0);
     i3 = i5;
     while (1) {
      if (i1) {
       if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
        HEAP32[i19 >> 2] = 0;
        i1 = 0;
       }
      } else i1 = 0;
      i4 = (i1 | 0) == 0;
      do if (i5) {
       if ((HEAP32[i5 + 12 >> 2] | 0) != (HEAP32[i5 + 16 >> 2] | 0)) if (i4) {
        i7 = i3;
        break;
       } else break L18;
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0) != -1) if (i4 ^ (i3 | 0) == 0) {
        i7 = i3;
        i5 = i3;
        break;
       } else break L18; else {
        HEAP32[i20 >> 2] = 0;
        i3 = 0;
        i22 = 37;
        break;
       }
      } else i22 = 37; while (0);
      if ((i22 | 0) == 37) {
       i22 = 0;
       if (i4) break L18; else {
        i7 = i3;
        i5 = 0;
       }
      }
      i4 = i1 + 12 | 0;
      i3 = HEAP32[i4 >> 2] | 0;
      i6 = i1 + 16 | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
      if ((i3 & 255) << 24 >> 24 <= -1) break L18;
      if (!(HEAP16[(HEAP32[i13 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L18;
      i3 = HEAP32[i4 >> 2] | 0;
      if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
       FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
       i3 = i7;
       continue;
      } else {
       HEAP32[i4 >> 2] = i3 + 1;
       i3 = i7;
       continue;
      }
     }
    }
    i4 = i1 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i1 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, i3 & 255) | 0;
    if (i7 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 12 >> 2] & 31](i12, HEAP8[i2 >> 0] | 0) | 0) << 24 >> 24) {
     i22 = 55;
     break L2;
    }
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0; else HEAP32[i4 >> 2] = i3 + 1;
    i2 = i2 + 1 | 0;
   } while (0);
   i1 = HEAP32[i19 >> 2] | 0;
   if (!((i2 | 0) != (i15 | 0) & (HEAP32[i21 >> 2] | 0) == 0)) break L1;
  }
  if ((i22 | 0) == 12) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 15) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 18) {
   HEAP32[i21 >> 2] = 4;
   break;
  } else if ((i22 | 0) == 55) {
   HEAP32[i21 >> 2] = 4;
   i1 = HEAP32[i19 >> 2] | 0;
   break;
  }
 } while (0);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i19 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i2 = (i1 | 0) == 0;
 i3 = HEAP32[i20 >> 2] | 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i2) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i2 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i21 >> 2] = HEAP32[i21 >> 2] | 2;
 STACKTOP = i23;
 return i1 | 0;
}

function __ZN9PathMaker8makePathERKNSt3__16vectorIP8TriangleNS0_9allocatorIS3_EEEERK4Vec2SB_(i20, i17, i2, i1) {
 i20 = i20 | 0;
 i17 = i17 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i24 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i7 = i24 + 96 | 0;
 i3 = i24 + 84 | 0;
 i18 = i24 + 72 | 0;
 i23 = i24 + 60 | 0;
 i19 = i24 + 48 | 0;
 i16 = i24 + 44 | 0;
 i15 = i24 + 40 | 0;
 i8 = i24 + 28 | 0;
 i9 = i24 + 8 | 0;
 i10 = i24 + 16 | 0;
 i11 = i24;
 i12 = i17 + 4 | 0;
 if ((HEAP32[i12 >> 2] | 0) == (HEAP32[i17 >> 2] | 0)) {
  STACKTOP = i24;
  return;
 }
 i21 = i2;
 i13 = HEAP32[i21 >> 2] | 0;
 i21 = HEAP32[i21 + 4 >> 2] | 0;
 HEAP32[i20 + 8 >> 2] = -1;
 i22 = i20 + 12 | 0;
 HEAP32[i22 >> 2] = i13;
 HEAP32[i22 + 4 >> 2] = i21;
 i22 = i1;
 i21 = HEAP32[i22 >> 2] | 0;
 i22 = HEAP32[i22 + 4 >> 2] | 0;
 HEAP32[i20 + 20 >> 2] = -1;
 i13 = i20 + 24 | 0;
 HEAP32[i13 >> 2] = i21;
 HEAP32[i13 + 4 >> 2] = i22;
 HEAP32[i3 >> 2] = i20 + 8;
 i13 = i2;
 i22 = HEAP32[i13 + 4 >> 2] | 0;
 i21 = i3 + 4 | 0;
 HEAP32[i21 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i21 + 4 >> 2] = i22;
 HEAP32[i18 >> 2] = i20 + 20;
 i21 = HEAP32[i1 + 4 >> 2] | 0;
 i22 = i18 + 4 | 0;
 HEAP32[i22 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i22 + 4 >> 2] = i21;
 HEAP32[i23 >> 2] = 0;
 i22 = i23 + 4 | 0;
 HEAP32[i22 >> 2] = 0;
 HEAP32[i23 + 8 >> 2] = 0;
 HEAP32[i19 >> 2] = 0;
 i21 = i19 + 4 | 0;
 HEAP32[i21 >> 2] = 0;
 HEAP32[i19 + 8 >> 2] = 0;
 i1 = ((HEAP32[i12 >> 2] | 0) - (HEAP32[i17 >> 2] | 0) >> 2) + 1 | 0;
 i13 = i23 + 8 | 0;
 if (!i1) {
  i1 = 0;
  i2 = 0;
  i14 = i19 + 8 | 0;
 } else {
  i6 = __Znwj(i1 * 12 | 0) | 0;
  i14 = i6;
  i2 = i6 + (i1 * 12 | 0) | 0;
  HEAP32[i23 >> 2] = i14;
  HEAP32[i22 >> 2] = i14;
  HEAP32[i13 >> 2] = i2;
  i14 = i19 + 8 | 0;
  i5 = __Znwj(i1 * 12 | 0) | 0;
  i4 = i5;
  HEAP32[i19 >> 2] = i4;
  HEAP32[i21 >> 2] = i4;
  HEAP32[i14 >> 2] = i5 + (i1 * 12 | 0);
  i1 = i6;
 }
 if ((i1 | 0) == (i2 | 0)) __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i23, i3); else {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i21 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i19, i3); else {
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i17 >> 2] | 0;
 L16 : do if (((HEAP32[i12 >> 2] | 0) - i1 | 0) != 4) {
  i6 = i20 + 4 | 0;
  i4 = i8 + 4 | 0;
  i5 = i10 + 4 | 0;
  i3 = 0;
  while (1) {
   i2 = i3;
   i3 = i3 + 1 | 0;
   __Z9commonVtxP8TriangleS0_PP6VertexS3_(HEAP32[i1 + (i2 << 2) >> 2] | 0, HEAP32[i1 + (i3 << 2) >> 2] | 0, i16, i15);
   i1 = HEAP32[i15 >> 2] | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   HEAP32[i7 >> 2] = i1;
   i2 = HEAP32[i2 + 16 >> 2] | 0;
   if (!i2) {
    i1 = 14;
    break;
   }
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 3](i9, i2, i7);
   HEAP32[i8 >> 2] = i1;
   i25 = i9;
   i2 = HEAP32[i25 + 4 >> 2] | 0;
   i1 = i4;
   HEAP32[i1 >> 2] = HEAP32[i25 >> 2];
   HEAP32[i1 + 4 >> 2] = i2;
   i1 = HEAP32[i22 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i13 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
    HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 12;
   } else __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i23, i8);
   i1 = HEAP32[i16 >> 2] | 0;
   i2 = HEAP32[i6 >> 2] | 0;
   HEAP32[i7 >> 2] = i1;
   i2 = HEAP32[i2 + 16 >> 2] | 0;
   if (!i2) {
    i1 = 19;
    break;
   }
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 3](i11, i2, i7);
   HEAP32[i10 >> 2] = i1;
   i2 = i11;
   i25 = HEAP32[i2 + 4 >> 2] | 0;
   i1 = i5;
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i1 + 4 >> 2] = i25;
   i1 = HEAP32[i21 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i14 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = HEAP32[i10 >> 2];
    HEAP32[i1 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
    HEAP32[i1 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
    HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 12;
   } else __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i19, i10);
   i1 = HEAP32[i17 >> 2] | 0;
   if (i3 >>> 0 >= (((HEAP32[i12 >> 2] | 0) - i1 >> 2) + -1 | 0) >>> 0) break L16;
  }
  if ((i1 | 0) == 14) {
   i25 = ___cxa_allocate_exception(4) | 0;
   HEAP32[i25 >> 2] = 5528;
   ___cxa_throw(i25 | 0, 352, 51);
  } else if ((i1 | 0) == 19) {
   i25 = ___cxa_allocate_exception(4) | 0;
   HEAP32[i25 >> 2] = 5528;
   ___cxa_throw(i25 | 0, 352, 51);
  }
 } while (0);
 i1 = HEAP32[i22 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i13 >> 2] | 0)) __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i23, i18); else {
  HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i22 >> 2] = (HEAP32[i22 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i21 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i19, i18); else {
  HEAP32[i1 >> 2] = HEAP32[i18 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i18 + 4 >> 2];
  HEAP32[i1 + 8 >> 2] = HEAP32[i18 + 8 >> 2];
  HEAP32[i21 >> 2] = (HEAP32[i21 >> 2] | 0) + 12;
 }
 __ZN9PathMaker10stringPullERKNSt3__16vectorI7VtxWrapNS0_9allocatorIS2_EEEES7_(i20, i19, i23);
 i1 = HEAP32[i19 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i21 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i21 >> 2] = i3 + (~(((i3 + -12 - i2 | 0) >>> 0) / 12 | 0) * 12 | 0);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i23 >> 2] | 0;
 if (!i1) {
  STACKTOP = i24;
  return;
 }
 i2 = HEAP32[i22 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i22 >> 2] = i2 + (~(((i2 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
 __ZdlPv(i1);
 STACKTOP = i24;
 return;
}

function __ZN13MultiSegMaker12makeSegmentsEv(i32) {
 i32 = i32 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0, d17 = 0.0, d18 = 0.0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0, i31 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0;
 i34 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i28 = i34 + 88 | 0;
 i33 = i34 + 24 | 0;
 i30 = i34 + 16 | 0;
 i31 = i34 + 8 | 0;
 i29 = i34;
 i1 = i33 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i33 >> 2] = 5732;
 i1 = i33 + 28 | 0;
 i2 = i1 + 36 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 i1 = HEAP32[i32 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = (HEAP32[i1 + 4 >> 2] | 0) - i2 >> 2;
 if (!i1) {
  i30 = 0;
  i32 = 0;
  i33 = i33 + 52 | 0;
  i31 = i33;
  HEAP32[i31 >> 2] = i30;
  i33 = i33 + 4 | 0;
  HEAP32[i33 >> 2] = i32;
  STACKTOP = i34;
  return;
 }
 i22 = i30 + 4 | 0;
 i23 = i32 + 4 | 0;
 i24 = i32 + 8 | 0;
 i25 = i31 + 4 | 0;
 i26 = i31 + 4 | 0;
 i27 = i29 + 4 | 0;
 i3 = i1;
 i21 = 0;
 i1 = i33;
 do {
  i5 = HEAP32[i2 + (((i21 + -1 + i3 | 0) % (i3 | 0) | 0) << 2) >> 2] | 0;
  i15 = HEAP32[i2 + (((i3 + i21 | 0) % (i3 | 0) | 0) << 2) >> 2] | 0;
  i20 = i15 + 4 | 0;
  i4 = i21;
  i21 = i21 + 1 | 0;
  i16 = HEAP32[i2 + (((i3 + i21 | 0) % (i3 | 0) | 0) << 2) >> 2] | 0;
  i19 = i16 + 4 | 0;
  d6 = +HEAPF32[i20 >> 2];
  d7 = d6 - +HEAPF32[i5 + 4 >> 2];
  i15 = i15 + 8 | 0;
  d8 = +HEAPF32[i15 >> 2];
  d9 = d8 - +HEAPF32[i5 + 8 >> 2];
  d10 = +HEAPF32[i19 >> 2] - d6;
  i16 = i16 + 8 | 0;
  d11 = +HEAPF32[i16 >> 2] - d8;
  d14 = 1.0 / +Math_sqrt(+(d7 * d7 + d9 * d9));
  d13 = d7 * d14;
  d14 = d9 * d14;
  d18 = 1.0 / +Math_sqrt(+(d10 * d10 + d11 * d11));
  d17 = d10 * d18;
  d18 = d11 * d18;
  d12 = -d18;
  HEAPF32[i30 >> 2] = d12;
  HEAPF32[i22 >> 2] = d17;
  if (d7 * d10 + d9 * d11 < 0.0) {
   d11 = d13 - d14;
   d14 = d13 + d14;
   d6 = d12 - d17;
   d7 = d17 - d18;
   HEAPF32[i1 + 52 >> 2] = d11;
   HEAPF32[i1 + 56 >> 2] = d14;
   i2 = HEAP32[HEAP32[(HEAP32[HEAP32[i32 >> 2] >> 2] | 0) + (i4 << 2) >> 2] >> 2] | 0;
   i3 = __Znwj(52) | 0;
   i4 = HEAP32[i23 >> 2] | 0;
   i5 = i4 + 76 | 0;
   i35 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i4 + 72 >> 2] | 0) >> 2;
   HEAP32[i3 + 4 >> 2] = 3;
   HEAP32[i3 + 8 >> 2] = i35;
   i35 = i20;
   i36 = HEAP32[i35 >> 2] | 0;
   i35 = HEAP32[i35 + 4 >> 2] | 0;
   i1 = i3 + 12 | 0;
   HEAP32[i1 >> 2] = i36;
   HEAP32[i1 + 4 >> 2] = i35;
   HEAP32[i3 + 20 >> 2] = 0;
   HEAP32[i3 + 24 >> 2] = 0;
   HEAP32[i3 >> 2] = 5764;
   i1 = i3 + 28 | 0;
   HEAP32[i1 >> 2] = i36;
   HEAP32[i1 + 4 >> 2] = i35;
   HEAPF32[i3 + 36 >> 2] = d11;
   HEAPF32[i3 + 40 >> 2] = d14;
   HEAPF32[i3 + 44 >> 2] = d6;
   HEAPF32[i3 + 48 >> 2] = d7;
   HEAP32[i28 >> 2] = i3;
   i1 = HEAP32[i5 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i4 + 80 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = i3;
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
   } else __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i4 + 72 | 0, i28);
   i1 = __Znwj(8) | 0;
   HEAP32[i1 >> 2] = 5796;
   HEAP32[i1 + 4 >> 2] = i3;
   HEAP32[(HEAP32[(HEAP32[i23 >> 2] | 0) + 120 >> 2] | 0) + (i2 << 2) >> 2] = i1;
   i1 = __Znwj(64) | 0;
   i3 = HEAP32[i23 >> 2] | 0;
   i4 = i3 + 76 | 0;
   i36 = (HEAP32[i4 >> 2] | 0) - (HEAP32[i3 + 72 >> 2] | 0) >> 2;
   i2 = HEAP32[i24 >> 2] | 0;
   d9 = +HEAPF32[i20 >> 2];
   d10 = +HEAPF32[i19 >> 2];
   d11 = +HEAPF32[i15 >> 2];
   d12 = +HEAPF32[i16 >> 2];
   d13 = d9 - d10;
   d14 = d11 - d12;
   HEAP32[i1 + 4 >> 2] = 3;
   HEAP32[i1 + 8 >> 2] = i36;
   HEAPF32[i1 + 12 >> 2] = (d9 + d10) * .5;
   HEAPF32[i1 + 16 >> 2] = (d11 + d12) * .5;
   HEAPF32[i1 + 20 >> 2] = d13 > 0.0 ? d13 : -d13;
   HEAPF32[i1 + 24 >> 2] = d14 > 0.0 ? d14 : -d14;
   HEAP32[i1 >> 2] = 5732;
   i36 = i20;
   i35 = HEAP32[i36 + 4 >> 2] | 0;
   i20 = i1 + 28 | 0;
   HEAP32[i20 >> 2] = HEAP32[i36 >> 2];
   HEAP32[i20 + 4 >> 2] = i35;
   i20 = i19;
   i35 = HEAP32[i20 + 4 >> 2] | 0;
   i36 = i1 + 36 | 0;
   HEAP32[i36 >> 2] = HEAP32[i20 >> 2];
   HEAP32[i36 + 4 >> 2] = i35;
   HEAPF32[i1 + 44 >> 2] = d6;
   HEAPF32[i1 + 48 >> 2] = d7;
   HEAPF32[i1 + 52 >> 2] = d17 - d18;
   HEAPF32[i1 + 56 >> 2] = d17 + d18;
   HEAP32[i1 + 60 >> 2] = i2;
   HEAP32[i28 >> 2] = i1;
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i3 + 80 >> 2] | 0) >>> 0) {
    HEAP32[i2 >> 2] = i1;
    HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 4;
   } else __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i3 + 72 | 0, i28);
  } else {
   HEAPF32[i31 >> 2] = 0.0;
   HEAPF32[i25 >> 2] = 0.0;
   if (d7 * d11 - d9 * d10 != 0.0) {
    d10 = d6 - d18;
    d11 = d8 + d17;
    d12 = (d14 * (d6 - d14 - d10) + d13 * (d11 - (d13 + d8))) / (d14 * d17 - d13 * d18);
    d17 = d10 + d17 * d12;
    d18 = d11 + d18 * d12;
    HEAPF32[i31 >> 2] = d17;
    HEAPF32[i26 >> 2] = d18;
    HEAPF32[i29 >> 2] = d17 - d6;
    HEAPF32[i27 >> 2] = d18 - d8;
    i2 = i29;
   } else i2 = i30;
   i36 = i2;
   i35 = HEAP32[i36 >> 2] | 0;
   i36 = HEAP32[i36 + 4 >> 2] | 0;
   i16 = i31;
   HEAP32[i16 >> 2] = i35;
   HEAP32[i16 + 4 >> 2] = i36;
   d17 = d13 * 0.0 + (HEAP32[tempDoublePtr >> 2] = i35, +HEAPF32[tempDoublePtr >> 2]);
   d18 = d14 * 0.0 + (HEAP32[tempDoublePtr >> 2] = i36, +HEAPF32[tempDoublePtr >> 2]);
   HEAPF32[i1 + 52 >> 2] = d17;
   HEAPF32[i1 + 56 >> 2] = d18;
   i1 = __ZN13MultiSegMaker10addSegmentERK4Vec2S2_S2_S2_i(i32, i20, i19, i31, i31, HEAP32[HEAP32[(HEAP32[HEAP32[i32 >> 2] >> 2] | 0) + (i4 << 2) >> 2] >> 2] | 0) | 0;
  }
  i3 = HEAP32[i32 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  i3 = (HEAP32[i3 + 4 >> 2] | 0) - i2 >> 2;
 } while (i21 >>> 0 < i3 >>> 0);
 i35 = i33 + 52 | 0;
 i32 = HEAP32[i35 >> 2] | 0;
 i35 = HEAP32[i35 + 4 >> 2] | 0;
 i36 = i1;
 i36 = i36 + 52 | 0;
 i33 = i36;
 HEAP32[i33 >> 2] = i32;
 i36 = i36 + 4 | 0;
 HEAP32[i36 >> 2] = i35;
 STACKTOP = i34;
 return;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i37, i39, i38, i36, i1, i24, i23, i28, i29, i25, i32, i27, i31, i30, i26) {
 i37 = i37 | 0;
 i39 = i39 | 0;
 i38 = i38 | 0;
 i36 = i36 | 0;
 i1 = i1 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 i28 = i28 | 0;
 i29 = i29 | 0;
 i25 = i25 | 0;
 i32 = i32 | 0;
 i27 = i27 | 0;
 i31 = i31 | 0;
 i30 = i30 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i33 = 0, i34 = 0, i35 = 0;
 HEAP32[i38 >> 2] = i37;
 i33 = i30 + 4 | 0;
 i34 = i30 + 8 | 0;
 i35 = i30 + 1 | 0;
 i17 = i31 + 4 | 0;
 i18 = (i36 & 512 | 0) == 0;
 i19 = i31 + 8 | 0;
 i20 = i31 + 1 | 0;
 i21 = i23 + 8 | 0;
 i22 = (i26 | 0) > 0;
 i10 = i27 + 4 | 0;
 i11 = i27 + 8 | 0;
 i12 = i27 + 1 | 0;
 i13 = i26 + 1 | 0;
 i15 = -2 - i26 - ((i26 | 0) < 0 ? ~i26 : -1) | 0;
 i16 = (i26 | 0) > 0;
 i9 = 0;
 do {
  switch (HEAP8[i29 + i9 >> 0] | 0) {
  case 0:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
    i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 31](i23, 32) | 0;
    i8 = HEAP32[i38 >> 2] | 0;
    HEAP32[i38 >> 2] = i8 + 1;
    HEAP8[i8 >> 0] = i7;
    break;
   }
  case 3:
   {
    i8 = HEAP8[i30 >> 0] | 0;
    i2 = (i8 & 1) == 0;
    if ((i2 ? (i8 & 255) >>> 1 : HEAP32[i33 >> 2] | 0) | 0) {
     i7 = HEAP8[(i2 ? i35 : HEAP32[i34 >> 2] | 0) >> 0] | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    break;
   }
  case 2:
   {
    i4 = HEAP8[i31 >> 0] | 0;
    i2 = (i4 & 1) == 0;
    i4 = i2 ? (i4 & 255) >>> 1 : HEAP32[i17 >> 2] | 0;
    if (!(i18 | (i4 | 0) == 0)) {
     i3 = i2 ? i20 : HEAP32[i19 >> 2] | 0;
     i5 = i3 + i4 | 0;
     i2 = HEAP32[i38 >> 2] | 0;
     if (i4) do {
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      i3 = i3 + 1 | 0;
      i2 = i2 + 1 | 0;
     } while ((i3 | 0) != (i5 | 0));
     HEAP32[i38 >> 2] = i2;
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i38 >> 2] | 0;
    i1 = i28 ? i1 + 1 | 0 : i1;
    i6 = i1;
    i5 = HEAP32[i21 >> 2] | 0;
    L15 : do if (i1 >>> 0 < i24 >>> 0) {
     i3 = i1;
     do {
      i4 = HEAP8[i3 >> 0] | 0;
      if (i4 << 24 >> 24 <= -1) break L15;
      if (!(HEAP16[i5 + (i4 << 24 >> 24 << 1) >> 1] & 2048)) break L15;
      i3 = i3 + 1 | 0;
     } while (i3 >>> 0 < i24 >>> 0);
    } else i3 = i1; while (0);
    i4 = i3;
    if (i22) {
     i7 = -2 - i4 - ~(i4 >>> 0 > i6 >>> 0 ? i6 : i4) | 0;
     i7 = i15 >>> 0 > i7 >>> 0 ? i15 : i7;
     if (i3 >>> 0 > i1 >>> 0 & i16) {
      i4 = i3;
      i6 = i26;
      while (1) {
       i4 = i4 + -1 | 0;
       i8 = HEAP8[i4 >> 0] | 0;
       i5 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i5 + 1;
       HEAP8[i5 >> 0] = i8;
       i5 = (i6 | 0) > 1;
       if (!(i4 >>> 0 > i1 >>> 0 & i5)) break; else i6 = i6 + -1 | 0;
      }
     } else i5 = i16;
     i8 = i13 + i7 | 0;
     i4 = i3 + (i7 + 1) | 0;
     if (i5) i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 31](i23, 48) | 0; else i6 = 0;
     i3 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i3 + 1;
     if ((i8 | 0) > 0) {
      i5 = i8;
      while (1) {
       HEAP8[i3 >> 0] = i6;
       i3 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i3 + 1;
       if ((i5 | 0) > 1) i5 = i5 + -1 | 0; else break;
      }
     }
     HEAP8[i3 >> 0] = i25;
    } else i4 = i3;
    if ((i4 | 0) != (i1 | 0)) {
     i8 = HEAP8[i27 >> 0] | 0;
     i3 = (i8 & 1) == 0;
     if (!((i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) | 0)) i3 = -1; else i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) >> 0] | 0;
     if ((i4 | 0) != (i1 | 0)) {
      i5 = 0;
      i6 = 0;
      while (1) {
       if ((i6 | 0) == (i3 | 0)) {
        i8 = HEAP32[i38 >> 2] | 0;
        HEAP32[i38 >> 2] = i8 + 1;
        HEAP8[i8 >> 0] = i32;
        i5 = i5 + 1 | 0;
        i8 = HEAP8[i27 >> 0] | 0;
        i3 = (i8 & 1) == 0;
        if (i5 >>> 0 < (i3 ? (i8 & 255) >>> 1 : HEAP32[i10 >> 2] | 0) >>> 0) {
         i3 = HEAP8[(i3 ? i12 : HEAP32[i11 >> 2] | 0) + i5 >> 0] | 0;
         i3 = i3 << 24 >> 24 == 127 ? -1 : i3 << 24 >> 24;
         i6 = 0;
        } else {
         i3 = i6;
         i6 = 0;
        }
       }
       i4 = i4 + -1 | 0;
       i7 = HEAP8[i4 >> 0] | 0;
       i8 = HEAP32[i38 >> 2] | 0;
       HEAP32[i38 >> 2] = i8 + 1;
       HEAP8[i8 >> 0] = i7;
       if ((i4 | 0) == (i1 | 0)) break; else i6 = i6 + 1 | 0;
      }
     }
    } else {
     i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i23 >> 2] | 0) + 28 >> 2] & 31](i23, 48) | 0;
     i8 = HEAP32[i38 >> 2] | 0;
     HEAP32[i38 >> 2] = i8 + 1;
     HEAP8[i8 >> 0] = i7;
    }
    i3 = HEAP32[i38 >> 2] | 0;
    if ((i2 | 0) != (i3 | 0) ? (i14 = i3 + -1 | 0, i2 >>> 0 < i14 >>> 0) : 0) {
     i3 = i14;
     do {
      i8 = HEAP8[i2 >> 0] | 0;
      HEAP8[i2 >> 0] = HEAP8[i3 >> 0] | 0;
      HEAP8[i3 >> 0] = i8;
      i2 = i2 + 1 | 0;
      i3 = i3 + -1 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i9 = i9 + 1 | 0;
 } while ((i9 | 0) != 4);
 i3 = HEAP8[i30 >> 0] | 0;
 i1 = (i3 & 1) == 0;
 i3 = i1 ? (i3 & 255) >>> 1 : HEAP32[i33 >> 2] | 0;
 if (i3 >>> 0 > 1) {
  i2 = i1 ? i35 : HEAP32[i34 >> 2] | 0;
  i4 = i2 + i3 | 0;
  i1 = HEAP32[i38 >> 2] | 0;
  if ((i3 | 0) != 1) {
   i2 = i2 + 1 | 0;
   do {
    HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
    i1 = i1 + 1 | 0;
    i2 = i2 + 1 | 0;
   } while ((i2 | 0) != (i4 | 0));
  }
  HEAP32[i38 >> 2] = i1;
 }
 switch (i36 & 176 | 0) {
 case 32:
  {
   HEAP32[i39 >> 2] = HEAP32[i38 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i39 >> 2] = i37;
 }
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i33, i35, i34, i32, i1, i21, i20, i25, i26, i22, i29, i24, i28, i27, i23) {
 i33 = i33 | 0;
 i35 = i35 | 0;
 i34 = i34 | 0;
 i32 = i32 | 0;
 i1 = i1 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 i25 = i25 | 0;
 i26 = i26 | 0;
 i22 = i22 | 0;
 i29 = i29 | 0;
 i24 = i24 | 0;
 i28 = i28 | 0;
 i27 = i27 | 0;
 i23 = i23 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i30 = 0, i31 = 0;
 HEAP32[i34 >> 2] = i33;
 i30 = i27 + 4 | 0;
 i31 = i27 + 8 | 0;
 i13 = i28 + 4 | 0;
 i14 = (i32 & 512 | 0) == 0;
 i15 = i28 + 8 | 0;
 i16 = (i23 | 0) > 0;
 i17 = i24 + 4 | 0;
 i18 = i24 + 8 | 0;
 i19 = i24 + 1 | 0;
 i11 = (i23 | 0) > 0;
 i10 = 0;
 do {
  switch (HEAP8[i26 + i10 >> 0] | 0) {
  case 0:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    break;
   }
  case 1:
   {
    HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 31](i20, 32) | 0;
    i9 = HEAP32[i34 >> 2] | 0;
    HEAP32[i34 >> 2] = i9 + 4;
    HEAP32[i9 >> 2] = i8;
    break;
   }
  case 3:
   {
    i9 = HEAP8[i27 >> 0] | 0;
    i2 = (i9 & 1) == 0;
    if ((i2 ? (i9 & 255) >>> 1 : HEAP32[i30 >> 2] | 0) | 0) {
     i8 = HEAP32[(i2 ? i30 : HEAP32[i31 >> 2] | 0) >> 2] | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     HEAP32[i34 >> 2] = i9 + 4;
     HEAP32[i9 >> 2] = i8;
    }
    break;
   }
  case 2:
   {
    i6 = HEAP8[i28 >> 0] | 0;
    i2 = (i6 & 1) == 0;
    i6 = i2 ? (i6 & 255) >>> 1 : HEAP32[i13 >> 2] | 0;
    if (!(i14 | (i6 | 0) == 0)) {
     i2 = i2 ? i13 : HEAP32[i15 >> 2] | 0;
     i4 = i2 + (i6 << 2) | 0;
     i5 = HEAP32[i34 >> 2] | 0;
     if (i6) {
      i3 = i5;
      while (1) {
       HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
       i2 = i2 + 4 | 0;
       if ((i2 | 0) == (i4 | 0)) break; else i3 = i3 + 4 | 0;
      }
     }
     HEAP32[i34 >> 2] = i5 + (i6 << 2);
    }
    break;
   }
  case 4:
   {
    i2 = HEAP32[i34 >> 2] | 0;
    i1 = i25 ? i1 + 4 | 0 : i1;
    L15 : do if (i1 >>> 0 < i21 >>> 0) {
     i3 = i1;
     do {
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i20 >> 2] | 0) + 12 >> 2] & 31](i20, 2048, HEAP32[i3 >> 2] | 0) | 0)) break L15;
      i3 = i3 + 4 | 0;
     } while (i3 >>> 0 < i21 >>> 0);
    } else i3 = i1; while (0);
    if (i16) {
     if (i3 >>> 0 > i1 >>> 0 & i11) {
      i6 = HEAP32[i34 >> 2] | 0;
      i5 = i23;
      while (1) {
       i3 = i3 + -4 | 0;
       i4 = i6 + 4 | 0;
       HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
       i7 = i5 + -1 | 0;
       i5 = (i5 | 0) > 1;
       if (i3 >>> 0 > i1 >>> 0 & i5) {
        i6 = i4;
        i5 = i7;
       } else {
        i6 = i7;
        break;
       }
      }
      HEAP32[i34 >> 2] = i4;
      i4 = i6;
     } else {
      i5 = i11;
      i4 = i23;
     }
     if (i5) i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 31](i20, 48) | 0; else i7 = 0;
     i8 = HEAP32[i34 >> 2] | 0;
     i5 = i4 + ((i4 | 0) < 0 ? ~i4 : -1) | 0;
     if ((i4 | 0) > 0) {
      i6 = i8;
      while (1) {
       HEAP32[i6 >> 2] = i7;
       if ((i4 | 0) > 1) {
        i6 = i6 + 4 | 0;
        i4 = i4 + -1 | 0;
       } else break;
      }
     }
     HEAP32[i34 >> 2] = i8 + (i5 + 2 << 2);
     HEAP32[i8 + (i5 + 1 << 2) >> 2] = i22;
    }
    if ((i3 | 0) == (i1 | 0)) {
     i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i20 >> 2] | 0) + 44 >> 2] & 31](i20, 48) | 0;
     i9 = HEAP32[i34 >> 2] | 0;
     i3 = i9 + 4 | 0;
     HEAP32[i34 >> 2] = i3;
     HEAP32[i9 >> 2] = i8;
    } else {
     i8 = HEAP8[i24 >> 0] | 0;
     i4 = (i8 & 1) == 0;
     i9 = HEAP32[i17 >> 2] | 0;
     if (!((i4 ? (i8 & 255) >>> 1 : i9) | 0)) i4 = -1; else i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) >> 0] | 0;
     if ((i3 | 0) != (i1 | 0)) {
      i7 = 0;
      i8 = 0;
      while (1) {
       i5 = HEAP32[i34 >> 2] | 0;
       if ((i8 | 0) == (i4 | 0)) {
        i6 = i5 + 4 | 0;
        HEAP32[i34 >> 2] = i6;
        HEAP32[i5 >> 2] = i29;
        i7 = i7 + 1 | 0;
        i5 = HEAP8[i24 >> 0] | 0;
        i4 = (i5 & 1) == 0;
        if (i7 >>> 0 < (i4 ? (i5 & 255) >>> 1 : i9) >>> 0) {
         i4 = HEAP8[(i4 ? i19 : HEAP32[i18 >> 2] | 0) + i7 >> 0] | 0;
         i5 = i6;
         i4 = i4 << 24 >> 24 == 127 ? -1 : i4 << 24 >> 24;
         i6 = 0;
        } else {
         i5 = i6;
         i4 = i8;
         i6 = 0;
        }
       } else i6 = i8;
       i3 = i3 + -4 | 0;
       i8 = HEAP32[i3 >> 2] | 0;
       HEAP32[i34 >> 2] = i5 + 4;
       HEAP32[i5 >> 2] = i8;
       if ((i3 | 0) == (i1 | 0)) break; else i8 = i6 + 1 | 0;
      }
     }
     i3 = HEAP32[i34 >> 2] | 0;
    }
    if ((i2 | 0) != (i3 | 0) ? (i12 = i3 + -4 | 0, i2 >>> 0 < i12 >>> 0) : 0) {
     i3 = i12;
     do {
      i9 = HEAP32[i2 >> 2] | 0;
      HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
      HEAP32[i3 >> 2] = i9;
      i2 = i2 + 4 | 0;
      i3 = i3 + -4 | 0;
     } while (i2 >>> 0 < i3 >>> 0);
    }
    break;
   }
  default:
   {}
  }
  i10 = i10 + 1 | 0;
 } while ((i10 | 0) != 4);
 i2 = HEAP8[i27 >> 0] | 0;
 i1 = (i2 & 1) == 0;
 i2 = i1 ? (i2 & 255) >>> 1 : HEAP32[i30 >> 2] | 0;
 if (i2 >>> 0 > 1) {
  i3 = i1 ? i30 : HEAP32[i31 >> 2] | 0;
  i1 = i3 + 4 | 0;
  i3 = i3 + (i2 << 2) | 0;
  i4 = HEAP32[i34 >> 2] | 0;
  i5 = i3 - i1 | 0;
  if ((i2 | 0) != 1) {
   i2 = i4;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i3 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i34 >> 2] = i4 + (i5 >>> 2 << 2);
 }
 switch (i32 & 176 | 0) {
 case 32:
  {
   HEAP32[i35 >> 2] = HEAP32[i34 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[i35 >> 2] = i33;
 }
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i16, i17, i1, i19, i15, i18, i14) {
 i16 = i16 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 i18 = i18 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i22;
 i4 = (i19 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i20 = i3;
   i2 = i3;
  }
 } else {
  i20 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i19 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i19 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i12 = (i1 | 0) == (i19 | 0);
 i13 = (i1 | 0) == (i19 | 0);
 i11 = 0;
 i8 = i4;
 L17 : while (1) {
  i4 = HEAP32[i16 >> 2] | 0;
  do if (i4) {
   i5 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i16 >> 2] = 0;
    i7 = 1;
    break;
   } else {
    i7 = (HEAP32[i16 >> 2] | 0) == 0;
    break;
   }
  } else i7 = 1; while (0);
  i5 = HEAP32[i17 >> 2] | 0;
  if (i5) {
   i4 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i5 = 0;
    i6 = 1;
   } else i6 = 0;
  } else {
   i5 = 0;
   i6 = 1;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  if (!((i8 | 0) != 0 & (i7 ^ i6))) break;
  i5 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i4 = HEAP32[i5 >> 2] | 0;
  if (!i14) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 31](i15, i4) | 0;
  i10 = i11 + 1 | 0;
  if (i12) {
   i4 = 0;
   i7 = i8;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i5 = i9 + 4 | 0; else i5 = HEAP32[i9 + 8 >> 2] | 0;
     i5 = HEAP32[i5 + (i11 << 2) >> 2] | 0;
     if (!i14) i5 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i15 >> 2] | 0) + 28 >> 2] & 31](i15, i5) | 0;
     if ((i4 | 0) != (i5 | 0)) {
      HEAP8[i8 >> 0] = 0;
      i5 = i7;
      i6 = i6 + -1 | 0;
      break;
     }
     i5 = HEAP8[i9 >> 0] | 0;
     if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i5 | 0) == (i10 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i5 = 1;
      i3 = i3 + 1 | 0;
      i6 = i6 + -1 | 0;
     } else i5 = 1;
    } else i5 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i19 | 0)) {
     i4 = i5;
     i7 = i6;
     break;
    } else {
     i7 = i5;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i4) {
   i11 = i10;
   i8 = i7;
   continue;
  }
  i4 = HEAP32[i16 >> 2] | 0;
  i5 = i4 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  if ((i6 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4) | 0; else HEAP32[i5 >> 2] = i6 + 4;
  if ((i3 + i7 | 0) >>> 0 < 2 | i13) {
   i11 = i10;
   i8 = i7;
   continue;
  } else {
   i4 = i1;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i5 = HEAP8[i4 >> 0] | 0;
    if (!(i5 & 1)) i5 = (i5 & 255) >>> 1; else i5 = HEAP32[i4 + 4 >> 2] | 0;
    if ((i5 | 0) != (i10 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i3 = i3 + -1 | 0;
    }
   }
   i4 = i4 + 12 | 0;
   if ((i4 | 0) == (i19 | 0)) {
    i11 = i10;
    i8 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i4) {
  i3 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) == -1) {
   HEAP32[i16 >> 2] = 0;
   i4 = 1;
   break;
  } else {
   i4 = (HEAP32[i16 >> 2] | 0) == 0;
   break;
  }
 } else i4 = 1; while (0);
 do if (i5) {
  i3 = HEAP32[i5 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i3 = HEAP32[i3 >> 2] | 0;
  if ((i3 | 0) != -1) if (i4) break; else {
   i21 = 74;
   break;
  } else {
   HEAP32[i17 >> 2] = 0;
   i21 = 72;
   break;
  }
 } else i21 = 72; while (0);
 if ((i21 | 0) == 72 ? i4 : 0) i21 = 74;
 if ((i21 | 0) == 74) HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 2;
 L107 : do if ((i1 | 0) == (i19 | 0)) i21 = 78; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L107;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i19 | 0)) {
   i21 = 78;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i21 | 0) == 78) {
  HEAP32[i18 >> 2] = HEAP32[i18 >> 2] | 4;
  i1 = i19;
 }
 _free(i20);
 STACKTOP = i22;
 return i1 | 0;
}

function __ZN7NavCtrl7setGoalEP9AgentItemP8GoalItem(i11, i7, i12) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i15 + 12 | 0;
 i14 = i15;
 i10 = i7;
 i13 = i7 + 12 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 i1 = i12 + 12 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i9 = i2 + 32 | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i9 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
 HEAP32[i9 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
 HEAP32[i9 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
 HEAP32[i2 + 48 >> 2] = i3;
 HEAP8[i2 + 88 >> 0] = 0;
 HEAP8[i2 + 89 >> 0] = 0;
 __ZN8Document10updatePlanEP5Agent(i11 + 72 | 0, i2);
 HEAP32[i11 + 312 >> 2] = 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = i1 + 20 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) == (HEAP32[i1 + 24 >> 2] | 0)) __ZNSt3__16vectorIP5AgentNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i1 + 16 | 0, i13); else {
  HEAP32[i3 >> 2] = HEAP32[i13 >> 2];
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
 }
 i9 = i11 + 316 | 0;
 i6 = i11 + 320 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (i1) {
  i4 = i1;
  while (1) {
   i2 = HEAP32[i4 + 16 >> 2] | 0;
   if (i2 >>> 0 > i7 >>> 0) {
    i2 = HEAP32[i4 >> 2] | 0;
    if (!i2) {
     i1 = i4;
     i2 = i4;
     i5 = 7;
     break;
    }
   } else {
    if (i2 >>> 0 >= i7 >>> 0) {
     i2 = i4;
     i5 = 13;
     break;
    }
    i3 = i4 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
    if (!i2) {
     i1 = i3;
     i2 = i4;
     i5 = 11;
     break;
    }
   }
   i4 = i2;
  }
  if ((i5 | 0) == 7) {
   HEAP32[i8 >> 2] = i2;
   i3 = i1;
   i1 = i2;
   i5 = 14;
   break;
  } else if ((i5 | 0) == 11) {
   HEAP32[i8 >> 2] = i2;
   i3 = i1;
   i1 = i2;
   i5 = 14;
   break;
  } else if ((i5 | 0) == 13) {
   HEAP32[i8 >> 2] = i2;
   if (!i2) {
    i3 = i8;
    i1 = i2;
    i5 = 14;
    break;
   } else break;
  }
 } else {
  HEAP32[i8 >> 2] = i6;
  i3 = i6;
  i1 = i6;
  i5 = 14;
 } while (0);
 if ((i5 | 0) == 14) {
  i2 = __Znwj(24) | 0;
  HEAP32[i2 + 16 >> 2] = i10;
  HEAP32[i2 + 20 >> 2] = 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  HEAP32[i2 + 8 >> 2] = i1;
  HEAP32[i3 >> 2] = i2;
  i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  if (!i1) i1 = i2; else {
   HEAP32[i9 >> 2] = i1;
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i11 + 320 >> 2] | 0, i1);
  i1 = i11 + 324 | 0;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
  i1 = HEAP32[i6 >> 2] | 0;
 }
 i4 = HEAP32[i2 + 20 >> 2] | 0;
 do if (i1) {
  while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if (i2 >>> 0 > i7 >>> 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i3 = i1;
     i2 = i1;
     i5 = 20;
     break;
    } else i1 = i2;
   } else {
    if (i2 >>> 0 >= i7 >>> 0) {
     i5 = 26;
     break;
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i5 = 24;
     break;
    } else i1 = i3;
   }
  }
  if ((i5 | 0) == 20) {
   HEAP32[i8 >> 2] = i2;
   i5 = 27;
   break;
  } else if ((i5 | 0) == 24) {
   HEAP32[i8 >> 2] = i1;
   i3 = i2;
   i2 = i1;
   i5 = 27;
   break;
  } else if ((i5 | 0) == 26) {
   HEAP32[i8 >> 2] = i1;
   if (!i1) {
    i3 = i8;
    i2 = i1;
    i5 = 27;
    break;
   } else break;
  }
 } else {
  HEAP32[i8 >> 2] = i6;
  i3 = i6;
  i2 = i6;
  i5 = 27;
 } while (0);
 if ((i5 | 0) == 27) {
  i1 = __Znwj(24) | 0;
  HEAP32[i1 + 16 >> 2] = i10;
  HEAP32[i1 + 20 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i3 >> 2] = i1;
  i2 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
  if (!i2) i2 = i1; else {
   HEAP32[i9 >> 2] = i2;
   i2 = HEAP32[i3 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i11 + 320 >> 2] | 0, i2);
  i11 = i11 + 324 | 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 }
 HEAP32[i1 + 20 >> 2] = i12;
 if (!i4) {
  STACKTOP = i15;
  return;
 }
 i5 = HEAP32[i4 + 12 >> 2] | 0;
 i3 = HEAP32[i5 + 16 >> 2] | 0;
 i5 = i5 + 20 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 L46 : do if ((i3 | 0) == (i4 | 0)) i1 = i3; else {
  i2 = HEAP32[i13 >> 2] | 0;
  i1 = i3;
  do {
   if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break L46;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i4 | 0));
  i15 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i14, 18645, 31);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i15, i14);
  ___cxa_throw(i15 | 0, 16, 12);
 } while (0);
 if ((i1 | 0) == (i4 | 0)) {
  i15 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i14, 18645, 31);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i15, i14);
  ___cxa_throw(i15 | 0, 16, 12);
 }
 i14 = i3 + ((i1 - i3 >> 2) + 1 << 2) | 0;
 i2 = i4 - i14 | 0;
 _memmove(i1 | 0, i14 | 0, i2 | 0) | 0;
 i1 = i1 + (i2 >> 2 << 2) | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0)) {
  STACKTOP = i15;
  return;
 }
 HEAP32[i5 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 STACKTOP = i15;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i17, i18, i1, i20, i16, i19, i15) {
 i17 = i17 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 i20 = i20 | 0;
 i16 = i16 | 0;
 i19 = i19 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i3 = i23;
 i4 = (i20 - i1 | 0) / 12 | 0;
 if (i4 >>> 0 > 100) {
  i3 = _malloc(i4) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i21 = i3;
   i2 = i3;
  }
 } else {
  i21 = 0;
  i2 = i3;
 }
 if ((i1 | 0) == (i20 | 0)) i3 = 0; else {
  i7 = i1;
  i5 = 0;
  i6 = i2;
  while (1) {
   i3 = HEAP8[i7 >> 0] | 0;
   if (!(i3 & 1)) i3 = (i3 & 255) >>> 1; else i3 = HEAP32[i7 + 4 >> 2] | 0;
   if (!i3) {
    HEAP8[i6 >> 0] = 2;
    i3 = i5 + 1 | 0;
    i4 = i4 + -1 | 0;
   } else {
    HEAP8[i6 >> 0] = 1;
    i3 = i5;
   }
   i7 = i7 + 12 | 0;
   if ((i7 | 0) == (i20 | 0)) break; else {
    i5 = i3;
    i6 = i6 + 1 | 0;
   }
  }
 }
 i13 = (i1 | 0) == (i20 | 0);
 i14 = (i1 | 0) == (i20 | 0);
 i12 = 0;
 i8 = i3;
 i10 = i4;
 L17 : while (1) {
  i3 = HEAP32[i17 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
    HEAP32[i17 >> 2] = 0;
    i3 = 0;
    break;
   } else {
    i3 = HEAP32[i17 >> 2] | 0;
    break;
   }
  } else i3 = 0; while (0);
  i6 = (i3 | 0) == 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i18 >> 2] = 0;
    i4 = 0;
   }
  } else i4 = 0;
  i5 = (i4 | 0) == 0;
  i3 = HEAP32[i17 >> 2] | 0;
  if (!((i10 | 0) != 0 & (i6 ^ i5))) break;
  i4 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i3 = HEAPU8[i4 >> 0] | 0;
  i3 = i3 & 255;
  if (!i15) i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 31](i16, i3) | 0;
  i11 = i12 + 1 | 0;
  if (i13) {
   i3 = 0;
   i6 = i8;
   i7 = i10;
  } else {
   i7 = 0;
   i9 = i1;
   i6 = i8;
   i5 = i10;
   i8 = i2;
   while (1) {
    do if ((HEAP8[i8 >> 0] | 0) == 1) {
     if (!(HEAP8[i9 >> 0] & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
     i4 = HEAP8[i4 + i12 >> 0] | 0;
     if (!i15) i4 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 12 >> 2] & 31](i16, i4) | 0;
     if (i3 << 24 >> 24 != i4 << 24 >> 24) {
      HEAP8[i8 >> 0] = 0;
      i4 = i7;
      i5 = i5 + -1 | 0;
      break;
     }
     i4 = HEAP8[i9 >> 0] | 0;
     if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i9 + 4 >> 2] | 0;
     if ((i4 | 0) == (i11 | 0)) {
      HEAP8[i8 >> 0] = 2;
      i4 = 1;
      i6 = i6 + 1 | 0;
      i5 = i5 + -1 | 0;
     } else i4 = 1;
    } else i4 = i7; while (0);
    i9 = i9 + 12 | 0;
    if ((i9 | 0) == (i20 | 0)) {
     i3 = i4;
     i7 = i5;
     break;
    } else {
     i7 = i4;
     i8 = i8 + 1 | 0;
    }
   }
  }
  if (!i3) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  }
  i3 = HEAP32[i17 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0; else HEAP32[i4 >> 2] = i5 + 1;
  if ((i6 + i7 | 0) >>> 0 < 2 | i14) {
   i12 = i11;
   i8 = i6;
   i10 = i7;
   continue;
  } else {
   i3 = i1;
   i5 = i6;
   i6 = i2;
  }
  while (1) {
   if ((HEAP8[i6 >> 0] | 0) == 2) {
    i4 = HEAP8[i3 >> 0] | 0;
    if (!(i4 & 1)) i4 = (i4 & 255) >>> 1; else i4 = HEAP32[i3 + 4 >> 2] | 0;
    if ((i4 | 0) != (i11 | 0)) {
     HEAP8[i6 >> 0] = 0;
     i5 = i5 + -1 | 0;
    }
   }
   i3 = i3 + 12 | 0;
   if ((i3 | 0) == (i20 | 0)) {
    i12 = i11;
    i8 = i5;
    i10 = i7;
    continue L17;
   } else i6 = i6 + 1 | 0;
  }
 }
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1) {
   HEAP32[i17 >> 2] = 0;
   i3 = 0;
   break;
  } else {
   i3 = HEAP32[i17 >> 2] | 0;
   break;
  }
 } else i3 = 0; while (0);
 i3 = (i3 | 0) == 0;
 do if (!i5) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i18 >> 2] = 0;
   i22 = 65;
   break;
  }
  if (!i3) i22 = 66;
 } else i22 = 65; while (0);
 if ((i22 | 0) == 65 ? i3 : 0) i22 = 66;
 if ((i22 | 0) == 66) HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 2;
 L95 : do if ((i1 | 0) == (i20 | 0)) i22 = 70; else while (1) {
  if ((HEAP8[i2 >> 0] | 0) == 2) break L95;
  i1 = i1 + 12 | 0;
  if ((i1 | 0) == (i20 | 0)) {
   i22 = 70;
   break;
  } else i2 = i2 + 1 | 0;
 } while (0);
 if ((i22 | 0) == 70) {
  HEAP32[i19 >> 2] = HEAP32[i19 >> 2] | 4;
  i1 = i20;
 }
 _free(i21);
 STACKTOP = i23;
 return i1 | 0;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i16, i15, i17, i19, i18, i1) {
 i14 = i14 | 0;
 i16 = i16 | 0;
 i15 = i15 | 0;
 i17 = i17 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i20 = 0, i21 = 0, i22 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i20;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13424) | 0;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13580) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i10 >> 2] | 0) + 20 >> 2] & 63](i13, i10);
 HEAP32[i18 >> 2] = i17;
 i1 = HEAP8[i14 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i11 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 31](i12, i1) | 0;
   i3 = HEAP32[i18 >> 2] | 0;
   HEAP32[i18 >> 2] = i3 + 4;
   HEAP32[i3 >> 2] = i11;
   i3 = i14 + 1 | 0;
   break;
  }
 default:
  i3 = i14;
 }
 i11 = i15;
 L4 : do if ((i11 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
  i1 = i3 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i4 = 4;
    break L4;
   }
  }
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 31](i12, 48) | 0;
  i8 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i8 + 4;
  HEAP32[i8 >> 2] = i9;
  i3 = i3 + 2 | 0;
  i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 31](i12, HEAP8[i1 >> 0] | 0) | 0;
  i9 = HEAP32[i18 >> 2] | 0;
  HEAP32[i18 >> 2] = i9 + 4;
  HEAP32[i9 >> 2] = i8;
  if (i3 >>> 0 < i15 >>> 0) {
   i1 = i3;
   while (1) {
    i9 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
     i9 = i3;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i15 >>> 0) {
     i9 = i3;
     break;
    }
   }
  } else {
   i9 = i3;
   i1 = i3;
  }
 } else i4 = 4; while (0);
 L11 : do if ((i4 | 0) == 4) if (i3 >>> 0 < i15 >>> 0) {
  i1 = i3;
  while (1) {
   i9 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i9, __ZNSt3__16__clocEv() | 0) | 0)) {
    i9 = i3;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) {
    i9 = i3;
    break;
   }
  }
 } else {
  i9 = i3;
  i1 = i3;
 } while (0);
 i7 = HEAP8[i13 >> 0] | 0;
 i8 = i13 + 4 | 0;
 if (((i7 & 1) == 0 ? (i7 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0) {
  if ((i9 | 0) != (i1 | 0) ? (i2 = i1 + -1 | 0, i9 >>> 0 < i2 >>> 0) : 0) {
   i3 = i9;
   do {
    i7 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i7;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
  }
  i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 16 >> 2] & 127](i10) | 0;
  i5 = i13 + 8 | 0;
  i6 = i13 + 1 | 0;
  if (i9 >>> 0 < i1 >>> 0) {
   i2 = 0;
   i3 = 0;
   i7 = i9;
   while (1) {
    i21 = HEAP8[((HEAP8[i13 >> 0] & 1) == 0 ? i6 : HEAP32[i5 >> 2] | 0) + i3 >> 0] | 0;
    if (i21 << 24 >> 24 > 0 & (i2 | 0) == (i21 << 24 >> 24 | 0)) {
     i21 = HEAP32[i18 >> 2] | 0;
     HEAP32[i18 >> 2] = i21 + 4;
     HEAP32[i21 >> 2] = i4;
     i21 = HEAP8[i13 >> 0] | 0;
     i2 = 0;
     i3 = (i3 >>> 0 < (((i21 & 1) == 0 ? (i21 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i3 | 0;
    }
    i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i12 >> 2] | 0) + 44 >> 2] & 31](i12, HEAP8[i7 >> 0] | 0) | 0;
    i21 = HEAP32[i18 >> 2] | 0;
    HEAP32[i18 >> 2] = i21 + 4;
    HEAP32[i21 >> 2] = i22;
    i7 = i7 + 1 | 0;
    if (i7 >>> 0 >= i1 >>> 0) break; else i2 = i2 + 1 | 0;
   }
  }
  i2 = i17 + (i9 - i14 << 2) | 0;
  i4 = HEAP32[i18 >> 2] | 0;
  if ((i2 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i2 >>> 0 < i3 >>> 0) {
    do {
     i22 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i22;
     i2 = i2 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i2 >>> 0 < i3 >>> 0);
    i3 = i12;
    i2 = i4;
   } else {
    i3 = i12;
    i2 = i4;
   }
  } else i3 = i12;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i9, i1, HEAP32[i18 >> 2] | 0) | 0;
  i2 = (HEAP32[i18 >> 2] | 0) + (i1 - i9 << 2) | 0;
  HEAP32[i18 >> 2] = i2;
  i3 = i12;
 }
 L36 : do if (i1 >>> 0 < i15 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i21 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 44 >> 2] & 31](i12, i2) | 0;
   i22 = HEAP32[i18 >> 2] | 0;
   i2 = i22 + 4 | 0;
   HEAP32[i18 >> 2] = i2;
   HEAP32[i22 >> 2] = i21;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i15 >>> 0) break L36;
  }
  i21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 127](i10) | 0;
  i22 = HEAP32[i18 >> 2] | 0;
  i2 = i22 + 4 | 0;
  HEAP32[i18 >> 2] = i2;
  HEAP32[i22 >> 2] = i21;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i1, i15, i2) | 0;
 i22 = (HEAP32[i18 >> 2] | 0) + (i11 - i1 << 2) | 0;
 HEAP32[i18 >> 2] = i22;
 HEAP32[i19 >> 2] = (i16 | 0) == (i15 | 0) ? i22 : i17 + (i16 - i14 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i20;
 return;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i15, i17, i16, i18, i20, i19, i1) {
 i15 = i15 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i18 = i18 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i21 = 0, i22 = 0, i23 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i14 = i21;
 i13 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13432) | 0;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13572) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i11 >> 2] | 0) + 20 >> 2] & 63](i14, i11);
 HEAP32[i19 >> 2] = i18;
 i1 = HEAP8[i15 >> 0] | 0;
 switch (i1 << 24 >> 24) {
 case 43:
 case 45:
  {
   i12 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, i1) | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i12;
   i4 = i15 + 1 | 0;
   break;
  }
 default:
  i4 = i15;
 }
 i12 = i16;
 L4 : do if ((i12 - i4 | 0) > 1 ? (HEAP8[i4 >> 0] | 0) == 48 : 0) {
  i1 = i4 + 1 | 0;
  switch (HEAP8[i1 >> 0] | 0) {
  case 88:
  case 120:
   break;
  default:
   {
    i5 = 4;
    break L4;
   }
  }
  i10 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, 48) | 0;
  i9 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i9 + 1;
  HEAP8[i9 >> 0] = i10;
  i4 = i4 + 2 | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, HEAP8[i1 >> 0] | 0) | 0;
  i10 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i10 + 1;
  HEAP8[i10 >> 0] = i9;
  if (i4 >>> 0 < i16 >>> 0) {
   i1 = i4;
   while (1) {
    i10 = HEAP8[i1 >> 0] | 0;
    if (!(_isxdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
     i10 = i4;
     break L4;
    }
    i1 = i1 + 1 | 0;
    if (i1 >>> 0 >= i16 >>> 0) {
     i10 = i4;
     break;
    }
   }
  } else {
   i10 = i4;
   i1 = i4;
  }
 } else i5 = 4; while (0);
 L11 : do if ((i5 | 0) == 4) if (i4 >>> 0 < i16 >>> 0) {
  i1 = i4;
  while (1) {
   i10 = HEAP8[i1 >> 0] | 0;
   if (!(_isdigit_l(i10, __ZNSt3__16__clocEv() | 0) | 0)) {
    i10 = i4;
    break L11;
   }
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) {
    i10 = i4;
    break;
   }
  }
 } else {
  i10 = i4;
  i1 = i4;
 } while (0);
 i8 = HEAP8[i14 >> 0] | 0;
 i9 = i14 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  if ((i10 | 0) != (i1 | 0) ? (i3 = i1 + -1 | 0, i10 >>> 0 < i3 >>> 0) : 0) {
   i4 = i10;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i4 >>> 0 < i3 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] & 127](i11) | 0;
  i6 = i14 + 8 | 0;
  i7 = i14 + 1 | 0;
  if (i10 >>> 0 < i1 >>> 0) {
   i3 = 0;
   i4 = 0;
   i8 = i10;
   while (1) {
    i22 = HEAP8[((HEAP8[i14 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i22 << 24 >> 24 > 0 & (i3 | 0) == (i22 << 24 >> 24 | 0)) {
     i22 = HEAP32[i19 >> 2] | 0;
     HEAP32[i19 >> 2] = i22 + 1;
     HEAP8[i22 >> 0] = i5;
     i22 = HEAP8[i14 >> 0] | 0;
     i3 = 0;
     i4 = (i4 >>> 0 < (((i22 & 1) == 0 ? (i22 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i13 >> 2] | 0) + 28 >> 2] & 31](i13, HEAP8[i8 >> 0] | 0) | 0;
    i22 = HEAP32[i19 >> 2] | 0;
    HEAP32[i19 >> 2] = i22 + 1;
    HEAP8[i22 >> 0] = i23;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i1 >>> 0) break; else i3 = i3 + 1 | 0;
   }
  }
  i3 = i18 + (i10 - i15) | 0;
  i4 = HEAP32[i19 >> 2] | 0;
  if ((i3 | 0) != (i4 | 0) ? (i2 = i4 + -1 | 0, i3 >>> 0 < i2 >>> 0) : 0) {
   do {
    i23 = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
    HEAP8[i2 >> 0] = i23;
    i3 = i3 + 1 | 0;
    i2 = i2 + -1 | 0;
   } while (i3 >>> 0 < i2 >>> 0);
   i3 = i13;
  } else i3 = i13;
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 7](i13, i10, i1, HEAP32[i19 >> 2] | 0) | 0;
  HEAP32[i19 >> 2] = (HEAP32[i19 >> 2] | 0) + (i1 - i10);
  i3 = i13;
 }
 L36 : do if (i1 >>> 0 < i16 >>> 0) {
  while (1) {
   i2 = HEAP8[i1 >> 0] | 0;
   if (i2 << 24 >> 24 == 46) break;
   i22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 31](i13, i2) | 0;
   i23 = HEAP32[i19 >> 2] | 0;
   HEAP32[i19 >> 2] = i23 + 1;
   HEAP8[i23 >> 0] = i22;
   i1 = i1 + 1 | 0;
   if (i1 >>> 0 >= i16 >>> 0) break L36;
  }
  i22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i11 >> 2] | 0) + 12 >> 2] & 127](i11) | 0;
  i23 = HEAP32[i19 >> 2] | 0;
  HEAP32[i19 >> 2] = i23 + 1;
  HEAP8[i23 >> 0] = i22;
  i1 = i1 + 1 | 0;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i13 >> 2] | 0) + 32 >> 2] & 7](i13, i1, i16, HEAP32[i19 >> 2] | 0) | 0;
 i23 = (HEAP32[i19 >> 2] | 0) + (i12 - i1) | 0;
 HEAP32[i19 >> 2] = i23;
 HEAP32[i20 >> 2] = (i17 | 0) == (i16 | 0) ? i23 : i18 + (i17 - i15) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i14);
 STACKTOP = i21;
 return;
}

function __ZN7NavCtrl9serializeEv(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i8 = i13 + 152 | 0;
 i12 = i13 + 16 | 0;
 i10 = i13;
 i6 = HEAP32[i9 + 296 >> 2] | 0;
 i7 = i9 + 300 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  i3 = i2;
  while (1) {
   i2 = i3 + -12 | 0;
   HEAP32[i7 >> 2] = i2;
   i5 = HEAP32[i2 >> 2] | 0;
   i4 = i5;
   if (i5) {
    i2 = i3 + -8 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if ((i3 | 0) != (i5 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -16 - i4 | 0) >>> 4) << 4);
    __ZdlPv(i5);
    i2 = HEAP32[i7 >> 2] | 0;
   }
   if ((i2 | 0) == (i6 | 0)) break; else i3 = i2;
  }
 }
 HEAP32[i9 + 308 >> 2] = 0;
 _emscripten_asm_const_1(10, 0) | 0;
 i2 = i12 + 56 | 0;
 i3 = i12 + 4 | 0;
 HEAP32[i12 >> 2] = 6060;
 HEAP32[i2 >> 2] = 6080;
 __ZNSt3__18ios_base4initEPv(i12 + 56 | 0, i3);
 HEAP32[i12 + 128 >> 2] = 0;
 HEAP32[i12 + 132 >> 2] = -1;
 HEAP32[i12 >> 2] = 3056;
 HEAP32[i12 + 56 >> 2] = 3076;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 3108;
 i4 = i12 + 36 | 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i12 + 52 >> 2] = 16;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i3, i8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
 __ZN8Document9serializeERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEE(i9 + 72 | 0, i12);
 if ((HEAP32[i9 + 140 >> 2] | 0) != 0 ? (i1 = HEAP32[i9 >> 2] | 0, i11 = HEAP32[i9 + 4 >> 2] | 0, (i1 | 0) != (i11 | 0)) : 0) do {
  if (HEAP8[(HEAP32[i1 >> 2] | 0) + 16 >> 0] | 0) {
   i9 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i12, 18706, 4) | 0;
   i9 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i9, HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] | 0) | 0, 18711, 1) | 0;
   i9 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i9, HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] | 0) | 0, 20466, 1) | 0;
   i9 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i9, +HEAPF32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0) + 4 >> 2]) | 0, 20466, 1) | 0;
   __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i9, +HEAPF32[(HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] | 0) + 8 >> 2]) | 0, 20456, 2) | 0;
  }
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i11 | 0));
 if ((HEAP8[152] | 0) == 0 ? (___cxa_guard_acquire(152) | 0) != 0 : 0) {
  HEAP32[758] = 0;
  HEAP32[759] = 0;
  HEAP32[760] = 0;
  ___cxa_atexit(178, 3032, ___dso_handle | 0) | 0;
  ___cxa_guard_release(152);
 }
 __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(i10, i3);
 if (!(HEAP8[3032] & 1)) {
  HEAP8[3033] = 0;
  HEAP8[3032] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(3032, 0);
  HEAP32[758] = HEAP32[i10 >> 2];
  HEAP32[759] = HEAP32[i10 + 4 >> 2];
  HEAP32[760] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  i10 = HEAP8[3032] | 0;
  i10 = i10 & 1;
  i10 = i10 << 24 >> 24 == 0;
  i11 = HEAP32[760] | 0;
  i11 = i10 ? 3033 : i11;
  HEAP32[i12 >> 2] = 3056;
  HEAP32[i2 >> 2] = 3076;
  HEAP32[i3 >> 2] = 3108;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
  STACKTOP = i13;
  return i11 | 0;
 } else {
  HEAP8[HEAP32[760] >> 0] = 0;
  HEAP32[759] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(3032, 0);
  HEAP32[758] = HEAP32[i10 >> 2];
  HEAP32[759] = HEAP32[i10 + 4 >> 2];
  HEAP32[760] = HEAP32[i10 + 8 >> 2];
  HEAP32[i10 >> 2] = 0;
  HEAP32[i10 + 4 >> 2] = 0;
  HEAP32[i10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  i10 = HEAP8[3032] | 0;
  i10 = i10 & 1;
  i10 = i10 << 24 >> 24 == 0;
  i11 = HEAP32[760] | 0;
  i11 = i10 ? 3033 : i11;
  HEAP32[i12 >> 2] = 3056;
  HEAP32[i2 >> 2] = 3076;
  HEAP32[i3 >> 2] = 3108;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i4);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
  STACKTOP = i13;
  return i11 | 0;
 }
 return 0;
}

function _try_realloc_chunk(i15, i14) {
 i15 = i15 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i12 = i15 + 4 | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i7 = i13 & -8;
 i9 = i15 + i7 | 0;
 i6 = HEAP32[2545] | 0;
 i1 = i13 & 3;
 if (!((i1 | 0) != 1 & i15 >>> 0 >= i6 >>> 0 & i15 >>> 0 < i9 >>> 0)) _abort();
 i2 = i15 + (i7 | 4) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!(i3 & 1)) _abort();
 if (!i1) {
  if (i14 >>> 0 < 256) {
   i15 = 0;
   return i15 | 0;
  }
  if (i7 >>> 0 >= (i14 + 4 | 0) >>> 0 ? (i7 - i14 | 0) >>> 0 <= HEAP32[2661] << 1 >>> 0 : 0) return i15 | 0;
  i15 = 0;
  return i15 | 0;
 }
 if (i7 >>> 0 >= i14 >>> 0) {
  i1 = i7 - i14 | 0;
  if (i1 >>> 0 <= 15) return i15 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i1 | 3;
  HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i1);
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[2547] | 0)) {
  i1 = (HEAP32[2544] | 0) + i7 | 0;
  if (i1 >>> 0 <= i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i11 = i1 - i14 | 0;
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 1;
  HEAP32[2547] = i15 + i14;
  HEAP32[2544] = i11;
  return i15 | 0;
 }
 if ((i9 | 0) == (HEAP32[2546] | 0)) {
  i2 = (HEAP32[2543] | 0) + i7 | 0;
  if (i2 >>> 0 < i14 >>> 0) {
   i15 = 0;
   return i15 | 0;
  }
  i1 = i2 - i14 | 0;
  if (i1 >>> 0 > 15) {
   HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
   HEAP32[i15 + (i14 + 4) >> 2] = i1 | 1;
   HEAP32[i15 + i2 >> 2] = i1;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] & -2;
   i2 = i15 + i14 | 0;
  } else {
   HEAP32[i12 >> 2] = i13 & 1 | i2 | 2;
   i2 = i15 + (i2 + 4) | 0;
   HEAP32[i2 >> 2] = HEAP32[i2 >> 2] | 1;
   i2 = 0;
   i1 = 0;
  }
  HEAP32[2543] = i1;
  HEAP32[2546] = i2;
  return i15 | 0;
 }
 if (i3 & 2) {
  i15 = 0;
  return i15 | 0;
 }
 i10 = (i3 & -8) + i7 | 0;
 if (i10 >>> 0 < i14 >>> 0) {
  i15 = 0;
  return i15 | 0;
 }
 i11 = i10 - i14 | 0;
 i4 = i3 >>> 3;
 do if (i3 >>> 0 >= 256) {
  i5 = HEAP32[i15 + (i7 + 24) >> 2] | 0;
  i4 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  do if ((i4 | 0) == (i9 | 0)) {
   i2 = i15 + (i7 + 20) | 0;
   i1 = HEAP32[i2 >> 2] | 0;
   if (!i1) {
    i2 = i15 + (i7 + 16) | 0;
    i1 = HEAP32[i2 >> 2] | 0;
    if (!i1) {
     i8 = 0;
     break;
    }
   }
   while (1) {
    i3 = i1 + 20 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (i4) {
     i1 = i4;
     i2 = i3;
     continue;
    }
    i3 = i1 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if (!i4) break; else {
     i1 = i4;
     i2 = i3;
    }
   }
   if (i2 >>> 0 < i6 >>> 0) _abort(); else {
    HEAP32[i2 >> 2] = 0;
    i8 = i1;
    break;
   }
  } else {
   i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
   if (i3 >>> 0 < i6 >>> 0) _abort();
   i1 = i3 + 12 | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i9 | 0)) _abort();
   i2 = i4 + 8 | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i9 | 0)) {
    HEAP32[i1 >> 2] = i4;
    HEAP32[i2 >> 2] = i3;
    i8 = i4;
    break;
   } else _abort();
  } while (0);
  if (i5) {
   i1 = HEAP32[i15 + (i7 + 28) >> 2] | 0;
   i2 = 10468 + (i1 << 2) | 0;
   if ((i9 | 0) == (HEAP32[i2 >> 2] | 0)) {
    HEAP32[i2 >> 2] = i8;
    if (!i8) {
     HEAP32[2542] = HEAP32[2542] & ~(1 << i1);
     break;
    }
   } else {
    if (i5 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort();
    i1 = i5 + 16 | 0;
    if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) HEAP32[i1 >> 2] = i8; else HEAP32[i5 + 20 >> 2] = i8;
    if (!i8) break;
   }
   i2 = HEAP32[2545] | 0;
   if (i8 >>> 0 < i2 >>> 0) _abort();
   HEAP32[i8 + 24 >> 2] = i5;
   i1 = HEAP32[i15 + (i7 + 16) >> 2] | 0;
   do if (i1) if (i1 >>> 0 < i2 >>> 0) _abort(); else {
    HEAP32[i8 + 16 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   } while (0);
   i1 = HEAP32[i15 + (i7 + 20) >> 2] | 0;
   if (i1) if (i1 >>> 0 < (HEAP32[2545] | 0) >>> 0) _abort(); else {
    HEAP32[i8 + 20 >> 2] = i1;
    HEAP32[i1 + 24 >> 2] = i8;
    break;
   }
  }
 } else {
  i3 = HEAP32[i15 + (i7 + 8) >> 2] | 0;
  i2 = HEAP32[i15 + (i7 + 12) >> 2] | 0;
  i1 = 10204 + (i4 << 1 << 2) | 0;
  if ((i3 | 0) != (i1 | 0)) {
   if (i3 >>> 0 < i6 >>> 0) _abort();
   if ((HEAP32[i3 + 12 >> 2] | 0) != (i9 | 0)) _abort();
  }
  if ((i2 | 0) == (i3 | 0)) {
   HEAP32[2541] = HEAP32[2541] & ~(1 << i4);
   break;
  }
  if ((i2 | 0) != (i1 | 0)) {
   if (i2 >>> 0 < i6 >>> 0) _abort();
   i1 = i2 + 8 | 0;
   if ((HEAP32[i1 >> 2] | 0) == (i9 | 0)) i5 = i1; else _abort();
  } else i5 = i2 + 8 | 0;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i5 >> 2] = i3;
 } while (0);
 if (i11 >>> 0 < 16) {
  HEAP32[i12 >> 2] = i10 | i13 & 1 | 2;
  i14 = i15 + (i10 | 4) | 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 1;
  return i15 | 0;
 } else {
  HEAP32[i12 >> 2] = i13 & 1 | i14 | 2;
  HEAP32[i15 + (i14 + 4) >> 2] = i11 | 3;
  i13 = i15 + (i10 | 4) | 0;
  HEAP32[i13 >> 2] = HEAP32[i13 >> 2] | 1;
  _dispose_chunk(i15 + i14 | 0, i11);
  return i15 | 0;
 }
 return 0;
}

function __ZNSt3__127__insertion_sort_incompleteIRPFbPKN3p2t5PointES4_EPPS2_EEbT0_SA_T_(i10, i8, i9) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 switch (i8 - i10 >> 2 | 0) {
 case 2:
  {
   i1 = i8 + -4 | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i9 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i1 >> 2] = i9;
   i10 = 1;
   return i10 | 0;
  }
 case 3:
  {
   i4 = i10 + 4 | 0;
   i1 = i8 + -4 | 0;
   i8 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   i2 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
   if (!i8) {
    if (!i2) {
     i10 = 1;
     return i10 | 0;
    }
    i8 = HEAP32[i4 >> 2] | 0;
    HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i8;
    if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0)) {
     i10 = 1;
     return i10 | 0;
    }
    i9 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
    HEAP32[i4 >> 2] = i9;
    i10 = 1;
    return i10 | 0;
   }
   i3 = HEAP32[i10 >> 2] | 0;
   if (i2) {
    HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i3;
    i10 = 1;
    return i10 | 0;
   }
   HEAP32[i10 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = i3;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, i3) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i10 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i1 >> 2] = i10;
   i10 = 1;
   return i10 | 0;
  }
 case 4:
  {
   __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i10, i10 + 4 | 0, i10 + 8 | 0, i8 + -4 | 0, i9) | 0;
   i10 = 1;
   return i10 | 0;
  }
 case 5:
  {
   i2 = i10 + 4 | 0;
   i3 = i10 + 8 | 0;
   i4 = i10 + 12 | 0;
   i1 = i8 + -4 | 0;
   __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i10, i2, i3, i4, i9) | 0;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i8 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i1 >> 2] = i8;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i4 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i7 = HEAP32[i3 >> 2] | 0;
   i8 = HEAP32[i4 >> 2] | 0;
   HEAP32[i3 >> 2] = i8;
   HEAP32[i4 >> 2] = i7;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](i8, HEAP32[i2 >> 2] | 0) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i7 = HEAP32[i2 >> 2] | 0;
   i8 = HEAP32[i3 >> 2] | 0;
   HEAP32[i2 >> 2] = i8;
   HEAP32[i3 >> 2] = i7;
   if (!(FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](i8, HEAP32[i10 >> 2] | 0) | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i9 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i9;
   i10 = 1;
   return i10 | 0;
  }
 case 1:
 case 0:
  {
   i10 = 1;
   return i10 | 0;
  }
 default:
  {
   i3 = i10 + 8 | 0;
   i1 = i10 + 4 | 0;
   i6 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i10 >> 2] | 0) | 0;
   i2 = FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
   do if (i6) {
    i4 = HEAP32[i10 >> 2] | 0;
    if (i2) {
     HEAP32[i10 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i4;
     break;
    }
    HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i4;
    if (FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i3 >> 2] | 0, i4) | 0) {
     i6 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i6;
    }
   } else if (i2 ? (i5 = HEAP32[i1 >> 2] | 0, i6 = HEAP32[i3 >> 2] | 0, HEAP32[i1 >> 2] = i6, HEAP32[i3 >> 2] = i5, FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](i6, HEAP32[i10 >> 2] | 0) | 0) : 0) {
    i6 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
    HEAP32[i1 >> 2] = i6;
   } while (0);
   i1 = i10 + 12 | 0;
   if ((i1 | 0) == (i8 | 0)) {
    i10 = 1;
    return i10 | 0;
   } else i2 = 0;
   while (1) {
    if (FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i3 >> 2] | 0) | 0) {
     i6 = HEAP32[i1 >> 2] | 0;
     i5 = i6;
     i4 = i1;
     while (1) {
      HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
      if ((i3 | 0) == (i10 | 0)) break;
      i4 = i3 + -4 | 0;
      if (FUNCTION_TABLE_iii[HEAP32[i9 >> 2] & 31](i5, HEAP32[i4 >> 2] | 0) | 0) {
       i11 = i3;
       i3 = i4;
       i4 = i11;
      } else break;
     }
     HEAP32[i3 >> 2] = i6;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == 8) break;
    }
    i3 = i1 + 4 | 0;
    if ((i3 | 0) == (i8 | 0)) {
     i1 = 1;
     i7 = 34;
     break;
    } else {
     i11 = i1;
     i1 = i3;
     i3 = i11;
    }
   }
   if ((i7 | 0) == 34) return i1 | 0;
   i11 = (i1 + 4 | 0) == (i8 | 0);
   return i11 | 0;
  }
 }
 return 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 40 | 0;
 i4 = i22 + 36 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 48 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 337 | 0;
 i13 = i22 + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i2;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP32[i3 >> 2] | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i23 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i23 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 16;
    break;
   }
  } else i26 = 16; while (0);
  if ((i26 | 0) == 16) {
   i26 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i2 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
   i2 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i2 + i5;
  }
  i5 = i3 + 12 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i6 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i1, i16, i13, i2, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i1 = HEAP32[i5 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i1 + 4;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i1 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i1 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i1 >> 2] = i14;
  i1 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i1, i25);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i23 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i26 = 46;
   break;
  } else {
   HEAP32[i24 >> 2] = 0;
   i26 = 44;
   break;
  }
 } else i26 = 44; while (0);
 if ((i26 | 0) == 44 ? i2 : 0) i26 = 46;
 if ((i26 | 0) == 46) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 192 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 32 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13424) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, 27643, 27669, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i1;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i3 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i20 >> 2] = 0;
    i2 = 0;
    i5 = 1;
   } else {
    i2 = i3;
    i5 = 0;
   }
  } else {
   i2 = 0;
   i5 = 1;
  }
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   i4 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i4 = HEAP32[i4 >> 2] | 0;
   if ((i4 | 0) != -1) if (i5) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 16;
    break;
   }
  } else i23 = 16; while (0);
  if ((i23 | 0) == 16) {
   i23 = 0;
   if (i5) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i1 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
   i1 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + i4;
  }
  i5 = i2 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i2 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i4 = HEAP32[i4 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i4, 16, i1, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
   i3 = i2;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 4;
   i3 = i2;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i1 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 29027, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i20 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i23 = 45;
   break;
  } else {
   HEAP32[i21 >> 2] = 0;
   i23 = 43;
   break;
  }
 } else i23 = 43; while (0);
 if ((i23 | 0) == 43 ? i2 : 0) i23 = 45;
 if ((i23 | 0) == 45) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 i11 = i20 + 208 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i2;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i21 >> 2] | 0;
 L4 : while (1) {
  if (i3) {
   i1 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i21 >> 2] = 0;
    i3 = 0;
    i5 = 1;
   } else i5 = 0;
  } else {
   i3 = 0;
   i5 = 1;
  }
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i5) {
    i6 = i4;
    break;
   } else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 16;
    break;
   }
  } else i24 = 16; while (0);
  if ((i24 | 0) == 16) {
   i24 = 0;
   if (i5) {
    i4 = 0;
    break;
   } else i6 = 0;
  }
  i4 = HEAP8[i18 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i4 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
   i2 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i2 + i4;
  }
  i4 = i3 + 12 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i5 = i3 + 16 | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i1, i14, i2, i15, i12, i7, i19, i16, i13, i11) | 0) {
   i4 = i6;
   break;
  }
  i1 = HEAP32[i4 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i5 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   continue;
  } else {
   HEAP32[i4 >> 2] = i1 + 4;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i1 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i1 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i1 >> 2] = i11;
  i1 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i2, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i1, i23);
 if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i2 = 1;
  } else i2 = 0;
 } else i2 = 1;
 do if (i4) {
  i1 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i24 = 46;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i24 = 44;
   break;
  }
 } else i24 = 44; while (0);
 if ((i24 | 0) == 44 ? i2 : 0) i24 = 46;
 if ((i24 | 0) == 46) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i13, i14, i10, i6) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i10 = i10 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i12 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i13 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i11 = 17;
   break;
  } else {
   i11 = 16;
   break;
  } else {
   HEAP32[i13 >> 2] = 0;
   i11 = 14;
   break;
  }
 } else i11 = 14; while (0);
 if ((i11 | 0) == 14) if (i3) i11 = 16; else {
  i2 = 0;
  i11 = 17;
 }
 L22 : do if ((i11 | 0) == 16) {
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 6;
  i1 = 0;
 } else if ((i11 | 0) == 17) {
  i1 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i3 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 31](i10, 2048, i1) | 0)) {
   HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 4;
   i1 = 0;
   break;
  }
  i1 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 31](i10, i1, 0) | 0) << 24 >> 24;
  i3 = HEAP32[i12 >> 2] | 0;
  i4 = i3 + 12 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  if ((i5 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 40 >> 2] & 127](i3) | 0;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  } else {
   HEAP32[i4 >> 2] = i5 + 4;
   i8 = i6;
   i7 = i2;
   i4 = i2;
  }
  while (1) {
   i1 = i1 + -48 | 0;
   i9 = i8 + -1 | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   do if (i2) {
    i3 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAP32[i3 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i5 = 1;
     break;
    } else {
     i5 = (HEAP32[i12 >> 2] | 0) == 0;
     break;
    }
   } else i5 = 1; while (0);
   do if (i4) {
    i2 = HEAP32[i4 + 12 >> 2] | 0;
    if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
    if ((i2 | 0) == -1) {
     HEAP32[i13 >> 2] = 0;
     i4 = 0;
     i6 = 0;
     i2 = 1;
     break;
    } else {
     i4 = i7;
     i6 = i7;
     i2 = (i7 | 0) == 0;
     break;
    }
   } else {
    i4 = i7;
    i6 = 0;
    i2 = 1;
   } while (0);
   i3 = HEAP32[i12 >> 2] | 0;
   if (!((i8 | 0) > 1 & (i5 ^ i2))) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 12 >> 2] & 31](i10, 2048, i2) | 0)) break L22;
   i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 52 >> 2] & 31](i10, i2, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i5 = HEAP32[i3 >> 2] | 0;
   if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   } else {
    HEAP32[i3 >> 2] = i5 + 4;
    i8 = i9;
    i7 = i4;
    i4 = i6;
    continue;
   }
  }
  do if (i3) {
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) == -1) {
    HEAP32[i12 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i12 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  do if (i4) {
   i2 = HEAP32[i4 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0; else i2 = HEAP32[i2 >> 2] | 0;
   if ((i2 | 0) != -1) if (i3) break L22; else break; else {
    HEAP32[i13 >> 2] = 0;
    i11 = 60;
    break;
   }
  } else i11 = 60; while (0);
  if ((i11 | 0) == 60 ? !i3 : 0) break;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 2;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF32[i19 >> 2] = +__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i23, i24, i2, i25, i19) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i24 = i24 | 0;
 i2 = i2 | 0;
 i25 = i25 | 0;
 i19 = i19 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i20 = 0, i21 = 0, i22 = 0, i26 = 0;
 i22 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i12 = i22 + 208 | 0;
 i3 = i22 + 203 | 0;
 i4 = i22 + 202 | 0;
 i21 = i22 + 24 | 0;
 i20 = i22 + 12 | 0;
 i17 = i22 + 8 | 0;
 i18 = i22 + 40 | 0;
 i15 = i22 + 4 | 0;
 i14 = i22;
 i16 = i22 + 201 | 0;
 i13 = i22 + 200 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i21, i2, i12, i3, i4);
 HEAP32[i20 >> 2] = 0;
 HEAP32[i20 + 4 >> 2] = 0;
 HEAP32[i20 + 8 >> 2] = 0;
 if (!(HEAP8[i20 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i1, 0);
 i9 = i20 + 8 | 0;
 i10 = i20 + 1 | 0;
 i6 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
 HEAP32[i17 >> 2] = i6;
 HEAP32[i15 >> 2] = i18;
 HEAP32[i14 >> 2] = 0;
 HEAP8[i16 >> 0] = 1;
 HEAP8[i13 >> 0] = 69;
 i11 = i20 + 4 | 0;
 i8 = HEAP8[i3 >> 0] | 0;
 i7 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP32[i23 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i23 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i24 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i24 >> 2] = 0;
    i26 = 13;
    break;
   }
  } else i26 = 13; while (0);
  if ((i26 | 0) == 13) {
   i26 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i20 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i11 >> 2] | 0;
  if ((HEAP32[i17 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i5 << 1, 0);
   if (!(HEAP8[i20 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i20 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i20, i2, 0);
   i3 = (HEAP8[i20 >> 0] & 1) == 0 ? i10 : HEAP32[i9 >> 2] | 0;
   HEAP32[i17 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i2 & 255, i16, i13, i3, i17, i8, i7, i21, i18, i15, i14, i12) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i13 = HEAP8[i21 >> 0] | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if (!((HEAP8[i16 >> 0] | 0) == 0 ? 1 : (((i13 & 1) == 0 ? (i13 & 255) >>> 1 : HEAP32[i21 + 4 >> 2] | 0) | 0) == 0) ? (i2 - i18 | 0) < 160 : 0) {
  i14 = HEAP32[i14 >> 2] | 0;
  i16 = i2 + 4 | 0;
  HEAP32[i15 >> 2] = i16;
  HEAP32[i2 >> 2] = i14;
  i2 = i16;
 }
 HEAPF64[i19 >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i3, HEAP32[i17 >> 2] | 0, i25);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i21, i18, i2, i25);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i23 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i24 >> 2] = 0;
   i26 = 38;
   break;
  }
  if (!i1) i26 = 39;
 } else i26 = 38; while (0);
 if ((i26 | 0) == 38 ? i1 : 0) i26 = 39;
 if ((i26 | 0) == 39) HEAP32[i25 >> 2] = HEAP32[i25 >> 2] | 2;
 i26 = HEAP32[i23 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i20);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i21);
 STACKTOP = i22;
 return i26 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 i15 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 HEAP32[i17 >> 2] = i15;
 HEAP32[i17 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv(i1, i20, i21, i2, i22, i16) {
 i1 = i1 | 0;
 i20 = i20 | 0;
 i21 = i21 | 0;
 i2 = i2 | 0;
 i22 = i22 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0, i18 = 0, i19 = 0, i23 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i15 = i19;
 i8 = i19 + 208 | 0;
 i18 = i19 + 32 | 0;
 i12 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i14 = i19 + 12 | 0;
 i10 = i19 + 48 | 0;
 i11 = i19 + 8 | 0;
 i9 = i19 + 4 | 0;
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13432) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, 27643, 27669, i8) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 HEAP32[i17 >> 2] = 0;
 HEAP32[i17 + 4 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 if (!(HEAP8[i17 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i1, 0);
 i12 = i17 + 8 | 0;
 i13 = i17 + 1 | 0;
 i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 HEAP32[i14 >> 2] = i2;
 HEAP32[i11 >> 2] = i10;
 HEAP32[i9 >> 2] = 0;
 i7 = i17 + 4 | 0;
 i1 = HEAP32[i20 >> 2] | 0;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i20 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i4 = (i1 | 0) == 0;
  i3 = HEAP32[i21 >> 2] | 0;
  do if (i3) {
   if ((HEAP32[i3 + 12 >> 2] | 0) != (HEAP32[i3 + 16 >> 2] | 0)) if (i4) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) != -1) if (i4) break; else break L4; else {
    HEAP32[i21 >> 2] = 0;
    i23 = 13;
    break;
   }
  } else i23 = 13; while (0);
  if ((i23 | 0) == 13) {
   i23 = 0;
   if (i4) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i4 = HEAP8[i17 >> 0] | 0;
  i4 = (i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i7 >> 2] | 0;
  if ((HEAP32[i14 >> 2] | 0) == (i2 + i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i4 << 1, 0);
   if (!(HEAP8[i17 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i17 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, i2, 0);
   i2 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
   HEAP32[i14 >> 2] = i2 + i4;
  }
  i5 = i1 + 12 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i4 | 0) == (HEAP32[i6 >> 2] | 0)) i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i4 = HEAPU8[i4 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i4 & 255, 16, i2, i14, i9, 0, i18, i10, i11, i8) | 0) break;
  i3 = HEAP32[i5 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i3 + 1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i17, (HEAP32[i14 >> 2] | 0) - i2 | 0, 0);
 i13 = (HEAP8[i17 >> 0] & 1) == 0 ? i13 : HEAP32[i12 >> 2] | 0;
 i14 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i15 >> 2] = i16;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i13, i14, 29027, i15) | 0) != 1) HEAP32[i22 >> 2] = 4;
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i20 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i3) {
  if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i23 = 37;
   break;
  }
  if (!i1) i23 = 38;
 } else i23 = 37; while (0);
 if ((i23 | 0) == 37 ? i1 : 0) i23 = 38;
 if ((i23 | 0) == 38) HEAP32[i22 >> 2] = HEAP32[i22 >> 2] | 2;
 i23 = HEAP32[i20 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i17);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 STACKTOP = i19;
 return i23 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP16[i17 >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i1, i21, i22, i2, i23, i17) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i23 = i23 | 0;
 i17 = i17 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i18 = 0, i19 = 0, i20 = 0, i24 = 0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i11 = i20 + 202 | 0;
 i3 = i20 + 200 | 0;
 i19 = i20 + 24 | 0;
 i18 = i20 + 12 | 0;
 i15 = i20 + 8 | 0;
 i16 = i20 + 40 | 0;
 i13 = i20 + 4 | 0;
 i12 = i20;
 i14 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i2) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i19, i2, i11, i3);
 HEAP32[i18 >> 2] = 0;
 HEAP32[i18 + 4 >> 2] = 0;
 HEAP32[i18 + 8 >> 2] = 0;
 if (!(HEAP8[i18 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i1, 0);
 i8 = i18 + 8 | 0;
 i9 = i18 + 1 | 0;
 i6 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
 HEAP32[i15 >> 2] = i6;
 HEAP32[i13 >> 2] = i16;
 HEAP32[i12 >> 2] = 0;
 i10 = i18 + 4 | 0;
 i7 = HEAP8[i3 >> 0] | 0;
 i1 = HEAP32[i21 >> 2] | 0;
 i3 = i6;
 L4 : while (1) {
  if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
    HEAP32[i21 >> 2] = 0;
    i1 = 0;
   }
  } else i1 = 0;
  i2 = (i1 | 0) == 0;
  i4 = HEAP32[i22 >> 2] | 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) != (HEAP32[i4 + 16 >> 2] | 0)) if (i2) break; else break L4;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) != -1) if (i2) break; else break L4; else {
    HEAP32[i22 >> 2] = 0;
    i24 = 13;
    break;
   }
  } else i24 = 13; while (0);
  if ((i24 | 0) == 13) {
   i24 = 0;
   if (i2) {
    i4 = 0;
    break;
   } else i4 = 0;
  }
  i5 = HEAP8[i18 >> 0] | 0;
  i5 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 >> 2] | 0;
  if ((HEAP32[i15 >> 2] | 0) == (i3 + i5 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i5 << 1, 0);
   if (!(HEAP8[i18 >> 0] & 1)) i2 = 10; else i2 = (HEAP32[i18 >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i18, i2, 0);
   i3 = (HEAP8[i18 >> 0] & 1) == 0 ? i9 : HEAP32[i8 >> 2] | 0;
   HEAP32[i15 >> 2] = i3 + i5;
  }
  i5 = i1 + 12 | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  i6 = i1 + 16 | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i2 = HEAPU8[i2 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i2 & 255, i14, i3, i15, i12, i7, i19, i16, i13, i11) | 0) break;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i6 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i5 >> 2] = i2 + 1;
   continue;
  }
 }
 i11 = HEAP8[i19 >> 0] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((((i11 & 1) == 0 ? (i11 & 255) >>> 1 : HEAP32[i19 + 4 >> 2] | 0) | 0) != 0 ? (i2 - i16 | 0) < 160 : 0) {
  i11 = HEAP32[i12 >> 2] | 0;
  i12 = i2 + 4 | 0;
  HEAP32[i13 >> 2] = i12;
  HEAP32[i2 >> 2] = i11;
  i2 = i12;
 }
 HEAP32[i17 >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i3, HEAP32[i15 >> 2] | 0, i23, i14) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i19, i16, i2, i23);
 if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
  }
 } else i1 = 0;
 i1 = (i1 | 0) == 0;
 do if (i4) {
  if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i24 = 38;
   break;
  }
  if (!i1) i24 = 39;
 } else i24 = 38; while (0);
 if ((i24 | 0) == 38 ? i1 : 0) i24 = 39;
 if ((i24 | 0) == 39) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i24 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i18);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i19);
 STACKTOP = i20;
 return i24 | 0;
}

function __ZN8Document14runTriangulateEv(i18) {
 i18 = i18 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i19 = 0;
 i19 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = i19 + 28 | 0;
 i17 = i19 + 16 | 0;
 i15 = i19 + 8 | 0;
 i16 = i19;
 i8 = i18 + 132 | 0;
 __ZN4Mesh5clearEv(i8);
 __Z6runTriP6MapDefR4Mesh(i18 + 12 | 0, i8);
 __ZN4Mesh10connectTriEv(i8);
 __ZN8Document9clearObstEv(i18);
 i12 = i18 + 108 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i2 = i18 + 112 | 0;
 if ((HEAP32[i2 >> 2] | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i1;
 i10 = i18 + 160 | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 i11 = i18 + 156 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) __ZNSt3__16vectorI12MultiSegmentNS_9allocatorIS1_EEE8__appendEj(i12, (i2 - i1 | 0) / 28 | 0);
 i5 = i18 + 120 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i7 = i18 + 124 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i3 = i6;
 if ((i1 | 0) == (i6 | 0)) i4 = i6; else {
  i4 = i1 + (~((i1 + -4 - i3 | 0) >>> 2) << 2) | 0;
  HEAP32[i7 >> 2] = i4;
 }
 i2 = ((HEAP32[i18 + 136 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) | 0) / 12 | 0;
 i1 = i4 - i3 >> 2;
 if (i2 >>> 0 <= i1 >>> 0) {
  if (i2 >>> 0 < i1 >>> 0 ? (i9 = i6 + (i2 << 2) | 0, (i4 | 0) != (i9 | 0)) : 0) HEAP32[i7 >> 2] = i4 + (~((i4 + -4 - i9 | 0) >>> 2) << 2);
 } else __ZNSt3__16vectorIP13ISubGoalMakerNS_9allocatorIS2_EEE8__appendEj(i5, i2 - i1 | 0);
 i1 = HEAP32[i11 >> 2] | 0;
 if ((HEAP32[i10 >> 2] | 0) != (i1 | 0)) {
  i3 = i13 + 4 | 0;
  i4 = i13 + 8 | 0;
  i2 = 0;
  do {
   i9 = (HEAP32[i12 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i1 + (i2 * 28 | 0);
   HEAP32[i3 >> 2] = i18;
   HEAP32[i4 >> 2] = i9;
   __ZN13MultiSegMaker12makeSegmentsEv(i13);
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i11 >> 2] | 0;
  } while (i2 >>> 0 < (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0) >>> 0);
 }
 i1 = i18 + 180 | 0;
 i10 = i18 + 184 | 0;
 __ZNSt3__16__treeINS_12__value_typeIfNS_6vectorI4Vec2NS_9allocatorIS3_EEEEEENS_19__map_value_compareIfS7_NS_4lessIfEELb1EEENS4_IS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(i1, HEAP32[i10 >> 2] | 0);
 HEAP32[i18 + 188 >> 2] = 0;
 HEAP32[i1 >> 2] = i10;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i17 >> 2] = 0;
 i10 = i17 + 4 | 0;
 HEAP32[i10 >> 2] = 0;
 HEAP32[i17 + 8 >> 2] = 0;
 i1 = HEAP32[i18 >> 2] | 0;
 i9 = i18 + 4 | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) != (i5 | 0)) {
  i6 = i17 + 8 | 0;
  i3 = 0;
  i4 = 0;
  while (1) {
   i2 = (HEAP32[i1 >> 2] | 0) + 28 | 0;
   if ((i3 | 0) == (i4 | 0)) __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(i17, i2); else {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i10 >> 2] = i3 + 4;
   }
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i5 | 0)) break;
   i3 = HEAP32[i10 >> 2] | 0;
   i4 = HEAP32[i6 >> 2] | 0;
  }
  i1 = HEAP32[i17 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) do {
   __ZN8Document14addAgentRadiusEf(i18, +HEAPF32[i1 >> 2]);
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP32[i18 + 72 >> 2] | 0;
 i4 = HEAP32[i18 + 76 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) {
  i5 = i15 + 4 | 0;
  i6 = i16 + 4 | 0;
  i7 = i18 + 216 | 0;
  i8 = i18 + 204 | 0;
  i2 = 0;
  do {
   i3 = HEAP32[i1 >> 2] | 0;
   if (((i3 | 0) != 0 ? (i14 = ___dynamic_cast(i3, 368, 376, 0) | 0, (i14 | 0) != 0) : 0) ? (HEAPF32[i15 >> 2] = 0.0, HEAPF32[i5 >> 2] = 0.0, HEAPF32[i16 >> 2] = 0.0, HEAPF32[i6 >> 2] = 0.0, FUNCTION_TABLE_iiidii[HEAP32[(HEAP32[i14 >> 2] | 0) + 12 >> 2] & 3](i14, (HEAP32[i7 >> 2] | 0) + 12 | 0, 15.0, i15, i16) | 0, (i2 | 0) < 97) : 0) {
    i13 = i15;
    i12 = HEAP32[i13 + 4 >> 2] | 0;
    i11 = (HEAP32[(HEAP32[i8 >> 2] | 0) + (i2 << 2) >> 2] | 0) + 4 | 0;
    HEAP32[i11 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i11 + 4 >> 2] = i12;
    i11 = i16;
    i12 = HEAP32[i11 + 4 >> 2] | 0;
    i13 = (HEAP32[(HEAP32[i8 >> 2] | 0) + (i2 + 1 << 2) >> 2] | 0) + 4 | 0;
    HEAP32[i13 >> 2] = HEAP32[i11 >> 2];
    HEAP32[i13 + 4 >> 2] = i12;
    i2 = i2 + 2 | 0;
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i4 | 0));
 }
 i1 = HEAP32[i18 >> 2] | 0;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  __ZN8Document10updatePlanEP5Agent(i18, HEAP32[i1 >> 2] | 0);
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i2 | 0));
 i1 = HEAP32[i17 >> 2] | 0;
 if (!i1) {
  STACKTOP = i19;
  return;
 }
 i2 = HEAP32[i10 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i10 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 STACKTOP = i19;
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i12, i14, i15, i11, i6) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 i11 = i11 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i1 = HEAP32[i12 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i12 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i12 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i14 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i14 >> 2] = 0;
   i13 = 11;
   break;
  }
  if (i2) i13 = 13; else i13 = 12;
 } else i13 = 11; while (0);
 if ((i13 | 0) == 11) if (i2) i13 = 12; else {
  i1 = 0;
  i13 = 13;
 }
 L16 : do if ((i13 | 0) == 12) {
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 6;
  i1 = 0;
 } else if ((i13 | 0) == 13) {
  i2 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i3 >> 0] | 0;
  i3 = i2 & 255;
  if (i3 << 24 >> 24 > -1 ? (i10 = i11 + 8 | 0, (HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048) != 0) : 0) {
   i5 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 31](i11, i3, 0) | 0) << 24 >> 24;
   i2 = HEAP32[i12 >> 2] | 0;
   i3 = i2 + 12 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   } else {
    HEAP32[i3 >> 2] = i4 + 1;
    i8 = i6;
    i7 = i1;
    i6 = i1;
    i1 = i5;
   }
   while (1) {
    i1 = i1 + -48 | 0;
    i9 = i8 + -1 | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    do if (i2) {
     if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
      HEAP32[i12 >> 2] = 0;
      i2 = 0;
      break;
     } else {
      i2 = HEAP32[i12 >> 2] | 0;
      break;
     }
    } else i2 = 0; while (0);
    i4 = (i2 | 0) == 0;
    if (i6) if ((HEAP32[i6 + 12 >> 2] | 0) == (HEAP32[i6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i6 >> 2] | 0) + 36 >> 2] & 127](i6) | 0) == -1) {
     HEAP32[i14 >> 2] = 0;
     i3 = 0;
     i6 = 0;
    } else {
     i3 = i7;
     i6 = i7;
    } else i3 = i7; else {
     i3 = i7;
     i6 = 0;
    }
    i2 = HEAP32[i12 >> 2] | 0;
    if (!((i8 | 0) > 1 & (i4 ^ (i6 | 0) == 0))) break;
    i4 = HEAP32[i2 + 12 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i2 = HEAPU8[i4 >> 0] | 0;
    i4 = i2 & 255;
    if (i4 << 24 >> 24 <= -1) break L16;
    if (!(HEAP16[(HEAP32[i10 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 2048)) break L16;
    i1 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 36 >> 2] & 31](i11, i4, 0) | 0) << 24 >> 24) + (i1 * 10 | 0) | 0;
    i2 = HEAP32[i12 >> 2] | 0;
    i4 = i2 + 12 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 40 >> 2] & 127](i2) | 0;
     i8 = i9;
     i7 = i3;
     continue;
    } else {
     HEAP32[i4 >> 2] = i5 + 1;
     i8 = i9;
     i7 = i3;
     continue;
    }
   }
   do if (i2) {
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1) {
     HEAP32[i12 >> 2] = 0;
     i2 = 0;
     break;
    } else {
     i2 = HEAP32[i12 >> 2] | 0;
     break;
    }
   } else i2 = 0; while (0);
   i2 = (i2 | 0) == 0;
   do if (i3) {
    if ((HEAP32[i3 + 12 >> 2] | 0) == (HEAP32[i3 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0) == -1 : 0) {
     HEAP32[i14 >> 2] = 0;
     i13 = 50;
     break;
    }
    if (i2) break L16;
   } else i13 = 50; while (0);
   if ((i13 | 0) == 50 ? !i2 : 0) break;
   HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 2;
   break;
  }
  HEAP32[i15 >> 2] = HEAP32[i15 >> 2] | 4;
  i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__16locale5__impC2Ej(i4, i1) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 13408;
 i2 = i4 + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i4 + 144 | 0, 29030, 1);
 i2 = HEAP32[i2 >> 2] | 0;
 i3 = i4 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 HEAP32[495] = 0;
 HEAP32[494] = 12336;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i4, 1976);
 HEAP32[497] = 0;
 HEAP32[496] = 12376;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i4, 1984);
 __ZNSt3__15ctypeIcEC2EPKtbj(1992, 0, 0, 1);
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i4, 1992);
 HEAP32[503] = 0;
 HEAP32[502] = 13696;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i4, 2008);
 HEAP32[505] = 0;
 HEAP32[504] = 13764;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i4, 2016);
 HEAP32[507] = 0;
 HEAP32[506] = 13516;
 HEAP32[508] = __ZNSt3__16__clocEv() | 0;
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i4, 2024);
 HEAP32[511] = 0;
 HEAP32[510] = 13812;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i4, 2040);
 HEAP32[513] = 0;
 HEAP32[512] = 13860;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i4, 2048);
 __ZNSt3__18numpunctIcEC2Ej(2056, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i4, 2056);
 __ZNSt3__18numpunctIwEC2Ej(2080, 1);
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i4, 2080);
 HEAP32[529] = 0;
 HEAP32[528] = 12416;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2112);
 HEAP32[531] = 0;
 HEAP32[530] = 12488;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2120);
 HEAP32[533] = 0;
 HEAP32[532] = 12560;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2128);
 HEAP32[535] = 0;
 HEAP32[534] = 12620;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2136);
 HEAP32[537] = 0;
 HEAP32[536] = 12928;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i4, 2144);
 HEAP32[539] = 0;
 HEAP32[538] = 12992;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i4, 2152);
 HEAP32[541] = 0;
 HEAP32[540] = 13056;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i4, 2160);
 HEAP32[543] = 0;
 HEAP32[542] = 13120;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i4, 2168);
 HEAP32[545] = 0;
 HEAP32[544] = 13184;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2176);
 HEAP32[547] = 0;
 HEAP32[546] = 13220;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2184);
 HEAP32[549] = 0;
 HEAP32[548] = 13256;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2192);
 HEAP32[551] = 0;
 HEAP32[550] = 13292;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2200);
 HEAP32[553] = 0;
 HEAP32[552] = 12680;
 HEAP32[554] = 12728;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2208);
 HEAP32[557] = 0;
 HEAP32[556] = 12772;
 HEAP32[558] = 12820;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2224);
 HEAP32[561] = 0;
 HEAP32[560] = 13676;
 HEAP32[562] = __ZNSt3__16__clocEv() | 0;
 HEAP32[560] = 12864;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i4, 2240);
 HEAP32[565] = 0;
 HEAP32[564] = 13676;
 HEAP32[566] = __ZNSt3__16__clocEv() | 0;
 HEAP32[564] = 12896;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i4, 2256);
 HEAP32[569] = 0;
 HEAP32[568] = 13328;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i4, 2272);
 HEAP32[571] = 0;
 HEAP32[570] = 13368;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i4, 2280);
 return;
}

function _mbsrtowcs(i5, i10, i1, i3) {
 i5 = i5 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((i3 | 0) != 0 ? (i4 = HEAP32[i3 >> 2] | 0, (i4 | 0) != 0) : 0) if (!i5) {
  i3 = i1;
  i6 = i2;
  i9 = 16;
 } else {
  HEAP32[i3 >> 2] = 0;
  i8 = i5;
  i3 = i1;
  i7 = i4;
  i9 = 37;
 } else if (!i5) {
  i3 = i1;
  i9 = 7;
 } else {
  i4 = i5;
  i3 = i1;
  i9 = 6;
 }
 L7 : while (1) if ((i9 | 0) == 6) {
  if (!i3) {
   i9 = 26;
   break;
  } else i5 = i4;
  while (1) {
   i4 = HEAP8[i2 >> 0] | 0;
   do if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? i3 >>> 0 > 4 & (i2 & 3 | 0) == 0 : 0) {
    i6 = i2;
    while (1) {
     i2 = HEAP32[i6 >> 2] | 0;
     if ((i2 + -16843009 | i2) & -2139062144) {
      i4 = i2;
      i2 = i6;
      i9 = 32;
      break;
     }
     HEAP32[i5 >> 2] = i2 & 255;
     HEAP32[i5 + 4 >> 2] = HEAPU8[i6 + 1 >> 0];
     HEAP32[i5 + 8 >> 2] = HEAPU8[i6 + 2 >> 0];
     i2 = i6 + 4 | 0;
     i4 = i5 + 16 | 0;
     HEAP32[i5 + 12 >> 2] = HEAPU8[i6 + 3 >> 0];
     i3 = i3 + -4 | 0;
     if (i3 >>> 0 > 4) {
      i5 = i4;
      i6 = i2;
     } else {
      i9 = 31;
      break;
     }
    }
    if ((i9 | 0) == 31) {
     i5 = i4;
     i4 = HEAP8[i2 >> 0] | 0;
     break;
    } else if ((i9 | 0) == 32) {
     i4 = i4 & 255;
     break;
    }
   } while (0);
   i4 = i4 & 255;
   if ((i4 + -1 | 0) >>> 0 >= 127) break;
   i2 = i2 + 1 | 0;
   HEAP32[i5 >> 2] = i4;
   i3 = i3 + -1 | 0;
   if (!i3) {
    i9 = 26;
    break L7;
   } else i5 = i5 + 4 | 0;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i8 = i5;
  i7 = HEAP32[6368 + (i4 << 2) >> 2] | 0;
  i2 = i2 + 1 | 0;
  i9 = 37;
  continue;
 } else if ((i9 | 0) == 7) {
  i4 = HEAP8[i2 >> 0] | 0;
  if (((i4 & 255) + -1 | 0) >>> 0 < 127 ? (i2 & 3 | 0) == 0 : 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   if (!((i4 + -16843009 | i4) & -2139062144)) do {
    i2 = i2 + 4 | 0;
    i3 = i3 + -4 | 0;
    i4 = HEAP32[i2 >> 2] | 0;
   } while (((i4 + -16843009 | i4) & -2139062144 | 0) == 0);
   i4 = i4 & 255;
  }
  i4 = i4 & 255;
  if ((i4 + -1 | 0) >>> 0 < 127) {
   i3 = i3 + -1 | 0;
   i2 = i2 + 1 | 0;
   i9 = 7;
   continue;
  }
  i4 = i4 + -194 | 0;
  if (i4 >>> 0 > 50) {
   i9 = 48;
   break;
  }
  i4 = HEAP32[6368 + (i4 << 2) >> 2] | 0;
  i6 = i2 + 1 | 0;
  i9 = 16;
  continue;
 } else if ((i9 | 0) == 16) {
  i9 = (HEAPU8[i6 >> 0] | 0) >>> 3;
  if ((i9 + -16 | i9 + (i4 >> 26)) >>> 0 > 7) {
   i9 = 17;
   break;
  }
  i2 = i6 + 1 | 0;
  if (i4 & 33554432) {
   if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
    i9 = 20;
    break;
   }
   i2 = i6 + 2 | 0;
   if (i4 & 524288) {
    if ((HEAP8[i2 >> 0] & -64) << 24 >> 24 != -128) {
     i9 = 23;
     break;
    }
    i2 = i6 + 3 | 0;
   }
  }
  i3 = i3 + -1 | 0;
  i9 = 7;
  continue;
 } else if ((i9 | 0) == 37) {
  i4 = HEAPU8[i2 >> 0] | 0;
  i9 = i4 >>> 3;
  if ((i9 + -16 | i9 + (i7 >> 26)) >>> 0 > 7) {
   i9 = 38;
   break;
  }
  i6 = i2 + 1 | 0;
  i5 = i4 + -128 | i7 << 6;
  if ((i5 | 0) < 0) {
   i4 = HEAPU8[i6 >> 0] | 0;
   if ((i4 & 192 | 0) != 128) {
    i9 = 41;
    break;
   }
   i6 = i2 + 2 | 0;
   i5 = i4 + -128 | i5 << 6;
   if ((i5 | 0) < 0) {
    i4 = HEAPU8[i6 >> 0] | 0;
    if ((i4 & 192 | 0) != 128) {
     i9 = 44;
     break;
    }
    i5 = i4 + -128 | i5 << 6;
    i2 = i2 + 3 | 0;
   } else i2 = i6;
  } else i2 = i6;
  HEAP32[i8 >> 2] = i5;
  i4 = i8 + 4 | 0;
  i3 = i3 + -1 | 0;
  i9 = 6;
  continue;
 }
 if ((i9 | 0) == 17) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 20) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 23) {
  i2 = i6 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 26) HEAP32[i10 >> 2] = i2; else if ((i9 | 0) == 38) {
  i5 = i8;
  i4 = i7;
  i2 = i2 + -1 | 0;
  i9 = 47;
 } else if ((i9 | 0) == 41) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 } else if ((i9 | 0) == 44) {
  i3 = i8;
  i1 = i2 + -1 | 0;
  i9 = 52;
 }
 if ((i9 | 0) == 47) if (!i4) i9 = 48; else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 48) if (!(HEAP8[i2 >> 0] | 0)) {
  if (i5) {
   HEAP32[i5 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
  }
  i1 = i1 - i3 | 0;
 } else {
  i3 = i5;
  i1 = i2;
  i9 = 52;
 }
 if ((i9 | 0) == 52) {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  if (!i3) i1 = -1; else {
   HEAP32[i10 >> 2] = i1;
   i1 = -1;
  }
 }
 return i1 | 0;
}

function __Z15orderPerimitersRNSt3__16vectorI8PolylineNS_9allocatorIS1_EEEERNS0_IPS1_NS2_IS6_EEEE(i23, i25) {
 i23 = i23 | 0;
 i25 = i25 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i26 = 0, i27 = 0, d28 = 0.0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i21 = i27;
 i24 = i27 + 4 | 0;
 i22 = i23 + 4 | 0;
 i16 = HEAP32[i22 >> 2] | 0;
 i17 = HEAP32[i23 >> 2] | 0;
 i3 = (i16 - i17 | 0) / 28 | 0;
 HEAP32[i24 >> 2] = 0;
 i26 = i24 + 4 | 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 if ((i16 | 0) != (i17 | 0)) {
  if (i3 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i24);
  i2 = __Znwj(i3 << 3) | 0;
  HEAP32[i26 >> 2] = i2;
  HEAP32[i24 >> 2] = i2;
  i1 = i2 + (i3 << 3) | 0;
  HEAP32[i24 + 8 >> 2] = i1;
  i4 = i2;
  while (1) {
   HEAP32[i4 >> 2] = 0;
   HEAP32[i4 + 4 >> 2] = 0;
   i3 = i3 + -1 | 0;
   if (!i3) break; else i4 = i4 + 8 | 0;
  }
  HEAP32[i26 >> 2] = i1;
  i3 = HEAP32[i22 >> 2] | 0;
  i17 = HEAP32[i23 >> 2] | 0;
  i4 = (i3 | 0) == (i17 | 0);
  if (!i4) {
   i5 = (i3 - i17 | 0) / 28 | 0;
   i6 = 0;
   do {
    HEAP32[i2 + (i6 << 3) + 4 >> 2] = i17 + (i6 * 28 | 0);
    i6 = i6 + 1 | 0;
   } while (i6 >>> 0 < i5 >>> 0);
   if (!i4) {
    i8 = (i3 - i17 | 0) / 28 | 0;
    i15 = 0;
    do {
     i14 = i2 + (i15 << 3) | 0;
     i13 = i17 + (i15 * 28 | 0) | 0;
     i16 = 0;
     do {
      if ((i16 | 0) != (i15 | 0) ? (i18 = HEAP32[HEAP32[i13 >> 2] >> 2] | 0, i19 = HEAP32[i17 + (i16 * 28 | 0) >> 2] | 0, i7 = (HEAP32[i17 + (i16 * 28 | 0) + 4 >> 2] | 0) - i19 | 0, i20 = i7 >> 2, (i7 | 0) > 0) : 0) {
       d11 = +HEAPF32[i18 + 8 >> 2];
       d12 = +HEAPF32[i18 + 4 >> 2];
       i4 = 0;
       i3 = 0;
       L21 : do {
        while (1) {
         i5 = HEAP32[i19 + (i4 << 2) >> 2] | 0;
         d10 = +HEAPF32[i5 + 8 >> 2];
         i4 = i4 + 1 | 0;
         i6 = HEAP32[i19 + (((i4 | 0) % (i20 | 0) | 0) << 2) >> 2] | 0;
         d9 = +HEAPF32[i6 + 8 >> 2];
         if (!(d10 <= d11)) {
          if (d9 <= d11) {
           i7 = 19;
           break;
          }
         } else if (d9 > d11) {
          i7 = 17;
          break;
         }
         if ((i4 | 0) >= (i20 | 0)) break L21;
        }
        if ((i7 | 0) == 17) {
         d28 = +HEAPF32[i5 + 4 >> 2];
         i5 = (~~((d11 - d10) * (+HEAPF32[i6 + 4 >> 2] - d28) - (d9 - d10) * (d12 - d28)) | 0) > 0 & 1;
        } else if ((i7 | 0) == 19) {
         d28 = +HEAPF32[i5 + 4 >> 2];
         i5 = ~~((d11 - d10) * (+HEAPF32[i6 + 4 >> 2] - d28) - (d9 - d10) * (d12 - d28)) >> 31;
        }
        i3 = i5 + i3 | 0;
       } while ((i4 | 0) < (i20 | 0));
       if (i3) HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
      }
      i16 = i16 + 1 | 0;
     } while (i16 >>> 0 < i8 >>> 0);
     i15 = i15 + 1 | 0;
    } while (i15 >>> 0 < i8 >>> 0);
   }
  }
 } else {
  i2 = 0;
  i1 = 0;
 }
 __ZNSt3__16__sortIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEvT0_S9_T_(i2, i1, i21);
 i4 = HEAP32[i22 >> 2] | 0;
 i2 = HEAP32[i23 >> 2] | 0;
 i5 = (i4 - i2 | 0) / 28 | 0;
 i8 = i25 + 8 | 0;
 i6 = HEAP32[i25 >> 2] | 0;
 i1 = i6;
 if ((HEAP32[i8 >> 2] | 0) - i1 >> 2 >>> 0 < i5 >>> 0) {
  i7 = i25 + 4 | 0;
  i3 = (HEAP32[i7 >> 2] | 0) - i1 | 0;
  if ((i4 | 0) == (i2 | 0)) i1 = 0; else i1 = __Znwj(i5 << 2) | 0;
  _memcpy(i1 | 0, i6 | 0, i3 | 0) | 0;
  HEAP32[i25 >> 2] = i1;
  HEAP32[i7 >> 2] = i1 + (i3 >> 2 << 2);
  HEAP32[i8 >> 2] = i1 + (i5 << 2);
  if (i6) __ZdlPv(i6);
 }
 i1 = HEAP32[i24 >> 2] | 0;
 i4 = HEAP32[i26 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) {
  i5 = i25 + 4 | 0;
  do {
   i2 = i1 + 4 | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i8 >> 2] | 0)) __ZNSt3__16vectorIP8PolylineNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i25, i2); else {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 4;
   }
   i1 = i1 + 8 | 0;
  } while ((i1 | 0) != (i4 | 0));
  i1 = HEAP32[i24 >> 2] | 0;
 }
 if (!i1) {
  STACKTOP = i27;
  return;
 }
 i2 = HEAP32[i26 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i26 >> 2] = i2 + (~((i2 + -8 - i1 | 0) >>> 3) << 3);
 __ZdlPv(i1);
 STACKTOP = i27;
 return;
}

function ___udivmoddi4(i5, i6, i8, i11, i13) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i11 = i11 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i9 = 0, i10 = 0, i12 = 0, i14 = 0, i15 = 0;
 i9 = i5;
 i4 = i6;
 i7 = i4;
 i2 = i8;
 i12 = i11;
 i3 = i12;
 if (!i7) {
  i1 = (i13 | 0) != 0;
  if (!i3) {
   if (i1) {
    HEAP32[i13 >> 2] = (i9 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i12 = 0;
   i13 = (i9 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i12, i13) | 0;
  } else {
   if (!i1) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
 }
 i1 = (i3 | 0) == 0;
 do if (i2) {
  if (!i1) {
   i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
   if (i1 >>> 0 <= 31) {
    i10 = i1 + 1 | 0;
    i3 = 31 - i1 | 0;
    i6 = i1 - 31 >> 31;
    i2 = i10;
    i5 = i9 >>> (i10 >>> 0) & i6 | i7 << i3;
    i6 = i7 >>> (i10 >>> 0) & i6;
    i1 = 0;
    i3 = i9 << i3;
    break;
   }
   if (!i13) {
    i12 = 0;
    i13 = 0;
    return (tempRet0 = i12, i13) | 0;
   }
   HEAP32[i13 >> 2] = i5 | 0;
   HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
   i12 = 0;
   i13 = 0;
   return (tempRet0 = i12, i13) | 0;
  }
  i1 = i2 - 1 | 0;
  if (i1 & i2) {
   i3 = (Math_clz32(i2 | 0) | 0) + 33 - (Math_clz32(i7 | 0) | 0) | 0;
   i15 = 64 - i3 | 0;
   i10 = 32 - i3 | 0;
   i4 = i10 >> 31;
   i14 = i3 - 32 | 0;
   i6 = i14 >> 31;
   i2 = i3;
   i5 = i10 - 1 >> 31 & i7 >>> (i14 >>> 0) | (i7 << i10 | i9 >>> (i3 >>> 0)) & i6;
   i6 = i6 & i7 >>> (i3 >>> 0);
   i1 = i9 << i15 & i4;
   i3 = (i7 << i15 | i9 >>> (i14 >>> 0)) & i4 | i9 << i10 & i3 - 33 >> 31;
   break;
  }
  if (i13) {
   HEAP32[i13 >> 2] = i1 & i9;
   HEAP32[i13 + 4 >> 2] = 0;
  }
  if ((i2 | 0) == 1) {
   i14 = i4 | i6 & 0;
   i15 = i5 | 0 | 0;
   return (tempRet0 = i14, i15) | 0;
  } else {
   i15 = _llvm_cttz_i32(i2 | 0) | 0;
   i14 = i7 >>> (i15 >>> 0) | 0;
   i15 = i7 << 32 - i15 | i9 >>> (i15 >>> 0) | 0;
   return (tempRet0 = i14, i15) | 0;
  }
 } else {
  if (i1) {
   if (i13) {
    HEAP32[i13 >> 2] = (i7 >>> 0) % (i2 >>> 0);
    HEAP32[i13 + 4 >> 2] = 0;
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i2 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  if (!i9) {
   if (i13) {
    HEAP32[i13 >> 2] = 0;
    HEAP32[i13 + 4 >> 2] = (i7 >>> 0) % (i3 >>> 0);
   }
   i14 = 0;
   i15 = (i7 >>> 0) / (i3 >>> 0) >>> 0;
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = i3 - 1 | 0;
  if (!(i1 & i3)) {
   if (i13) {
    HEAP32[i13 >> 2] = i5 | 0;
    HEAP32[i13 + 4 >> 2] = i1 & i7 | i6 & 0;
   }
   i14 = 0;
   i15 = i7 >>> ((_llvm_cttz_i32(i3 | 0) | 0) >>> 0);
   return (tempRet0 = i14, i15) | 0;
  }
  i1 = (Math_clz32(i3 | 0) | 0) - (Math_clz32(i7 | 0) | 0) | 0;
  if (i1 >>> 0 <= 30) {
   i6 = i1 + 1 | 0;
   i3 = 31 - i1 | 0;
   i2 = i6;
   i5 = i7 << i3 | i9 >>> (i6 >>> 0);
   i6 = i7 >>> (i6 >>> 0);
   i1 = 0;
   i3 = i9 << i3;
   break;
  }
  if (!i13) {
   i14 = 0;
   i15 = 0;
   return (tempRet0 = i14, i15) | 0;
  }
  HEAP32[i13 >> 2] = i5 | 0;
  HEAP32[i13 + 4 >> 2] = i4 | i6 & 0;
  i14 = 0;
  i15 = 0;
  return (tempRet0 = i14, i15) | 0;
 } while (0);
 if (!i2) {
  i7 = i3;
  i4 = 0;
  i3 = 0;
 } else {
  i10 = i8 | 0 | 0;
  i9 = i12 | i11 & 0;
  i7 = _i64Add(i10 | 0, i9 | 0, -1, -1) | 0;
  i8 = tempRet0;
  i4 = i3;
  i3 = 0;
  do {
   i11 = i4;
   i4 = i1 >>> 31 | i4 << 1;
   i1 = i3 | i1 << 1;
   i11 = i5 << 1 | i11 >>> 31 | 0;
   i12 = i5 >>> 31 | i6 << 1 | 0;
   _i64Subtract(i7, i8, i11, i12) | 0;
   i15 = tempRet0;
   i14 = i15 >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1;
   i3 = i14 & 1;
   i5 = _i64Subtract(i11, i12, i14 & i10, (((i15 | 0) < 0 ? -1 : 0) >> 31 | ((i15 | 0) < 0 ? -1 : 0) << 1) & i9) | 0;
   i6 = tempRet0;
   i2 = i2 - 1 | 0;
  } while ((i2 | 0) != 0);
  i7 = i4;
  i4 = 0;
 }
 i2 = 0;
 if (i13) {
  HEAP32[i13 >> 2] = i5;
  HEAP32[i13 + 4 >> 2] = i6;
 }
 i14 = (i1 | 0) >>> 31 | (i7 | i2) << 1 | (i2 << 1 | i1 >>> 31) & 0 | i4;
 i15 = (i1 << 1 | 0 >>> 31) & -2 | i3;
 return (tempRet0 = i14, i15) | 0;
}

function __ZN7NavCtrl11addBuildingERK4Vec2(i14, i1) {
 i14 = i14 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, d16 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i10 = i15 + 24 | 0;
 i6 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i13 = i15;
 d16 = +HEAPF32[i1 + 4 >> 2] + 1.0;
 HEAPF32[i10 >> 2] = +HEAPF32[i1 >> 2] + 1.0;
 HEAPF32[i10 + 4 >> 2] = d16;
 i10 = __ZN6MapDef6addBoxERK4Vec2S2_(i14 + 84 | 0, i1, i10) | 0;
 i11 = __Znwj(36) | 0;
 __ZN16BuildingMoveItemC2EP7NavCtrlP5AABox(i11, i14, i10);
 HEAP32[i6 >> 2] = i11;
 i1 = i11;
 i2 = __Znwj(16) | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 3352;
 HEAP32[i2 + 12 >> 2] = i1;
 i3 = i6 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i4 = i14 + 64 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 >>> 0 >= (HEAP32[i14 + 68 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10shared_ptrI16BuildingMoveItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i14 + 60 | 0, i6);
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 } else {
  HEAP32[i5 >> 2] = i1;
  HEAP32[i5 + 4 >> 2] = i2;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = i5 + 8;
 }
 i1 = __Znwj(28) | 0;
 i7 = HEAP32[i10 >> 2] | 0;
 i5 = i10 + 4 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i6 = i10 + 12 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = i14;
 HEAP8[i1 + 8 >> 0] = 1;
 HEAP32[i1 >> 2] = 2916;
 HEAP32[i1 + 12 >> 2] = i7;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = i2;
 HEAP32[i1 + 24 >> 2] = i11;
 _emscripten_asm_const_4(8, i1 | 0, 10, +(+HEAPF32[i7 + 4 >> 2]), +(+HEAPF32[i7 + 8 >> 2])) | 0;
 HEAP32[i11 + 24 >> 2] = i1;
 i7 = i14 + 48 | 0;
 HEAP32[i12 >> 2] = i1;
 i2 = __Znwj(16) | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 3380;
 HEAP32[i2 + 12 >> 2] = i1;
 i3 = i12 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i8 = i14 + 52 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i9 = i14 + 56 | 0;
 if (i4 >>> 0 >= (HEAP32[i9 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10shared_ptrI17BuildingPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i7, i12);
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1) __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 } else {
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i8 >> 2] = i4 + 8;
 }
 i1 = __Znwj(28) | 0;
 i2 = HEAP32[i10 + 8 >> 2] | 0;
 i3 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i1 + 4 >> 2] = i14;
 HEAP8[i1 + 8 >> 0] = 1;
 HEAP32[i1 >> 2] = 2916;
 HEAP32[i1 + 12 >> 2] = i2;
 HEAP32[i1 + 16 >> 2] = i3;
 HEAP32[i1 + 20 >> 2] = i5;
 HEAP32[i1 + 24 >> 2] = i11;
 _emscripten_asm_const_4(8, i1 | 0, 10, +(+HEAPF32[i2 + 4 >> 2]), +(+HEAPF32[i2 + 8 >> 2])) | 0;
 i5 = i11 + 28 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i13 >> 2] = i1;
 i2 = __Znwj(16) | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 3380;
 HEAP32[i2 + 12 >> 2] = i1;
 i3 = i13 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i4 = HEAP32[i8 >> 2] | 0;
 if (i4 >>> 0 < (HEAP32[i9 >> 2] | 0) >>> 0) {
  HEAP32[i4 >> 2] = i1;
  HEAP32[i4 + 4 >> 2] = i2;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i8 >> 2] = i4 + 8;
  i13 = i5;
  i13 = HEAP32[i13 >> 2] | 0;
  _emscripten_asm_const_1(14, i13 | 0) | 0;
  __ZN7NavCtrl18updateBoxesAndMeshEv(i14);
  STACKTOP = i15;
  return;
 }
 __ZNSt3__16vectorINS_10shared_ptrI17BuildingPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i7, i13);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  i13 = i5;
  i13 = HEAP32[i13 >> 2] | 0;
  _emscripten_asm_const_1(14, i13 | 0) | 0;
  __ZN7NavCtrl18updateBoxesAndMeshEv(i14);
  STACKTOP = i15;
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i13 = i5;
 i13 = HEAP32[i13 >> 2] | 0;
 _emscripten_asm_const_1(14, i13 | 0) | 0;
 __ZN7NavCtrl18updateBoxesAndMeshEv(i14);
 STACKTOP = i15;
 return;
}

function __ZN3p2t5Sweep13FlipEdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i19, i18, i16, i17, i15, i12) {
 i19 = i19 | 0;
 i18 = i18 | 0;
 i16 = i16 | 0;
 i17 = i17 | 0;
 i15 = i15 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d13 = 0.0, d14 = 0.0, i20 = 0, d21 = 0.0, d22 = 0.0;
 i20 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i20;
 i1 = __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i15, i12) | 0;
 if (!i1) {
  i20 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, 20195, 24);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i20, i2);
  ___cxa_throw(i20 | 0, 16, 12);
 }
 i11 = __ZN3p2t8Triangle13OppositePointERS0_RNS_5PointE(i1, i15, i12) | 0;
 i10 = __ZN3p2t8Triangle8PointCCWERNS_5PointE(i15, i12) | 0;
 i2 = __ZN3p2t8Triangle7PointCWERNS_5PointE(i15, i12) | 0;
 i3 = i12 + 8 | 0;
 d7 = +HEAPF64[i3 >> 3];
 d22 = +HEAPF64[i10 + 8 >> 3];
 i9 = i11 + 16 | 0;
 d4 = +HEAPF64[i9 >> 3];
 d21 = +HEAPF64[i10 + 16 >> 3];
 i10 = i11 + 8 | 0;
 d5 = +HEAPF64[i10 >> 3];
 i8 = i12 + 16 | 0;
 d6 = +HEAPF64[i8 >> 3];
 if (!((d7 - d22) * (d4 - d21) - (d5 - d22) * (d6 - d21) >= -1.0e-012) ? (d21 = +HEAPF64[i2 + 8 >> 3], d22 = +HEAPF64[i2 + 16 >> 3], !((d7 - d21) * (d4 - d22) - (d5 - d21) * (d6 - d22) <= 1.0e-012)) : 0) {
  __ZN3p2t5Sweep18RotateTrianglePairERNS_8TriangleERNS_5PointES2_S4_(0, i15, i12, i1, i11);
  __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i18, i15);
  __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i18, i1);
  d5 = +HEAPF64[i17 + 8 >> 3];
  if (+HEAPF64[i3 >> 3] == d5) {
   d4 = +HEAPF64[i17 + 16 >> 3];
   if ((+HEAPF64[i8 >> 3] == d4 ? (d13 = +HEAPF64[i16 + 8 >> 3], +HEAPF64[i10 >> 3] == d13) : 0) ? (d14 = +HEAPF64[i16 + 16 >> 3], +HEAPF64[i9 >> 3] == d14) : 0) {
    i2 = HEAP32[i18 + 48 >> 2] | 0;
    i3 = HEAP32[i2 + 4 >> 2] | 0;
    if (!(d5 == +HEAPF64[i3 + 8 >> 3])) {
     STACKTOP = i20;
     return;
    }
    if (!(d4 == +HEAPF64[i3 + 16 >> 3])) {
     STACKTOP = i20;
     return;
    }
    i2 = HEAP32[i2 >> 2] | 0;
    if (!(d13 == +HEAPF64[i2 + 8 >> 3])) {
     STACKTOP = i20;
     return;
    }
    if (!(d14 == +HEAPF64[i2 + 16 >> 3])) {
     STACKTOP = i20;
     return;
    }
    __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i15, i16, i17);
    __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i1, i16, i17);
    __ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i15) | 0;
    __ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i1) | 0;
    STACKTOP = i20;
    return;
   }
  } else d4 = +HEAPF64[i17 + 16 >> 3];
  d22 = +HEAPF64[i16 + 8 >> 3];
  d21 = +HEAPF64[i16 + 16 >> 3];
  d22 = (d5 - d22) * (+HEAPF64[i9 >> 3] - d21) - (d4 - d21) * (+HEAPF64[i10 >> 3] - d22);
  if (d22 > 0.0 & (!(d22 < 1.0e-012) | !(d22 > -1.0e-012))) {
   HEAP8[(__ZN3p2t8Triangle9EdgeIndexEPKNS_5PointES3_(i1, i12, i11) | 0) + (i1 + 3) >> 0] = 1;
   __ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i1) | 0;
   __ZN3p2t8Triangle17ClearDelunayEdgesEv(i1);
   i1 = i15;
  } else {
   HEAP8[(__ZN3p2t8Triangle9EdgeIndexEPKNS_5PointES3_(i15, i12, i11) | 0) + (i15 + 3) >> 0] = 1;
   __ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i15) | 0;
   __ZN3p2t8Triangle17ClearDelunayEdgesEv(i15);
  }
  __ZN3p2t5Sweep13FlipEdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i19, i18, i16, i17, i1, i12);
  STACKTOP = i20;
  return;
 }
 __ZN3p2t5Sweep17FlipScanEdgeEventERNS_12SweepContextERNS_5PointES4_RNS_8TriangleES6_S4_(i19, i18, i16, i17, i15, i1, __ZN3p2t5Sweep13NextFlipPointERNS_5PointES2_RNS_8TriangleES2_(0, i16, i17, i1, i11) | 0);
 __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i19, i18, i16, i17, i15, i12);
 STACKTOP = i20;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 i15 = i28 + 424 | 0;
 i18 = i28;
 i14 = i28 + 24 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 464 | 0;
 i12 = i28 + 4 | 0;
 i17 = i28 + 468 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 184;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 13424) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i15 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i21, i15, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 7](i1, 29115, 29125, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 392) {
   i1 = _malloc((i1 >> 2) + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 40 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 4 | 0;
   i5 = i4 + 4 | 0;
   i6 = i5 + 4 | 0;
   i7 = i6 + 4 | 0;
   i8 = i7 + 4 | 0;
   i9 = i8 + 4 | 0;
   i10 = i9 + 4 | 0;
   i11 = i10 + 4 | 0;
   i12 = i11 + 4 | 0;
   do {
    i2 = HEAP32[i3 >> 2] | 0;
    if ((HEAP32[i15 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i4 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i5 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i6 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i7 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i8 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i9 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i10 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i11 >> 2] | 0) == (i2 | 0)) i2 = i11; else i2 = (HEAP32[i12 >> 2] | 0) == (i2 | 0) ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[29115 + (i2 - i14 >> 2) >> 0] | 0;
    i3 = i3 + 4 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 29111, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i21 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i1 = HEAP32[i22 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) break; else {
   i25 = 30;
   break;
  } else {
   HEAP32[i22 >> 2] = 0;
   i25 = 28;
   break;
  }
 } else i25 = 28; while (0);
 if ((i25 | 0) == 28 ? i3 : 0) i25 = 30;
 if ((i25 | 0) == 30) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 255](i1);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 1008 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 896 | 0;
 i4 = i28 + 888 | 0;
 i2 = i28 + 488 | 0;
 i20 = i28 + 480 | 0;
 i15 = i28 + 892 | 0;
 i12 = i28 + 72 | 0;
 i16 = i28 + 68 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 80 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 29126, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 29126, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1 << 2) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 13424) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 48 >> 2] & 7](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + (i22 << 2) | 0, i6, i4, i15, HEAP32[i12 >> 2] | 0, HEAP32[i16 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe(i1, i21, i22, i2, i3, i23, i20) {
 i1 = i1 | 0;
 i21 = i21 | 0;
 i22 = i22 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i23 = i23 | 0;
 i20 = i20 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i17 = i28 + 24 | 0;
 i18 = i28;
 i14 = i28 + 136 | 0;
 i27 = i28 + 16 | 0;
 i16 = i28 + 12 | 0;
 i24 = i28 + 8 | 0;
 i4 = i28 + 134 | 0;
 i12 = i28 + 4 | 0;
 i15 = i28 + 124 | 0;
 HEAP32[i27 >> 2] = i14;
 i26 = i27 + 4 | 0;
 HEAP32[i26 >> 2] = 184;
 HEAP32[i24 >> 2] = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i24, 13432) | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP32[i12 >> 2] = HEAP32[i22 >> 2];
 i13 = HEAP32[i3 + 4 >> 2] | 0;
 HEAP32[i17 >> 2] = HEAP32[i12 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i21, i17, i2, i24, i13, i23, i4, i1, i27, i16, i14 + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 32 >> 2] & 7](i1, 29100, 29110, i15) | 0;
  i2 = HEAP32[i16 >> 2] | 0;
  i3 = HEAP32[i27 >> 2] | 0;
  i1 = i2 - i3 | 0;
  if ((i1 | 0) > 98) {
   i1 = _malloc(i1 + 2 | 0) | 0;
   if (!i1) __ZSt17__throw_bad_allocv(); else {
    i19 = i1;
    i5 = i1;
   }
  } else {
   i19 = 0;
   i5 = i17;
  }
  if (!(HEAP8[i4 >> 0] | 0)) i1 = i5; else {
   HEAP8[i5 >> 0] = 45;
   i1 = i5 + 1 | 0;
  }
  i13 = i15 + 10 | 0;
  i14 = i15;
  if (i3 >>> 0 < i2 >>> 0) {
   i4 = i15 + 1 | 0;
   i5 = i4 + 1 | 0;
   i6 = i5 + 1 | 0;
   i7 = i6 + 1 | 0;
   i8 = i7 + 1 | 0;
   i9 = i8 + 1 | 0;
   i10 = i9 + 1 | 0;
   i11 = i10 + 1 | 0;
   i12 = i11 + 1 | 0;
   do {
    i2 = HEAP8[i3 >> 0] | 0;
    if ((HEAP8[i15 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i4 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i5 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i6 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i7 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i8 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i9 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i10 >> 0] | 0) != i2 << 24 >> 24) if ((HEAP8[i11 >> 0] | 0) == i2 << 24 >> 24) i2 = i11; else i2 = (HEAP8[i12 >> 0] | 0) == i2 << 24 >> 24 ? i12 : i13; else i2 = i10; else i2 = i9; else i2 = i8; else i2 = i7; else i2 = i6; else i2 = i5; else i2 = i4; else i2 = i15;
    HEAP8[i1 >> 0] = HEAP8[29100 + (i2 - i14) >> 0] | 0;
    i3 = i3 + 1 | 0;
    i1 = i1 + 1 | 0;
   } while (i3 >>> 0 < (HEAP32[i16 >> 2] | 0) >>> 0);
  }
  HEAP8[i1 >> 0] = 0;
  HEAP32[i18 >> 2] = i20;
  _sscanf(i17, 29111, i18) | 0;
  if (i19) _free(i19);
 }
 i1 = HEAP32[i21 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i21 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i21 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 i2 = HEAP32[i22 >> 2] | 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i22 >> 2] = 0;
   i25 = 25;
   break;
  }
  if (!i1) i25 = 26;
 } else i25 = 25; while (0);
 if ((i25 | 0) == 25 ? i1 : 0) i25 = 26;
 if ((i25 | 0) == 26) HEAP32[i23 >> 2] = HEAP32[i23 >> 2] | 2;
 i2 = HEAP32[i21 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i24 >> 2] | 0) | 0;
 i1 = HEAP32[i27 >> 2] | 0;
 HEAP32[i27 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i26 >> 2] & 255](i1);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZN9PathMaker10stringPullERKNSt3__16vectorI7VtxWrapNS0_9allocatorIS2_EEEES7_(i1, i27, i26) {
 i1 = i1 | 0;
 i27 = i27 | 0;
 i26 = i26 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, i17 = 0, d18 = 0.0, i19 = 0, d20 = 0.0, d21 = 0.0, d22 = 0.0, i23 = 0, d24 = 0.0, i25 = 0, i28 = 0, i29 = 0, i30 = 0;
 i30 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i29 = i30;
 i6 = HEAP32[i26 >> 2] | 0;
 d4 = +HEAPF32[i6 + 4 >> 2];
 d5 = +HEAPF32[i6 + 8 >> 2];
 i3 = HEAP32[i27 >> 2] | 0;
 i25 = i27 + 4 | 0;
 i2 = HEAP32[i25 >> 2] | 0;
 L1 : do if (((i2 - i3 | 0) / 12 | 0) >>> 0 > 1) {
  i19 = HEAP32[i3 >> 2] | 0;
  i14 = i6;
  i17 = i3;
  d24 = d4;
  d18 = +HEAPF32[i3 + 4 >> 2];
  d21 = d5;
  d16 = +HEAPF32[i3 + 8 >> 2];
  d22 = d4;
  d20 = d5;
  i3 = HEAP32[i6 >> 2] | 0;
  i9 = 1;
  i23 = 0;
  i2 = 0;
  while (1) {
   i13 = HEAP32[i14 + (i9 * 12 | 0) >> 2] | 0;
   d15 = +HEAPF32[i14 + (i9 * 12 | 0) + 4 >> 2];
   d12 = +HEAPF32[i14 + (i9 * 12 | 0) + 8 >> 2];
   i6 = HEAP32[i17 + (i9 * 12 | 0) >> 2] | 0;
   d8 = +HEAPF32[i17 + (i9 * 12 | 0) + 4 >> 2];
   d4 = +HEAPF32[i17 + (i9 * 12 | 0) + 8 >> 2];
   d5 = d8 - d24;
   d7 = d4 - d21;
   if ((d16 - d21) * d5 - (d18 - d24) * d7 >= 0.0) {
    d18 = d24 - d18;
    d16 = d21 - d16;
    if (!(d16 * d16 + d18 * d18 < 1.0000001111620804e-006) ? !((d20 - d21) * d5 - (d22 - d24) * d7 < 0.0) : 0) {
     i2 = HEAP32[i1 >> 2] | 0;
     HEAP32[i29 >> 2] = i3;
     i2 = HEAP32[i2 + 16 >> 2] | 0;
     if (!i2) {
      i28 = 8;
      break;
     }
     FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2, i29);
     d5 = d20;
     d4 = d22;
     d12 = d20;
     d15 = d22;
     i13 = i3;
     d7 = d20;
     d8 = d22;
     i6 = i3;
     i2 = i23;
     i11 = i23;
     i10 = i23;
    } else {
     d7 = d4;
     i10 = i9;
     i28 = 10;
    }
   } else {
    d7 = d16;
    i6 = i19;
    d8 = d18;
    i10 = i2;
    i28 = 10;
   }
   if ((i28 | 0) == 10) {
    i28 = 0;
    d4 = d15 - d24;
    d5 = d12 - d21;
    if ((d20 - d21) * d4 - (d22 - d24) * d5 <= 0.0) {
     d22 = d24 - d22;
     d20 = d21 - d20;
     if (!(d20 * d20 + d22 * d22 < 1.0000001111620804e-006) ? !(d4 * (d7 - d21) - d5 * (d8 - d24) > 0.0) : 0) {
      i2 = HEAP32[i1 >> 2] | 0;
      HEAP32[i29 >> 2] = i6;
      i2 = HEAP32[i2 + 16 >> 2] | 0;
      if (!i2) {
       i28 = 14;
       break;
      }
      FUNCTION_TABLE_vii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 63](i2, i29);
      d5 = d7;
      d4 = d8;
      d12 = d7;
      d15 = d8;
      i13 = i6;
      i2 = i10;
      i11 = i10;
     } else {
      d5 = d21;
      d4 = d24;
      i2 = i9;
      i11 = i9;
     }
    } else {
     d5 = d21;
     d4 = d24;
     d12 = d20;
     d15 = d22;
     i13 = i3;
     i2 = i9;
     i11 = i23;
    }
   }
   i9 = i2 + 1 | 0;
   i2 = HEAP32[i25 >> 2] | 0;
   i3 = HEAP32[i27 >> 2] | 0;
   if (i9 >>> 0 >= ((i2 - i3 | 0) / 12 | 0) >>> 0) break L1;
   i19 = i6;
   i14 = HEAP32[i26 >> 2] | 0;
   i17 = i3;
   d24 = d4;
   d18 = d8;
   d21 = d5;
   d16 = d7;
   d22 = d15;
   d20 = d12;
   i3 = i13;
   i23 = i11;
   i2 = i10;
  }
  if ((i28 | 0) == 8) {
   i30 = ___cxa_allocate_exception(4) | 0;
   HEAP32[i30 >> 2] = 5528;
   ___cxa_throw(i30 | 0, 352, 51);
  } else if ((i28 | 0) == 14) {
   i30 = ___cxa_allocate_exception(4) | 0;
   HEAP32[i30 >> 2] = 5528;
   ___cxa_throw(i30 | 0, 352, 51);
  }
 } while (0);
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i29 >> 2] = HEAP32[i2 + -12 >> 2];
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if (!i1) {
  i30 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i30 >> 2] = 5528;
  ___cxa_throw(i30 | 0, 352, 51);
 } else {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1, i29);
  STACKTOP = i30;
  return;
 }
}

function __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i11, i10, i12, i13, i8, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i14 = 0, i15 = 0, d16 = 0.0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i14;
 if (!i8) {
  i14 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 20138, 13);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i14, i1);
  ___cxa_throw(i14 | 0, 16, 12);
 }
 i1 = __ZN3p2t8Triangle9EdgeIndexEPKNS_5PointES3_(i8, i12, i13) | 0;
 if ((i1 | 0) != -1) {
  __ZN3p2t8Triangle19MarkConstrainedEdgeEi(i8, i1);
  i1 = HEAP32[i8 + 20 + (i1 << 2) >> 2] | 0;
  if (!i1) {
   STACKTOP = i14;
   return;
  }
  __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i1, i12, i13);
  STACKTOP = i14;
  return;
 }
 i5 = __ZN3p2t8Triangle8PointCCWERNS_5PointE(i8, i9) | 0;
 i6 = i13 + 8 | 0;
 i1 = i12 + 8 | 0;
 d2 = +HEAPF64[i1 >> 3];
 i3 = i12 + 16 | 0;
 d16 = +HEAPF64[i3 >> 3];
 i4 = i13 + 16 | 0;
 d2 = (+HEAPF64[i6 >> 3] - d2) * (+HEAPF64[i5 + 16 >> 3] - d16) - (+HEAPF64[i4 >> 3] - d16) * (+HEAPF64[i5 + 8 >> 3] - d2);
 i15 = d2 > -1.0e-012 & d2 < 1.0e-012;
 i7 = i15 ? 2 : d2 > 0.0 & 1;
 if (i15) {
  i1 = HEAP32[i8 + 8 >> 2] | 0;
  if (((i1 | 0) != (i13 | 0) ? (HEAP32[i8 + 12 >> 2] | 0) != (i13 | 0) : 0) ? (HEAP32[i8 + 16 >> 2] | 0) != (i13 | 0) : 0) {
   i15 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i15, 20152);
   ___cxa_throw(i15 | 0, 624, 90);
  }
  if (((i1 | 0) != (i5 | 0) ? (HEAP32[i8 + 12 >> 2] | 0) != (i5 | 0) : 0) ? (HEAP32[i8 + 16 >> 2] | 0) != (i5 | 0) : 0) {
   i15 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i15, 20152);
   ___cxa_throw(i15 | 0, 624, 90);
  }
  __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i8, i13, i5);
  HEAP32[(HEAP32[i10 + 48 >> 2] | 0) + 4 >> 2] = i5;
  __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i11, i10, i12, i5, __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i8, i9) | 0, i5);
  STACKTOP = i14;
  return;
 }
 i5 = __ZN3p2t8Triangle7PointCWERNS_5PointE(i8, i9) | 0;
 d2 = +HEAPF64[i1 >> 3];
 d16 = +HEAPF64[i3 >> 3];
 d2 = (+HEAPF64[i6 >> 3] - d2) * (+HEAPF64[i5 + 16 >> 3] - d16) - (+HEAPF64[i4 >> 3] - d16) * (+HEAPF64[i5 + 8 >> 3] - d2);
 if (!(d2 > -1.0e-012 & d2 < 1.0e-012)) {
  if ((i7 | 0) != (d2 > 0.0 | 0)) {
   __ZN3p2t5Sweep13FlipEdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i11, i10, i12, i13, i8, i9);
   STACKTOP = i14;
   return;
  }
  if (!i7) i1 = __ZN3p2t8Triangle11NeighborCCWERNS_5PointE(i8, i9) | 0; else i1 = __ZN3p2t8Triangle10NeighborCWERNS_5PointE(i8, i9) | 0;
  __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i11, i10, i12, i13, i1, i9);
  STACKTOP = i14;
  return;
 }
 i1 = HEAP32[i8 + 8 >> 2] | 0;
 if (((i1 | 0) != (i13 | 0) ? (HEAP32[i8 + 12 >> 2] | 0) != (i13 | 0) : 0) ? (HEAP32[i8 + 16 >> 2] | 0) != (i13 | 0) : 0) {
  i15 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i15, 20152);
  ___cxa_throw(i15 | 0, 624, 90);
 }
 if (((i1 | 0) != (i5 | 0) ? (HEAP32[i8 + 12 >> 2] | 0) != (i5 | 0) : 0) ? (HEAP32[i8 + 16 >> 2] | 0) != (i5 | 0) : 0) {
  i15 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i15, 20152);
  ___cxa_throw(i15 | 0, 624, 90);
 }
 __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i8, i13, i5);
 HEAP32[(HEAP32[i10 + 48 >> 2] | 0) + 4 >> 2] = i5;
 __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i11, i10, i12, i5, __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i8, i9) | 0, i5);
 STACKTOP = i14;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce(i1, i23, i8, i19, i18, d5) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i8 = i8 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d5 = +d5;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0, i30 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 i10 = i28 + 8 | 0;
 i3 = i28;
 i1 = i28 + 284 | 0;
 i4 = i28 + 72 | 0;
 i2 = i28 + 184 | 0;
 i20 = i28 + 68 | 0;
 i15 = i28 + 80 | 0;
 i12 = i28 + 77 | 0;
 i16 = i28 + 76 | 0;
 i25 = i28 + 56 | 0;
 i27 = i28 + 44 | 0;
 i26 = i28 + 32 | 0;
 i7 = i28 + 28 | 0;
 i9 = i28 + 84 | 0;
 i14 = i28 + 24 | 0;
 i13 = i28 + 20 | 0;
 i11 = i28 + 16 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAPF64[i10 >> 3] = d5;
 i1 = _snprintf(i1, 100, 29126, i10) | 0;
 if (i1 >>> 0 > 99) {
  i1 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[i3 >> 3] = d5;
  i1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, 29126, i3) | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if (!i2) __ZSt17__throw_bad_allocv();
  i3 = _malloc(i1) | 0;
  if (!i3) __ZSt17__throw_bad_allocv(); else {
   i29 = i3;
   i30 = i2;
   i17 = i3;
   i22 = i1;
  }
 } else {
  i29 = 0;
  i30 = 0;
  i17 = i2;
  i22 = i1;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 13432) | 0;
 i3 = HEAP32[i4 >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 32 >> 2] & 7](i6, i3, i3 + i22 | 0, i17) | 0;
 if (!i22) i4 = 0; else i4 = (HEAP8[HEAP32[i4 >> 2] >> 0] | 0) == 45;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i8, i4, i20, i15, i12, i16, i25, i27, i26, i7);
 i3 = HEAP32[i7 >> 2] | 0;
 if ((i22 | 0) > (i3 | 0)) {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = (i22 - i3 << 1 | 1) + i3 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i8 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i21 = i2;
  }
 } else {
  i24 = 0;
  i21 = i9;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i17, i17 + i22 | 0, i6, i4, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i25, i27, i26, i3);
 HEAP32[i11 >> 2] = HEAP32[i23 >> 2];
 i23 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i21, i23, i2, i19, i18) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 if (i29) _free(i29);
 if (i30) _free(i30);
 STACKTOP = i28;
 return i2 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i7 = i1;
  i2 = 0;
  L8 : while (1) {
   i1 = HEAP8[i7 >> 0] | 0;
   i6 = i1 & 255;
   if (i6 >>> 0 > i9 >>> 0) {
    i1 = i7;
    i2 = 42;
    break L7;
   }
   do if (i1 << 24 >> 24 > -1) i1 = i7 + 1 | 0; else {
    if ((i1 & 255) < 194) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i7 | 0) < 2) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i7 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i6 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i7;
     if ((i8 - i1 | 0) < 3) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i4 = HEAP8[i7 + 1 >> 0] | 0;
     i3 = HEAP8[i7 + 2 >> 0] | 0;
     switch (i6 | 0) {
     case 224:
      {
       if ((i4 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i4 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i4 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i3 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     if (((i4 & 255) << 6 & 4032 | i6 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i7;
      i2 = 42;
      break L7;
     }
     i1 = i7 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7;
    if ((i11 - i2 | 0) >>> 0 < 2 | (i8 - i1 | 0) < 4) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i5 = HEAP8[i7 + 1 >> 0] | 0;
    i3 = HEAP8[i7 + 2 >> 0] | 0;
    i4 = HEAP8[i7 + 3 >> 0] | 0;
    switch (i6 | 0) {
    case 240:
     {
      if ((i5 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i5 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i3 = i3 & 255;
    if ((i3 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i4 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    if (((i5 & 255) << 12 & 258048 | i6 << 18 & 1835008 | i3 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i7;
     i2 = 42;
     break L7;
    }
    i1 = i7 + 4 | 0;
    i2 = i2 + 1 | 0;
   } while (0);
   i2 = i2 + 1 | 0;
   if (!(i2 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i7 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i4 = HEAP32[i13 >> 2] | 0;
  } else i4 = i3;
 } else {
  i4 = i3;
  i2 = i10;
 }
 i8 = i12;
 i3 = HEAP32[i11 >> 2] | 0;
 i1 = i3 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i4 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i3 >> 0] | 0;
  i6 = i1 & 255;
  if (i6 >>> 0 > i9 >>> 0) {
   i1 = 2;
   break L9;
  }
  do if (i1 << 24 >> 24 > -1) {
   HEAP16[i4 >> 1] = i1 & 255;
   HEAP32[i11 >> 2] = i3 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i2 - i3 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i3 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i6 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i2 - i3 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i5 = HEAP8[i3 + 1 >> 0] | 0;
    i1 = HEAP8[i3 + 2 >> 0] | 0;
    switch (i6 | 0) {
    case 224:
     {
      if ((i5 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i5 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i5 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i5 & 255) << 6 & 4032 | i6 << 12 | i1 & 63;
    if ((i1 & 65535) >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP16[i4 >> 1] = i1;
    HEAP32[i11 >> 2] = i3 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i2 - i3 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i5 = HEAP8[i3 + 1 >> 0] | 0;
   i1 = HEAP8[i3 + 2 >> 0] | 0;
   i3 = HEAP8[i3 + 3 >> 0] | 0;
   switch (i6 | 0) {
   case 240:
    {
     if ((i5 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i5 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i5 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i7 = i1 & 255;
   if ((i7 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i3 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i4 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = i6 & 7;
   i3 = i5 & 255;
   i5 = i7 << 6;
   i1 = i1 & 63;
   if ((i3 << 12 & 258048 | i6 << 18 | i5 & 4032 | i1) >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP16[i4 >> 1] = i3 << 2 & 60 | i7 >>> 4 & 3 | ((i3 >>> 4 & 3 | i6 << 2) << 6) + 16320 | 55296;
   i7 = i4 + 2 | 0;
   HEAP32[i13 >> 2] = i7;
   HEAP16[i7 >> 1] = i1 | i5 & 960 | 56320;
   HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
  } while (0);
  i4 = (HEAP32[i13 >> 2] | 0) + 2 | 0;
  HEAP32[i13 >> 2] = i4;
  i3 = HEAP32[i11 >> 2] | 0;
  i1 = i3 >>> 0 < i10 >>> 0;
  if (!(i1 & i4 >>> 0 < i12 >>> 0)) {
   i14 = 39;
   break;
  }
 } else i14 = 39; while (0);
 if ((i14 | 0) == 39) i1 = i1 & 1;
 return i1 | 0;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i12, i10, i11, i9, i1) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = i10;
 if ((((i1 & 4 | 0) != 0 ? (i8 - i12 | 0) > 2 : 0) ? (HEAP8[i12 >> 0] | 0) == -17 : 0) ? (HEAP8[i12 + 1 >> 0] | 0) == -69 : 0) i1 = (HEAP8[i12 + 2 >> 0] | 0) == -65 ? i12 + 3 | 0 : i12; else i1 = i12;
 L7 : do if ((i11 | 0) != 0 & i1 >>> 0 < i10 >>> 0) {
  i6 = i1;
  i7 = 0;
  L8 : while (1) {
   i1 = HEAP8[i6 >> 0] | 0;
   i5 = i1 & 255;
   do if (i1 << 24 >> 24 > -1) {
    if (i5 >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 1 | 0;
   } else {
    if ((i1 & 255) < 194) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if ((i1 & 255) < 224) {
     if ((i8 - i6 | 0) < 2) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = HEAPU8[i6 + 1 >> 0] | 0;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if ((i1 & 63 | i5 << 6 & 1984) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 2 | 0;
     break;
    }
    if ((i1 & 255) < 240) {
     i1 = i6;
     if ((i8 - i1 | 0) < 3) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i3 = HEAP8[i6 + 1 >> 0] | 0;
     i2 = HEAP8[i6 + 2 >> 0] | 0;
     switch (i5 | 0) {
     case 224:
      {
       if ((i3 & -32) << 24 >> 24 != -96) {
        i2 = 20;
        break L8;
       }
       break;
      }
     case 237:
      {
       if ((i3 & -32) << 24 >> 24 != -128) {
        i2 = 22;
        break L8;
       }
       break;
      }
     default:
      if ((i3 & -64) << 24 >> 24 != -128) {
       i2 = 24;
       break L8;
      }
     }
     i1 = i2 & 255;
     if ((i1 & 192 | 0) != 128) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     if (((i3 & 255) << 6 & 4032 | i5 << 12 & 61440 | i1 & 63) >>> 0 > i9 >>> 0) {
      i1 = i6;
      i2 = 42;
      break L7;
     }
     i1 = i6 + 3 | 0;
     break;
    }
    if ((i1 & 255) >= 245) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6;
    if ((i8 - i1 | 0) < 4) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i4 = HEAP8[i6 + 1 >> 0] | 0;
    i2 = HEAP8[i6 + 2 >> 0] | 0;
    i3 = HEAP8[i6 + 3 >> 0] | 0;
    switch (i5 | 0) {
    case 240:
     {
      if ((i4 + 112 & 255) >= 48) {
       i2 = 32;
       break L8;
      }
      break;
     }
    case 244:
     {
      if ((i4 & -16) << 24 >> 24 != -128) {
       i2 = 34;
       break L8;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i2 = 36;
      break L8;
     }
    }
    i2 = i2 & 255;
    if ((i2 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i3 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    if (((i4 & 255) << 12 & 258048 | i5 << 18 & 1835008 | i2 << 6 & 4032 | i1 & 63) >>> 0 > i9 >>> 0) {
     i1 = i6;
     i2 = 42;
     break L7;
    }
    i1 = i6 + 4 | 0;
   } while (0);
   i7 = i7 + 1 | 0;
   if (!(i7 >>> 0 < i11 >>> 0 & i1 >>> 0 < i10 >>> 0)) {
    i2 = 42;
    break L7;
   } else i6 = i1;
  }
  if ((i2 | 0) == 20) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 22) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 24) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 32) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 34) {
   i1 = i1 - i12 | 0;
   break;
  } else if ((i2 | 0) == 36) {
   i1 = i1 - i12 | 0;
   break;
  }
 } else i2 = 42; while (0);
 if ((i2 | 0) == 42) i1 = i1 - i12 | 0;
 return i1 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i15, i14, i6, i13) {
 i3 = i3 | 0;
 i15 = i15 | 0;
 i14 = i14 | 0;
 i6 = i6 | 0;
 i13 = i13 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i15 + 8 >> 2] | 0)) {
  if ((HEAP32[i15 + 4 >> 2] | 0) == (i14 | 0) ? (i1 = i15 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i6;
 } else {
  if ((i3 | 0) != (HEAP32[i15 >> 2] | 0)) {
   i12 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i12 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3 + 16 | 0, i15, i14, i6, i13);
   i1 = i3 + 24 | 0;
   if ((i12 | 0) <= 1) break;
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   if ((i2 & 2 | 0) == 0 ? (i5 = i15 + 36 | 0, (HEAP32[i5 >> 2] | 0) != 1) : 0) {
    if (!(i2 & 1)) {
     i2 = i15 + 54 | 0;
     while (1) {
      if (HEAP8[i2 >> 0] | 0) break L1;
      if ((HEAP32[i5 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
      i1 = i1 + 8 | 0;
      if (i1 >>> 0 >= i4 >>> 0) break L1;
     }
    }
    i2 = i15 + 24 | 0;
    i3 = i15 + 54 | 0;
    while (1) {
     if (HEAP8[i3 >> 0] | 0) break L1;
     if ((HEAP32[i5 >> 2] | 0) == 1 ? (HEAP32[i2 >> 2] | 0) == 1 : 0) break L1;
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
     i1 = i1 + 8 | 0;
     if (i1 >>> 0 >= i4 >>> 0) break L1;
    }
   }
   i2 = i15 + 54 | 0;
   while (1) {
    if (HEAP8[i2 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i1, i15, i14, i6, i13);
    i1 = i1 + 8 | 0;
    if (i1 >>> 0 >= i4 >>> 0) break L1;
   }
  }
  if ((HEAP32[i15 + 16 >> 2] | 0) != (i14 | 0) ? (i11 = i15 + 20 | 0, (HEAP32[i11 >> 2] | 0) != (i14 | 0)) : 0) {
   HEAP32[i15 + 32 >> 2] = i6;
   i8 = i15 + 44 | 0;
   if ((HEAP32[i8 >> 2] | 0) == 4) break;
   i2 = HEAP32[i3 + 12 >> 2] | 0;
   i4 = i3 + 16 + (i2 << 3) | 0;
   i5 = i15 + 52 | 0;
   i6 = i15 + 53 | 0;
   i9 = i15 + 54 | 0;
   i7 = i3 + 8 | 0;
   i10 = i15 + 24 | 0;
   L34 : do if ((i2 | 0) > 0) {
    i2 = 0;
    i1 = 0;
    i3 = i3 + 16 | 0;
    while (1) {
     HEAP8[i5 >> 0] = 0;
     HEAP8[i6 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i3, i15, i14, i14, 1, i13);
     if (HEAP8[i9 >> 0] | 0) {
      i12 = 20;
      break L34;
     }
     do if (HEAP8[i6 >> 0] | 0) {
      if (!(HEAP8[i5 >> 0] | 0)) if (!(HEAP32[i7 >> 2] & 1)) {
       i1 = 1;
       i12 = 20;
       break L34;
      } else {
       i1 = 1;
       break;
      }
      if ((HEAP32[i10 >> 2] | 0) == 1) break L34;
      if (!(HEAP32[i7 >> 2] & 2)) break L34; else {
       i2 = 1;
       i1 = 1;
      }
     } while (0);
     i3 = i3 + 8 | 0;
     if (i3 >>> 0 >= i4 >>> 0) {
      i12 = 20;
      break;
     }
    }
   } else {
    i2 = 0;
    i1 = 0;
    i12 = 20;
   } while (0);
   do if ((i12 | 0) == 20) {
    if ((!i2 ? (HEAP32[i11 >> 2] = i14, i14 = i15 + 40 | 0, HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1, (HEAP32[i15 + 36 >> 2] | 0) == 1) : 0) ? (HEAP32[i10 >> 2] | 0) == 2 : 0) {
     HEAP8[i9 >> 0] = 1;
     if (i1) break;
    } else i12 = 24;
    if ((i12 | 0) == 24 ? i1 : 0) break;
    HEAP32[i8 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i8 >> 2] = 3;
   break;
  }
  if ((i6 | 0) == 1) HEAP32[i15 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEbT0_S9_T_(i19, i18, i1) {
 i19 = i19 | 0;
 i18 = i18 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0;
 switch (i18 - i19 >> 3 | 0) {
 case 2:
  {
   i5 = i18 + -8 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   i7 = HEAP32[i19 >> 2] | 0;
   do if ((i6 | 0) >= (i7 | 0)) {
    if ((i7 | 0) < (i6 | 0)) {
     i19 = 1;
     return i19 | 0;
    }
    i4 = i18 + -4 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i1 = i19 + 4 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i3 >>> 0 < i2 >>> 0) break; else {
     i19 = 1;
     return i19 | 0;
    }
   } else {
    i2 = i19 + 4 | 0;
    i3 = i18 + -4 | 0;
    i1 = i2;
    i4 = i3;
    i3 = HEAP32[i3 >> 2] | 0;
    i2 = HEAP32[i2 >> 2] | 0;
   } while (0);
   HEAP32[i19 >> 2] = i6;
   HEAP32[i5 >> 2] = i7;
   HEAP32[i1 >> 2] = i3;
   HEAP32[i4 >> 2] = i2;
   i19 = 1;
   return i19 | 0;
  }
 case 3:
  {
   __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i19, i19 + 8 | 0, i18 + -8 | 0, i1) | 0;
   i19 = 1;
   return i19 | 0;
  }
 case 4:
  {
   __ZNSt3__17__sort4IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_T_(i19, i19 + 8 | 0, i19 + 16 | 0, i18 + -8 | 0, i1) | 0;
   i19 = 1;
   return i19 | 0;
  }
 case 5:
  {
   __ZNSt3__17__sort5IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i19, i19 + 8 | 0, i19 + 16 | 0, i19 + 24 | 0, i18 + -8 | 0, i1) | 0;
   i19 = 1;
   return i19 | 0;
  }
 case 1:
 case 0:
  {
   i19 = 1;
   return i19 | 0;
  }
 default:
  {
   i3 = i19 + 16 | 0;
   __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i19, i19 + 8 | 0, i3, i1) | 0;
   i1 = i19 + 24 | 0;
   if ((i1 | 0) == (i18 | 0)) {
    i19 = 1;
    return i19 | 0;
   } else i2 = 0;
   while (1) {
    i11 = HEAP32[i1 >> 2] | 0;
    i6 = HEAP32[i3 >> 2] | 0;
    if ((i11 | 0) >= (i6 | 0)) {
     if ((i6 | 0) >= (i11 | 0) ? (i13 = i1 + 4 | 0, i14 = HEAP32[i13 >> 2] | 0, i15 = i3 + 4 | 0, i16 = HEAP32[i15 >> 2] | 0, i14 >>> 0 < i16 >>> 0) : 0) {
      i5 = i13;
      i4 = i15;
      i12 = i14;
      i7 = i16;
      i17 = 17;
     }
    } else {
     i12 = i1 + 4 | 0;
     i7 = i3 + 4 | 0;
     i5 = i12;
     i4 = i7;
     i12 = HEAP32[i12 >> 2] | 0;
     i7 = HEAP32[i7 >> 2] | 0;
     i17 = 17;
    }
    if ((i17 | 0) == 17) {
     i17 = 0;
     i10 = i12;
     HEAP32[i1 >> 2] = i6;
     HEAP32[i5 >> 2] = i7;
     L14 : do if ((i3 | 0) != (i19 | 0)) {
      i9 = i3;
      while (1) {
       i8 = i3;
       i3 = i9 + -8 | 0;
       i7 = HEAP32[i3 >> 2] | 0;
       if ((i11 | 0) < (i7 | 0)) {
        i5 = i9 + -4 | 0;
        i4 = i5;
        i5 = HEAP32[i5 >> 2] | 0;
       } else {
        if ((i7 | 0) < (i11 | 0)) {
         i3 = i8;
         break L14;
        }
        i6 = i9 + -4 | 0;
        i5 = HEAP32[i6 >> 2] | 0;
        if (i10 >>> 0 >= i5 >>> 0) {
         i3 = i8;
         break L14;
        }
        i4 = i6;
       }
       HEAP32[i8 >> 2] = i7;
       HEAP32[i9 + 4 >> 2] = i5;
       if ((i3 | 0) == (i19 | 0)) break; else i9 = i3;
      }
     } while (0);
     HEAP32[i3 >> 2] = i11;
     HEAP32[i4 >> 2] = i12;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == 8) break;
    }
    i3 = i1 + 8 | 0;
    if ((i3 | 0) == (i18 | 0)) {
     i1 = 1;
     i17 = 27;
     break;
    } else {
     i12 = i1;
     i1 = i3;
     i3 = i12;
    }
   }
   if ((i17 | 0) == 27) return i1 | 0;
   i19 = (i1 + 8 | 0) == (i18 | 0);
   return i19 | 0;
  }
 }
 return 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13424) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13580) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 4;
    HEAP32[i3 >> 2] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 4;
   HEAP32[i7 >> 2] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 4;
   HEAP32[i8 >> 2] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 4;
     HEAP32[i18 >> 2] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 44 >> 2] & 31](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 4;
    HEAP32[i18 >> 2] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2 << 2) | 0;
  i4 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i4 | 0)) {
   i3 = i4 + -4 | 0;
   if (i1 >>> 0 < i3 >>> 0) {
    do {
     i19 = HEAP32[i1 >> 2] | 0;
     HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
     HEAP32[i3 >> 2] = i19;
     i1 = i1 + 4 | 0;
     i3 = i3 + -4 | 0;
    } while (i1 >>> 0 < i3 >>> 0);
    i1 = i4;
   } else i1 = i4;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 48 >> 2] & 7](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2 << 2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2 << 2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i23, i3, i20, i19, i18) {
 i1 = i1 | 0;
 i23 = i23 | 0;
 i3 = i3 | 0;
 i20 = i20 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i21 = 0, i22 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
 i28 = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 i9 = i28 + 464 | 0;
 i21 = i28 + 60 | 0;
 i16 = i28 + 468 | 0;
 i13 = i28 + 56 | 0;
 i17 = i28 + 52 | 0;
 i25 = i28 + 40 | 0;
 i27 = i28 + 28 | 0;
 i26 = i28 + 16 | 0;
 i4 = i28 + 12 | 0;
 i8 = i28 + 64 | 0;
 i15 = i28 + 8 | 0;
 i14 = i28 + 4 | 0;
 i10 = i28;
 i1 = __ZNKSt3__18ios_base6getlocEv(i20) | 0;
 HEAP32[i21 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i21, 13424) | 0;
 i7 = HEAP8[i18 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i12 = i18 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i12 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP32[(i2 ? i12 : HEAP32[i18 + 8 >> 2] | 0) >> 2] | 0;
  i7 = (i7 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 44 >> 2] & 31](i11, 45) | 0);
 }
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 HEAP32[i27 >> 2] = 0;
 HEAP32[i27 + 4 >> 2] = 0;
 HEAP32[i27 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri(i3, i7, i21, i16, i13, i17, i25, i27, i26, i4);
 i5 = HEAP8[i18 >> 0] | 0;
 i6 = HEAP32[i12 >> 2] | 0;
 i2 = (i5 & 1) == 0 ? (i5 & 255) >>> 1 : i6;
 i3 = HEAP32[i4 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i29 = HEAP8[i26 >> 0] | 0;
  i4 = HEAP8[i27 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i4 & 1) == 0 ? (i4 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 } else {
  i29 = HEAP8[i26 >> 0] | 0;
  i2 = HEAP8[i27 >> 0] | 0;
  i2 = i3 + 2 + ((i29 & 1) == 0 ? (i29 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i27 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2 << 2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i24 = i2;
   i22 = i2;
  }
 } else {
  i24 = 0;
  i22 = i8;
 }
 i29 = (i5 & 1) == 0;
 i2 = i29 ? i12 : HEAP32[i18 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i(i22, i15, i14, HEAP32[i20 + 4 >> 2] | 0, i2, i2 + ((i29 ? (i5 & 255) >>> 1 : i6) << 2) | 0, i11, i7, i16, HEAP32[i13 >> 2] | 0, HEAP32[i17 >> 2] | 0, i25, i27, i26, i3);
 HEAP32[i10 >> 2] = HEAP32[i23 >> 2];
 i29 = HEAP32[i15 >> 2] | 0;
 i2 = HEAP32[i14 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i22, i29, i2, i20, i19) | 0;
 if (i24) {
  _free(i24);
  i1 = HEAP32[i21 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i26);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i27);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i28;
 return i2 | 0;
}

function __ZN7NavCtrl11recordFrameEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i12 + 16 | 0;
 i8 = i12;
 i9 = i7 + 296 | 0;
 i10 = i7 + 308 | 0;
 i3 = HEAP32[i10 >> 2] | 0;
 i11 = i7 + 300 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i4 = HEAP32[i9 >> 2] | 0;
 i2 = (i1 - i4 | 0) / 12 | 0;
 if (i3 >>> 0 <= i2 >>> 0) {
  if (i3 >>> 0 < i2 >>> 0 ? (i5 = i4 + (i3 * 12 | 0) | 0, (i1 | 0) != (i5 | 0)) : 0) {
   i2 = i1;
   while (1) {
    i1 = i2 + -12 | 0;
    HEAP32[i11 >> 2] = i1;
    i3 = HEAP32[i1 >> 2] | 0;
    i4 = i3;
    if (i3) {
     i1 = i2 + -8 | 0;
     i2 = HEAP32[i1 >> 2] | 0;
     if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -16 - i4 | 0) >>> 4) << 4);
     __ZdlPv(i3);
     i1 = HEAP32[i11 >> 2] | 0;
    }
    if ((i1 | 0) == (i5 | 0)) {
     i1 = i5;
     break;
    } else i2 = i1;
   }
  }
 } else {
  __ZNSt3__16vectorI5FrameNS_9allocatorIS1_EEE8__appendEj(i9, i3 - i2 | 0);
  i1 = HEAP32[i11 >> 2] | 0;
 }
 i4 = i6 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 if (i1 >>> 0 >= (HEAP32[i7 + 304 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorI5FrameNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i9, i6);
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i1;
  if (i1) {
   i3 = HEAP32[i4 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) HEAP32[i4 >> 2] = i3 + (~((i3 + -16 - i2 | 0) >>> 4) << 4);
   __ZdlPv(i1);
  }
 } else {
  HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i1 + 4 >> 2] = HEAP32[i4 >> 2];
  i5 = i6 + 8 | 0;
  HEAP32[i1 + 8 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 12;
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = HEAP32[i7 + 24 >> 2] | 0;
 i4 = HEAP32[i7 + 28 >> 2] | 0;
 if ((i2 | 0) == (i4 | 0)) {
  i8 = i1;
  i11 = HEAP32[i9 >> 2] | 0;
  i9 = i8;
  i11 = i9 - i11 | 0;
  i11 = (i11 | 0) / 12 | 0;
  i11 = i11 + -1 | 0;
  _emscripten_asm_const_1(10, i11 | 0) | 0;
  i11 = HEAP32[i10 >> 2] | 0;
  i11 = i11 + 1 | 0;
  HEAP32[i10 >> 2] = i11;
  STACKTOP = i12;
  return;
 }
 i5 = i8 + 8 | 0;
 i6 = i1 + -8 | 0;
 i7 = i1 + -4 | 0;
 i3 = i1 + -12 | 0;
 do {
  i13 = HEAP32[i2 >> 2] | 0;
  i1 = HEAP32[i13 + 12 >> 2] | 0;
  _emscripten_asm_const_4(0, i13 | 0, +(+HEAPF32[i1 + 12 >> 2]), +(+HEAPF32[i1 + 16 >> 2]), +(+HEAPF32[i1 + 120 >> 2])) | 0;
  i1 = (HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0) + 12 | 0;
  i13 = HEAP32[i1 + 4 >> 2] | 0;
  i14 = i8;
  HEAP32[i14 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i14 + 4 >> 2] = i13;
  i14 = (HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] | 0) + 92 | 0;
  i13 = HEAP32[i14 + 4 >> 2] | 0;
  i1 = i5;
  HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
  HEAP32[i1 + 4 >> 2] = i13;
  i1 = HEAP32[i6 >> 2] | 0;
  if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i1 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
   HEAP32[i1 + 8 >> 2] = HEAP32[i8 + 8 >> 2];
   HEAP32[i1 + 12 >> 2] = HEAP32[i8 + 12 >> 2];
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 16;
  } else __ZNSt3__16vectorI9AgentDataNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i3, i8);
  i2 = i2 + 8 | 0;
 } while ((i2 | 0) != (i4 | 0));
 i13 = HEAP32[i11 >> 2] | 0;
 i14 = HEAP32[i9 >> 2] | 0;
 i14 = i13 - i14 | 0;
 i14 = (i14 | 0) / 12 | 0;
 i14 = i14 + -1 | 0;
 _emscripten_asm_const_1(10, i14 | 0) | 0;
 i14 = HEAP32[i10 >> 2] | 0;
 i14 = i14 + 1 | 0;
 HEAP32[i10 >> 2] = i14;
 STACKTOP = i12;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i2, i14, i13, i15, i16, i11, i1) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 i16 = i16 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i17 = 0, i18 = 0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i17;
 i10 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13432) | 0;
 i5 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13572) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 63](i12, i5);
 i8 = HEAP8[i12 >> 0] | 0;
 i9 = i12 + 4 | 0;
 if (((i8 & 1) == 0 ? (i8 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) | 0) {
  HEAP32[i11 >> 2] = i15;
  i1 = HEAP8[i2 >> 0] | 0;
  switch (i1 << 24 >> 24) {
  case 43:
  case 45:
   {
    i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, i1) | 0;
    i3 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i8;
    i3 = i2 + 1 | 0;
    break;
   }
  default:
   i3 = i2;
  }
  L7 : do if ((i13 - i3 | 0) > 1 ? (HEAP8[i3 >> 0] | 0) == 48 : 0) {
   i1 = i3 + 1 | 0;
   switch (HEAP8[i1 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    break L7;
   }
   i8 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, 48) | 0;
   i7 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i7 + 1;
   HEAP8[i7 >> 0] = i8;
   i7 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, HEAP8[i1 >> 0] | 0) | 0;
   i8 = HEAP32[i11 >> 2] | 0;
   HEAP32[i11 >> 2] = i8 + 1;
   HEAP8[i8 >> 0] = i7;
   i3 = i3 + 2 | 0;
  } while (0);
  if ((i3 | 0) != (i13 | 0) ? (i6 = i13 + -1 | 0, i3 >>> 0 < i6 >>> 0) : 0) {
   i4 = i3;
   i1 = i6;
   do {
    i8 = HEAP8[i4 >> 0] | 0;
    HEAP8[i4 >> 0] = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = i8;
    i4 = i4 + 1 | 0;
    i1 = i1 + -1 | 0;
   } while (i4 >>> 0 < i1 >>> 0);
  }
  i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
  i6 = i12 + 8 | 0;
  i7 = i12 + 1 | 0;
  if (i3 >>> 0 < i13 >>> 0) {
   i1 = 0;
   i4 = 0;
   i8 = i3;
   while (1) {
    i18 = HEAP8[((HEAP8[i12 >> 0] & 1) == 0 ? i7 : HEAP32[i6 >> 2] | 0) + i4 >> 0] | 0;
    if (i18 << 24 >> 24 != 0 & (i1 | 0) == (i18 << 24 >> 24 | 0)) {
     i18 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = i18 + 1;
     HEAP8[i18 >> 0] = i5;
     i18 = HEAP8[i12 >> 0] | 0;
     i1 = 0;
     i4 = (i4 >>> 0 < (((i18 & 1) == 0 ? (i18 & 255) >>> 1 : HEAP32[i9 >> 2] | 0) + -1 | 0) >>> 0 & 1) + i4 | 0;
    }
    i19 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i10 >> 2] | 0) + 28 >> 2] & 31](i10, HEAP8[i8 >> 0] | 0) | 0;
    i18 = HEAP32[i11 >> 2] | 0;
    HEAP32[i11 >> 2] = i18 + 1;
    HEAP8[i18 >> 0] = i19;
    i8 = i8 + 1 | 0;
    if (i8 >>> 0 >= i13 >>> 0) break; else i1 = i1 + 1 | 0;
   }
  }
  i1 = i15 + (i3 - i2) | 0;
  i3 = HEAP32[i11 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   i3 = i3 + -1 | 0;
   if (i1 >>> 0 < i3 >>> 0) do {
    i19 = HEAP8[i1 >> 0] | 0;
    HEAP8[i1 >> 0] = HEAP8[i3 >> 0] | 0;
    HEAP8[i3 >> 0] = i19;
    i1 = i1 + 1 | 0;
    i3 = i3 + -1 | 0;
   } while (i1 >>> 0 < i3 >>> 0);
   i1 = HEAP32[i11 >> 2] | 0;
  }
 } else {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i10 >> 2] | 0) + 32 >> 2] & 7](i10, i2, i13, i15) | 0;
  i1 = i15 + (i13 - i2) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 HEAP32[i16 >> 2] = (i14 | 0) == (i13 | 0) ? i1 : i15 + (i14 - i2) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i12);
 STACKTOP = i17;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i22, i4, i19, i18, i17) {
 i1 = i1 | 0;
 i22 = i22 | 0;
 i4 = i4 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i20 = 0, i21 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0;
 i27 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i9 = i27 + 56 | 0;
 i20 = i27 + 52 | 0;
 i15 = i27 + 64 | 0;
 i12 = i27 + 61 | 0;
 i16 = i27 + 60 | 0;
 i24 = i27 + 40 | 0;
 i26 = i27 + 28 | 0;
 i25 = i27 + 16 | 0;
 i5 = i27 + 12 | 0;
 i8 = i27 + 68 | 0;
 i14 = i27 + 8 | 0;
 i13 = i27 + 4 | 0;
 i10 = i27;
 i1 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i20 >> 2] = i1;
 i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i20, 13432) | 0;
 i7 = HEAP8[i17 >> 0] | 0;
 i2 = (i7 & 1) == 0;
 i3 = i17 + 4 | 0;
 if (!((i2 ? (i7 & 255) >>> 1 : HEAP32[i3 >> 2] | 0) | 0)) i7 = 0; else {
  i7 = HEAP8[(i2 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0) >> 0] | 0;
  i7 = i7 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i11 >> 2] | 0) + 28 >> 2] & 31](i11, 45) | 0) << 24 >> 24;
 }
 HEAP32[i24 >> 2] = 0;
 HEAP32[i24 + 4 >> 2] = 0;
 HEAP32[i24 + 8 >> 2] = 0;
 HEAP32[i26 >> 2] = 0;
 HEAP32[i26 + 4 >> 2] = 0;
 HEAP32[i26 + 8 >> 2] = 0;
 HEAP32[i25 >> 2] = 0;
 HEAP32[i25 + 4 >> 2] = 0;
 HEAP32[i25 + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri(i4, i7, i20, i15, i12, i16, i24, i26, i25, i5);
 i6 = HEAP8[i17 >> 0] | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 i2 = (i6 & 1) == 0 ? (i6 & 255) >>> 1 : i4;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) > (i3 | 0)) {
  i28 = HEAP8[i25 >> 0] | 0;
  i5 = HEAP8[i26 >> 0] | 0;
  i2 = (i2 - i3 << 1 | 1) + i3 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 } else {
  i28 = HEAP8[i25 >> 0] | 0;
  i2 = HEAP8[i26 >> 0] | 0;
  i2 = i3 + 2 + ((i28 & 1) == 0 ? (i28 & 255) >>> 1 : HEAP32[i25 + 4 >> 2] | 0) + ((i2 & 1) == 0 ? (i2 & 255) >>> 1 : HEAP32[i26 + 4 >> 2] | 0) | 0;
 }
 if (i2 >>> 0 > 100) {
  i2 = _malloc(i2) | 0;
  if (!i2) __ZSt17__throw_bad_allocv(); else {
   i23 = i2;
   i21 = i2;
  }
 } else {
  i23 = 0;
  i21 = i8;
 }
 i28 = (i6 & 1) == 0;
 i2 = i28 ? i17 + 1 | 0 : HEAP32[i17 + 8 >> 2] | 0;
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i(i21, i14, i13, HEAP32[i19 + 4 >> 2] | 0, i2, i2 + (i28 ? (i6 & 255) >>> 1 : i4) | 0, i11, i7, i15, HEAP8[i12 >> 0] | 0, HEAP8[i16 >> 0] | 0, i24, i26, i25, i3);
 HEAP32[i10 >> 2] = HEAP32[i22 >> 2];
 i28 = HEAP32[i14 >> 2] | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i2 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i21, i28, i2, i19, i18) | 0;
 if (i23) {
  _free(i23);
  i1 = HEAP32[i20 >> 2] | 0;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i25);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i26);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i24);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 STACKTOP = i27;
 return i2 | 0;
}

function __ZN7BihTree8buildRecEiii(i20, i18, i19, i17) {
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 i17 = i17 | 0;
 var d1 = 0.0, i2 = 0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i21 = 0, d22 = 0.0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i9 = i21 + 36 | 0;
 i8 = i21 + 32 | 0;
 i7 = i21 + 28 | 0;
 i10 = i21 + 24 | 0;
 i11 = i21 + 8 | 0;
 i12 = i21 + 4 | 0;
 i13 = i21;
 i2 = i21 + 12 | 0;
 if ((i19 | 0) == (i18 | 0)) {
  i21 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, 20377, 11);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i21, i2);
  ___cxa_throw(i21 | 0, 16, 12);
 }
 i16 = i20 + 12 | 0;
 i5 = i20 + 16 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i16 >> 2] | 0;
 i14 = i6 - i2 | 0;
 i15 = (i14 | 0) / 28 | 0;
 if ((i14 | 0) == -28) {
  i4 = i2 + ((i15 + 1 | 0) * 28 | 0) | 0;
  if ((i6 | 0) == (i4 | 0)) i14 = i2; else {
   HEAP32[i5 >> 2] = i6 + (~(((i6 + -28 - i4 | 0) >>> 0) / 28 | 0) * 28 | 0);
   i14 = i2;
  }
 } else {
  __ZNSt3__16vectorIN7BihTree4NodeENS_9allocatorIS2_EEE8__appendEj(i16, 1);
  i14 = HEAP32[i16 >> 2] | 0;
 }
 HEAP32[i14 + (i15 * 28 | 0) >> 2] = i18;
 HEAP32[i14 + (i15 * 28 | 0) + 4 >> 2] = i19;
 i2 = i19 - i18 | 0;
 if ((i2 | 0) < 6) {
  STACKTOP = i21;
  return i15 | 0;
 }
 i6 = ((i2 | 0) / 2 | 0) + i18 | 0;
 i5 = HEAP32[i20 >> 2] | 0;
 i2 = i5 + (i18 << 2) | 0;
 i4 = i5 + (i6 << 2) | 0;
 i5 = i5 + (i19 << 2) | 0;
 if (!i17) {
  HEAP32[i10 >> 2] = 29;
  HEAP32[i11 >> 2] = i2;
  HEAP32[i12 >> 2] = i4;
  HEAP32[i13 >> 2] = i5;
  HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
  __ZNSt3__113__nth_elementIRPFbPK6ObjectS3_ENS_11__wrap_iterIPPS1_EEEEvT0_SB_SB_T_(i7, i8, i9, i10);
 } else {
  HEAP32[i10 >> 2] = 30;
  HEAP32[i11 >> 2] = i2;
  HEAP32[i12 >> 2] = i4;
  HEAP32[i13 >> 2] = i5;
  HEAP32[i7 >> 2] = HEAP32[i11 >> 2];
  HEAP32[i8 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i9 >> 2] = HEAP32[i13 >> 2];
  __ZNSt3__113__nth_elementIRPFbPK6ObjectS3_ENS_11__wrap_iterIPPS1_EEEEvT0_SB_SB_T_(i7, i8, i9, i10);
 }
 i4 = HEAP32[i20 >> 2] | 0;
 i2 = HEAP32[i4 + (i18 << 2) >> 2] | 0;
 d1 = +HEAPF32[i2 + 12 + (i17 << 2) >> 2] + +HEAPF32[i2 + 20 + (i17 << 2) >> 2] * .5;
 i2 = i18 + 1 | 0;
 if ((i2 | 0) < (i6 | 0)) {
  do {
   i13 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
   d3 = +HEAPF32[i13 + 12 + (i17 << 2) >> 2] + +HEAPF32[i13 + 20 + (i17 << 2) >> 2];
   d1 = d3 > d1 ? d3 : d1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i6 | 0));
  d3 = d1;
 } else d3 = d1;
 i2 = HEAP32[i4 + (i6 << 2) >> 2] | 0;
 d1 = +HEAPF32[i2 + 12 + (i17 << 2) >> 2] - +HEAPF32[i2 + 20 + (i17 << 2) >> 2] * .5;
 i2 = i6 + 1 | 0;
 if ((i2 | 0) < (i19 | 0)) do {
  i13 = HEAP32[i4 + (i2 << 2) >> 2] | 0;
  d22 = +HEAPF32[i13 + 12 + (i17 << 2) >> 2] - +HEAPF32[i13 + 20 + (i17 << 2) >> 2] * .5;
  d1 = d22 < d1 ? d22 : d1;
  i2 = i2 + 1 | 0;
 } while ((i2 | 0) != (i19 | 0));
 HEAP32[i14 + (i15 * 28 | 0) + 16 >> 2] = i17;
 HEAPF32[i14 + (i15 * 28 | 0) + 20 >> 2] = d3;
 HEAPF32[i14 + (i15 * 28 | 0) + 24 >> 2] = d1;
 i17 = 1 - i17 | 0;
 i18 = __ZN7BihTree8buildRecEiii(i20, i18, i6, i17) | 0;
 i19 = __ZN7BihTree8buildRecEiii(i20, i6, i19, i17) | 0;
 i20 = HEAP32[i16 >> 2] | 0;
 HEAP32[i20 + (i15 * 28 | 0) + 8 >> 2] = i18;
 HEAP32[i20 + (i15 * 28 | 0) + 12 >> 2] = i19;
 STACKTOP = i21;
 return i15 | 0;
}

function __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEbT0_S9_T_(i18, i17, i1) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 switch (i17 - i18 >> 3 | 0) {
 case 2:
  {
   i5 = i17 + -8 | 0;
   d6 = +HEAPF32[i5 >> 2];
   d7 = +HEAPF32[i18 >> 2];
   do if (!(d6 < d7)) {
    if (d7 < d6) {
     i18 = 1;
     return i18 | 0;
    }
    i4 = i17 + -4 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i1 = i18 + 4 | 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (i3 >>> 0 < i2 >>> 0) break; else {
     i18 = 1;
     return i18 | 0;
    }
   } else {
    i2 = i18 + 4 | 0;
    i3 = i17 + -4 | 0;
    i1 = i2;
    i4 = i3;
    i3 = HEAP32[i3 >> 2] | 0;
    i2 = HEAP32[i2 >> 2] | 0;
   } while (0);
   HEAPF32[i18 >> 2] = d6;
   HEAPF32[i5 >> 2] = d7;
   HEAP32[i1 >> 2] = i3;
   HEAP32[i4 >> 2] = i2;
   i18 = 1;
   return i18 | 0;
  }
 case 3:
  {
   __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i18, i18 + 8 | 0, i17 + -8 | 0, i1) | 0;
   i18 = 1;
   return i18 | 0;
  }
 case 4:
  {
   __ZNSt3__17__sort4IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_T_(i18, i18 + 8 | 0, i18 + 16 | 0, i17 + -8 | 0, i1) | 0;
   i18 = 1;
   return i18 | 0;
  }
 case 5:
  {
   __ZNSt3__17__sort5IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i18, i18 + 8 | 0, i18 + 16 | 0, i18 + 24 | 0, i17 + -8 | 0, i1) | 0;
   i18 = 1;
   return i18 | 0;
  }
 case 1:
 case 0:
  {
   i18 = 1;
   return i18 | 0;
  }
 default:
  {
   i3 = i18 + 16 | 0;
   __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i18, i18 + 8 | 0, i3, i1) | 0;
   i1 = i18 + 24 | 0;
   if ((i1 | 0) == (i17 | 0)) {
    i18 = 1;
    return i18 | 0;
   } else i2 = 0;
   while (1) {
    d7 = +HEAPF32[i1 >> 2];
    d6 = +HEAPF32[i3 >> 2];
    if (!(d7 < d6)) {
     if (!(d6 < d7) ? (i12 = i1 + 4 | 0, i13 = HEAP32[i12 >> 2] | 0, i14 = i3 + 4 | 0, i15 = HEAP32[i14 >> 2] | 0, i13 >>> 0 < i15 >>> 0) : 0) {
      i5 = i12;
      i4 = i14;
      i11 = i13;
      i8 = i15;
      i16 = 17;
     }
    } else {
     i11 = i1 + 4 | 0;
     i8 = i3 + 4 | 0;
     i5 = i11;
     i4 = i8;
     i11 = HEAP32[i11 >> 2] | 0;
     i8 = HEAP32[i8 >> 2] | 0;
     i16 = 17;
    }
    if ((i16 | 0) == 17) {
     i16 = 0;
     i10 = i11;
     HEAPF32[i1 >> 2] = d6;
     HEAP32[i5 >> 2] = i8;
     L14 : do if ((i3 | 0) != (i18 | 0)) {
      i9 = i3;
      while (1) {
       i3 = i9 + -8 | 0;
       d6 = +HEAPF32[i3 >> 2];
       if (d7 < d6) {
        i5 = i9 + -4 | 0;
        i4 = i5;
        i5 = HEAP32[i5 >> 2] | 0;
       } else {
        if (d6 < d7) {
         i3 = i9;
         break L14;
        }
        i8 = i9 + -4 | 0;
        i5 = HEAP32[i8 >> 2] | 0;
        if (i10 >>> 0 >= i5 >>> 0) {
         i3 = i9;
         break L14;
        }
        i4 = i8;
       }
       HEAPF32[i9 >> 2] = d6;
       HEAP32[i9 + 4 >> 2] = i5;
       if ((i3 | 0) == (i18 | 0)) break; else i9 = i3;
      }
     } while (0);
     HEAPF32[i3 >> 2] = d7;
     HEAP32[i4 >> 2] = i11;
     i2 = i2 + 1 | 0;
     if ((i2 | 0) == 8) break;
    }
    i3 = i1 + 8 | 0;
    if ((i3 | 0) == (i17 | 0)) {
     i1 = 1;
     i16 = 27;
     break;
    } else {
     i11 = i1;
     i1 = i3;
     i3 = i11;
    }
   }
   if ((i16 | 0) == 27) return i1 | 0;
   i18 = (i1 + 8 | 0) == (i17 | 0);
   return i18 | 0;
  }
 }
 return 0;
}

function __ZNSt3__16vectorI8PolylineNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0) + 1 | 0;
 if (i3 >>> 0 > 153391689) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 28 | 0;
 if (i2 >>> 0 < 76695844) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 153391689;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 28 | 0) | 0;
 }
 i3 = i5 + (i1 * 28 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 28 | 0) | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 i6 = i7 + 4 | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 4 >> 2] = HEAP32[i6 >> 2];
 i4 = i7 + 8 | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i6 = i7 + 12 | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 20 >> 2] = 0;
 HEAP32[i5 + (i1 * 28 | 0) + 12 >> 2] = HEAP32[i6 >> 2];
 i4 = i7 + 16 | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 16 >> 2] = HEAP32[i4 >> 2];
 i12 = i7 + 20 | 0;
 HEAP32[i5 + (i1 * 28 | 0) + 20 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i12 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP8[i5 + (i1 * 28 | 0) + 24 >> 0] = HEAP8[i7 + 24 >> 0] | 0;
 i6 = i5 + ((i1 + 1 | 0) * 28 | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i9 = i5;
 } else {
  do {
   i4 = i3 + -28 | 0;
   i12 = i1;
   i1 = i1 + -28 | 0;
   HEAP32[i4 >> 2] = 0;
   i7 = i3 + -24 | 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i3 + -20 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   i4 = i12 + -24 | 0;
   HEAP32[i7 >> 2] = HEAP32[i4 >> 2];
   i7 = i12 + -20 | 0;
   HEAP32[i3 + -20 >> 2] = HEAP32[i7 >> 2];
   HEAP32[i7 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   i4 = i3 + -16 | 0;
   i7 = i12 + -16 | 0;
   HEAP32[i4 >> 2] = 0;
   i13 = i3 + -12 | 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i3 + -8 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
   i4 = i12 + -12 | 0;
   HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
   i13 = i12 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i13 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP8[i3 + -4 >> 0] = HEAP8[i12 + -4 >> 0] | 0;
   i3 = i2 + -28 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i9 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i7 = i9;
 if ((i1 | 0) != (i7 | 0)) do {
  i6 = i1;
  i1 = i1 + -28 | 0;
  i2 = HEAP32[i6 + -16 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i6 + -12 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i4;
  if (i4) {
   i2 = i6 + -24 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
   __ZdlPv(i4);
  }
 } while ((i1 | 0) != (i7 | 0));
 if (!i9) return;
 __ZdlPv(i9);
 return;
}

function __ZN8Document14addAgentRadiusEf(i12, d16) {
 i12 = i12 | 0;
 d16 = +d16;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i17 + 8 | 0;
 i13 = i17;
 i14 = i12 + 132 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i15 = i12 + 136 | 0;
 i2 = HEAP32[i15 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) {
  STACKTOP = i17;
  return;
 }
 i10 = i12 + 180 | 0;
 i8 = i12 + 184 | 0;
 i6 = HEAP32[i8 >> 2] | 0;
 i7 = (i6 | 0) == 0;
 do if (!i7) {
  i3 = i8;
  i5 = i6;
  L6 : do {
   while (1) {
    if (!(+HEAPF32[i5 + 16 >> 2] < d16)) {
     i3 = i5;
     break;
    }
    i5 = HEAP32[i5 + 4 >> 2] | 0;
    if (!i5) break L6;
   }
   i5 = HEAP32[i3 >> 2] | 0;
  } while ((i5 | 0) != 0);
  if ((i3 | 0) != (i8 | 0) ? !(+HEAPF32[i3 + 16 >> 2] > d16) : 0) {
   STACKTOP = i17;
   return;
  }
  if (!i7) {
   while (1) {
    d4 = +HEAPF32[i6 + 16 >> 2];
    if (d4 > d16) {
     i3 = HEAP32[i6 >> 2] | 0;
     if (!i3) {
      i2 = i6;
      i1 = i6;
      i5 = 13;
      break;
     }
    } else {
     if (!(d4 < d16)) {
      i3 = i6;
      i5 = 19;
      break;
     }
     i5 = i6 + 4 | 0;
     i3 = HEAP32[i5 >> 2] | 0;
     if (!i3) {
      i2 = i5;
      i1 = i6;
      i5 = 17;
      break;
     }
    }
    i6 = i3;
   }
   if ((i5 | 0) == 13) {
    HEAP32[i9 >> 2] = i1;
    i5 = 20;
    break;
   } else if ((i5 | 0) == 17) {
    HEAP32[i9 >> 2] = i1;
    i5 = 20;
    break;
   } else if ((i5 | 0) == 19) {
    HEAP32[i9 >> 2] = i3;
    if (!i3) {
     i2 = i9;
     i1 = i3;
     i5 = 20;
     break;
    } else break;
   }
  } else i5 = 18;
 } else i5 = 18; while (0);
 if ((i5 | 0) == 18) {
  HEAP32[i9 >> 2] = i8;
  i2 = i8;
  i1 = i8;
  i5 = 20;
 }
 if ((i5 | 0) == 20) {
  i3 = __Znwj(32) | 0;
  HEAPF32[i3 + 16 >> 2] = d16;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 + 24 >> 2] = 0;
  HEAP32[i3 + 28 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = i1;
  HEAP32[i2 >> 2] = i3;
  i1 = HEAP32[HEAP32[i10 >> 2] >> 2] | 0;
  if (!i1) i1 = i3; else {
   HEAP32[i10 >> 2] = i1;
   i1 = HEAP32[i2 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i12 + 184 >> 2] | 0, i1);
  i2 = i12 + 188 | 0;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
  i2 = HEAP32[i15 >> 2] | 0;
  i1 = HEAP32[i14 >> 2] | 0;
 }
 i9 = i3 + 20 | 0;
 i8 = (i2 - i1 | 0) / 12 | 0;
 i3 = i3 + 24 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i7 = i5 - i6 >> 3;
 if (i8 >>> 0 <= i7 >>> 0) {
  if (i8 >>> 0 < i7 >>> 0 ? (i11 = i6 + (i8 << 3) | 0, (i5 | 0) != (i11 | 0)) : 0) HEAP32[i3 >> 2] = i5 + (~((i5 + -8 - i11 | 0) >>> 3) << 3);
 } else {
  __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEE8__appendEj(i9, i8 - i7 | 0);
  i2 = HEAP32[i15 >> 2] | 0;
  i1 = HEAP32[i14 >> 2] | 0;
 }
 if ((i2 | 0) == (i1 | 0)) {
  STACKTOP = i17;
  return;
 }
 i6 = i12 + 120 | 0;
 i5 = 0;
 do {
  i3 = HEAP32[(HEAP32[i6 >> 2] | 0) + (i5 << 2) >> 2] | 0;
  if (i3) {
   i2 = (HEAP32[i9 >> 2] | 0) + (i5 << 3) | 0;
   FUNCTION_TABLE_viid[HEAP32[(HEAP32[i3 >> 2] | 0) + 12 >> 2] & 3](i13, i3, d16);
   i12 = i13;
   i1 = HEAP32[i12 + 4 >> 2] | 0;
   HEAP32[i2 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i2 + 4 >> 2] = i1;
   i2 = HEAP32[i15 >> 2] | 0;
   i1 = HEAP32[i14 >> 2] | 0;
  }
  i5 = i5 + 1 | 0;
 } while (i5 >>> 0 < ((i2 - i1 | 0) / 12 | 0) >>> 0);
 STACKTOP = i17;
 return;
}

function __ZN6MapDef6addBoxERK4Vec2S2_(i9, i4, i5) {
 i9 = i9 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12 + 4 | 0;
 i10 = i12;
 i11 = __Znwj(20) | 0;
 HEAP8[i11 + 16 >> 0] = 0;
 i3 = __Znwj(12) | 0;
 i7 = i9 + 4 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 - (HEAP32[i9 >> 2] | 0) >> 2;
 i13 = i4;
 i6 = HEAP32[i13 + 4 >> 2] | 0;
 i1 = i3 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i1 + 4 >> 2] = i6;
 i1 = i3;
 HEAP32[i8 >> 2] = i1;
 i6 = i9 + 8 | 0;
 if (i2 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i8);
  i1 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  if (i1) __ZdlPv(i1);
 } else {
  HEAP32[i2 >> 2] = i1;
  HEAP32[i7 >> 2] = i2 + 4;
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i11 >> 2] = i3;
 i13 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i5 + 4 >> 2] | 0;
 i3 = __Znwj(12) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = i1 - (HEAP32[i9 >> 2] | 0) >> 2;
 HEAP32[i3 + 4 >> 2] = i13;
 HEAP32[i3 + 8 >> 2] = i2;
 i2 = i3;
 HEAP32[i8 >> 2] = i2;
 if (i1 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i8);
  i1 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  if (i1) __ZdlPv(i1);
 } else {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i7 >> 2] = i1 + 4;
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i11 + 4 >> 2] = i3;
 i3 = __Znwj(12) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = i1 - (HEAP32[i9 >> 2] | 0) >> 2;
 i14 = i5;
 i13 = HEAP32[i14 + 4 >> 2] | 0;
 i2 = i3 + 4 | 0;
 HEAP32[i2 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i2 + 4 >> 2] = i13;
 i2 = i3;
 HEAP32[i8 >> 2] = i2;
 if (i1 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i8);
  i1 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  if (i1) __ZdlPv(i1);
 } else {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i7 >> 2] = i1 + 4;
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i11 + 8 >> 2] = i3;
 i14 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = __Znwj(12) | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 HEAP32[i3 >> 2] = i1 - (HEAP32[i9 >> 2] | 0) >> 2;
 HEAP32[i3 + 4 >> 2] = i14;
 HEAP32[i3 + 8 >> 2] = i2;
 i2 = i3;
 HEAP32[i8 >> 2] = i2;
 if (i1 >>> 0 >= (HEAP32[i6 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i8);
  i1 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  if (i1) __ZdlPv(i1);
 } else {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i7 >> 2] = i1 + 4;
  HEAP32[i8 >> 2] = 0;
 }
 HEAP32[i11 + 12 >> 2] = i3;
 HEAP32[i10 >> 2] = i11;
 i1 = i9 + 28 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i9 + 32 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = i11;
  HEAP32[i1 >> 2] = i2 + 4;
  HEAP32[i10 >> 2] = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 __ZNSt3__16vectorINS_10unique_ptrI5AABoxNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9 + 24 | 0, i10);
 i1 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = 0;
 if (!i1) {
  STACKTOP = i12;
  return i11 | 0;
 }
 __ZdlPv(i1);
 STACKTOP = i12;
 return i11 | 0;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i1, i10, i11, i3, i12, i13, i9, i2) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i13 = i13 | 0;
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i14 = 0;
 HEAP32[i11 >> 2] = i1;
 HEAP32[i13 >> 2] = i3;
 if (i2 & 4) {
  i1 = HEAP32[i11 >> 2] | 0;
  i2 = i10;
  if ((((i2 - i1 | 0) > 2 ? (HEAP8[i1 >> 0] | 0) == -17 : 0) ? (HEAP8[i1 + 1 >> 0] | 0) == -69 : 0) ? (HEAP8[i1 + 2 >> 0] | 0) == -65 : 0) {
   HEAP32[i11 >> 2] = i1 + 3;
   i3 = HEAP32[i13 >> 2] | 0;
   i8 = i2;
  } else i8 = i2;
 } else i8 = i10;
 i2 = HEAP32[i11 >> 2] | 0;
 i1 = i2 >>> 0 < i10 >>> 0;
 L9 : do if (i1 & i3 >>> 0 < i12 >>> 0) while (1) {
  i1 = HEAP8[i2 >> 0] | 0;
  i7 = i1 & 255;
  do if (i1 << 24 >> 24 > -1) {
   if (i7 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i7;
   HEAP32[i11 >> 2] = i2 + 1;
  } else {
   if ((i1 & 255) < 194) {
    i1 = 2;
    break L9;
   }
   if ((i1 & 255) < 224) {
    if ((i8 - i2 | 0) < 2) {
     i1 = 1;
     break L9;
    }
    i1 = HEAPU8[i2 + 1 >> 0] | 0;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = i1 & 63 | i7 << 6 & 1984;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 2;
    break;
   }
   if ((i1 & 255) < 240) {
    if ((i8 - i2 | 0) < 3) {
     i1 = 1;
     break L9;
    }
    i4 = HEAP8[i2 + 1 >> 0] | 0;
    i1 = HEAP8[i2 + 2 >> 0] | 0;
    switch (i7 | 0) {
    case 224:
     {
      if ((i4 & -32) << 24 >> 24 != -96) {
       i1 = 2;
       break L9;
      }
      break;
     }
    case 237:
     {
      if ((i4 & -32) << 24 >> 24 != -128) {
       i1 = 2;
       break L9;
      }
      break;
     }
    default:
     if ((i4 & -64) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
    }
    i1 = i1 & 255;
    if ((i1 & 192 | 0) != 128) {
     i1 = 2;
     break L9;
    }
    i1 = (i4 & 255) << 6 & 4032 | i7 << 12 & 61440 | i1 & 63;
    if (i1 >>> 0 > i9 >>> 0) {
     i1 = 2;
     break L9;
    }
    HEAP32[i3 >> 2] = i1;
    HEAP32[i11 >> 2] = i2 + 3;
    break;
   }
   if ((i1 & 255) >= 245) {
    i1 = 2;
    break L9;
   }
   if ((i8 - i2 | 0) < 4) {
    i1 = 1;
    break L9;
   }
   i6 = HEAP8[i2 + 1 >> 0] | 0;
   i1 = HEAP8[i2 + 2 >> 0] | 0;
   i4 = HEAP8[i2 + 3 >> 0] | 0;
   switch (i7 | 0) {
   case 240:
    {
     if ((i6 + 112 & 255) >= 48) {
      i1 = 2;
      break L9;
     }
     break;
    }
   case 244:
    {
     if ((i6 & -16) << 24 >> 24 != -128) {
      i1 = 2;
      break L9;
     }
     break;
    }
   default:
    if ((i6 & -64) << 24 >> 24 != -128) {
     i1 = 2;
     break L9;
    }
   }
   i5 = i1 & 255;
   if ((i5 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = i4 & 255;
   if ((i1 & 192 | 0) != 128) {
    i1 = 2;
    break L9;
   }
   i1 = (i6 & 255) << 12 & 258048 | i7 << 18 & 1835008 | i5 << 6 & 4032 | i1 & 63;
   if (i1 >>> 0 > i9 >>> 0) {
    i1 = 2;
    break L9;
   }
   HEAP32[i3 >> 2] = i1;
   HEAP32[i11 >> 2] = i2 + 4;
  } while (0);
  i3 = (HEAP32[i13 >> 2] | 0) + 4 | 0;
  HEAP32[i13 >> 2] = i3;
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2 >>> 0 < i10 >>> 0;
  if (!(i1 & i3 >>> 0 < i12 >>> 0)) {
   i14 = 38;
   break;
  }
 } else i14 = 38; while (0);
 if ((i14 | 0) == 38) i1 = i1 & 1;
 return i1 | 0;
}

function __ZN8Document8addAgentERK4Vec2P4Goalfff(i16, i4, i14, d15, d3, d8) {
 i16 = i16 | 0;
 i4 = i4 | 0;
 i14 = i14 | 0;
 d15 = +d15;
 d3 = +d3;
 d8 = +d8;
 var i1 = 0, i2 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i17 = 0, d18 = 0.0, i19 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i17 + 4 | 0;
 i9 = i17;
 d3 = d3 < 0.0 ? 1.0 : d3;
 i12 = __Znwj(180) | 0;
 i10 = i16 + 4 | 0;
 i1 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i16 >> 2] | 0) >> 2;
 i11 = (i14 | 0) != 0;
 if (i11) {
  d5 = +HEAPF32[i14 >> 2];
  d6 = +HEAPF32[i14 + 4 >> 2];
  d7 = +HEAPF32[i14 + 8 >> 2];
  i2 = HEAP32[i14 + 12 >> 2] | 0;
 } else {
  d5 = 34028234663852886.0e22;
  d6 = 34028234663852886.0e22;
  d7 = 0.0;
  i2 = 0;
 }
 d18 = d15 * 2.0;
 HEAP32[i12 + 4 >> 2] = 2;
 HEAP32[i12 + 8 >> 2] = i1;
 i19 = i4;
 i4 = HEAP32[i19 + 4 >> 2] | 0;
 i1 = i12 + 12 | 0;
 HEAP32[i1 >> 2] = HEAP32[i19 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 HEAPF32[i12 + 20 >> 2] = d18;
 HEAPF32[i12 + 24 >> 2] = d18;
 HEAPF32[i12 + 28 >> 2] = d15;
 HEAP32[i12 >> 2] = 5548;
 HEAPF32[i12 + 32 >> 2] = d5;
 HEAPF32[i12 + 36 >> 2] = d6;
 HEAPF32[i12 + 40 >> 2] = d7;
 HEAP32[i12 + 44 >> 2] = i2;
 HEAP32[i12 + 48 >> 2] = 0;
 HEAP32[i12 + 52 >> 2] = 10;
 HEAPF32[i12 + 56 >> 2] = d18;
 HEAPF32[i12 + 60 >> 2] = inf;
 HEAPF32[i12 + 64 >> 2] = d8 < 0.0 ? d3 * 2.0 : d8;
 HEAPF32[i12 + 68 >> 2] = d3;
 HEAPF32[i12 + 72 >> 2] = 0.0;
 HEAPF32[i12 + 76 >> 2] = 0.0;
 HEAP32[i12 + 80 >> 2] = -1;
 HEAP32[i12 + 84 >> 2] = 0;
 HEAP8[i12 + 88 >> 0] = 0;
 HEAP8[i12 + 89 >> 0] = 0;
 i2 = i12 + 92 | 0;
 i1 = i12 + 164 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 HEAP32[i2 + 28 >> 2] = 0;
 HEAP8[i2 + 32 >> 0] = 0;
 i2 = i12 + 128 | 0;
 i4 = i2 + 36 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i4 | 0));
 HEAP32[i1 >> 2] = 5580;
 HEAPF32[i12 + 168 >> 2] = 34028234663852886.0e22;
 HEAPF32[i12 + 172 >> 2] = 34028234663852886.0e22;
 HEAPF32[i12 + 176 >> 2] = 0.0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i9 >> 2] = i12;
 i1 = i16 + 76 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i4 = i12;
 if (i2 >>> 0 < (HEAP32[i16 + 80 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = i4;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
 } else __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i16 + 72 | 0, i9);
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i16 + 8 >> 2] | 0)) {
  __ZNSt3__16vectorIP5AgentNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i16, i13);
  i1 = HEAP32[i10 >> 2] | 0;
 } else {
  HEAP32[i1 >> 2] = i4;
  i1 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
  HEAP32[i10 >> 2] = i1;
 }
 if ((i1 - (HEAP32[i16 >> 2] | 0) | 0) == 4) HEAP32[i16 + 216 >> 2] = i4;
 if (!i11) {
  __ZN8Document14addAgentRadiusEf(i16, d15);
  STACKTOP = i17;
  return i12 | 0;
 }
 i1 = i14 + 20 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i14 + 24 >> 2] | 0)) {
  __ZNSt3__16vectorIP5AgentNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i14 + 16 | 0, i13);
  __ZN8Document14addAgentRadiusEf(i16, d15);
  STACKTOP = i17;
  return i12 | 0;
 } else {
  HEAP32[i2 >> 2] = i4;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  __ZN8Document14addAgentRadiusEf(i16, d15);
  STACKTOP = i17;
  return i12 | 0;
 }
 return 0;
}

function _fmod(d12, d1) {
 d12 = +d12;
 d1 = +d1;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 HEAPF64[tempDoublePtr >> 3] = d12;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i9 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i10 = HEAP32[tempDoublePtr >> 2] | 0;
 i11 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i3 = _bitshift64Lshr(i2 | 0, i9 | 0, 52) | 0;
 i3 = i3 & 2047;
 i7 = _bitshift64Lshr(i10 | 0, i11 | 0, 52) | 0;
 i7 = i7 & 2047;
 i13 = i9 & -2147483648;
 i6 = _bitshift64Shl(i10 | 0, i11 | 0, 1) | 0;
 i8 = tempRet0;
 L1 : do if (!((i6 | 0) == 0 & (i8 | 0) == 0) ? (i5 = i11 & 2147483647, !(i5 >>> 0 > 2146435072 | (i5 | 0) == 2146435072 & i10 >>> 0 > 0 | (i3 | 0) == 2047)) : 0) {
  i4 = _bitshift64Shl(i2 | 0, i9 | 0, 1) | 0;
  i5 = tempRet0;
  if (!(i5 >>> 0 > i8 >>> 0 | (i5 | 0) == (i8 | 0) & i4 >>> 0 > i6 >>> 0)) return +((i4 | 0) == (i6 | 0) & (i5 | 0) == (i8 | 0) ? d12 * 0.0 : d12);
  if (!i3) {
   i3 = _bitshift64Shl(i2 | 0, i9 | 0, 12) | 0;
   i4 = tempRet0;
   if ((i4 | 0) > -1 | (i4 | 0) == -1 & i3 >>> 0 > 4294967295) {
    i5 = i3;
    i3 = 0;
    do {
     i3 = i3 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i4 | 0, 1) | 0;
     i4 = tempRet0;
    } while ((i4 | 0) > -1 | (i4 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i3 = 0;
   i2 = _bitshift64Shl(i2 | 0, i9 | 0, 1 - i3 | 0) | 0;
   i4 = tempRet0;
  } else i4 = i9 & 1048575 | 1048576;
  if (!i7) {
   i5 = _bitshift64Shl(i10 | 0, i11 | 0, 12) | 0;
   i6 = tempRet0;
   if ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295) {
    i7 = 0;
    do {
     i7 = i7 + -1 | 0;
     i5 = _bitshift64Shl(i5 | 0, i6 | 0, 1) | 0;
     i6 = tempRet0;
    } while ((i6 | 0) > -1 | (i6 | 0) == -1 & i5 >>> 0 > 4294967295);
   } else i7 = 0;
   i10 = _bitshift64Shl(i10 | 0, i11 | 0, 1 - i7 | 0) | 0;
   i9 = tempRet0;
  } else i9 = i11 & 1048575 | 1048576;
  i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
  i6 = tempRet0;
  i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
  L23 : do if ((i3 | 0) > (i7 | 0)) {
   while (1) {
    if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) break; else {
     i2 = i8;
     i4 = i6;
    }
    i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
    i4 = tempRet0;
    i3 = i3 + -1 | 0;
    i8 = _i64Subtract(i2 | 0, i4 | 0, i10 | 0, i9 | 0) | 0;
    i6 = tempRet0;
    i5 = (i6 | 0) > -1 | (i6 | 0) == -1 & i8 >>> 0 > 4294967295;
    if ((i3 | 0) <= (i7 | 0)) break L23;
   }
   d1 = d12 * 0.0;
   break L1;
  } while (0);
  if (i5) if ((i2 | 0) == (i10 | 0) & (i4 | 0) == (i9 | 0)) {
   d1 = d12 * 0.0;
   break;
  } else {
   i4 = i6;
   i2 = i8;
  }
  if (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0) do {
   i2 = _bitshift64Shl(i2 | 0, i4 | 0, 1) | 0;
   i4 = tempRet0;
   i3 = i3 + -1 | 0;
  } while (i4 >>> 0 < 1048576 | (i4 | 0) == 1048576 & i2 >>> 0 < 0);
  if ((i3 | 0) > 0) {
   i11 = _i64Add(i2 | 0, i4 | 0, 0, -1048576) | 0;
   i2 = tempRet0;
   i3 = _bitshift64Shl(i3 | 0, 0, 52) | 0;
   i2 = i2 | tempRet0;
   i3 = i11 | i3;
  } else {
   i3 = _bitshift64Lshr(i2 | 0, i4 | 0, 1 - i3 | 0) | 0;
   i2 = tempRet0;
  }
  HEAP32[tempDoublePtr >> 2] = i3;
  HEAP32[tempDoublePtr + 4 >> 2] = i2 | i13;
  d1 = +HEAPF64[tempDoublePtr >> 3];
 } else i14 = 3; while (0);
 if ((i14 | 0) == 3) {
  d1 = d12 * d1;
  d1 = d1 / d1;
 }
 return +d1;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 if (i3 & 2) if ((i2 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i6 = i8;
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP16[i1 >> 1] | 0;
   i5 = i3 & 65535;
   if (i5 >>> 0 > i7 >>> 0) {
    i1 = 2;
    break L4;
   }
   do if ((i3 & 65535) < 128) {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i2 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } else {
    if ((i3 & 65535) < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 6 | 192;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) < 55296) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i3 & 65535) >= 56320) {
     if ((i3 & 65535) < 57344) {
      i1 = 2;
      break L4;
     }
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i2 - i1 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i5 >>> 12 | 224;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 >>> 6 & 63 | 128;
     i4 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i4 + 1;
     HEAP8[i4 >> 0] = i5 & 63 | 128;
     break;
    }
    if ((i6 - i1 | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i1 = i1 + 2 | 0;
    i3 = HEAPU16[i1 >> 1] | 0;
    if ((i3 & 64512 | 0) != 56320) {
     i1 = 2;
     break L4;
    }
    if ((i2 - (HEAP32[i10 >> 2] | 0) | 0) < 4) {
     i1 = 1;
     break L4;
    }
    i4 = i5 & 960;
    if (((i4 << 10) + 65536 | i5 << 10 & 64512 | i3 & 1023) >>> 0 > i7 >>> 0) {
     i1 = 2;
     break L4;
    }
    HEAP32[i9 >> 2] = i1;
    i1 = (i4 >>> 6) + 1 | 0;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i1 >>> 2 | 240;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 >>> 2 & 15 | i1 << 4 & 48 | 128;
    i4 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i4 + 1;
    HEAP8[i4 >> 0] = i5 << 4 & 48 | i3 >>> 6 & 15 | 128;
    i5 = HEAP32[i10 >> 2] | 0;
    HEAP32[i10 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i3 & 63 | 128;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 2 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0;
 i8 = (i1 | 0) == (i5 | 0);
 HEAP8[i1 + 12 >> 0] = i8 & 1;
 if (i8) return;
 while (1) {
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  i4 = i6 + 12 | 0;
  if (HEAP8[i4 >> 0] | 0) {
   i1 = 37;
   break;
  }
  i8 = i6 + 8 | 0;
  i3 = i1;
  i1 = HEAP32[i8 >> 2] | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if ((i2 | 0) == (i6 | 0)) {
   i2 = HEAP32[i1 + 4 >> 2] | 0;
   if (!i2) {
    i2 = i3;
    i7 = i8;
    i4 = i8;
    i3 = i1;
    i5 = i1;
    i1 = 7;
    break;
   }
   i2 = i2 + 12 | 0;
   if (HEAP8[i2 >> 0] | 0) {
    i2 = i3;
    i7 = i8;
    i4 = i8;
    i3 = i1;
    i5 = i1;
    i1 = 7;
    break;
   }
   HEAP8[i4 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i5 | 0) & 1;
   HEAP8[i2 >> 0] = 1;
  } else {
   if (!i2) {
    i2 = i3;
    i7 = i8;
    i5 = i8;
    i3 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   i2 = i2 + 12 | 0;
   if (HEAP8[i2 >> 0] | 0) {
    i2 = i3;
    i7 = i8;
    i5 = i8;
    i3 = i1;
    i4 = i1;
    i1 = 24;
    break;
   }
   HEAP8[i4 >> 0] = 1;
   HEAP8[i1 + 12 >> 0] = (i1 | 0) == (i5 | 0) & 1;
   HEAP8[i2 >> 0] = 1;
  }
  if ((i1 | 0) == (i5 | 0)) {
   i1 = 37;
   break;
  }
 }
 if ((i1 | 0) == 7) {
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) i1 = i6; else {
   i8 = i6 + 4 | 0;
   i1 = HEAP32[i8 >> 2] | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i8 >> 2] = i2;
   if (!i2) i2 = i3; else {
    HEAP32[i2 + 8 >> 2] = i6;
    i2 = HEAP32[i7 >> 2] | 0;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = i2;
   i2 = HEAP32[i4 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = i1; else HEAP32[i2 + 4 >> 2] = i1;
   HEAP32[i1 >> 2] = i6;
   HEAP32[i7 >> 2] = i1;
   i5 = HEAP32[i3 >> 2] | 0;
  }
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i5 + 12 >> 0] = 0;
  i3 = HEAP32[i5 >> 2] | 0;
  i4 = i3 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i5 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i5;
  i1 = i5 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i5 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 24) {
  if ((HEAP32[i6 >> 2] | 0) == (i2 | 0)) {
   i1 = HEAP32[i6 >> 2] | 0;
   i4 = i1 + 4 | 0;
   i2 = HEAP32[i4 >> 2] | 0;
   HEAP32[i6 >> 2] = i2;
   if (!i2) i2 = i3; else {
    HEAP32[i2 + 8 >> 2] = i6;
    i2 = HEAP32[i7 >> 2] | 0;
   }
   i3 = i1 + 8 | 0;
   HEAP32[i3 >> 2] = i2;
   i2 = HEAP32[i5 >> 2] | 0;
   if ((HEAP32[i2 >> 2] | 0) == (i6 | 0)) HEAP32[i2 >> 2] = i1; else HEAP32[i2 + 4 >> 2] = i1;
   HEAP32[i4 >> 2] = i6;
   HEAP32[i7 >> 2] = i1;
   i4 = HEAP32[i3 >> 2] | 0;
  } else i1 = i6;
  HEAP8[i1 + 12 >> 0] = 1;
  HEAP8[i4 + 12 >> 0] = 0;
  i8 = i4 + 4 | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i8 >> 2] = i1;
  if (i1) HEAP32[i1 + 8 >> 2] = i4;
  i1 = i4 + 8 | 0;
  HEAP32[i3 + 8 >> 2] = HEAP32[i1 >> 2];
  i2 = HEAP32[i1 >> 2] | 0;
  if ((HEAP32[i2 >> 2] | 0) == (i4 | 0)) HEAP32[i2 >> 2] = i3; else HEAP32[i2 + 4 >> 2] = i3;
  HEAP32[i3 >> 2] = i4;
  HEAP32[i1 >> 2] = i3;
  return;
 } else if ((i1 | 0) == 37) return;
}

function __ZN8Document6doStepEfbi(i14, d13, i9, i12) {
 i14 = i14 | 0;
 d13 = +d13;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i15 = 0, d16 = 0.0, d17 = 0.0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i15;
 if (d13 <= 0.0) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = i14 + 72 | 0;
 if ((HEAP32[i14 + 76 >> 2] | 0) == (HEAP32[i1 >> 2] | 0)) {
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i7 = i14 + 84 | 0;
 __ZN7BihTree5buildERNSt3__16vectorIP6ObjectNS0_9allocatorIS3_EEEE(i7, i1);
 i1 = HEAP32[i14 >> 2] | 0;
 i8 = i14 + 4 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) {
  i5 = i14 + 220 | 0;
  i6 = i14 + 216 | 0;
  do {
   i3 = HEAP32[i1 >> 2] | 0;
   if (HEAP32[i3 + 84 >> 2] | 0) {
    __ZN5Agent24computePreferredVelocityEf(i3, d13);
    __ZN5Agent16computeNeighborsER7BihTree(i3, i7);
    i2 = HEAP32[i5 >> 2] | 0;
    if (!i2) i2 = 0; else i2 = (i3 | 0) == (HEAP32[i6 >> 2] | 0) ? i2 : 0;
    __ZN5Agent18computeNewVelocityEP6VODump(i3, i2);
   }
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i4 | 0));
 }
 if (!i9) {
  i14 = 0;
  STACKTOP = i15;
  return i14 | 0;
 }
 i1 = HEAP32[i14 >> 2] | 0;
 i10 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) == (i10 | 0)) {
  i14 = 1;
  STACKTOP = i15;
  return i14 | 0;
 }
 i9 = i1;
 i1 = 1;
 do {
  i8 = HEAP32[i9 >> 2] | 0;
  do if (HEAP32[i8 + 84 >> 2] | 0) {
   i7 = __ZN5Agent6updateEf(i8, d13) | 0;
   HEAP8[i8 + 88 >> 0] = i7 & 1;
   i1 = i1 & i7;
   d17 = +HEAPF32[i8 + 92 >> 2];
   d16 = +HEAPF32[i8 + 96 >> 2];
   if (d17 * d17 + d16 * d16 < .010000000000000002 & (i7 ^ 1) ? (HEAP8[i8 + 89 >> 0] | 0) != 0 : 0) {
    i2 = HEAP32[i8 + 128 >> 2] | 0;
    i6 = HEAP32[i8 + 132 >> 2] | 0;
    if ((i2 | 0) != (i6 | 0)) {
     i7 = i8 + 48 | 0;
     i5 = i2;
     i3 = 1;
     i2 = 0;
     do {
      i4 = HEAP32[i5 + 4 >> 2] | 0;
      if ((HEAP32[i4 + 4 >> 2] | 0) == 2) {
       i3 = i3 & (HEAP32[i4 + 48 >> 2] | 0) == (HEAP32[i7 >> 2] | 0);
       i2 = 1;
      }
      i5 = i5 + 8 | 0;
     } while ((i5 | 0) != (i6 | 0));
     if (!(i3 | i2 ^ 1)) break;
    }
    i7 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(10748, 20435, 1) | 0, i12) | 0, 20437, 7) | 0;
    i7 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i7, HEAP32[i8 + 8 >> 2] | 0) | 0, 20445, 7) | 0;
    HEAP32[i11 >> 2] = __ZNKSt3__18ios_base6getlocEv(i7 + (HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
    i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13432) | 0;
    i6 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 31](i6, 10) | 0;
    __ZNSt3__16localeD2Ev(i11);
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i7, i6) | 0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i7) | 0;
    __ZN8Document10updatePlanEP5Agent(i14, i8);
   }
  } while (0);
  i9 = i9 + 4 | 0;
 } while ((i9 | 0) != (i10 | 0));
 STACKTOP = i15;
 return i1 | 0;
}

function __Z8seekPairP6VertexS0_P8HalfEdge(i12, i13, i15) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i16 + 16 | 0;
 i9 = i16;
 i4 = i12;
 i5 = i13;
 i14 = HEAP32[1460] | 0;
 i7 = (i14 | 0) == 0;
 if (!i7) {
  i1 = 5840;
  i2 = i14;
  L3 : while (1) {
   while (1) {
    i3 = HEAP32[i2 + 16 >> 2] | 0;
    if (i3 >>> 0 >= i13 >>> 0) {
     if (i3 >>> 0 > i13 >>> 0) {
      i1 = i2;
      break;
     }
     if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 >= i12 >>> 0) {
      i1 = i2;
      break;
     }
    }
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i2) {
     i8 = i1;
     break L3;
    }
   }
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i8 = i1;
    break;
   }
  }
  do if ((i8 | 0) != 5840 ? (i6 = HEAP32[i8 + 16 >> 2] | 0, i6 >>> 0 <= i13 >>> 0) : 0) {
   if (i6 >>> 0 >= i13 >>> 0 ? (HEAP32[i8 + 20 >> 2] | 0) >>> 0 > i12 >>> 0 : 0) break;
   i3 = HEAP32[i8 + 24 >> 2] | 0;
   i1 = HEAP32[i8 + 4 >> 2] | 0;
   if (!i1) {
    i2 = i8;
    while (1) {
     i1 = HEAP32[i2 + 8 >> 2] | 0;
     if ((HEAP32[i1 >> 2] | 0) == (i2 | 0)) break; else i2 = i1;
    }
   } else while (1) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) break; else i1 = i2;
   }
   if ((HEAP32[1459] | 0) == (i8 | 0)) HEAP32[1459] = i1;
   HEAP32[1461] = (HEAP32[1461] | 0) + -1;
   __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(i14, i8);
   __ZdlPv(i8);
   HEAP32[i3 + 8 >> 2] = i15;
   HEAP32[i15 + 8 >> 2] = i3;
   STACKTOP = i16;
   return;
  } while (0);
  HEAP32[i11 >> 2] = i4;
  HEAP32[i11 + 4 >> 2] = i5;
  if (!i7) {
   i1 = 5840;
   i2 = i14;
   L31 : do {
    while (1) {
     i3 = HEAP32[i2 + 16 >> 2] | 0;
     if (i3 >>> 0 >= i12 >>> 0) {
      if (i3 >>> 0 > i12 >>> 0) {
       i1 = i2;
       break;
      }
      if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 >= i13 >>> 0) {
       i1 = i2;
       break;
      }
     }
     i2 = HEAP32[i2 + 4 >> 2] | 0;
     if (!i2) break L31;
    }
    i2 = HEAP32[i1 >> 2] | 0;
   } while ((i2 | 0) != 0);
   if ((i1 | 0) != 5840 ? (i10 = HEAP32[i1 + 16 >> 2] | 0, i10 >>> 0 <= i12 >>> 0) : 0) {
    if (i10 >>> 0 < i12 >>> 0) {
     i16 = ___cxa_allocate_exception(16) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i9, 21052, 31);
     __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i16, i9);
     ___cxa_throw(i16 | 0, 16, 12);
    }
    if ((HEAP32[i1 + 20 >> 2] | 0) >>> 0 <= i13 >>> 0) {
     i16 = ___cxa_allocate_exception(16) | 0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i9, 21052, 31);
     __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i16, i9);
     ___cxa_throw(i16 | 0, 16, 12);
    }
   }
  }
 } else {
  HEAP32[i11 >> 2] = i4;
  HEAP32[i11 + 4 >> 2] = i5;
 }
 HEAP32[(__ZNSt3__13mapINS_4pairIP6VertexS3_EEP8HalfEdgeNS_4lessIS4_EENS_9allocatorINS1_IKS4_S6_EEEEEixERSA_(5836, i11) | 0) >> 2] = i15;
 STACKTOP = i16;
 return;
}

function __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i8, i10) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i11 + 4 | 0;
 i3 = i11;
 i9 = __Znwj(28) | 0;
 i7 = i9;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i9 + 16 >> 2] = 0;
 HEAP32[i9 + 20 >> 2] = 0;
 HEAP32[i9 + 24 >> 2] = 0;
 HEAP32[i3 >> 2] = i7;
 i1 = i8 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 >= (HEAP32[i8 + 20 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i8 + 12 | 0, i3);
  i5 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   __ZdlPv(i5);
  }
 } else {
  HEAP32[i2 >> 2] = i9;
  HEAP32[i1 >> 2] = i2 + 4;
  HEAP32[i3 >> 2] = 0;
 }
 i5 = HEAP8[i10 >> 0] | 0;
 if (!(((i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i10 + 4 >> 2] | 0) | 0)) {
  STACKTOP = i11;
  return i9 | 0;
 }
 i5 = i8 + 48 | 0;
 i2 = i8 + 52 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 do if (i1) {
  while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if (i9 >>> 0 < i2 >>> 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i3 = i1;
     i2 = i1;
     i4 = 17;
     break;
    } else i1 = i2;
   } else {
    if (i2 >>> 0 >= i9 >>> 0) {
     i4 = 23;
     break;
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i4 = 21;
     break;
    } else i1 = i3;
   }
  }
  if ((i4 | 0) == 17) {
   HEAP32[i6 >> 2] = i2;
   i4 = 24;
   break;
  } else if ((i4 | 0) == 21) {
   HEAP32[i6 >> 2] = i1;
   i3 = i2;
   i2 = i1;
   i4 = 24;
   break;
  } else if ((i4 | 0) == 23) {
   HEAP32[i6 >> 2] = i1;
   if (!i1) {
    i3 = i6;
    i2 = i1;
    i4 = 24;
    break;
   } else break;
  }
 } else {
  HEAP32[i6 >> 2] = i2;
  i3 = i2;
  i4 = 24;
 } while (0);
 if ((i4 | 0) == 24) {
  i1 = __Znwj(32) | 0;
  HEAP32[i1 + 16 >> 2] = i7;
  i7 = i1 + 20 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i3 >> 2] = i1;
  i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  if (!i2) i2 = i1; else {
   HEAP32[i5 >> 2] = i2;
   i2 = HEAP32[i3 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i8 + 52 >> 2] | 0, i2);
  i8 = i8 + 56 | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i1 + 20 | 0, i10) | 0;
 STACKTOP = i11;
 return i9 | 0;
}

function __ZN3p2t12SweepContextD2Ev(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i1 = HEAP32[i11 + 96 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 24 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + 28 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i11 + 100 >> 2] | 0;
 if (i1) {
  i2 = HEAP32[i1 + 24 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + 28 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i11 + 92 >> 2] | 0;
 if (i1) {
  __ZN3p2t14AdvancingFrontD2Ev(i1);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i11 + 104 >> 2] | 0;
 if (i1) __ZdlPv(i1);
 i1 = HEAP32[i11 + 108 >> 2] | 0;
 if (i1) __ZdlPv(i1);
 i1 = HEAP32[i11 + 112 >> 2] | 0;
 if (i1) __ZdlPv(i1);
 i4 = i11 + 80 | 0;
 i8 = i11 + 84 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) {
  i2 = i1;
  i3 = i1;
  do {
   i1 = HEAP32[i2 + 8 >> 2] | 0;
   if (i1) __ZdlPv(i1);
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   i2 = i3;
  } while ((i2 | 0) != (i4 | 0));
 }
 i6 = i11 + 88 | 0;
 if ((HEAP32[i6 >> 2] | 0) != 0 ? (i7 = HEAP32[i8 >> 2] | 0, i9 = (HEAP32[i4 >> 2] | 0) + 4 | 0, i5 = HEAP32[i7 >> 2] | 0, HEAP32[i5 + 4 >> 2] = HEAP32[i9 >> 2], HEAP32[HEAP32[i9 >> 2] >> 2] = i5, HEAP32[i6 >> 2] = 0, (i7 | 0) != (i4 | 0)) : 0) {
  i1 = i7;
  do {
   i9 = i1;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   __ZdlPv(i9);
  } while ((i1 | 0) != (i4 | 0));
 }
 i5 = i11 + 68 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i7 = i11 + 72 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i7 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  i4 = 0;
  do {
   i3 = HEAP32[i2 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i1 = HEAP32[i9 >> 2] | 0;
    i2 = HEAP32[i11 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while (i4 >>> 0 < i1 - i2 >> 2 >>> 0);
 }
 i2 = i11 + 80 | 0;
 if ((HEAP32[i6 >> 2] | 0) != 0 ? (i10 = HEAP32[i8 >> 2] | 0, i8 = (HEAP32[i2 >> 2] | 0) + 4 | 0, i4 = HEAP32[i10 >> 2] | 0, HEAP32[i4 + 4 >> 2] = HEAP32[i8 >> 2], HEAP32[HEAP32[i8 >> 2] >> 2] = i4, HEAP32[i6 >> 2] = 0, (i10 | 0) != (i2 | 0)) : 0) {
  i1 = i10;
  do {
   i10 = i1;
   i1 = HEAP32[i1 + 4 >> 2] | 0;
   __ZdlPv(i10);
  } while ((i1 | 0) != (i2 | 0));
 }
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i7 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i7 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i11 + 56 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i11 + 60 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i11 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i9 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i9 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_(i4, i8, i1, i13, i14, i2, i9, i12) {
 i4 = i4 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i11 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i11 = i16;
 L1 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
  i3 = i1;
  while (1) {
   if (!(HEAP8[i3 >> 0] | 0)) break L1;
   i3 = i3 + 1 | 0;
   if ((i3 | 0) == (i13 | 0)) {
    i3 = i13;
    break;
   }
  }
 } while (0);
 HEAP32[i12 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i7 = i9;
 i10 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) i15 = 29; else {
  L7 : while (1) {
   i6 = i8;
   i5 = HEAP32[i6 + 4 >> 2] | 0;
   i4 = i11;
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = i3;
   i5 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
   i6 = _mbsnrtowcs(i2, i14, i4 - i1 | 0, i7 - i2 >> 2, i8) | 0;
   if (i5) _uselocale(i5) | 0;
   switch (i6 | 0) {
   case 0:
    {
     i1 = 2;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i12 >> 2] | 0) + (i6 << 2) | 0;
   HEAP32[i12 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 19;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i3 | 0) == (i13 | 0)) i3 = i13; else {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i1 = _mbrtowc(i2, i1, 1, i8) | 0;
    if (i3) _uselocale(i3) | 0;
    if (i1) {
     i1 = 2;
     break L6;
    }
    HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + 4;
    i1 = (HEAP32[i14 >> 2] | 0) + 1 | 0;
    HEAP32[i14 >> 2] = i1;
    L20 : do if ((i1 | 0) == (i13 | 0)) i3 = i13; else {
     i3 = i1;
     while (1) {
      if (!(HEAP8[i3 >> 0] | 0)) break L20;
      i3 = i3 + 1 | 0;
      if ((i3 | 0) == (i13 | 0)) {
       i3 = i13;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i12 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i13 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 19) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i12 >> 2] = i2;
  L29 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) {
   L30 : while (1) {
    i3 = _uselocale(HEAP32[i10 >> 2] | 0) | 0;
    i2 = _mbrtowc(i2, i1, i4 - i1 | 0, i11) | 0;
    if (i3) _uselocale(i3) | 0;
    switch (i2 | 0) {
    case -1:
     {
      i15 = 13;
      break L30;
     }
    case -2:
     {
      i15 = 14;
      break L30;
     }
    case 0:
     {
      i1 = i1 + 1 | 0;
      break;
     }
    default:
     i1 = i1 + i2 | 0;
    }
    i2 = (HEAP32[i12 >> 2] | 0) + 4 | 0;
    HEAP32[i12 >> 2] = i2;
    if ((i1 | 0) == (HEAP32[i14 >> 2] | 0)) break L29;
   }
   if ((i15 | 0) == 13) {
    HEAP32[i14 >> 2] = i1;
    i1 = 2;
    break L6;
   } else if ((i15 | 0) == 14) {
    HEAP32[i14 >> 2] = i1;
    i1 = 1;
    break L6;
   }
  } while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = (i1 | 0) != (i13 | 0) & 1;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i13 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__16vectorIN3p2t5PointENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 40 | 0) + 1 | 0;
 if (i3 >>> 0 > 107374182) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 40 | 0;
 if (i2 >>> 0 < 53687091) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 40 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 107374182;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 40 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 40 | 0) | 0;
 }
 i3 = i5 + (i1 * 40 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 40 | 0) | 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i3 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
 HEAP32[i3 + 8 >> 2] = HEAP32[i7 + 8 >> 2];
 HEAP32[i3 + 12 >> 2] = HEAP32[i7 + 12 >> 2];
 HEAP32[i3 + 16 >> 2] = HEAP32[i7 + 16 >> 2];
 HEAP32[i3 + 20 >> 2] = HEAP32[i7 + 20 >> 2];
 i6 = i7 + 24 | 0;
 HEAP32[i5 + (i1 * 40 | 0) + 32 >> 2] = 0;
 HEAP32[i5 + (i1 * 40 | 0) + 24 >> 2] = HEAP32[i6 >> 2];
 i4 = i7 + 28 | 0;
 HEAP32[i5 + (i1 * 40 | 0) + 28 >> 2] = HEAP32[i4 >> 2];
 i7 = i7 + 32 | 0;
 HEAP32[i5 + (i1 * 40 | 0) + 32 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 i6 = i5 + ((i1 + 1 | 0) * 40 | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i4 = i3 + -40 | 0;
   i12 = i1;
   i1 = i1 + -40 | 0;
   HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i1 + 16 >> 2];
   HEAP32[i4 + 20 >> 2] = HEAP32[i1 + 20 >> 2];
   i4 = i3 + -16 | 0;
   i7 = i12 + -16 | 0;
   HEAP32[i4 >> 2] = 0;
   i13 = i3 + -12 | 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i3 + -8 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
   i4 = i12 + -12 | 0;
   HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
   i12 = i12 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   i3 = i2 + -40 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = HEAP32[i1 + -16 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + -12 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  i1 = i1 + -40 | 0;
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 i19 = i16 + 424 | 0;
 i17 = i16 + 24 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 428 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 184;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 13424) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 400 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = 0; else HEAP32[HEAP32[i6 + 8 >> 2] >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 31](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 44 >> 2] & 31](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -4 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP32[i1 >> 2] | 0) != (i3 | 0)) break L10;
   i1 = i1 + 4 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i10 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i8) {
  i1 = HEAP32[i7 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i7 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i13 = 26;
   break;
  } else {
   HEAP32[i11 >> 2] = 0;
   i13 = 24;
   break;
  }
 } else i13 = 24; while (0);
 if ((i13 | 0) == 24 ? i2 : 0) i13 = 26;
 if ((i13 | 0) == 26) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 255](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_(i4, i7, i1, i10, i14, i2, i9, i13) {
 i4 = i4 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i14 = i14 | 0;
 i2 = i2 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i8 = 0, i11 = 0, i12 = 0, i15 = 0, i16 = 0, i17 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i12 = i16;
 i8 = i16 + 8 | 0;
 L1 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
  i3 = i1;
  while (1) {
   if (!(HEAP32[i3 >> 2] | 0)) break L1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i10 | 0)) {
    i3 = i10;
    break;
   }
  }
 } while (0);
 HEAP32[i13 >> 2] = i2;
 HEAP32[i14 >> 2] = i1;
 i6 = i9;
 i11 = i4 + 8 | 0;
 L6 : do if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) i15 = 29; else {
  L7 : while (1) {
   i17 = i7;
   i5 = HEAP32[i17 + 4 >> 2] | 0;
   i4 = i12;
   HEAP32[i4 >> 2] = HEAP32[i17 >> 2];
   HEAP32[i4 + 4 >> 2] = i5;
   i4 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i5 = _wcsnrtombs(i2, i14, i3 - i1 >> 2, i6 - i2 | 0, i7) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i5 | 0) {
   case 0:
    {
     i1 = 1;
     break L6;
    }
   case -1:
    break L7;
   default:
    {}
   }
   i2 = (HEAP32[i13 >> 2] | 0) + i5 | 0;
   HEAP32[i13 >> 2] = i2;
   if ((i2 | 0) == (i9 | 0)) {
    i15 = 15;
    break;
   }
   if ((i3 | 0) == (i10 | 0)) {
    i1 = HEAP32[i14 >> 2] | 0;
    i3 = i10;
   } else {
    i1 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
    i2 = _wcrtomb(i8, 0, i7) | 0;
    if (i1) _uselocale(i1) | 0;
    if ((i2 | 0) == -1) {
     i1 = 2;
     break L6;
    }
    if (i2 >>> 0 > (i6 - (HEAP32[i13 >> 2] | 0) | 0) >>> 0) {
     i1 = 1;
     break L6;
    }
    if (i2) {
     i1 = i8;
     while (1) {
      i5 = HEAP8[i1 >> 0] | 0;
      i17 = HEAP32[i13 >> 2] | 0;
      HEAP32[i13 >> 2] = i17 + 1;
      HEAP8[i17 >> 0] = i5;
      i2 = i2 + -1 | 0;
      if (!i2) break; else i1 = i1 + 1 | 0;
     }
    }
    i1 = (HEAP32[i14 >> 2] | 0) + 4 | 0;
    HEAP32[i14 >> 2] = i1;
    L26 : do if ((i1 | 0) == (i10 | 0)) i3 = i10; else {
     i3 = i1;
     while (1) {
      if (!(HEAP32[i3 >> 2] | 0)) break L26;
      i3 = i3 + 4 | 0;
      if ((i3 | 0) == (i10 | 0)) {
       i3 = i10;
       break;
      }
     }
    } while (0);
    i2 = HEAP32[i13 >> 2] | 0;
   }
   if ((i2 | 0) == (i9 | 0) | (i1 | 0) == (i10 | 0)) {
    i15 = 29;
    break L6;
   }
  }
  if ((i15 | 0) == 15) {
   i1 = HEAP32[i14 >> 2] | 0;
   i15 = 29;
   break;
  }
  HEAP32[i13 >> 2] = i2;
  L35 : do if ((i1 | 0) != (HEAP32[i14 >> 2] | 0)) do {
   i17 = HEAP32[i1 >> 2] | 0;
   i3 = _uselocale(HEAP32[i11 >> 2] | 0) | 0;
   i2 = _wcrtomb(i2, i17, i12) | 0;
   if (i3) _uselocale(i3) | 0;
   if ((i2 | 0) == -1) break L35;
   i2 = (HEAP32[i13 >> 2] | 0) + i2 | 0;
   HEAP32[i13 >> 2] = i2;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (HEAP32[i14 >> 2] | 0)); while (0);
  HEAP32[i14 >> 2] = i1;
  i1 = 2;
 } while (0);
 if ((i15 | 0) == 29) i1 = (i1 | 0) != (i10 | 0) & 1;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE(i1, i10, i11, i4, i2, i12, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i12 = i12 | 0;
 i6 = i6 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0, i9 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 i19 = i16 + 24 | 0;
 i17 = i16 + 32 | 0;
 i15 = i16 + 16 | 0;
 i5 = i16 + 8 | 0;
 i18 = i16 + 4 | 0;
 i3 = i16 + 28 | 0;
 i7 = i16;
 HEAP32[i15 >> 2] = i17;
 i14 = i15 + 4 | 0;
 HEAP32[i14 >> 2] = 184;
 i9 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i18 >> 2] = i9;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i18, 13432) | 0;
 HEAP8[i3 >> 0] = 0;
 i8 = HEAP32[i11 >> 2] | 0;
 HEAP32[i7 >> 2] = i8;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 HEAP32[i19 >> 2] = HEAP32[i7 >> 2];
 i7 = i8;
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_(i10, i19, i4, i18, i2, i12, i3, i1, i15, i5, i17 + 100 | 0) | 0) {
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 + 1 >> 0] = 0;
   HEAP8[i6 >> 0] = 0;
  } else {
   HEAP8[HEAP32[i6 + 8 >> 2] >> 0] = 0;
   HEAP32[i6 + 4 >> 2] = 0;
  }
  if (HEAP8[i3 >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 45) | 0);
  i3 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 48) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  i2 = i4 + -1 | 0;
  L10 : do if (i1 >>> 0 < i2 >>> 0) do {
   if ((HEAP8[i1 >> 0] | 0) != i3 << 24 >> 24) break L10;
   i1 = i1 + 1 | 0;
  } while (i1 >>> 0 < i2 >>> 0); while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i6, i1, i4) | 0;
 }
 i1 = HEAP32[i10 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i10 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i10 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i8) {
  if ((HEAP32[i7 + 12 >> 2] | 0) == (HEAP32[i7 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 36 >> 2] & 127](i7) | 0) == -1 : 0) {
   HEAP32[i11 >> 2] = 0;
   i13 = 21;
   break;
  }
  if (!i1) i13 = 22;
 } else i13 = 21; while (0);
 if ((i13 | 0) == 21 ? i1 : 0) i13 = 22;
 if ((i13 | 0) == 22) HEAP32[i12 >> 2] = HEAP32[i12 >> 2] | 2;
 i2 = HEAP32[i10 >> 2] | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i9) | 0;
 i1 = HEAP32[i15 >> 2] | 0;
 HEAP32[i15 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[i14 >> 2] & 255](i1);
 STACKTOP = i16;
 return i2 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj(i10, i11, i4, i5, i3, i9) {
 i10 = i10 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = i11 + 44 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i7 = i11 + 24 | 0;
 i8 = HEAP32[i7 >> 2] | 0;
 if (i2 >>> 0 < i8 >>> 0) {
  HEAP32[i1 >> 2] = i8;
  i2 = i8;
 }
 i6 = i2;
 i1 = i9 & 24;
 if (!i1) {
  i11 = i10;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  i11 = i10 + 8 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  return;
 }
 if ((i3 | 0) == 1 & (i1 | 0) == 24) {
  i11 = i10;
  HEAP32[i11 >> 2] = 0;
  HEAP32[i11 + 4 >> 2] = 0;
  i11 = i10 + 8 | 0;
  HEAP32[i11 >> 2] = -1;
  HEAP32[i11 + 4 >> 2] = -1;
  return;
 }
 L12 : do switch (i3 | 0) {
 case 0:
  {
   i1 = 0;
   i3 = 0;
   break;
  }
 case 1:
  if (!(i9 & 8)) {
   i3 = i8 - (HEAP32[i11 + 20 >> 2] | 0) | 0;
   i1 = i3;
   i3 = ((i3 | 0) < 0) << 31 >> 31;
   break L12;
  } else {
   i3 = (HEAP32[i11 + 12 >> 2] | 0) - (HEAP32[i11 + 8 >> 2] | 0) | 0;
   i1 = i3;
   i3 = ((i3 | 0) < 0) << 31 >> 31;
   break L12;
  }
 case 2:
  {
   i1 = i11 + 32 | 0;
   if (!(HEAP8[i1 >> 0] & 1)) i1 = i1 + 1 | 0; else i1 = HEAP32[i11 + 40 >> 2] | 0;
   i3 = i2 - i1 | 0;
   i1 = i3;
   i3 = ((i3 | 0) < 0) << 31 >> 31;
   break;
  }
 default:
  {
   i11 = i10;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   i11 = i10 + 8 | 0;
   HEAP32[i11 >> 2] = -1;
   HEAP32[i11 + 4 >> 2] = -1;
   return;
  }
 } while (0);
 i3 = _i64Add(i1 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
 i4 = tempRet0;
 if ((i4 | 0) >= 0) {
  i1 = i11 + 32 | 0;
  if (!(HEAP8[i1 >> 0] & 1)) i1 = i1 + 1 | 0; else i1 = HEAP32[i11 + 40 >> 2] | 0;
  i5 = i2 - i1 | 0;
  i2 = ((i5 | 0) < 0) << 31 >> 31;
  if (!((i2 | 0) < (i4 | 0) | (i2 | 0) == (i4 | 0) & i5 >>> 0 < i3 >>> 0)) {
   i1 = i9 & 8;
   if (!((i3 | 0) == 0 & (i4 | 0) == 0)) {
    if ((i1 | 0) != 0 ? (HEAP32[i11 + 12 >> 2] | 0) == 0 : 0) {
     i11 = i10;
     HEAP32[i11 >> 2] = 0;
     HEAP32[i11 + 4 >> 2] = 0;
     i11 = i10 + 8 | 0;
     HEAP32[i11 >> 2] = -1;
     HEAP32[i11 + 4 >> 2] = -1;
     return;
    }
    if ((i9 & 16 | 0) != 0 & (i8 | 0) == 0) {
     i11 = i10;
     HEAP32[i11 >> 2] = 0;
     HEAP32[i11 + 4 >> 2] = 0;
     i11 = i10 + 8 | 0;
     HEAP32[i11 >> 2] = -1;
     HEAP32[i11 + 4 >> 2] = -1;
     return;
    }
   }
   if (i1) {
    HEAP32[i11 + 12 >> 2] = (HEAP32[i11 + 8 >> 2] | 0) + i3;
    HEAP32[i11 + 16 >> 2] = i6;
   }
   if (i9 & 16) HEAP32[i7 >> 2] = (HEAP32[i11 + 20 >> 2] | 0) + i3;
   i11 = i10;
   HEAP32[i11 >> 2] = 0;
   HEAP32[i11 + 4 >> 2] = 0;
   i11 = i10 + 8 | 0;
   HEAP32[i11 >> 2] = i3;
   HEAP32[i11 + 4 >> 2] = i4;
   return;
  }
 }
 i11 = i10;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i11 + 4 >> 2] = 0;
 i11 = i10 + 8 | 0;
 HEAP32[i11 >> 2] = -1;
 HEAP32[i11 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2512] | 0) == 0 ? (___cxa_guard_acquire(2512) | 0) != 0 : 0) {
  if ((HEAP8[2520] | 0) == 0 ? (___cxa_guard_acquire(2520) | 0) != 0 : 0) {
   i1 = 15228;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 15516);
   ___cxa_atexit(190, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2520);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15228, 15516) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15240, 15548) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15252, 15584) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15264, 15608) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15276, 15632) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15288, 15648) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15300, 15668) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15312, 15688) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15324, 15716) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15336, 15756) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15348, 15788) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15360, 15824) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15372, 15860) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15384, 15876) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15396, 15892) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15408, 15908) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15420, 15632) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15432, 15924) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15444, 15940) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15456, 15956) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15468, 15972) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15480, 15988) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15492, 16004) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15504, 16020) | 0;
  HEAP32[4009] = 15228;
  ___cxa_guard_release(2512);
 }
 return HEAP32[4009] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2496] | 0) == 0 ? (___cxa_guard_acquire(2496) | 0) != 0 : 0) {
  if ((HEAP8[2504] | 0) == 0 ? (___cxa_guard_acquire(2504) | 0) != 0 : 0) {
   i1 = 14936;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 15224);
   ___cxa_atexit(189, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2504);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14936, 29230) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14948, 29238) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14960, 29247) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14972, 29253) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14984, 29259) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14996, 29263) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15008, 29268) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15020, 29273) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15032, 29280) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15044, 29290) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15056, 29298) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15068, 29307) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15080, 29316) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15092, 29320) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15104, 29324) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15116, 29328) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15128, 29259) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15140, 29332) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15152, 29336) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15164, 29340) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15176, 29344) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15188, 29348) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15200, 29352) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(15212, 29356) | 0;
  HEAP32[3806] = 14936;
  ___cxa_guard_release(2496);
 }
 return HEAP32[3806] | 0;
}

function __ZNSt3__18ios_base4InitC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[1644] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(11340, i2, 11396);
 HEAP32[2665] = 12164;
 HEAP32[2667] = 12184;
 HEAP32[2666] = 0;
 i4 = HEAP32[3038] | 0;
 __ZNSt3__18ios_base4initEPv(10660 + i4 | 0, 11340);
 HEAP32[10660 + (i4 + 72) >> 2] = 0;
 HEAP32[10660 + (i4 + 76) >> 2] = -1;
 i4 = HEAP32[1645] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(11444, i4, 11404);
 HEAP32[2687] = 12244;
 HEAP32[2688] = 12264;
 i7 = HEAP32[3058] | 0;
 __ZNSt3__18ios_base4initEPv(10748 + i7 | 0, 11444);
 i5 = i7 + 72 | 0;
 HEAP32[10748 + i5 >> 2] = 0;
 i1 = i7 + 76 | 0;
 HEAP32[10748 + i1 >> 2] = -1;
 i3 = HEAP32[1643] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(11492, i3, 11412);
 HEAP32[2708] = 12244;
 HEAP32[2709] = 12264;
 __ZNSt3__18ios_base4initEPv(10832 + i7 | 0, 11492);
 HEAP32[10832 + i5 >> 2] = 0;
 HEAP32[10832 + i1 >> 2] = -1;
 i6 = HEAP32[10832 + ((HEAP32[(HEAP32[2708] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[2729] = 12244;
 HEAP32[2730] = 12264;
 __ZNSt3__18ios_base4initEPv(10916 + i7 | 0, i6);
 HEAP32[10916 + i5 >> 2] = 0;
 HEAP32[10916 + i1 >> 2] = -1;
 HEAP32[10660 + ((HEAP32[(HEAP32[2665] | 0) + -12 >> 2] | 0) + 72) >> 2] = 10748;
 i1 = 10832 + ((HEAP32[(HEAP32[2708] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[10832 + ((HEAP32[(HEAP32[2708] | 0) + -12 >> 2] | 0) + 72) >> 2] = 10748;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(11540, i2, 11420);
 HEAP32[2750] = 12204;
 HEAP32[2752] = 12224;
 HEAP32[2751] = 0;
 i2 = HEAP32[3048] | 0;
 __ZNSt3__18ios_base4initEPv(11e3 + i2 | 0, 11540);
 HEAP32[11e3 + (i2 + 72) >> 2] = 0;
 HEAP32[11e3 + (i2 + 76) >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(11596, i4, 11428);
 HEAP32[2772] = 12284;
 HEAP32[2773] = 12304;
 i4 = HEAP32[3068] | 0;
 __ZNSt3__18ios_base4initEPv(11088 + i4 | 0, 11596);
 i2 = i4 + 72 | 0;
 HEAP32[11088 + i2 >> 2] = 0;
 i1 = i4 + 76 | 0;
 HEAP32[11088 + i1 >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(11644, i3, 11436);
 HEAP32[2793] = 12284;
 HEAP32[2794] = 12304;
 __ZNSt3__18ios_base4initEPv(11172 + i4 | 0, 11644);
 HEAP32[11172 + i2 >> 2] = 0;
 HEAP32[11172 + i1 >> 2] = -1;
 i3 = HEAP32[11172 + ((HEAP32[(HEAP32[2793] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
 HEAP32[2814] = 12284;
 HEAP32[2815] = 12304;
 __ZNSt3__18ios_base4initEPv(11256 + i4 | 0, i3);
 HEAP32[11256 + i2 >> 2] = 0;
 HEAP32[11256 + i1 >> 2] = -1;
 HEAP32[11e3 + ((HEAP32[(HEAP32[2750] | 0) + -12 >> 2] | 0) + 72) >> 2] = 11088;
 i1 = 11172 + ((HEAP32[(HEAP32[2793] | 0) + -12 >> 2] | 0) + 4) | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 8192;
 HEAP32[11172 + ((HEAP32[(HEAP32[2793] | 0) + -12 >> 2] | 0) + 72) >> 2] = 11088;
 return;
}

function _deserialize(i1) {
 i1 = i1 | 0;
 var i2 = 0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, d13 = 0.0, d14 = 0.0, i15 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i10 = i12 + 140 | 0;
 i11 = i12;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i10, i1, _strlen(i1) | 0);
 i7 = i11 + 60 | 0;
 i8 = i11 + 8 | 0;
 HEAP32[i11 >> 2] = 3232;
 HEAP32[i7 >> 2] = 3252;
 HEAP32[i11 + 4 >> 2] = 0;
 __ZNSt3__18ios_base4initEPv(i11 + 60 | 0, i8);
 HEAP32[i11 + 132 >> 2] = 0;
 HEAP32[i11 + 136 >> 2] = -1;
 HEAP32[i11 >> 2] = 3176;
 HEAP32[i11 + 60 >> 2] = 3196;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i8);
 HEAP32[i8 >> 2] = 3108;
 i9 = i11 + 40 | 0;
 HEAP32[i9 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 + 8 >> 2] = 0;
 HEAP32[i9 + 12 >> 2] = 0;
 HEAP32[i11 + 56 >> 2] = 8;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i8, i10);
 i1 = HEAP32[711] | 0;
 __ZN8Document11deserializeERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEE(i1 + 72 | 0, i11, i1 + 328 | 0);
 __ZN7NavCtrl7readDocEv(HEAP32[711] | 0);
 __ZN7NavCtrl18updateBoxesAndMeshEv(HEAP32[711] | 0);
 i1 = HEAP32[711] | 0;
 if (!(HEAP32[i1 + 140 >> 2] | 0)) {
  HEAP32[i11 >> 2] = 3176;
  HEAP32[i7 >> 2] = 3196;
  HEAP32[i8 >> 2] = 3108;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i8);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i7);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
  STACKTOP = i12;
  return;
 }
 i2 = HEAP32[i1 + 84 >> 2] | 0;
 i1 = HEAP32[i1 + 88 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0)) {
  d6 = 34028234663852886.0e22;
  d5 = 34028234663852886.0e22;
  d4 = -34028234663852886.0e22;
  d3 = -34028234663852886.0e22;
 } else {
  d5 = 34028234663852886.0e22;
  d6 = 34028234663852886.0e22;
  d3 = -34028234663852886.0e22;
  d4 = -34028234663852886.0e22;
  do {
   i15 = HEAP32[i2 >> 2] | 0;
   d14 = +HEAPF32[i15 + 4 >> 2];
   d5 = d5 < d14 ? d5 : d14;
   d13 = +HEAPF32[i15 + 8 >> 2];
   d6 = d6 < d13 ? d6 : d13;
   d3 = d3 > d14 ? d3 : d14;
   d4 = d4 > d13 ? d4 : d13;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i1 | 0));
 }
 _emscripten_asm_const_4(11, +d5, +d6, +d3, +d4) | 0;
 HEAP32[i11 >> 2] = 3176;
 HEAP32[i7 >> 2] = 3196;
 HEAP32[i8 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i8);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i7);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 STACKTOP = i12;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if (i4 << 24 >> 24 == i2 << 24 >> 24) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if (i4 << 24 >> 24 == i3 << 24 >> 24 ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 32 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  if ((i2 | 0) > 31) i1 = -1; else {
   i3 = HEAP8[27643 + i2 >> 0] | 0;
   switch (i2 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     i1 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
     i14 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i14 + 1;
     HEAP8[i14 >> 0] = i3;
     if ((i2 | 0) > 21) {
      i1 = 0;
      break L1;
     }
     HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
     i1 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i8, i9, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i7 >> 2] = 0;
   i3 = 1;
   break;
  } else {
   i3 = (HEAP32[i7 >> 2] | 0) == 0;
   break;
  }
 } else i3 = 1; while (0);
 i2 = HEAP32[i8 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i2 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i3) {
   i5 = i2;
   i6 = 17;
   break;
  } else {
   i6 = 16;
   break;
  } else {
   HEAP32[i8 >> 2] = 0;
   i6 = 14;
   break;
  }
 } else i6 = 14; while (0);
 if ((i6 | 0) == 14) if (i3) i6 = 16; else {
  i5 = 0;
  i6 = 17;
 }
 L22 : do if ((i6 | 0) == 16) HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 6; else if ((i6 | 0) == 17) {
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, i1, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i7 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i7 >> 2] | 0;
   if (!i1) i2 = 1; else i6 = 25;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   i6 = 25;
  }
  do if ((i6 | 0) == 25) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i7 >> 2] = 0;
    i2 = 1;
    break;
   } else {
    i2 = (HEAP32[i7 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i5 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 36 >> 2] & 127](i5) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i2) break L22; else break; else {
    HEAP32[i8 >> 2] = 0;
    i6 = 37;
    break;
   }
  } else i6 = 37; while (0);
  if ((i6 | 0) == 37 ? !i2 : 0) break;
  HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | 2;
 } while (0);
 return;
}

function __ZN6MapDef9addToLastEP6VertexRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i8, i10, i9) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i11 + 8 | 0;
 i1 = i11 + 4 | 0;
 i4 = i11;
 HEAP32[i1 >> 2] = i10;
 i5 = HEAP32[(HEAP32[i8 + 16 >> 2] | 0) + -4 >> 2] | 0;
 i2 = i5 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i7 = i10;
 if ((i3 | 0) == (HEAP32[i5 + 8 >> 2] | 0)) __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i5, i1); else {
  HEAP32[i3 >> 2] = i7;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
 }
 i1 = ((HEAP32[i8 + 4 >> 2] | 0) - (HEAP32[i8 >> 2] | 0) >> 2) + -1 | 0;
 HEAP32[i4 >> 2] = i1;
 i2 = i5 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i5 + 20 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
 } else __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i5 + 12 | 0, i4);
 i5 = HEAP8[i9 >> 0] | 0;
 if (!(((i5 & 1) == 0 ? (i5 & 255) >>> 1 : HEAP32[i9 + 4 >> 2] | 0) | 0)) {
  STACKTOP = i11;
  return i10 | 0;
 }
 i5 = i8 + 48 | 0;
 i2 = i8 + 52 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 do if (i1) {
  while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   if (i10 >>> 0 < i2 >>> 0) {
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i3 = i1;
     i2 = i1;
     i4 = 12;
     break;
    } else i1 = i2;
   } else {
    if (i2 >>> 0 >= i10 >>> 0) {
     i4 = 18;
     break;
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i4 = 16;
     break;
    } else i1 = i3;
   }
  }
  if ((i4 | 0) == 12) {
   HEAP32[i6 >> 2] = i2;
   i4 = 19;
   break;
  } else if ((i4 | 0) == 16) {
   HEAP32[i6 >> 2] = i1;
   i3 = i2;
   i2 = i1;
   i4 = 19;
   break;
  } else if ((i4 | 0) == 18) {
   HEAP32[i6 >> 2] = i1;
   if (!i1) {
    i3 = i6;
    i2 = i1;
    i4 = 19;
    break;
   } else break;
  }
 } else {
  HEAP32[i6 >> 2] = i2;
  i3 = i2;
  i4 = 19;
 } while (0);
 if ((i4 | 0) == 19) {
  i1 = __Znwj(32) | 0;
  HEAP32[i1 + 16 >> 2] = i7;
  i7 = i1 + 20 | 0;
  HEAP32[i7 >> 2] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
  HEAP32[i7 + 8 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i1 + 4 >> 2] = 0;
  HEAP32[i1 + 8 >> 2] = i2;
  HEAP32[i3 >> 2] = i1;
  i2 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
  if (!i2) i2 = i1; else {
   HEAP32[i5 >> 2] = i2;
   i2 = HEAP32[i3 >> 2] | 0;
  }
  __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i8 + 52 >> 2] | 0, i2);
  i8 = i8 + 56 | 0;
  HEAP32[i8 >> 2] = (HEAP32[i8 >> 2] | 0) + 1;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i1 + 20 | 0, i9) | 0;
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__17__sort5IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i13, i14, i11, i10, i7, i1) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i12 = 0;
 i12 = __ZNSt3__17__sort4IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_T_(i13, i14, i11, i10, i1) | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i14 = i12;
   return i14 | 0;
  }
  i2 = i7 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i10 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   i8 = i4;
   break;
  } else {
   i14 = i12;
   return i14 | 0;
  }
 } else {
  i1 = i10 + 4 | 0;
  i3 = i7 + 4 | 0;
  i8 = i1;
  i2 = i3;
  i4 = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i10 >> 2] = i5;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 i2 = i12 + 1 | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[i11 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i14 = i2;
   return i14 | 0;
  }
  i4 = HEAP32[i4 >> 2] | 0;
  i3 = i11 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i9 = i3;
   i2 = i4;
   break;
  } else {
   i14 = i2;
   return i14 | 0;
  }
 } else {
  i1 = i11 + 4 | 0;
  i7 = i1;
  i9 = i1;
  i2 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i11 >> 2] = i5;
 HEAP32[i10 >> 2] = i6;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 i2 = i12 + 2 | 0;
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i14 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i14 = i2;
   return i14 | 0;
  }
  i4 = HEAP32[i7 >> 2] | 0;
  i3 = i14 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i8 = i3;
   i2 = i4;
   break;
  } else {
   i14 = i2;
   return i14 | 0;
  }
 } else {
  i1 = i14 + 4 | 0;
  i7 = i1;
  i8 = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i14 >> 2] = i5;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 i4 = i12 + 3 | 0;
 i5 = HEAP32[i14 >> 2] | 0;
 i6 = HEAP32[i13 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i14 = i4;
   return i14 | 0;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = i13 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) break; else {
   i14 = i4;
   return i14 | 0;
  }
 } else {
  i1 = i13 + 4 | 0;
  i2 = i1;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i13 >> 2] = i5;
 HEAP32[i14 >> 2] = i6;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 i14 = i12 + 4 | 0;
 return i14 | 0;
}

function __ZN7NavCtrl15sendPerminitersEv(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, d4 = 0.0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i13 = i14 + 4 | 0;
 i11 = i14;
 if ((HEAP8[8] | 0) == 0 ? (___cxa_guard_acquire(8) | 0) != 0 : 0) {
  HEAP32[708] = 0;
  HEAP32[709] = 0;
  HEAP32[710] = 0;
  ___cxa_atexit(177, 2832, ___dso_handle | 0) | 0;
  ___cxa_guard_release(8);
 }
 i1 = HEAP32[708] | 0;
 i2 = HEAP32[709] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[709] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 HEAP32[i13 >> 2] = 0;
 i12 = i13 + 4 | 0;
 HEAP32[i12 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 __Z15orderPerimitersRNSt3__16vectorI8PolylineNS_9allocatorIS1_EEEERNS0_IPS1_NS2_IS6_EEEE(i3 + 228 | 0, i13);
 i1 = HEAP32[i13 >> 2] | 0;
 i10 = HEAP32[i12 >> 2] | 0;
 if ((i1 | 0) != (i10 | 0)) do {
  i5 = HEAP32[i1 >> 2] | 0;
  i9 = HEAP32[i5 + 4 >> 2] | 0;
  i5 = HEAP32[i5 >> 2] | 0;
  i8 = i9 - i5 | 0;
  i2 = i8 >> 2;
  if ((i8 | 0) > 0) {
   i3 = 0;
   d4 = 0.0;
   do {
    i7 = HEAP32[i5 + (i3 << 2) >> 2] | 0;
    i3 = i3 + 1 | 0;
    i8 = HEAP32[i5 + (((i3 | 0) % (i2 | 0) | 0) << 2) >> 2] | 0;
    d4 = d4 + (+HEAPF32[i7 + 4 >> 2] - +HEAPF32[i8 + 4 >> 2]) * (+HEAPF32[i7 + 8 >> 2] + +HEAPF32[i8 + 8 >> 2]);
   } while ((i3 | 0) < (i2 | 0));
  } else d4 = 0.0;
  if ((i5 | 0) != (i9 | 0)) do {
   i8 = HEAP32[i5 >> 2] | 0;
   i2 = i8 + 4 | 0;
   i3 = HEAP32[709] | 0;
   i6 = HEAP32[710] | 0;
   if ((i3 | 0) == (i6 | 0)) {
    __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(2832, i2);
    i7 = HEAP32[709] | 0;
    i3 = HEAP32[710] | 0;
   } else {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    i7 = i3 + 4 | 0;
    HEAP32[709] = i7;
    i3 = i6;
   }
   i2 = i8 + 8 | 0;
   if ((i7 | 0) == (i3 | 0)) __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(2832, i2); else {
    HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
    HEAP32[709] = i7 + 4;
   }
   i5 = i5 + 4 | 0;
  } while ((i5 | 0) != (i9 | 0));
  d4 = d4 < 0.0 ? -inf : inf;
  HEAPF32[i11 >> 2] = d4;
  i2 = HEAP32[709] | 0;
  if (i2 >>> 0 < (HEAP32[710] | 0) >>> 0) {
   HEAPF32[i2 >> 2] = d4;
   HEAP32[709] = i2 + 4;
  } else __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(2832, i11);
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) != (i10 | 0));
 i11 = HEAP32[709] | 0;
 i1 = HEAP32[708] | 0;
 _emscripten_asm_const_2(3, ((i11 | 0) == (i1 | 0) ? 0 : i1) | 0, i11 - i1 >> 2 | 0) | 0;
 i1 = HEAP32[i13 >> 2] | 0;
 if (!i1) {
  STACKTOP = i14;
  return;
 }
 i2 = HEAP32[i12 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) HEAP32[i12 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 __ZdlPv(i1);
 STACKTOP = i14;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe(i1, i26, i21, i20, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i21 = i21 | 0;
 i20 = i20 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0;
 i23 = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 i12 = i23 + 304 | 0;
 i7 = i23 + 48 | 0;
 i6 = i23 + 32 | 0;
 i3 = i23 + 24 | 0;
 i2 = i23 + 8 | 0;
 i5 = i23;
 i10 = i23 + 308 | 0;
 i8 = i23 + 72 | 0;
 i11 = i23 + 76 | 0;
 i17 = i23 + 68 | 0;
 i16 = i23 + 64 | 0;
 i13 = i23 + 60 | 0;
 i14 = i23 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 29044, HEAP32[i21 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i21 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i21 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i1;
   i25 = i1;
   i15 = i2;
  }
 } else {
  i18 = HEAP32[i8 >> 2] | 0;
  i25 = 0;
  i15 = i1;
 }
 i2 = i18 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i18, i2, i21) | 0;
 if ((i18 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i18;
   i24 = i1;
   i22 = i1;
  }
 } else {
  i19 = i10;
  i24 = 0;
  i22 = i11;
 }
 i1 = __ZNKSt3__18ios_base6getlocEv(i21) | 0;
 HEAP32[i13 >> 2] = i1;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i19, i3, i2, i22, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i19 = HEAP32[i17 >> 2] | 0;
 i1 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i22, i19, i1, i21, i20) | 0;
 HEAP32[i26 >> 2] = i1;
 if (i24) _free(i24);
 _free(i25);
 STACKTOP = i23;
 return i1 | 0;
}

function __ZN3p2t12SweepContext9MeshCleanERNS_8TriangleE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i14 + 12 | 0;
 i3 = i14 + 8 | 0;
 i12 = i14 + 4 | 0;
 i9 = i14;
 HEAP32[i13 >> 2] = 0;
 i11 = i13 + 4 | 0;
 HEAP32[i11 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = i1;
 i6 = i13 + 8 | 0;
 __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i13, i3);
 i3 = HEAP32[i13 >> 2] | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) {
  i7 = i2 + 72 | 0;
  i8 = i2 + 76 | 0;
  i5 = i2 + 68 | 0;
  do {
   i1 = i1 + -4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   HEAP32[i12 >> 2] = i2;
   HEAP32[i11 >> 2] = i1;
   i4 = i2;
   if ((i2 | 0) != 0 ? (i10 = i4 + 32 | 0, (HEAP8[i10 >> 0] | 0) == 0) : 0) {
    HEAP8[i10 >> 0] = 1;
    i1 = HEAP32[i7 >> 2] | 0;
    if ((i1 | 0) == (HEAP32[i8 >> 2] | 0)) __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i5, i12); else {
     HEAP32[i1 >> 2] = i2;
     HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 4;
    }
    do if (!(HEAP8[i4 >> 0] | 0)) {
     i1 = HEAP32[i4 + 20 >> 2] | 0;
     HEAP32[i9 >> 2] = i1;
     i2 = HEAP32[i11 >> 2] | 0;
     if (i2 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i1;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
      break;
     } else {
      __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i13, i9);
      break;
     }
    } while (0);
    do if (!(HEAP8[i4 + 1 >> 0] | 0)) {
     i1 = HEAP32[i4 + 24 >> 2] | 0;
     HEAP32[i9 >> 2] = i1;
     i2 = HEAP32[i11 >> 2] | 0;
     if (i2 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i1;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
      break;
     } else {
      __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i13, i9);
      break;
     }
    } while (0);
    do if (!(HEAP8[i4 + 2 >> 0] | 0)) {
     i1 = HEAP32[i4 + 28 >> 2] | 0;
     HEAP32[i9 >> 2] = i1;
     i2 = HEAP32[i11 >> 2] | 0;
     if (i2 >>> 0 < (HEAP32[i6 >> 2] | 0) >>> 0) {
      HEAP32[i2 >> 2] = i1;
      HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 4;
      break;
     } else {
      __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i13, i9);
      break;
     }
    } while (0);
    i3 = HEAP32[i13 >> 2] | 0;
    i1 = HEAP32[i11 >> 2] | 0;
   }
  } while ((i3 | 0) != (i1 | 0));
 }
 if (!i1) {
  STACKTOP = i14;
  return;
 }
 __ZdlPv(i1);
 STACKTOP = i14;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce(i1, i26, i24, i23, d9) {
 i1 = i1 | 0;
 i26 = i26 | 0;
 i24 = i24 | 0;
 i23 = i23 | 0;
 d9 = +d9;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i21 = 0, i22 = 0, i25 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i18 + 76 | 0;
 i7 = i18 + 48 | 0;
 i6 = i18 + 32 | 0;
 i3 = i18 + 24 | 0;
 i2 = i18 + 8 | 0;
 i5 = i18;
 i10 = i18 + 80 | 0;
 i8 = i18 + 72 | 0;
 i11 = i18 + 110 | 0;
 i17 = i18 + 68 | 0;
 i16 = i18 + 64 | 0;
 i13 = i18 + 60 | 0;
 i14 = i18 + 56 | 0;
 i4 = i5;
 HEAP32[i4 >> 2] = 37;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i5 + 1 | 0, 29044, HEAP32[i24 + 4 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = i10;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i4) {
  HEAP32[i2 >> 2] = HEAP32[i24 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d9;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i10, 30, i1, i5, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i1 = __ZNSt3__16__clocEv() | 0;
  if (i4) {
   HEAP32[i6 >> 2] = HEAP32[i24 + 8 >> 2];
   HEAPF64[i6 + 8 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i6) | 0;
  } else {
   HEAPF64[i7 >> 3] = d9;
   i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i8, i1, i5, i7) | 0;
  }
  i1 = HEAP32[i8 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i19 = i1;
   i22 = i1;
   i15 = i2;
  }
 } else {
  i19 = HEAP32[i8 >> 2] | 0;
  i22 = 0;
  i15 = i1;
 }
 i2 = i19 + i15 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i19, i2, i24) | 0;
 if ((i19 | 0) != (i10 | 0)) {
  i1 = _malloc(i15 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i20 = i19;
   i21 = i1;
   i25 = i1;
  }
 } else {
  i20 = i10;
  i21 = 0;
  i25 = i11;
 }
 i19 = __ZNKSt3__18ios_base6getlocEv(i24) | 0;
 HEAP32[i13 >> 2] = i19;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i20, i3, i2, i25, i17, i16, i13);
 __ZNSt3__114__shared_count16__release_sharedEv(i19) | 0;
 HEAP32[i14 >> 2] = HEAP32[i26 >> 2];
 i20 = HEAP32[i17 >> 2] | 0;
 i26 = HEAP32[i16 >> 2] | 0;
 HEAP32[i12 >> 2] = HEAP32[i14 >> 2];
 i26 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i12, i25, i20, i26, i24, i23) | 0;
 _free(i21);
 _free(i22);
 STACKTOP = i18;
 return i26 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw(i4, i9, i12, i7, i10, i2, i3, i8, i13, i14, i11, i5) {
 i4 = i4 | 0;
 i9 = i9 | 0;
 i12 = i12 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i5 = i5 | 0;
 var i1 = 0, i6 = 0;
 L1 : do if ((i4 | 0) == (i2 | 0)) if (HEAP8[i9 >> 0] | 0) {
  HEAP8[i9 >> 0] = 0;
  i12 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i12 + 1;
  HEAP8[i12 >> 0] = 46;
  i12 = HEAP8[i8 >> 0] | 0;
  if ((((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0 ? (i1 = HEAP32[i14 >> 2] | 0, (i1 - i13 | 0) < 160) : 0) {
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   i1 = 0;
  } else i1 = 0;
 } else i1 = -1; else {
  if ((i4 | 0) == (i3 | 0) ? (i3 = HEAP8[i8 >> 0] | 0, (((i3 & 1) == 0 ? (i3 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) {
   if (!(HEAP8[i9 >> 0] | 0)) {
    i1 = -1;
    break;
   }
   i1 = HEAP32[i14 >> 2] | 0;
   if ((i1 - i13 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i11 >> 2] | 0;
   HEAP32[i14 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i5 + 128 | 0;
  i1 = i5;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i4 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i2 = i1 - i5 | 0;
  i1 = i2 >> 2;
  if ((i2 | 0) <= 124) {
   i3 = HEAP8[27643 + i1 >> 0] | 0;
   switch (i1 | 0) {
   case 24:
   case 25:
    {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i1 | 0) != (i7 | 0) ? (HEAPU8[i1 + -1 >> 0] & 95 | 0) != (HEAPU8[i12 >> 0] & 127 | 0) : 0) {
      i1 = -1;
      break L1;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3;
     i1 = 0;
     break L1;
    }
   case 23:
   case 22:
    {
     HEAP8[i12 >> 0] = 80;
     break;
    }
   default:
    {
     i1 = i3 & 95;
     if ((((i1 | 0) == (HEAP8[i12 >> 0] | 0) ? (HEAP8[i12 >> 0] = i1 | 128, (HEAP8[i9 >> 0] | 0) != 0) : 0) ? (HEAP8[i9 >> 0] = 0, i12 = HEAP8[i8 >> 0] | 0, (((i12 & 1) == 0 ? (i12 & 255) >>> 1 : HEAP32[i8 + 4 >> 2] | 0) | 0) != 0) : 0) ? (i6 = HEAP32[i14 >> 2] | 0, (i6 - i13 | 0) < 160) : 0) {
      i13 = HEAP32[i11 >> 2] | 0;
      HEAP32[i14 >> 2] = i6 + 4;
      HEAP32[i6 >> 2] = i13;
     }
    }
   }
   i14 = HEAP32[i10 >> 2] | 0;
   HEAP32[i10 >> 2] = i14 + 1;
   HEAP8[i14 >> 0] = i3;
   if ((i2 | 0) > 84) i1 = 0; else {
    HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
    i1 = 0;
   }
  } else i1 = -1;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__17__sort5IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(i13, i14, i11, i10, i7, i1) {
 i13 = i13 | 0;
 i14 = i14 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i8 = 0, i9 = 0, i12 = 0;
 i12 = __ZNSt3__17__sort4IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_T_(i13, i14, i11, i10, i1) | 0;
 d5 = +HEAPF32[i7 >> 2];
 d6 = +HEAPF32[i10 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i14 = i12;
   return i14 | 0;
  }
  i2 = i7 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i10 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   i8 = i4;
   break;
  } else {
   i14 = i12;
   return i14 | 0;
  }
 } else {
  i1 = i10 + 4 | 0;
  i3 = i7 + 4 | 0;
  i8 = i1;
  i2 = i3;
  i4 = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i10 >> 2] = d5;
 HEAPF32[i7 >> 2] = d6;
 HEAP32[i8 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 i2 = i12 + 1 | 0;
 d5 = +HEAPF32[i10 >> 2];
 d6 = +HEAPF32[i11 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i14 = i2;
   return i14 | 0;
  }
  i4 = HEAP32[i4 >> 2] | 0;
  i3 = i11 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i9 = i3;
   i2 = i4;
   break;
  } else {
   i14 = i2;
   return i14 | 0;
  }
 } else {
  i1 = i11 + 4 | 0;
  i7 = i1;
  i9 = i1;
  i2 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i11 >> 2] = d5;
 HEAPF32[i10 >> 2] = d6;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i8 >> 2] = i1;
 i2 = i12 + 2 | 0;
 d5 = +HEAPF32[i11 >> 2];
 d6 = +HEAPF32[i14 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i14 = i2;
   return i14 | 0;
  }
  i4 = HEAP32[i7 >> 2] | 0;
  i3 = i14 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i8 = i3;
   i2 = i4;
   break;
  } else {
   i14 = i2;
   return i14 | 0;
  }
 } else {
  i1 = i14 + 4 | 0;
  i7 = i1;
  i8 = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i14 >> 2] = d5;
 HEAPF32[i11 >> 2] = d6;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 i4 = i12 + 3 | 0;
 d5 = +HEAPF32[i14 >> 2];
 d6 = +HEAPF32[i13 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i14 = i4;
   return i14 | 0;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = i13 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) break; else {
   i14 = i4;
   return i14 | 0;
  }
 } else {
  i1 = i13 + 4 | 0;
  i2 = i1;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i13 >> 2] = d5;
 HEAPF32[i14 >> 2] = d6;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 i14 = i12 + 4 | 0;
 return i14 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(i1, i5, i6, i7, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i8 = 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   i2 = HEAP32[i1 + 12 >> 2] | 0;
   if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
   if ((i1 | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i3 = 1;
    break;
   } else {
    i3 = (HEAP32[i5 >> 2] | 0) == 0;
    break;
   }
  } else i3 = 1; while (0);
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   i1 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i1 = HEAP32[i1 >> 2] | 0;
   if ((i1 | 0) != -1) if (i3) {
    i3 = i2;
    break;
   } else {
    i3 = i2;
    break L1;
   } else {
    HEAP32[i6 >> 2] = 0;
    i8 = 15;
    break;
   }
  } else i8 = 15; while (0);
  if ((i8 | 0) == 15) {
   i8 = 0;
   if (i3) {
    i3 = 0;
    break;
   } else i3 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 12 >> 2] & 31](i4, 8192, i1) | 0)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 4;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i2 = 1;
   break;
  } else {
   i2 = (HEAP32[i5 >> 2] | 0) == 0;
   break;
  }
 } else i2 = 1; while (0);
 do if (i3) {
  i1 = HEAP32[i3 + 12 >> 2] | 0;
  if ((i1 | 0) == (HEAP32[i3 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 127](i3) | 0; else i1 = HEAP32[i1 >> 2] | 0;
  if ((i1 | 0) != -1) if (i2) break; else {
   i8 = 39;
   break;
  } else {
   HEAP32[i6 >> 2] = 0;
   i8 = 37;
   break;
  }
 } else i8 = 37; while (0);
 if ((i8 | 0) == 37 ? i2 : 0) i8 = 39;
 if ((i8 | 0) == 39) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function __ZN7NavCtrl12addPolyPointERK4Vec2(i9, i1) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i10 + 20 | 0;
 i5 = i10 + 8 | 0;
 i8 = i10;
 i6 = i9 + 84 | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 if ((HEAP32[i9 + 96 >> 2] | 0) == (HEAP32[i9 + 100 >> 2] | 0)) __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i6, i5) | 0;
 i7 = __Znwj(12) | 0;
 i2 = i9 + 88 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 HEAP32[i7 >> 2] = i3 - (HEAP32[i6 >> 2] | 0) >> 2;
 i12 = i1;
 i11 = HEAP32[i12 + 4 >> 2] | 0;
 i1 = i7 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i1 + 4 >> 2] = i11;
 i1 = i7;
 HEAP32[i4 >> 2] = i1;
 if (i3 >>> 0 >= (HEAP32[i9 + 92 >> 2] | 0) >>> 0) {
  __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i6, i4);
  i1 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  if (i1) __ZdlPv(i1);
 } else {
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = i3 + 4;
  HEAP32[i4 >> 2] = 0;
 }
 i2 = __ZN6MapDef9addToLastEP6VertexRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(i6, i7, i5) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5);
 i1 = __Znwj(28) | 0;
 HEAP32[i1 + 4 >> 2] = i9;
 HEAP8[i1 + 8 >> 0] = 1;
 HEAP32[i1 >> 2] = 2856;
 HEAP32[i1 + 12 >> 2] = i2;
 HEAP8[i1 + 16 >> 0] = 0;
 HEAP32[i1 + 20 >> 2] = -1;
 HEAP32[i1 + 24 >> 2] = -1;
 _emscripten_asm_const_4(7, i1 | 0, 10, +(+HEAPF32[i2 + 4 >> 2]), +(+HEAPF32[i2 + 8 >> 2])) | 0;
 HEAP32[i8 >> 2] = i1;
 i2 = __Znwj(16) | 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 >> 2] = 3268;
 HEAP32[i2 + 12 >> 2] = i1;
 i3 = i8 + 4 | 0;
 HEAP32[i3 >> 2] = i2;
 i4 = i9 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 if (i5 >>> 0 < (HEAP32[i9 + 8 >> 2] | 0) >>> 0) {
  HEAP32[i5 >> 2] = i1;
  HEAP32[i5 + 4 >> 2] = i2;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = i5 + 8;
  __ZN7NavCtrl10updateMeshEv(i9);
  i12 = i9 + 312 | 0;
  HEAP32[i12 >> 2] = 0;
  STACKTOP = i10;
  return;
 }
 __ZNSt3__16vectorINS_10shared_ptrI13PolyPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9, i8);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) {
  __ZN7NavCtrl10updateMeshEv(i9);
  i12 = i9 + 312 | 0;
  HEAP32[i12 >> 2] = 0;
  STACKTOP = i10;
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 __ZN7NavCtrl10updateMeshEv(i9);
 i12 = i9 + 312 | 0;
 HEAP32[i12 >> 2] = 0;
 STACKTOP = i10;
 return;
}

function __ZNSt3__16vectorI5FrameNS_9allocatorIS1_EEE8__appendEj(i9, i2) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = i9 + 8 | 0;
 i4 = HEAP32[i10 >> 2] | 0;
 i11 = i9 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i3 = i1;
 if (((i4 - i3 | 0) / 12 | 0) >>> 0 >= i2 >>> 0) {
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   i1 = (HEAP32[i11 >> 2] | 0) + 12 | 0;
   HEAP32[i11 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 i5 = ((i3 - i1 | 0) / 12 | 0) + i2 | 0;
 if (i5 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i4 = HEAP32[i10 >> 2] | 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i3 = (i4 - i1 | 0) / 12 | 0;
 if (i3 >>> 0 < 178956970) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i1 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 12 | 0;
  if (!i3) {
   i4 = 0;
   i3 = 0;
  } else i6 = 8;
 } else {
  i3 = 357913941;
  i1 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 12 | 0;
  i6 = 8;
 }
 if ((i6 | 0) == 8) {
  i4 = i3;
  i3 = __Znwj(i3 * 12 | 0) | 0;
 }
 i5 = i3 + (i1 * 12 | 0) | 0;
 i7 = i5;
 i4 = i3 + (i4 * 12 | 0) | 0;
 i3 = i5;
 i1 = i7;
 do {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  i3 = i1 + 12 | 0;
  i1 = i3;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i8 = i1;
 i6 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i3 = i9;
  i5 = i11;
  i2 = i7;
  i7 = i6;
 } else {
  i3 = i5;
  i2 = i7;
  do {
   i7 = i3 + -12 | 0;
   i5 = i1;
   i1 = i1 + -12 | 0;
   HEAP32[i7 >> 2] = 0;
   i12 = i3 + -8 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = 0;
   HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
   i7 = i5 + -8 | 0;
   HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
   i5 = i5 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i5 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   i3 = i2 + -12 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i6 | 0));
  i1 = i2;
  i3 = i9;
  i5 = i11;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i11 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i5 >> 2] = i8;
 HEAP32[i10 >> 2] = i4;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = i1;
  i1 = i1 + -12 | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i4;
  if (i4) {
   i2 = i2 + -8 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -16 - i5 | 0) >>> 4) << 4);
   __ZdlPv(i4);
  }
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd(i1, i24, i19, i18, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i19 = i19 | 0;
 i18 = i18 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i20 = 0, i21 = 0, i22 = 0, i23 = 0, i25 = 0;
 i21 = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 i10 = i21 + 296 | 0;
 i5 = i21 + 32 | 0;
 i3 = i21 + 24 | 0;
 i2 = i21 + 8 | 0;
 i4 = i21;
 i8 = i21 + 300 | 0;
 i6 = i21 + 64 | 0;
 i9 = i21 + 68 | 0;
 i15 = i21 + 60 | 0;
 i14 = i21 + 56 | 0;
 i11 = i21 + 52 | 0;
 i12 = i21 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 29043, HEAP32[i19 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i19 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i16 = i1;
   i23 = i1;
   i13 = i2;
  }
 } else {
  i16 = HEAP32[i6 >> 2] | 0;
  i23 = 0;
  i13 = i1;
 }
 i2 = i16 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i16, i2, i19) | 0;
 if ((i16 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 3) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i16;
   i22 = i1;
   i20 = i1;
  }
 } else {
  i17 = i8;
  i22 = 0;
  i20 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i19) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE(i17, i3, i2, i20, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i25 = HEAP32[i15 >> 2] | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i1 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i20, i25, i1, i19, i18) | 0;
 HEAP32[i24 >> 2] = i1;
 if (i22) _free(i22);
 _free(i23);
 STACKTOP = i21;
 return i1 | 0;
}

function __ZN7NavCtrl9goToFrameEi(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i11;
 i2 = i10 + 300 | 0;
 i3 = i10 + 296 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 if ((((HEAP32[i2 >> 2] | 0) - i4 | 0) / 12 | 0) >>> 0 <= i9 >>> 0) {
  i10 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(10748, 18919, 16) | 0, i9) | 0, 18936, 4) | 0;
  i10 = __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i10, ((HEAP32[i2 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0) / 12 | 0) | 0;
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i9 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13432) | 0;
  i9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i9 >> 2] | 0) + 28 >> 2] & 31](i9, 10) | 0;
  __ZNSt3__16localeD2Ev(i1);
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i10, i9) | 0;
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i10) | 0;
  STACKTOP = i11;
  return;
 }
 i8 = i4 + (i9 * 12 | 0) + 4 | 0;
 i6 = i4 + (i9 * 12 | 0) | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if ((HEAP32[i8 >> 2] | 0) != (i1 | 0)) {
  i7 = i10 + 24 | 0;
  i5 = 0;
  do {
   i3 = HEAP32[i7 >> 2] | 0;
   i2 = HEAP32[i3 + (i5 << 3) >> 2] | 0;
   i3 = HEAP32[i3 + (i5 << 3) + 4 >> 2] | 0;
   i4 = (i3 | 0) == 0;
   if (!i4) {
    __ZNSt3__119__shared_weak_count12__add_sharedEv(i3);
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i12 = i2;
   i2 = i12 + 12 | 0;
   i15 = i1 + (i5 << 4) | 0;
   i13 = HEAP32[i15 + 4 >> 2] | 0;
   i14 = (HEAP32[i2 >> 2] | 0) + 12 | 0;
   HEAP32[i14 >> 2] = HEAP32[i15 >> 2];
   HEAP32[i14 + 4 >> 2] = i13;
   i14 = i1 + (i5 << 4) + 8 | 0;
   i13 = HEAP32[i14 + 4 >> 2] | 0;
   i1 = (HEAP32[i2 >> 2] | 0) + 92 | 0;
   HEAP32[i1 >> 2] = HEAP32[i14 >> 2];
   HEAP32[i1 + 4 >> 2] = i13;
   i2 = HEAP32[i2 >> 2] | 0;
   _emscripten_asm_const_4(0, i12 | 0, +(+HEAPF32[i2 + 12 >> 2]), +(+HEAPF32[i2 + 16 >> 2]), +(+HEAPF32[i2 + 120 >> 2])) | 0;
   if (!i4) __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
   i5 = i5 + 1 | 0;
   i1 = HEAP32[i6 >> 2] | 0;
  } while (i5 >>> 0 < (HEAP32[i8 >> 2] | 0) - i1 >> 4 >>> 0);
 }
 HEAP32[i10 + 308 >> 2] = i9;
 HEAP32[i10 + 312 >> 2] = 0;
 STACKTOP = i11;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd(i1, i24, i22, i21, d7) {
 i1 = i1 | 0;
 i24 = i24 | 0;
 i22 = i22 | 0;
 i21 = i21 | 0;
 d7 = +d7;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0, i20 = 0, i23 = 0, i25 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 i10 = i16 + 68 | 0;
 i5 = i16 + 32 | 0;
 i3 = i16 + 24 | 0;
 i2 = i16 + 8 | 0;
 i4 = i16;
 i8 = i16 + 72 | 0;
 i6 = i16 + 64 | 0;
 i9 = i16 + 102 | 0;
 i15 = i16 + 60 | 0;
 i14 = i16 + 56 | 0;
 i11 = i16 + 52 | 0;
 i12 = i16 + 48 | 0;
 i25 = i4;
 HEAP32[i25 >> 2] = 37;
 HEAP32[i25 + 4 >> 2] = 0;
 i25 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i4 + 1 | 0, 29043, HEAP32[i22 + 4 >> 2] | 0) | 0;
 HEAP32[i6 >> 2] = i8;
 i1 = __ZNSt3__16__clocEv() | 0;
 if (i25) {
  HEAP32[i2 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i2 + 8 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i2) | 0;
 } else {
  HEAPF64[i3 >> 3] = d7;
  i1 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i8, 30, i1, i4, i3) | 0;
 }
 if ((i1 | 0) > 29) {
  i2 = __ZNSt3__16__clocEv() | 0;
  HEAP32[i5 >> 2] = HEAP32[i22 + 8 >> 2];
  HEAPF64[i5 + 8 >> 3] = d7;
  i2 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i6, i2, i4, i5) | 0;
  i1 = HEAP32[i6 >> 2] | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i17 = i1;
   i20 = i1;
   i13 = i2;
  }
 } else {
  i17 = HEAP32[i6 >> 2] | 0;
  i20 = 0;
  i13 = i1;
 }
 i2 = i17 + i13 | 0;
 i3 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i17, i2, i22) | 0;
 if ((i17 | 0) != (i8 | 0)) {
  i1 = _malloc(i13 << 1) | 0;
  if (!i1) __ZSt17__throw_bad_allocv(); else {
   i18 = i17;
   i19 = i1;
   i23 = i1;
  }
 } else {
  i18 = i8;
  i19 = 0;
  i23 = i9;
 }
 i25 = __ZNKSt3__18ios_base6getlocEv(i22) | 0;
 HEAP32[i11 >> 2] = i25;
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i18, i3, i2, i23, i15, i14, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i25) | 0;
 HEAP32[i12 >> 2] = HEAP32[i24 >> 2];
 i24 = HEAP32[i15 >> 2] | 0;
 i25 = HEAP32[i14 >> 2] | 0;
 HEAP32[i10 >> 2] = HEAP32[i12 >> 2];
 i25 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i23, i24, i25, i22, i21) | 0;
 _free(i19);
 _free(i20);
 STACKTOP = i16;
 return i25 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i7, i8, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0;
 i1 = HEAP32[i6 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i2 = (i1 | 0) == 0;
 i1 = HEAP32[i7 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1 : 0) {
   HEAP32[i7 >> 2] = 0;
   i5 = 11;
   break;
  }
  if (i2) {
   i4 = i1;
   i5 = 13;
  } else i5 = 12;
 } else i5 = 11; while (0);
 if ((i5 | 0) == 11) if (i2) i5 = 12; else {
  i4 = 0;
  i5 = 13;
 }
 L16 : do if ((i5 | 0) == 12) HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 6; else if ((i5 | 0) == 13) {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i2 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 36 >> 2] & 31](i3, i1 & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4;
   break;
  }
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (!i1) i1 = 0; else i5 = 21;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   i5 = 21;
  }
  do if ((i5 | 0) == 21) if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i6 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i6 >> 2] | 0;
   break;
  } while (0);
  i1 = (i1 | 0) == 0;
  do if (i4) {
   if ((HEAP32[i4 + 12 >> 2] | 0) == (HEAP32[i4 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 36 >> 2] & 127](i4) | 0) == -1 : 0) {
    HEAP32[i7 >> 2] = 0;
    i5 = 30;
    break;
   }
   if (i1) break L16;
  } else i5 = 30; while (0);
  if ((i5 | 0) == 30 ? !i1 : 0) break;
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 2;
 } while (0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i8, i7, i6) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i10;
 HEAP8[i8 >> 0] = 0;
 i1 = HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0;
 i2 = i7 + (i1 + 16) | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) {
  i1 = HEAP32[i7 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  do if (!i6 ? (i5 = HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0, (HEAP32[i7 + (i5 + 4) >> 2] & 4096 | 0) != 0) : 0) {
   HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i7 + i5 | 0) | 0;
   i6 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 13432) | 0;
   __ZNSt3__16localeD2Ev(i4);
   i1 = HEAP32[i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
   i6 = i6 + 8 | 0;
   L9 : do if (!i1) {
    i1 = 0;
    i9 = 9;
   } else while (1) {
    i2 = i1;
    if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
     i5 = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1;
     i1 = i5 ? 0 : i1;
     if (i5) {
      i9 = 9;
      break L9;
     }
    }
    i2 = i1;
    i4 = i2 + 12 | 0;
    i3 = HEAP32[i4 >> 2] | 0;
    i5 = i2 + 16 | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i2) | 0; else i3 = HEAPU8[i3 >> 0] | 0;
    if ((i3 & 255) << 24 >> 24 <= -1) break L9;
    if (!(HEAP16[(HEAP32[i6 >> 2] | 0) + (i3 << 24 >> 24 << 1) >> 1] & 8192)) break L9;
    i3 = HEAP32[i4 >> 2] | 0;
    if ((i3 | 0) == (HEAP32[i5 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i2) | 0; else HEAP32[i4 >> 2] = i3 + 1;
    if (!i1) {
     i1 = 0;
     i9 = 9;
     break;
    }
   } while (0);
   if ((i9 | 0) == 9) i2 = i1;
   if (i1) {
    if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) break;
    if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) break;
   }
   i6 = HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0;
   i9 = i7 + (i6 + 16) | 0;
   HEAP32[i9 >> 2] = HEAP32[i9 >> 2] | (HEAP32[i7 + (i6 + 24) >> 2] | 0) == 0 | 6;
  } while (0);
  HEAP8[i8 >> 0] = (HEAP32[i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 16) >> 2] | 0) == 0 & 1;
 } else HEAP32[i2 >> 2] = i3 | (HEAP32[i7 + (i1 + 24) >> 2] | 0) == 0 | 4;
 STACKTOP = i10;
 return;
}

function __ZN5Agent6updateEf(i11, d12) {
 i11 = i11 | 0;
 d12 = +d12;
 var d1 = 0.0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d13 = 0.0;
 i3 = i11 + 100 | 0;
 i4 = i11 + 92 | 0;
 d7 = +HEAPF32[i3 >> 2];
 d8 = +HEAPF32[i4 >> 2];
 d2 = d7 - d8;
 d9 = +HEAPF32[i11 + 104 >> 2];
 i5 = i11 + 96 | 0;
 d10 = +HEAPF32[i5 >> 2];
 d1 = d9 - d10;
 d1 = +Math_sqrt(+(d2 * d2 + d1 * d1));
 d2 = +HEAPF32[i11 + 60 >> 2] * d12;
 if (d1 < d2) {
  i6 = i3;
  i5 = HEAP32[i6 >> 2] | 0;
  i6 = HEAP32[i6 + 4 >> 2] | 0;
  HEAP32[i4 >> 2] = i5;
  HEAP32[i4 + 4 >> 2] = i6;
  d1 = (HEAP32[tempDoublePtr >> 2] = i5, +HEAPF32[tempDoublePtr >> 2]);
  d2 = (HEAP32[tempDoublePtr >> 2] = i6, +HEAPF32[tempDoublePtr >> 2]);
 } else {
  d13 = d2 / d1;
  d2 = 1.0 - d13;
  d1 = d7 * d13 + d8 * d2;
  d2 = d9 * d13 + d10 * d2;
  HEAPF32[i4 >> 2] = d1;
  HEAPF32[i5 >> 2] = d2;
 }
 i6 = i11 + 12 | 0;
 HEAPF32[i6 >> 2] = d1 * d12 + +HEAPF32[i6 >> 2];
 i3 = i11 + 16 | 0;
 HEAPF32[i3 >> 2] = d2 * d12 + +HEAPF32[i3 >> 2];
 i3 = i11 + 84 | 0;
 i5 = HEAP32[i3 >> 2] | 0;
 if (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 31](i5, i6) | 0) {
  i4 = i11 + 80 | 0;
  i5 = (HEAP32[i4 >> 2] | 0) + 1 | 0;
  i6 = HEAP32[i11 + 140 >> 2] | 0;
  if (i5 >>> 0 < (HEAP32[i11 + 144 >> 2] | 0) - i6 >> 2 >>> 0) {
   HEAP32[i4 >> 2] = i5;
   HEAP32[i3 >> 2] = HEAP32[i6 + (i5 << 2) >> 2];
   i4 = 0;
  } else i4 = 1;
 } else i4 = 0;
 i3 = i11 + 120 | 0;
 d9 = +HEAPF32[i3 >> 2];
 d2 = +HEAPF32[i11 + 76 >> 2];
 d1 = +HEAPF32[i11 + 72 >> 2];
 if (d2 == 0.0 & d1 == 0.0) d7 = 0.0; else {
  i6 = d1 < 0.0;
  d7 = i6 ? -d1 : d1;
  i11 = d2 < 0.0;
  d13 = i11 ? -d2 : d2;
  i5 = d7 < d13;
  d13 = (i5 ? d7 : d13) * (1.0 / (d7 > d13 ? d7 : d13));
  d7 = d13 * d13;
  d7 = d13 * (d7 * (d7 * (d7 * (d7 * (.05747731402516365 - d7 * .013480469584465027) + -.121239073574543) + .19563592970371246) + -.33299461007118225) + .9999956488609314);
  d7 = i5 ? 1.5707963705062866 - d7 : d7;
  d7 = i6 ? 3.1415927410125732 - d7 : d7;
  d7 = i11 ? -d7 : d7;
 }
 d8 = d9 - d7;
 d1 = d12 * .5;
 d2 = d8 < 0.0 ? -d8 : d8;
 if (!(d2 > d1)) {
  HEAPF32[i3 >> 2] = d7;
  return i4 | 0;
 }
 d1 = d9 + (d8 > 0.0 ^ d2 > 3.141592653589793 ? -d1 : d1);
 d13 = d1;
 d1 = d13 < -3.141592653589793 ? d13 + 6.283185307179586 : d1;
 HEAPF32[i3 >> 2] = d1;
 if (!(d1 > 3.141592653589793)) return i4 | 0;
 HEAPF32[i3 >> 2] = d1 + -6.283185307179586;
 return i4 | 0;
}

function __ZN3p2t5Sweep13FillEdgeEventERNS_12SweepContextEPNS_4EdgeEPNS_4NodeE(i11, i10, i9, i1) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, d12 = 0.0, i13 = 0;
 if (!(HEAP8[i10 + 52 >> 0] | 0)) {
  i7 = i1 + 12 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  d2 = +HEAPF64[i6 + 8 >> 3];
  i4 = HEAP32[i9 >> 2] | 0;
  d3 = +HEAPF64[i4 + 8 >> 3];
  if (!(d2 > d3)) return;
  i8 = i9 + 4 | 0;
  L6 : while (1) {
   while (1) {
    i13 = HEAP32[i8 >> 2] | 0;
    d12 = +HEAPF64[i4 + 16 >> 3];
    d3 = (+HEAPF64[i13 + 8 >> 3] - d3) * (+HEAPF64[i6 + 16 >> 3] - d12) - (d2 - d3) * (+HEAPF64[i13 + 16 >> 3] - d12);
    if (!(!(d3 > 0.0) & (!(d3 < 1.0e-012) | !(d3 > -1.0e-012)))) {
     i1 = i5;
     break;
    }
    __ZN3p2t5Sweep22FillLeftBelowEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i11, i10, i9, i1);
    i5 = HEAP32[i7 >> 2] | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    d2 = +HEAPF64[i6 + 8 >> 3];
    i4 = HEAP32[i9 >> 2] | 0;
    d3 = +HEAPF64[i4 + 8 >> 3];
    if (!(d2 > d3)) {
     i1 = 14;
     break L6;
    }
   }
   i7 = i1 + 12 | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   d2 = +HEAPF64[i6 + 8 >> 3];
   d3 = +HEAPF64[i4 + 8 >> 3];
   if (!(d2 > d3)) {
    i1 = 14;
    break;
   }
  }
  if ((i1 | 0) == 14) return;
 } else {
  i7 = i1 + 8 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  d2 = +HEAPF64[i6 + 8 >> 3];
  i4 = HEAP32[i9 >> 2] | 0;
  d3 = +HEAPF64[i4 + 8 >> 3];
  if (!(d2 < d3)) return;
  i8 = i9 + 4 | 0;
  L19 : while (1) {
   while (1) {
    i13 = HEAP32[i8 >> 2] | 0;
    d12 = +HEAPF64[i4 + 16 >> 3];
    d12 = (+HEAPF64[i13 + 8 >> 3] - d3) * (+HEAPF64[i6 + 16 >> 3] - d12) - (d2 - d3) * (+HEAPF64[i13 + 16 >> 3] - d12);
    if (!(d12 > 0.0 & (!(d12 < 1.0e-012) | !(d12 > -1.0e-012)))) {
     i1 = i5;
     break;
    }
    __ZN3p2t5Sweep23FillRightBelowEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i11, i10, i9, i1);
    i5 = HEAP32[i7 >> 2] | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    d2 = +HEAPF64[i6 + 8 >> 3];
    i4 = HEAP32[i9 >> 2] | 0;
    d3 = +HEAPF64[i4 + 8 >> 3];
    if (!(d2 < d3)) {
     i1 = 14;
     break L19;
    }
   }
   i7 = i1 + 8 | 0;
   i5 = HEAP32[i7 >> 2] | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   d2 = +HEAPF64[i6 + 8 >> 3];
   d3 = +HEAPF64[i4 + 8 >> 3];
   if (!(d2 < d3)) {
    i1 = 14;
    break;
   }
  }
  if ((i1 | 0) == 14) return;
 }
}

function __ZZN5Agent18computeNewVelocityEP6VODumpENK3__0clEv(i16) {
 i16 = i16 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, d6 = 0.0, i7 = 0, i8 = 0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, d17 = 0.0;
 i13 = HEAP32[i16 >> 2] | 0;
 i15 = HEAP32[i16 + 4 >> 2] | 0;
 d12 = +HEAPF32[i15 >> 2];
 d6 = +HEAPF32[i13 + 72 >> 2] - d12;
 d9 = +HEAPF32[i15 + 4 >> 2];
 d14 = +HEAPF32[i13 + 76 >> 2] - d9;
 d14 = d6 * d6 + d14 * d14;
 i13 = i16 + 8 | 0;
 if (d14 >= +HEAPF32[HEAP32[i13 >> 2] >> 2]) return;
 i1 = HEAP32[i16 + 12 >> 2] | 0;
 i10 = HEAP32[i1 >> 2] | 0;
 i1 = (HEAP32[i1 + 4 >> 2] | 0) - i10 | 0;
 if ((i1 | 0) > 0) {
  i11 = HEAP32[i15 + 8 >> 2] | 0;
  i2 = (i1 | 0) / 52 | 0;
  i7 = i15 + 12 | 0;
  i1 = 0;
  i3 = -1;
  i8 = 0;
  do {
   do if ((i8 | 0) != (i11 | 0) ? (i8 | 0) != (HEAP32[i7 >> 2] | 0) : 0) {
    d4 = d12 - +HEAPF32[i10 + (i8 * 52 | 0) >> 2];
    d5 = d9 - +HEAPF32[i10 + (i8 * 52 | 0) + 4 >> 2];
    d6 = d5 * +HEAPF32[i10 + (i8 * 52 | 0) + 16 >> 2] - d4 * +HEAPF32[i10 + (i8 * 52 | 0) + 20 >> 2];
    if (!(HEAP8[i10 + (i8 * 52 | 0) + 48 >> 0] | 0)) {
     if (d6 < 0.0 ? !(d5 * +HEAPF32[i10 + (i8 * 52 | 0) + 8 >> 2] - d4 * +HEAPF32[i10 + (i8 * 52 | 0) + 12 >> 2] > 0.0) : 1) break;
    } else {
     d17 = d5 * +HEAPF32[i10 + (i8 * 52 | 0) + 40 >> 2] - d4 * +HEAPF32[i10 + (i8 * 52 | 0) + 44 >> 2];
     if (!(d6 < 0.0 & d17 > 0.0) ? !(d17 < 0.0 ? d5 * +HEAPF32[i10 + (i8 * 52 | 0) + 8 >> 2] - d4 * +HEAPF32[i10 + (i8 * 52 | 0) + 12 >> 2] > 0.0 : 0) : 0) break;
    }
    i1 = i1 | (HEAP8[i10 + (i8 * 52 | 0) + 49 >> 0] | 0) != 0;
    i3 = (i3 | 0) == -1 ? i8 : i3;
   } while (0);
   i8 = i8 + 1 | 0;
  } while ((i8 | 0) < (i2 | 0));
  if ((i3 | 0) != -1) {
   if (i1) return;
   i2 = i16 + 16 | 0;
   i1 = HEAP32[HEAP32[i2 >> 2] >> 2] | 0;
   if ((i3 | 0) <= (i1 | 0)) {
    if ((i3 | 0) != (i1 | 0)) return;
    i1 = i16 + 20 | 0;
    if (!(d14 < +HEAPF32[HEAP32[i1 >> 2] >> 2])) return;
   } else i1 = i16 + 20 | 0;
   i13 = i15;
   i15 = HEAP32[i13 + 4 >> 2] | 0;
   i16 = HEAP32[i16 + 24 >> 2] | 0;
   HEAP32[i16 >> 2] = HEAP32[i13 >> 2];
   HEAP32[i16 + 4 >> 2] = i15;
   HEAP32[HEAP32[i2 >> 2] >> 2] = i3;
   HEAPF32[HEAP32[i1 >> 2] >> 2] = d14;
   return;
  }
 }
 i11 = i15;
 i15 = HEAP32[i11 + 4 >> 2] | 0;
 i16 = HEAP32[i16 + 28 >> 2] | 0;
 HEAP32[i16 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i16 + 4 >> 2] = i15;
 HEAPF32[HEAP32[i13 >> 2] >> 2] = d14;
 return;
}

function __ZNSt3__16vectorI16VelocityObstacleNS_9allocatorIS1_EEE6assignIPS1_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(i7, i8, i9) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = i8;
 i2 = (i9 - i3 | 0) / 52 | 0;
 i6 = i7 + 8 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i4 = i5;
 if (i2 >>> 0 <= ((i1 - i4 | 0) / 52 | 0) >>> 0) {
  i6 = i7 + 4 | 0;
  i1 = ((HEAP32[i6 >> 2] | 0) - i4 | 0) / 52 | 0;
  i7 = i2 >>> 0 > i1 >>> 0;
  i1 = i7 ? i8 + (i1 * 52 | 0) | 0 : i9;
  i2 = i1 - i3 | 0;
  _memmove(i5 | 0, i8 | 0, i2 | 0) | 0;
  i2 = i5 + (((i2 | 0) / 52 | 0) * 52 | 0) | 0;
  if (!i7) {
   i1 = HEAP32[i6 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) return;
   HEAP32[i6 >> 2] = i1 + (~(((i1 + -52 - i2 | 0) >>> 0) / 52 | 0) * 52 | 0);
   return;
  }
  if ((i1 | 0) == (i9 | 0)) return;
  i2 = i1;
  i1 = HEAP32[i6 >> 2] | 0;
  do {
   i3 = i2;
   i4 = i1 + 52 | 0;
   do {
    HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
    i1 = i1 + 4 | 0;
    i3 = i3 + 4 | 0;
   } while ((i1 | 0) < (i4 | 0));
   i1 = (HEAP32[i6 >> 2] | 0) + 52 | 0;
   HEAP32[i6 >> 2] = i1;
   i2 = i2 + 52 | 0;
  } while ((i2 | 0) != (i9 | 0));
  return;
 }
 if (i5) {
  i1 = i7 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i3 | 0) != (i5 | 0)) HEAP32[i1 >> 2] = i3 + (~(((i3 + -52 - i4 | 0) >>> 0) / 52 | 0) * 52 | 0);
  __ZdlPv(i5);
  HEAP32[i6 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i7 >> 2] = 0;
  i1 = 0;
 }
 i4 = i2 >>> 0 > 82595524;
 if (i4) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i7);
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = HEAP32[i7 >> 2] | 0;
 } else i3 = 0;
 i1 = (i1 - i3 | 0) / 52 | 0;
 if (i1 >>> 0 < 41297762) {
  i3 = i1 << 1;
  i1 = i3 >>> 0 >= i2 >>> 0;
  if (i1 | i4 ^ 1) i2 = i1 ? i3 : i2; else __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i7);
 } else i2 = 82595524;
 i1 = __Znwj(i2 * 52 | 0) | 0;
 i5 = i7 + 4 | 0;
 HEAP32[i5 >> 2] = i1;
 HEAP32[i7 >> 2] = i1;
 HEAP32[i6 >> 2] = i1 + (i2 * 52 | 0);
 if ((i8 | 0) == (i9 | 0)) return; else i2 = i8;
 do {
  i3 = i2;
  i4 = i1 + 52 | 0;
  do {
   HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
   i1 = i1 + 4 | 0;
   i3 = i3 + 4 | 0;
  } while ((i1 | 0) < (i4 | 0));
  i1 = (HEAP32[i5 >> 2] | 0) + 52 | 0;
  HEAP32[i5 >> 2] = i1;
  i2 = i2 + 52 | 0;
 } while ((i2 | 0) != (i9 | 0));
 return;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i1, i8, i9, i4, i2, i10, i7, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i10 >> 2] = i4;
 i6 = i2;
 if (i3 & 2) if ((i6 - i4 | 0) < 3) i1 = 1; else {
  HEAP32[i10 >> 2] = i4 + 1;
  HEAP8[i4 >> 0] = -17;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -69;
  i5 = HEAP32[i10 >> 2] | 0;
  HEAP32[i10 >> 2] = i5 + 1;
  HEAP8[i5 >> 0] = -65;
  i5 = 4;
 } else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i1 = HEAP32[i9 >> 2] | 0;
  if (i1 >>> 0 < i8 >>> 0) while (1) {
   i3 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 > i7 >>> 0 | (i3 & -2048 | 0) == 55296) {
    i1 = 2;
    break L4;
   }
   do if (i3 >>> 0 >= 128) {
    if (i3 >>> 0 < 2048) {
     i1 = HEAP32[i10 >> 2] | 0;
     if ((i6 - i1 | 0) < 2) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 6 | 192;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
    i1 = HEAP32[i10 >> 2] | 0;
    i2 = i6 - i1 | 0;
    if (i3 >>> 0 < 65536) {
     if ((i2 | 0) < 3) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 12 | 224;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    } else {
     if ((i2 | 0) < 4) {
      i1 = 1;
      break L4;
     }
     HEAP32[i10 >> 2] = i1 + 1;
     HEAP8[i1 >> 0] = i3 >>> 18 | 240;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 12 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 >>> 6 & 63 | 128;
     i5 = HEAP32[i10 >> 2] | 0;
     HEAP32[i10 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i3 & 63 | 128;
     break;
    }
   } else {
    i1 = HEAP32[i10 >> 2] | 0;
    if ((i6 - i1 | 0) < 1) {
     i1 = 1;
     break L4;
    }
    HEAP32[i10 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i3;
   } while (0);
   i1 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i1;
   if (i1 >>> 0 >= i8 >>> 0) {
    i1 = 0;
    break;
   }
  } else i1 = 0;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(i2, i5, i6, i7, i1) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i8 = 0;
 i4 = i1 + 8 | 0;
 L1 : while (1) {
  i1 = HEAP32[i5 >> 2] | 0;
  do if (i1) {
   if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
    HEAP32[i5 >> 2] = 0;
    i1 = 0;
    break;
   } else {
    i1 = HEAP32[i5 >> 2] | 0;
    break;
   }
  } else i1 = 0; while (0);
  i1 = (i1 | 0) == 0;
  i2 = HEAP32[i6 >> 2] | 0;
  do if (i2) {
   if ((HEAP32[i2 + 12 >> 2] | 0) != (HEAP32[i2 + 16 >> 2] | 0)) if (i1) break; else break L1;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) != -1) if (i1) break; else break L1; else {
    HEAP32[i6 >> 2] = 0;
    i8 = 12;
    break;
   }
  } else i8 = 12; while (0);
  if ((i8 | 0) == 12) {
   i8 = 0;
   if (i1) {
    i2 = 0;
    break;
   } else i2 = 0;
  }
  i1 = HEAP32[i5 >> 2] | 0;
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0; else i1 = HEAPU8[i3 >> 0] | 0;
  if ((i1 & 255) << 24 >> 24 <= -1) break;
  if (!(HEAP16[(HEAP32[i4 >> 2] | 0) + (i1 << 24 >> 24 << 1) >> 1] & 8192)) break;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i1 + 12 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) == (HEAP32[i1 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 40 >> 2] & 127](i1) | 0;
   continue;
  } else {
   HEAP32[i2 >> 2] = i3 + 1;
   continue;
  }
 }
 i1 = HEAP32[i5 >> 2] | 0;
 do if (i1) {
  if ((HEAP32[i1 + 12 >> 2] | 0) == (HEAP32[i1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) {
   HEAP32[i5 >> 2] = 0;
   i1 = 0;
   break;
  } else {
   i1 = HEAP32[i5 >> 2] | 0;
   break;
  }
 } else i1 = 0; while (0);
 i1 = (i1 | 0) == 0;
 do if (i2) {
  if ((HEAP32[i2 + 12 >> 2] | 0) == (HEAP32[i2 + 16 >> 2] | 0) ? (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0) == -1 : 0) {
   HEAP32[i6 >> 2] = 0;
   i8 = 32;
   break;
  }
  if (!i1) i8 = 33;
 } else i8 = 32; while (0);
 if ((i8 | 0) == 32 ? i1 : 0) i8 = 33;
 if ((i8 | 0) == 33) HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 2;
 return;
}

function __ZNSt3__16vectorI5FrameNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = (((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0) + 1 | 0;
 if (i3 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = ((HEAP32[i11 >> 2] | 0) - i1 | 0) / 12 | 0;
 if (i2 >>> 0 < 178956970) {
  i2 = i2 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 357913941;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 12 | 0;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 * 12 | 0) | 0;
 }
 i3 = i5 + (i1 * 12 | 0) | 0;
 i2 = i3;
 i8 = i5 + (i4 * 12 | 0) | 0;
 HEAP32[i5 + (i1 * 12 | 0) + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
 i6 = i7 + 4 | 0;
 HEAP32[i5 + (i1 * 12 | 0) + 4 >> 2] = HEAP32[i6 >> 2];
 i4 = i7 + 8 | 0;
 HEAP32[i5 + (i1 * 12 | 0) + 8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i7 >> 2] = 0;
 i6 = i5 + ((i1 + 1 | 0) * 12 | 0) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
  i7 = i5;
 } else {
  do {
   i7 = i3 + -12 | 0;
   i4 = i1;
   i1 = i1 + -12 | 0;
   HEAP32[i7 >> 2] = 0;
   i12 = i3 + -8 | 0;
   HEAP32[i12 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = 0;
   HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
   i7 = i4 + -8 | 0;
   HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
   i4 = i4 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i4 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i7 >> 2] = 0;
   HEAP32[i1 >> 2] = 0;
   i3 = i2 + -12 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i7 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = i1;
  i1 = i1 + -12 | 0;
  i4 = HEAP32[i1 >> 2] | 0;
  i5 = i4;
  if (i4) {
   i2 = i2 + -8 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -16 - i5 | 0) >>> 4) << 4);
   __ZdlPv(i4);
  }
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function __ZN8Document11deserializeERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEE(i11, i10, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 __ZN6MapDef5clearEv(i11 + 12 | 0);
 i3 = i11 + 72 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i5 = i11 + 76 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) != (i4 | 0)) {
  do {
   i2 = HEAP32[i1 >> 2] | 0;
   if (i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i2 >> 2] | 0) + 4 >> 2] & 255](i2);
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i4 | 0));
  i1 = HEAP32[i3 >> 2] | 0;
  i2 = HEAP32[i5 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) HEAP32[i5 >> 2] = i2 + (~((i2 + -4 - i1 | 0) >>> 2) << 2);
 }
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i11 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2);
 HEAP32[i11 + 216 >> 2] = 0;
 i6 = HEAP32[i11 + 192 >> 2] | 0;
 i7 = i11 + 196 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i8, 29043, 0);
  __ZN8Document10readStreamERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEERSE_(i11, i10, i9, i8);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
  STACKTOP = i12;
  return;
 }
 do {
  i5 = i1 + -4 | 0;
  HEAP32[i7 >> 2] = i5;
  i1 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = 0;
  if (i1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   i3 = i2;
   if (i2) {
    i4 = i1 + 20 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
    __ZdlPv(i2);
   }
   __ZdlPv(i1);
  }
  i1 = HEAP32[i7 >> 2] | 0;
 } while ((i1 | 0) != (i6 | 0));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i8, 29043, 0);
 __ZN8Document10readStreamERNSt3__113basic_istreamIcNS0_11char_traitsIcEEEERNS0_3mapINS0_12basic_stringIcS3_NS0_9allocatorIcEEEESA_NS0_4lessISA_EENS8_INS0_4pairIKSA_SA_EEEEEERSE_(i11, i10, i9, i8);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
 STACKTOP = i12;
 return;
}

function __ZNSt3__1rsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EE(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i9 + 4 | 0;
 i1 = i9;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i6, i8, 0);
 if (!(HEAP8[i6 >> 0] | 0)) {
  i7 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
  __ZNSt3__18ios_base5clearEj(i8 + i7 | 0, HEAP32[i8 + (i7 + 16) >> 2] | 4);
  STACKTOP = i9;
  return i8 | 0;
 }
 if (!(HEAP8[i7 >> 0] & 1)) {
  HEAP8[i7 + 1 >> 0] = 0;
  HEAP8[i7 >> 0] = 0;
 } else {
  HEAP8[HEAP32[i7 + 8 >> 2] >> 0] = 0;
  HEAP32[i7 + 4 >> 2] = 0;
 }
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 i6 = HEAP32[i8 + (i2 + 12) >> 2] | 0;
 i6 = (i6 | 0) < 1 ? 2147483647 : i6;
 HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + i2 | 0) | 0;
 i2 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13432) | 0;
 __ZNSt3__16localeD2Ev(i1);
 L9 : do if ((i6 | 0) > 0) {
  i5 = i2 + 8 | 0;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i8 + ((HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
   i3 = HEAP32[i2 + 12 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i2 + 16 >> 2] | 0)) {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 36 >> 2] & 127](i2) | 0;
    if ((i2 | 0) == -1) {
     i2 = 2;
     break L9;
    }
   } else i2 = HEAPU8[i3 >> 0] | 0;
   i3 = i2 & 255;
   if (i3 << 24 >> 24 > -1 ? (HEAP16[(HEAP32[i5 >> 2] | 0) + (i2 << 24 >> 24 << 1) >> 1] & 8192) != 0 : 0) {
    i2 = 0;
    break L9;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i7, i3);
   i4 = HEAP32[i8 + ((HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
   i1 = i1 + 1 | 0;
   i2 = i4 + 12 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i4 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 40 >> 2] & 127](i4) | 0; else HEAP32[i2 >> 2] = i3 + 1;
   if ((i1 | 0) >= (i6 | 0)) {
    i2 = 0;
    break;
   }
  }
 } else {
  i1 = 0;
  i2 = 0;
 } while (0);
 HEAP32[i8 + ((HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) + 12) >> 2] = 0;
 i7 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i8 + i7 | 0, HEAP32[i8 + (i7 + 16) >> 2] | ((i1 | 0) == 0 ? i2 | 4 : i2));
 STACKTOP = i9;
 return i8 | 0;
}

function _pop_arg(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, d6 = 0.0;
 L1 : do if (i3 >>> 0 <= 20) do switch (i3 | 0) {
 case 9:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   HEAP32[i2 >> 2] = i3;
   break L1;
  }
 case 10:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = ((i3 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 11:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i3 = HEAP32[i4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 4;
   i4 = i2;
   HEAP32[i4 >> 2] = i3;
   HEAP32[i4 + 4 >> 2] = 0;
   break L1;
  }
 case 12:
  {
   i4 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   i3 = i4;
   i5 = HEAP32[i3 >> 2] | 0;
   i3 = HEAP32[i3 + 4 >> 2] | 0;
   HEAP32[i1 >> 2] = i4 + 8;
   i4 = i2;
   HEAP32[i4 >> 2] = i5;
   HEAP32[i4 + 4 >> 2] = i3;
   break L1;
  }
 case 13:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 65535) << 16 >> 16;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 14:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 65535;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 15:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i4 = (i4 & 255) << 24 >> 24;
   i5 = i2;
   HEAP32[i5 >> 2] = i4;
   HEAP32[i5 + 4 >> 2] = ((i4 | 0) < 0) << 31 >> 31;
   break L1;
  }
 case 16:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   i4 = HEAP32[i5 >> 2] | 0;
   HEAP32[i1 >> 2] = i5 + 4;
   i5 = i2;
   HEAP32[i5 >> 2] = i4 & 255;
   HEAP32[i5 + 4 >> 2] = 0;
   break L1;
  }
 case 17:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 case 18:
  {
   i5 = (HEAP32[i1 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   d6 = +HEAPF64[i5 >> 3];
   HEAP32[i1 >> 2] = i5 + 8;
   HEAPF64[i2 >> 3] = d6;
   break L1;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function __ZN3p2t5Sweep23FillRightBelowEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i21, i20, i18, i19) {
 i21 = i21 | 0;
 i20 = i20 | 0;
 i18 = i18 | 0;
 i19 = i19 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, i10 = 0, i11 = 0, d12 = 0.0, i13 = 0, d14 = 0.0, i15 = 0, i16 = 0, i17 = 0, i22 = 0;
 i1 = HEAP32[i19 >> 2] | 0;
 d2 = +HEAPF64[i1 + 8 >> 3];
 i3 = HEAP32[i18 >> 2] | 0;
 d5 = +HEAPF64[i3 + 8 >> 3];
 if (!(d2 < d5)) return;
 i16 = i19 + 8 | 0;
 i17 = i18 + 4 | 0;
 i4 = i1;
 while (1) {
  i1 = HEAP32[i16 >> 2] | 0;
  i6 = HEAP32[i1 + 8 >> 2] | 0;
  if (!i6) {
   i22 = 4;
   break;
  }
  i15 = HEAP32[i1 >> 2] | 0;
  i13 = HEAP32[i6 >> 2] | 0;
  d12 = +HEAPF64[i13 + 8 >> 3];
  d9 = +HEAPF64[i15 + 16 >> 3];
  d8 = +HEAPF64[i13 + 16 >> 3];
  d7 = +HEAPF64[i15 + 8 >> 3];
  d14 = (d2 - d12) * (d9 - d8) - (+HEAPF64[i4 + 16 >> 3] - d8) * (d7 - d12);
  if (d14 > 0.0 & (!(d14 < 1.0e-012) | !(d14 > -1.0e-012))) {
   i22 = 7;
   break;
  }
  i15 = i3 + 16 | 0;
  d14 = d12;
  while (1) {
   i10 = HEAP32[i6 + 8 >> 2] | 0;
   i11 = HEAP32[i10 >> 2] | 0;
   d2 = +HEAPF64[i11 + 8 >> 3];
   d12 = +HEAPF64[i11 + 16 >> 3];
   d9 = (d7 - d2) * (d8 - d12) - (d14 - d2) * (d9 - d12);
   if (d9 > 0.0 & (!(d9 < 1.0e-012) | !(d9 > -1.0e-012))) {
    i22 = 9;
    break;
   }
   i1 = HEAP32[i17 >> 2] | 0;
   d9 = +HEAPF64[i15 >> 3];
   d9 = (+HEAPF64[i1 + 8 >> 3] - d5) * (d8 - d9) - (d14 - d5) * (+HEAPF64[i1 + 16 >> 3] - d9);
   if (!(d9 > 0.0 & (!(d9 < 1.0e-012) | !(d9 > -1.0e-012)))) {
    i1 = i3;
    break;
   }
   i1 = i6;
   d7 = d14;
   i6 = i10;
   d8 = d12;
   d9 = +HEAPF64[i13 + 16 >> 3];
   d14 = d2;
   i13 = i11;
  }
  if ((i22 | 0) == 9) {
   i22 = 0;
   __ZN3p2t5Sweep25FillRightConcaveEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i21, i20, i18, i1);
   i1 = HEAP32[i18 >> 2] | 0;
   i4 = HEAP32[i19 >> 2] | 0;
   d5 = +HEAPF64[i1 + 8 >> 3];
  }
  d2 = +HEAPF64[i4 + 8 >> 3];
  if (!(d2 < d5)) {
   i22 = 13;
   break;
  } else i3 = i1;
 }
 if ((i22 | 0) == 4) {
  i22 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i22, 20220);
  ___cxa_throw(i22 | 0, 624, 90);
 } else if ((i22 | 0) == 7) {
  __ZN3p2t5Sweep25FillRightConcaveEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i21, i20, i18, i19);
  return;
 } else if ((i22 | 0) == 13) return;
}

function __ZN4Plan6addSegE4Vec2RKS0_b(i14, i11, i1, i7) {
 i14 = i14 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, i12 = 0, i13 = 0, i15 = 0, d16 = 0.0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i15 + 48 | 0;
 i8 = i15 + 8 | 0;
 i13 = i15;
 d10 = +HEAPF32[i1 >> 2] * 30.0 + +HEAPF32[i11 >> 2];
 d9 = +HEAPF32[i11 + 4 >> 2];
 d4 = +HEAPF32[i1 + 4 >> 2] * 30.0 + d9;
 i3 = i14 + 12 | 0;
 i12 = i14 + 16 | 0;
 i5 = HEAP32[i12 >> 2] | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i6 = HEAP32[i14 + 20 >> 2] | 0;
 if ((i5 - i1 | 0) >>> 0 >= (i6 - i1 | 0) >>> 0) {
  i15 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, 20930, 32);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i15, i2);
  ___cxa_throw(i15 | 0, 16, 12);
 }
 i7 = i7 ? -1 : 1;
 HEAP32[i8 >> 2] = 5612;
 i1 = i8 + 4 | 0;
 i17 = i11;
 i11 = HEAP32[i17 >> 2] | 0;
 i17 = HEAP32[i17 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = i11;
 HEAP32[i2 + 4 >> 2] = i17;
 HEAPF32[i8 + 12 >> 2] = d10;
 HEAPF32[i8 + 16 >> 2] = d4;
 d16 = d10 - (HEAP32[tempDoublePtr >> 2] = i11, +HEAPF32[tempDoublePtr >> 2]);
 d4 = d4 - d9;
 HEAPF32[i8 + 20 >> 2] = d16;
 HEAPF32[i8 + 24 >> 2] = d4;
 HEAP32[i8 + 36 >> 2] = i7;
 d10 = 1.0 / +Math_sqrt(+(d16 * d16 + d4 * d4));
 d9 = +(i7 | 0) * 10.100000381469727;
 HEAPF32[i8 + 28 >> 2] = d9 * (d4 * d10);
 HEAPF32[i8 + 32 >> 2] = -(d9 * (d16 * d10));
 if (i5 >>> 0 < i6 >>> 0) {
  HEAP32[i5 >> 2] = 5612;
  i3 = i5 + 4 | 0;
  i2 = i3 + 36 | 0;
  do {
   HEAP32[i3 >> 2] = HEAP32[i1 >> 2];
   i3 = i3 + 4 | 0;
   i1 = i1 + 4 | 0;
  } while ((i3 | 0) < (i2 | 0));
  i1 = (HEAP32[i12 >> 2] | 0) + 40 | 0;
  HEAP32[i12 >> 2] = i1;
 } else {
  __ZNSt3__16vectorI14SegmentSubGoalNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i3, i8);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i1 = i1 + -40 | 0;
 HEAP32[i13 >> 2] = i1;
 i2 = i14 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i14 + 8 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = i1;
  HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
  STACKTOP = i15;
  return;
 } else {
  __ZNSt3__16vectorIP8ISubGoalNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i14, i13);
  STACKTOP = i15;
  return;
 }
}

function _scanexp(i8, i3) {
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i7 = i8 + 100 | 0;
 if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 } else i1 = ___shgetc(i8) | 0;
 switch (i1 | 0) {
 case 43:
 case 45:
  {
   i2 = (i1 | 0) == 45 & 1;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
   if ((i3 | 0) != 0 & (i1 + -48 | 0) >>> 0 > 9 ? (HEAP32[i7 >> 2] | 0) != 0 : 0) {
    HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
    i5 = i2;
   } else i5 = i2;
   break;
  }
 default:
  i5 = 0;
 }
 if ((i1 + -48 | 0) >>> 0 > 9) if (!(HEAP32[i7 >> 2] | 0)) {
  i2 = -2147483648;
  i1 = 0;
 } else {
  HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i2 = -2147483648;
  i1 = 0;
 } else {
  i2 = 0;
  do {
   i2 = i1 + -48 + (i2 * 10 | 0) | 0;
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10 & (i2 | 0) < 214748364);
  i3 = ((i2 | 0) < 0) << 31 >> 31;
  if ((i1 + -48 | 0) >>> 0 < 10) {
   do {
    i3 = ___muldi3(i2 | 0, i3 | 0, 10, 0) | 0;
    i2 = tempRet0;
    i1 = _i64Add(i1 | 0, ((i1 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    i2 = _i64Add(i1 | 0, tempRet0 | 0, i3 | 0, i2 | 0) | 0;
    i3 = tempRet0;
    i1 = HEAP32[i6 >> 2] | 0;
    if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
     HEAP32[i6 >> 2] = i1 + 1;
     i1 = HEAPU8[i1 >> 0] | 0;
    } else i1 = ___shgetc(i8) | 0;
   } while ((i1 + -48 | 0) >>> 0 < 10 & ((i3 | 0) < 21474836 | (i3 | 0) == 21474836 & i2 >>> 0 < 2061584302));
   i4 = i2;
  } else i4 = i2;
  if ((i1 + -48 | 0) >>> 0 < 10) do {
   i1 = HEAP32[i6 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i7 >> 2] | 0) >>> 0) {
    HEAP32[i6 >> 2] = i1 + 1;
    i1 = HEAPU8[i1 >> 0] | 0;
   } else i1 = ___shgetc(i8) | 0;
  } while ((i1 + -48 | 0) >>> 0 < 10);
  if (HEAP32[i7 >> 2] | 0) HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + -1;
  i8 = (i5 | 0) != 0;
  i1 = _i64Subtract(0, 0, i4 | 0, i3 | 0) | 0;
  i2 = i8 ? tempRet0 : i3;
  i1 = i8 ? i1 : i4;
 }
 tempRet0 = i2;
 return i1 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE(i16, i1, i6, i8, i7, i2) {
 i16 = i16 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 i12 = i15 + 168 | 0;
 i11 = i15 + 40 | 0;
 i10 = i15 + 32 | 0;
 i14 = i15 + 28 | 0;
 i13 = i15 + 16 | 0;
 i5 = i15 + 8 | 0;
 i9 = i15;
 HEAP32[i13 >> 2] = 0;
 HEAP32[i13 + 4 >> 2] = 0;
 HEAP32[i13 + 8 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 >> 2] = 13908;
 i4 = HEAP8[i2 >> 0] | 0;
 i17 = (i4 & 1) == 0;
 i3 = i2 + 4 | 0;
 i1 = i17 ? i3 : HEAP32[i2 + 8 >> 2] | 0;
 i2 = i17 ? (i4 & 255) >>> 1 : HEAP32[i3 >> 2] | 0;
 i3 = i1 + (i2 << 2) | 0;
 i4 = i11 + 32 | 0;
 if ((i2 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] & 15](i5, i12, i1, i3, i14, i11, i4, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i13, HEAP8[i1 >> 0] | 0);
    i1 = i1 + 1 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 i1 = _catgets((i6 | 0) == -1 ? -1 : i6 << 1, i8, i7, (HEAP8[i13 >> 0] & 1) == 0 ? i13 + 1 | 0 : HEAP32[i13 + 8 >> 2] | 0) | 0;
 HEAP32[i16 >> 2] = 0;
 HEAP32[i16 + 4 >> 2] = 0;
 HEAP32[i16 + 8 >> 2] = 0;
 HEAP32[i9 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = 13956;
 i17 = _strlen(i1) | 0;
 i3 = i1 + i17 | 0;
 i4 = i3;
 i5 = i11 + 128 | 0;
 if ((i17 | 0) > 0) do {
  HEAP32[i14 >> 2] = i1;
  i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 16 >> 2] & 15](i9, i12, i1, (i4 - i1 | 0) > 32 ? i1 + 32 | 0 : i3, i14, i11, i5, i10) | 0;
  if (i11 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0) {
   i1 = i11;
   do {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i16, HEAP32[i1 >> 2] | 0);
    i1 = i1 + 4 | 0;
   } while (i1 >>> 0 < (HEAP32[i10 >> 2] | 0) >>> 0);
  }
  i1 = HEAP32[i14 >> 2] | 0;
 } while ((i2 | 0) != 2 & i1 >>> 0 < i3 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i13);
 STACKTOP = i15;
 return;
}

function __ZN3p2t5Sweep23FillLeftConvexEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i18, i17, i16, i1) {
 i18 = i18 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, d19 = 0.0;
 i15 = i16 + 4 | 0;
 i12 = HEAP32[i1 + 12 >> 2] | 0;
 i8 = HEAP32[i12 >> 2] | 0;
 i3 = HEAP32[i12 + 12 >> 2] | 0;
 i11 = HEAP32[i3 >> 2] | 0;
 d2 = +HEAPF64[i11 + 16 >> 3];
 i1 = i8;
 d7 = +HEAPF64[i11 + 8 >> 3];
 d10 = +HEAPF64[i8 + 8 >> 3];
 while (1) {
  i6 = HEAP32[i3 + 12 >> 2] | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  d9 = +HEAPF64[i8 + 8 >> 3];
  d5 = d2;
  d2 = +HEAPF64[i8 + 16 >> 3];
  d10 = (d10 - d9) * (d5 - d2) - (+HEAPF64[i1 + 16 >> 3] - d2) * (d7 - d9);
  if (!(d10 > 0.0) & (!(d10 < 1.0e-012) | !(d10 > -1.0e-012))) {
   i4 = i3;
   i14 = i12;
   break;
  }
  i12 = HEAP32[i15 >> 2] | 0;
  i1 = HEAP32[i16 >> 2] | 0;
  d19 = +HEAPF64[i1 + 8 >> 3];
  d10 = +HEAPF64[i1 + 16 >> 3];
  d10 = (+HEAPF64[i12 + 8 >> 3] - d19) * (d5 - d10) - (d7 - d19) * (+HEAPF64[i12 + 16 >> 3] - d10);
  if (!(!(d10 > 0.0) & (!(d10 < 1.0e-012) | !(d10 > -1.0e-012)))) {
   i13 = 8;
   break;
  } else {
   i12 = i3;
   d10 = d7;
   i1 = i11;
   d7 = d9;
   i3 = i6;
   i11 = i8;
  }
 }
 if ((i13 | 0) == 8) return;
 i6 = i14 + 12 | 0;
 while (1) {
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i18, i17, i4);
  i4 = HEAP32[i6 >> 2] | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i16 >> 2] | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i13 = 8;
   break;
  }
  i13 = HEAP32[i15 >> 2] | 0;
  d19 = +HEAPF64[i3 + 8 >> 3];
  d5 = +HEAPF64[i1 + 16 >> 3];
  d10 = +HEAPF64[i3 + 16 >> 3];
  d2 = +HEAPF64[i1 + 8 >> 3];
  d19 = (+HEAPF64[i13 + 8 >> 3] - d19) * (d5 - d10) - (+HEAPF64[i13 + 16 >> 3] - d10) * (d2 - d19);
  if (!(!(d19 > 0.0) & (!(d19 < 1.0e-012) | !(d19 > -1.0e-012)))) {
   i13 = 8;
   break;
  }
  i13 = HEAP32[i14 >> 2] | 0;
  i12 = HEAP32[HEAP32[i4 + 12 >> 2] >> 2] | 0;
  d10 = +HEAPF64[i12 + 8 >> 3];
  d19 = +HEAPF64[i12 + 16 >> 3];
  d19 = (+HEAPF64[i13 + 8 >> 3] - d10) * (d5 - d19) - (d2 - d10) * (+HEAPF64[i13 + 16 >> 3] - d19);
  if (!(!(d19 > 0.0) & (!(d19 < 1.0e-012) | !(d19 > -1.0e-012)))) {
   i13 = 8;
   break;
  }
 }
 if ((i13 | 0) == 8) return;
}

function __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i8, i10, i9, i1) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) >= (i7 | 0)) if ((i7 | 0) < (i1 | 0)) i2 = 0; else i2 = (HEAP32[i10 + 4 >> 2] | 0) >>> 0 < (HEAP32[i8 + 4 >> 2] | 0) >>> 0; else i2 = 1;
 i4 = HEAP32[i9 >> 2] | 0;
 if ((i4 | 0) >= (i1 | 0)) if ((i1 | 0) < (i4 | 0)) i3 = 0; else i3 = (HEAP32[i9 + 4 >> 2] | 0) >>> 0 < (HEAP32[i10 + 4 >> 2] | 0) >>> 0; else i3 = 1;
 if (!i2) {
  if (!i3) {
   i10 = 0;
   return i10 | 0;
  }
  HEAP32[i10 >> 2] = i4;
  HEAP32[i9 >> 2] = i1;
  i6 = i10 + 4 | 0;
  i4 = i9 + 4 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
  HEAP32[i4 >> 2] = i5;
  i4 = HEAP32[i10 >> 2] | 0;
  i5 = HEAP32[i8 >> 2] | 0;
  do if ((i4 | 0) >= (i5 | 0)) {
   if ((i5 | 0) < (i4 | 0)) {
    i10 = 1;
    return i10 | 0;
   }
   i3 = HEAP32[i6 >> 2] | 0;
   i1 = i8 + 4 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if (i3 >>> 0 < i2 >>> 0) break; else {
    i10 = 1;
    return i10 | 0;
   }
  } else {
   i2 = i8 + 4 | 0;
   i1 = i2;
   i3 = HEAP32[i6 >> 2] | 0;
   i2 = HEAP32[i2 >> 2] | 0;
  } while (0);
  HEAP32[i8 >> 2] = i4;
  HEAP32[i10 >> 2] = i5;
  HEAP32[i1 >> 2] = i3;
  HEAP32[i6 >> 2] = i2;
  i10 = 2;
  return i10 | 0;
 }
 if (i3) {
  HEAP32[i8 >> 2] = i4;
  HEAP32[i9 >> 2] = i7;
  i8 = i8 + 4 | 0;
  i10 = i9 + 4 | 0;
  i9 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i10 >> 2] = i9;
  i10 = 1;
  return i10 | 0;
 }
 HEAP32[i8 >> 2] = i1;
 HEAP32[i10 >> 2] = i7;
 i6 = i8 + 4 | 0;
 i4 = i10 + 4 | 0;
 i5 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i4 >> 2] = i5;
 i6 = HEAP32[i9 >> 2] | 0;
 i3 = i5;
 do if ((i6 | 0) >= (i7 | 0)) {
  if ((i7 | 0) < (i6 | 0)) {
   i10 = 1;
   return i10 | 0;
  }
  i2 = i9 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i1 >>> 0 < i3 >>> 0) break; else {
   i10 = 1;
   return i10 | 0;
  }
 } else {
  i1 = i9 + 4 | 0;
  i2 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 i8 = HEAP32[i10 >> 2] | 0;
 HEAP32[i10 >> 2] = i6;
 HEAP32[i9 >> 2] = i8;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i2 >> 2] = i5;
 i10 = 2;
 return i10 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 48 | 0;
 i14 = i16 + 52 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13424) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13580) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 63](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb(i11, i12, i8, i9, i13, i15) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i13 = i13 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i2 = i16 + 56 | 0;
 i1 = i16 + 48 | 0;
 i14 = i16 + 52 | 0;
 i3 = i16 + 44 | 0;
 i4 = i16 + 40 | 0;
 i5 = i16 + 36 | 0;
 i6 = i16 + 32 | 0;
 i10 = i16 + 8 | 0;
 i7 = i16;
 L1 : do if (!(HEAP32[i9 + 4 >> 2] & 1)) {
  HEAP32[i14 >> 2] = -1;
  i10 = HEAP32[(HEAP32[i11 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i12 >> 2];
  HEAP32[i4 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  i1 = FUNCTION_TABLE_iiiiiii[i10 & 63](i11, i1, i2, i9, i13, i14) | 0;
  HEAP32[i12 >> 2] = i1;
  switch (HEAP32[i14 >> 2] | 0) {
  case 0:
   {
    HEAP8[i15 >> 0] = 0;
    break L1;
   }
  case 1:
   {
    HEAP8[i15 >> 0] = 1;
    break L1;
   }
  default:
   {
    HEAP8[i15 >> 0] = 1;
    HEAP32[i13 >> 2] = 4;
    break L1;
   }
  }
 } else {
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i5 >> 2] = i11;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13432) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  i11 = __ZNKSt3__18ios_base6getlocEv(i9) | 0;
  HEAP32[i6 >> 2] = i11;
  i14 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13572) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i11) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 24 >> 2] & 63](i10, i14);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i14 >> 2] | 0) + 28 >> 2] & 63](i10 + 12 | 0, i14);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP8[i15 >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i12, i2, i10, i10 + 24 | 0, i1, i13, 1) | 0) == (i10 | 0) & 1;
  i1 = HEAP32[i12 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10 + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i10);
 } while (0);
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__111__sift_downIRNS_6__lessINS_4pairIfP6ObjectEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeESB_(i3, i2, i1, i14, i15) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i14 = i14 | 0;
 i15 = i15 | 0;
 var d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0, i12 = 0, i13 = 0;
 i9 = HEAP32[i15 >> 2] | 0;
 i12 = HEAP32[i3 >> 2] | 0;
 i1 = i9 - i12 | 0;
 if ((i14 | 0) < 2) return;
 i13 = (i14 + -2 | 0) / 2 | 0;
 if ((i13 | 0) < (i1 >> 3 | 0)) return;
 i2 = i1 >> 2 | 1;
 i1 = i12 + (i2 << 3) | 0;
 i3 = i1;
 i7 = i2 + 1 | 0;
 do if ((i7 | 0) < (i14 | 0)) {
  i6 = i12 + (i7 << 3) | 0;
  d4 = +HEAPF32[i1 >> 2];
  d5 = +HEAPF32[i6 >> 2];
  if (!(d4 < d5)) {
   if (d5 < d4) break;
   if ((HEAP32[i12 + (i2 << 3) + 4 >> 2] | 0) >>> 0 >= (HEAP32[i12 + (i7 << 3) + 4 >> 2] | 0) >>> 0) break;
  }
  i3 = i6;
  i2 = i7;
 } while (0);
 i1 = i3;
 d4 = +HEAPF32[i1 >> 2];
 d11 = +HEAPF32[i9 >> 2];
 if (d4 < d11) return;
 do if (!(d11 < d4)) {
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i6 = i9 + 4 | 0;
  i8 = HEAP32[i6 >> 2] | 0;
  if (i7 >>> 0 < i8 >>> 0) return; else break;
 } else {
  i8 = i9 + 4 | 0;
  i6 = i8;
  i7 = HEAP32[i1 + 4 >> 2] | 0;
  i8 = HEAP32[i8 >> 2] | 0;
 } while (0);
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i6 >> 2] = i7;
 HEAP32[i15 >> 2] = i3;
 L24 : do if ((i13 | 0) >= (i2 | 0)) {
  i10 = i8;
  while (1) {
   i2 = i2 << 1 | 1;
   i3 = i12 + (i2 << 3) | 0;
   i6 = i3;
   i9 = i2 + 1 | 0;
   do if ((i9 | 0) < (i14 | 0)) {
    i7 = i12 + (i9 << 3) | 0;
    d4 = +HEAPF32[i3 >> 2];
    d5 = +HEAPF32[i7 >> 2];
    if (!(d4 < d5)) {
     if (d5 < d4) break;
     if ((HEAP32[i12 + (i2 << 3) + 4 >> 2] | 0) >>> 0 >= (HEAP32[i12 + (i9 << 3) + 4 >> 2] | 0) >>> 0) break;
    }
    i6 = i7;
    i2 = i9;
   } while (0);
   i7 = i6;
   d4 = +HEAPF32[i7 >> 2];
   if (d4 < d11) break L24;
   i3 = i7 + 4 | 0;
   if (d11 < d4) i3 = HEAP32[i3 >> 2] | 0; else {
    i3 = HEAP32[i3 >> 2] | 0;
    if (i3 >>> 0 < i10 >>> 0) break L24;
   }
   HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i1 + 4 >> 2] = i3;
   HEAP32[i15 >> 2] = i6;
   if ((i13 | 0) < (i2 | 0)) {
    i1 = i7;
    break;
   } else i1 = i7;
  }
 } while (0);
 HEAPF32[i1 >> 2] = d11;
 HEAP32[i1 + 4 >> 2] = i8;
 return;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi(i16, i15) {
 i16 = i16 | 0;
 i15 = i15 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i17 = 0;
 i17 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i10 = i17;
 if ((i15 | 0) == -1) {
  i16 = 0;
  STACKTOP = i17;
  return i16 | 0;
 }
 i11 = i16 + 12 | 0;
 i12 = i16 + 8 | 0;
 i13 = (HEAP32[i11 >> 2] | 0) - (HEAP32[i12 >> 2] | 0) | 0;
 i14 = i16 + 24 | 0;
 i7 = HEAP32[i14 >> 2] | 0;
 i9 = i16 + 28 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 if ((i7 | 0) == (i1 | 0)) {
  i6 = i16 + 48 | 0;
  if (!(HEAP32[i6 >> 2] & 16)) {
   i16 = -1;
   STACKTOP = i17;
   return i16 | 0;
  }
  i4 = i16 + 20 | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  i3 = i16 + 44 | 0;
  i8 = (HEAP32[i3 >> 2] | 0) - i5 | 0;
  i2 = i16 + 32 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i2, 0);
  if (!(HEAP8[i2 >> 0] & 1)) i1 = 10; else i1 = (HEAP32[i2 >> 2] & -2) + -1 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i2, i1, 0);
  i1 = HEAP8[i2 >> 0] | 0;
  if (!(i1 & 1)) {
   i2 = i2 + 1 | 0;
   i1 = (i1 & 255) >>> 1;
  } else {
   i2 = HEAP32[i16 + 40 >> 2] | 0;
   i1 = HEAP32[i16 + 36 >> 2] | 0;
  }
  i1 = i2 + i1 | 0;
  HEAP32[i4 >> 2] = i2;
  HEAP32[i9 >> 2] = i1;
  i7 = i2 + (i7 - i5) | 0;
  HEAP32[i14 >> 2] = i7;
  i2 = i2 + i8 | 0;
  HEAP32[i3 >> 2] = i2;
  i5 = i1;
 } else {
  i2 = i16 + 44 | 0;
  i6 = i16 + 48 | 0;
  i3 = i2;
  i2 = HEAP32[i2 >> 2] | 0;
  i5 = i1;
 }
 i4 = i7 + 1 | 0;
 HEAP32[i10 >> 2] = i4;
 i2 = HEAP32[(i4 >>> 0 < i2 >>> 0 ? i3 : i10) >> 2] | 0;
 HEAP32[i3 >> 2] = i2;
 if (HEAP32[i6 >> 2] & 8) {
  i1 = i16 + 32 | 0;
  if (!(HEAP8[i1 >> 0] & 1)) i1 = i1 + 1 | 0; else i1 = HEAP32[i16 + 40 >> 2] | 0;
  HEAP32[i12 >> 2] = i1;
  HEAP32[i11 >> 2] = i1 + i13;
  HEAP32[i16 + 16 >> 2] = i2;
 }
 if ((i7 | 0) == (i5 | 0)) {
  i16 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i16 >> 2] | 0) + 52 >> 2] & 31](i16, i15 & 255) | 0;
  STACKTOP = i17;
  return i16 | 0;
 } else {
  HEAP32[i14 >> 2] = i4;
  HEAP8[i7 >> 0] = i15;
  i16 = i15 & 255;
  STACKTOP = i17;
  return i16 | 0;
 }
 return 0;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 1 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 15](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0;
  } else HEAP8[i12 >> 0] = HEAP8[i13 >> 0] | 0; while (0);
  if (i14) {
   i1 = HEAP8[i12 >> 0] | 0;
   HEAP32[i11 + 48 >> 2] = i1 & 255;
  } else {
   while (1) {
    if ((i1 | 0) <= 0) break;
    i1 = i1 + -1 | 0;
    if ((_ungetc(HEAPU8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
   i1 = HEAP8[i12 >> 0] | 0;
  }
  i1 = i1 & 255;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i7, i10, i9, i1) {
 i7 = i7 | 0;
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d8 = 0.0;
 d2 = +HEAPF32[i10 >> 2];
 d8 = +HEAPF32[i7 >> 2];
 if (!(d2 < d8)) if (d8 < d2) i1 = 0; else i1 = (HEAP32[i10 + 4 >> 2] | 0) >>> 0 < (HEAP32[i7 + 4 >> 2] | 0) >>> 0; else i1 = 1;
 d4 = +HEAPF32[i9 >> 2];
 if (!(d4 < d2)) if (d2 < d4) i3 = 0; else i3 = (HEAP32[i9 + 4 >> 2] | 0) >>> 0 < (HEAP32[i10 + 4 >> 2] | 0) >>> 0; else i3 = 1;
 if (!i1) {
  if (!i3) {
   i10 = 0;
   return i10 | 0;
  }
  HEAPF32[i10 >> 2] = d4;
  HEAPF32[i9 >> 2] = d2;
  i6 = i10 + 4 | 0;
  i9 = i9 + 4 | 0;
  i5 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i9 >> 2] = i5;
  d2 = +HEAPF32[i10 >> 2];
  d4 = +HEAPF32[i7 >> 2];
  do if (!(d2 < d4)) {
   if (d4 < d2) {
    i10 = 1;
    return i10 | 0;
   }
   i5 = HEAP32[i6 >> 2] | 0;
   i1 = i7 + 4 | 0;
   i3 = HEAP32[i1 >> 2] | 0;
   if (i5 >>> 0 < i3 >>> 0) break; else {
    i10 = 1;
    return i10 | 0;
   }
  } else {
   i3 = i7 + 4 | 0;
   i1 = i3;
   i5 = HEAP32[i6 >> 2] | 0;
   i3 = HEAP32[i3 >> 2] | 0;
  } while (0);
  HEAPF32[i7 >> 2] = d2;
  HEAPF32[i10 >> 2] = d4;
  HEAP32[i1 >> 2] = i5;
  HEAP32[i6 >> 2] = i3;
  i10 = 2;
  return i10 | 0;
 }
 if (i3) {
  HEAPF32[i7 >> 2] = d4;
  HEAPF32[i9 >> 2] = d8;
  i7 = i7 + 4 | 0;
  i10 = i9 + 4 | 0;
  i9 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i10 >> 2] = i9;
  i10 = 1;
  return i10 | 0;
 }
 HEAPF32[i7 >> 2] = d2;
 HEAPF32[i10 >> 2] = d8;
 i5 = i7 + 4 | 0;
 i6 = i10 + 4 | 0;
 i7 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i6 >> 2] = i7;
 d2 = +HEAPF32[i9 >> 2];
 i5 = i7;
 do if (!(d2 < d8)) {
  if (d8 < d2) {
   i10 = 1;
   return i10 | 0;
  }
  i3 = i9 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i1 >>> 0 < i5 >>> 0) break; else {
   i10 = 1;
   return i10 | 0;
  }
 } else {
  i1 = i9 + 4 | 0;
  i3 = i1;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i10 >> 2] = d2;
 HEAPF32[i9 >> 2] = d8;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i3 >> 2] = i7;
 i10 = 2;
 return i10 | 0;
}
function __ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i17) {
 i19 = i19 | 0;
 i18 = i18 | 0;
 i17 = i17 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, d14 = 0.0, i15 = 0, i16 = 0, i20 = 0;
 i16 = 0;
 L1 : while (1) {
  i15 = i17 + 3 + i16 | 0;
  do if ((HEAP8[i15 >> 0] | 0) == 0 ? (i4 = HEAP32[i17 + 20 + (i16 << 2) >> 2] | 0, (i4 | 0) != 0) : 0) {
   i3 = HEAP32[i17 + 8 + (i16 << 2) >> 2] | 0;
   i2 = __ZN3p2t8Triangle13OppositePointERS0_RNS_5PointE(i4, i17, i3) | 0;
   i6 = __ZN3p2t8Triangle5IndexEPKNS_5PointE(i4, i2) | 0;
   i5 = HEAP8[i4 + i6 >> 0] | 0;
   if (i5 << 24 >> 24 == 0 ? (i1 = i4 + 3 + i6 | 0, (HEAP8[i1 >> 0] | 0) == 0) : 0) {
    i6 = __ZN3p2t8Triangle8PointCCWERNS_5PointE(i17, i3) | 0;
    i5 = __ZN3p2t8Triangle7PointCWERNS_5PointE(i17, i3) | 0;
    d7 = +HEAPF64[i2 + 8 >> 3];
    d10 = +HEAPF64[i3 + 8 >> 3] - d7;
    d8 = +HEAPF64[i2 + 16 >> 3];
    d11 = +HEAPF64[i3 + 16 >> 3] - d8;
    d12 = +HEAPF64[i6 + 8 >> 3] - d7;
    d13 = +HEAPF64[i6 + 16 >> 3] - d8;
    d14 = d10 * d13 - d11 * d12;
    if (d14 <= 0.0) break;
    d9 = +HEAPF64[i5 + 8 >> 3] - d7;
    d7 = +HEAPF64[i5 + 16 >> 3] - d8;
    d8 = d11 * d9 - d10 * d7;
    if (d8 <= 0.0) break;
    if (d14 * (d9 * d9 + d7 * d7) + ((d10 * d10 + d11 * d11) * (d12 * d7 - d13 * d9) + (d12 * d12 + d13 * d13) * d8) > 0.0) {
     i5 = i15;
     break L1;
    } else break;
   }
   HEAP8[i17 + i16 >> 0] = i5;
  } while (0);
  i16 = i16 + 1 | 0;
  if ((i16 | 0) >= 3) {
   i1 = 0;
   i20 = 16;
   break;
  }
 }
 if ((i20 | 0) == 16) return i1 | 0;
 HEAP8[i5 >> 0] = 1;
 HEAP8[i1 >> 0] = 1;
 __ZN3p2t5Sweep18RotateTrianglePairERNS_8TriangleERNS_5PointES2_S4_(0, i17, i3, i4, i2);
 if (!(__ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i17) | 0)) __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i18, i17);
 if (!(__ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i19, i18, i4) | 0)) __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i18, i4);
 HEAP8[i5 >> 0] = 0;
 HEAP8[i1 >> 0] = 0;
 i20 = 1;
 return i20 | 0;
}

function __ZN3p2t5Sweep18RotateTrianglePairERNS_8TriangleERNS_5PointES2_S4_(i1, i8, i7, i6, i5) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i1 = __ZN3p2t8Triangle11NeighborCCWERNS_5PointE(i8, i7) | 0;
 i2 = __ZN3p2t8Triangle10NeighborCWERNS_5PointE(i8, i7) | 0;
 i3 = __ZN3p2t8Triangle11NeighborCCWERNS_5PointE(i6, i5) | 0;
 i4 = __ZN3p2t8Triangle10NeighborCWERNS_5PointE(i6, i5) | 0;
 i12 = __ZN3p2t8Triangle21GetConstrainedEdgeCCWERNS_5PointE(i8, i7) | 0;
 i11 = __ZN3p2t8Triangle20GetConstrainedEdgeCWERNS_5PointE(i8, i7) | 0;
 i10 = __ZN3p2t8Triangle21GetConstrainedEdgeCCWERNS_5PointE(i6, i5) | 0;
 i9 = __ZN3p2t8Triangle20GetConstrainedEdgeCWERNS_5PointE(i6, i5) | 0;
 i16 = __ZN3p2t8Triangle17GetDelunayEdgeCCWERNS_5PointE(i8, i7) | 0;
 i15 = __ZN3p2t8Triangle16GetDelunayEdgeCWERNS_5PointE(i8, i7) | 0;
 i14 = __ZN3p2t8Triangle17GetDelunayEdgeCCWERNS_5PointE(i6, i5) | 0;
 i13 = __ZN3p2t8Triangle16GetDelunayEdgeCWERNS_5PointE(i6, i5) | 0;
 __ZN3p2t8Triangle8LegalizeERNS_5PointES2_(i8, i7, i5);
 __ZN3p2t8Triangle8LegalizeERNS_5PointES2_(i6, i5, i7);
 __ZN3p2t8Triangle17SetDelunayEdgeCCWERNS_5PointEb(i6, i7, i16);
 __ZN3p2t8Triangle16SetDelunayEdgeCWERNS_5PointEb(i8, i7, i15);
 __ZN3p2t8Triangle17SetDelunayEdgeCCWERNS_5PointEb(i8, i5, i14);
 __ZN3p2t8Triangle16SetDelunayEdgeCWERNS_5PointEb(i6, i5, i13);
 __ZN3p2t8Triangle21SetConstrainedEdgeCCWERNS_5PointEb(i6, i7, i12);
 __ZN3p2t8Triangle20SetConstrainedEdgeCWERNS_5PointEb(i8, i7, i11);
 __ZN3p2t8Triangle21SetConstrainedEdgeCCWERNS_5PointEb(i8, i5, i10);
 __ZN3p2t8Triangle20SetConstrainedEdgeCWERNS_5PointEb(i6, i5, i9);
 __ZN3p2t8Triangle14ClearNeighborsEv(i8);
 __ZN3p2t8Triangle14ClearNeighborsEv(i6);
 if (i1) __ZN3p2t8Triangle12MarkNeighborERS0_(i6, i1);
 if (i2) __ZN3p2t8Triangle12MarkNeighborERS0_(i8, i2);
 if (i3) __ZN3p2t8Triangle12MarkNeighborERS0_(i8, i3);
 if (!i4) {
  __ZN3p2t8Triangle12MarkNeighborERS0_(i8, i6);
  return;
 }
 __ZN3p2t8Triangle12MarkNeighborERS0_(i6, i4);
 __ZN3p2t8Triangle12MarkNeighborERS0_(i8, i6);
 return;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb(i11, i14) {
 i11 = i11 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0, i17 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i13 = i15 + 16 | 0;
 i12 = i15 + 8 | 0;
 i8 = i15 + 4 | 0;
 i9 = i15;
 i3 = i11 + 52 | 0;
 L1 : do if (HEAP8[i3 >> 0] | 0) {
  i2 = i11 + 48 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i14) {
   HEAP32[i2 >> 2] = -1;
   HEAP8[i3 >> 0] = 0;
  }
 } else {
  i1 = HEAP32[i11 + 44 >> 2] | 0;
  i1 = (i1 | 0) > 1 ? i1 : 1;
  i10 = i11 + 32 | 0;
  if ((i1 | 0) > 0) {
   i3 = 0;
   do {
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i13 + i3 >> 0] = i2;
    i3 = i3 + 1 | 0;
   } while ((i3 | 0) < (i1 | 0));
  }
  L8 : do if (!(HEAP8[i11 + 53 >> 0] | 0)) {
   i5 = i11 + 40 | 0;
   i6 = i11 + 36 | 0;
   i7 = i12 + 4 | 0;
   L10 : while (1) {
    i16 = HEAP32[i5 >> 2] | 0;
    i3 = i16;
    i2 = HEAP32[i3 >> 2] | 0;
    i3 = HEAP32[i3 + 4 >> 2] | 0;
    i17 = HEAP32[i6 >> 2] | 0;
    i4 = i13 + i1 | 0;
    switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i17 >> 2] | 0) + 16 >> 2] & 15](i17, i16, i13, i4, i8, i12, i7, i9) | 0) {
    case 2:
     {
      i1 = -1;
      break L1;
     }
    case 3:
     break L10;
    case 1:
     break;
    default:
     break L8;
    }
    i17 = HEAP32[i5 >> 2] | 0;
    HEAP32[i17 >> 2] = i2;
    HEAP32[i17 + 4 >> 2] = i3;
    if ((i1 | 0) == 8) {
     i1 = -1;
     break L1;
    }
    i2 = _getc(HEAP32[i10 >> 2] | 0) | 0;
    if ((i2 | 0) == -1) {
     i1 = -1;
     break L1;
    }
    HEAP8[i4 >> 0] = i2;
    i1 = i1 + 1 | 0;
   }
   HEAP32[i12 >> 2] = HEAP8[i13 >> 0];
  } else HEAP32[i12 >> 2] = HEAP8[i13 >> 0]; while (0);
  if (i14) {
   i1 = HEAP32[i12 >> 2] | 0;
   HEAP32[i11 + 48 >> 2] = i1;
   break;
  }
  while (1) {
   if ((i1 | 0) <= 0) break;
   i1 = i1 + -1 | 0;
   if ((_ungetc(HEAP8[i13 + i1 >> 0] | 0, HEAP32[i10 >> 2] | 0) | 0) == -1) {
    i1 = -1;
    break L1;
   }
  }
  i1 = HEAP32[i12 >> 2] | 0;
 } while (0);
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP8[i8 + 24 >> 0] | 0) == i7 << 24 >> 24;
  if (!i1 ? (HEAP8[i8 + 25 >> 0] | 0) != i7 << 24 >> 24 : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if (i7 << 24 >> 24 == i3 << 24 >> 24 ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 26 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i7 << 24 >> 24) break;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  if ((i1 | 0) > 23) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i1 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 22) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[27643 + i1 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[27643 + i1 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function _add_imported(i1, i8) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i9 + 12 | 0;
 i6 = i9;
 i3 = HEAP32[711] | 0;
 i5 = i3 + 328 | 0;
 i7 = i3 + 332 | 0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i5, HEAP32[i7 >> 2] | 0);
 HEAP32[i3 + 336 >> 2] = 0;
 HEAP32[i5 >> 2] = i7;
 HEAP32[i7 >> 2] = 0;
 i7 = HEAP32[711] | 0;
 i5 = i7 + 328 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i6, i1, _strlen(i1) | 0);
 i3 = __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(i5, i4, i6) | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i7 = i1;
  i7 = i7 + 28 | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i7, i8) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
  STACKTOP = i9;
  return;
 }
 i2 = __Znwj(40) | 0;
 i1 = i2 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i1 + 4 >> 2] = HEAP32[i6 + 4 >> 2];
 HEAP32[i1 + 8 >> 2] = HEAP32[i6 + 8 >> 2];
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i1 = i2 + 28 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i3 >> 2] = i2;
 i1 = HEAP32[HEAP32[i5 >> 2] >> 2] | 0;
 if (!i1) i1 = i2; else {
  HEAP32[i5 >> 2] = i1;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i7 + 332 >> 2] | 0, i1);
 i7 = i7 + 336 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i7 = i2;
 i7 = i7 + 28 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i7, i8) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i9;
 return;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw(i7, i13, i11, i12, i14, i3, i2, i4, i5, i8) {
 i7 = i7 | 0;
 i13 = i13 | 0;
 i11 = i11 | 0;
 i12 = i12 | 0;
 i14 = i14 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i6 = 0, i9 = 0, i10 = 0;
 i9 = HEAP32[i12 >> 2] | 0;
 i10 = (i9 | 0) == (i11 | 0);
 do if (i10) {
  i1 = (HEAP32[i8 + 96 >> 2] | 0) == (i7 | 0);
  if (!i1 ? (HEAP32[i8 + 100 >> 2] | 0) != (i7 | 0) : 0) {
   i6 = 5;
   break;
  }
  HEAP32[i12 >> 2] = i11 + 1;
  HEAP8[i11 >> 0] = i1 ? 43 : 45;
  HEAP32[i14 >> 2] = 0;
  i1 = 0;
 } else i6 = 5; while (0);
 L6 : do if ((i6 | 0) == 5) {
  i6 = HEAP8[i2 >> 0] | 0;
  if ((i7 | 0) == (i3 | 0) ? (((i6 & 1) == 0 ? (i6 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0) | 0) != 0 : 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   if ((i1 - i4 | 0) >= 160) {
    i1 = 0;
    break;
   }
   i13 = HEAP32[i14 >> 2] | 0;
   HEAP32[i5 >> 2] = i1 + 4;
   HEAP32[i1 >> 2] = i13;
   HEAP32[i14 >> 2] = 0;
   i1 = 0;
   break;
  }
  i2 = i8 + 104 | 0;
  i1 = i8;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) == (i7 | 0)) break;
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i2 | 0)) {
    i1 = i2;
    break;
   }
  }
  i1 = i1 - i8 | 0;
  i2 = i1 >> 2;
  if ((i1 | 0) > 92) i1 = -1; else {
   switch (i13 | 0) {
   case 10:
   case 8:
    {
     if ((i2 | 0) >= (i13 | 0)) {
      i1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if ((i1 | 0) >= 88) {
      if (i10) {
       i1 = -1;
       break L6;
      }
      if ((i9 - i11 | 0) >= 3) {
       i1 = -1;
       break L6;
      }
      if ((HEAP8[i9 + -1 >> 0] | 0) != 48) {
       i1 = -1;
       break L6;
      }
      HEAP32[i14 >> 2] = 0;
      i1 = HEAP8[27643 + i2 >> 0] | 0;
      HEAP32[i12 >> 2] = i9 + 1;
      HEAP8[i9 >> 0] = i1;
      i1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   i1 = HEAP8[27643 + i2 >> 0] | 0;
   HEAP32[i12 >> 2] = i9 + 1;
   HEAP8[i9 >> 0] = i1;
   HEAP32[i14 >> 2] = (HEAP32[i14 >> 2] | 0) + 1;
   i1 = 0;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__17__sort4IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_S9_T_(i12, i13, i10, i7, i1) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = __ZNSt3__17__sort3IRNS_6__lessINS_4pairIiP8PolylineEES5_EEPS5_EEjT0_S9_S9_T_(i12, i13, i10, i1) | 0;
 i5 = HEAP32[i7 >> 2] | 0;
 i6 = HEAP32[i10 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i13 = i11;
   return i13 | 0;
  }
  i2 = i7 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i10 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   i9 = i4;
   break;
  } else {
   i13 = i11;
   return i13 | 0;
  }
 } else {
  i1 = i10 + 4 | 0;
  i3 = i7 + 4 | 0;
  i9 = i1;
  i2 = i3;
  i4 = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i10 >> 2] = i5;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 i2 = i11 + 1 | 0;
 i5 = HEAP32[i10 >> 2] | 0;
 i6 = HEAP32[i13 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i13 = i2;
   return i13 | 0;
  }
  i4 = HEAP32[i4 >> 2] | 0;
  i3 = i13 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i8 = i3;
   i2 = i4;
   break;
  } else {
   i13 = i2;
   return i13 | 0;
  }
 } else {
  i1 = i13 + 4 | 0;
  i7 = i1;
  i8 = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i13 >> 2] = i5;
 HEAP32[i10 >> 2] = i6;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 i4 = i11 + 2 | 0;
 i5 = HEAP32[i13 >> 2] | 0;
 i6 = HEAP32[i12 >> 2] | 0;
 do if ((i5 | 0) >= (i6 | 0)) {
  if ((i6 | 0) < (i5 | 0)) {
   i13 = i4;
   return i13 | 0;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = i12 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) break; else {
   i13 = i4;
   return i13 | 0;
  }
 } else {
  i1 = i12 + 4 | 0;
  i2 = i1;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAP32[i12 >> 2] = i5;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 i13 = i11 + 3 | 0;
 return i13 | 0;
}

function __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i9, i2, i10) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 i10 = i10 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i3 = i2;
 i7 = i10 - i3 >> 2;
 i8 = i9 + 8 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i6 = HEAP32[i9 >> 2] | 0;
 i5 = i6;
 if (i7 >>> 0 <= i1 - i5 >> 2 >>> 0) {
  i4 = i9 + 4 | 0;
  i1 = (HEAP32[i4 >> 2] | 0) - i5 >> 2;
  i9 = i7 >>> 0 > i1 >>> 0;
  i1 = i9 ? i2 + (i1 << 2) | 0 : i10;
  i8 = i1 - i3 | 0;
  _memmove(i6 | 0, i2 | 0, i8 | 0) | 0;
  i2 = i6 + (i8 >> 2 << 2) | 0;
  if (!i9) {
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (i2 | 0)) return;
   HEAP32[i4 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
   return;
  }
  if ((i1 | 0) == (i10 | 0)) return;
  i2 = HEAP32[i4 >> 2] | 0;
  do {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i2 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
   HEAP32[i4 >> 2] = i2;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i10 | 0));
  return;
 }
 if (i6) {
  i1 = i9 + 4 | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  if ((i3 | 0) != (i6 | 0)) HEAP32[i1 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
  __ZdlPv(i6);
  HEAP32[i8 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i9 >> 2] = 0;
  i1 = 0;
 }
 if (i7 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = HEAP32[i9 >> 2] | 0;
 } else i3 = 0;
 i1 = i1 - i3 | 0;
 if (i1 >> 2 >>> 0 < 536870911) {
  i1 = i1 >> 1;
  i1 = i1 >>> 0 < i7 >>> 0 ? i7 : i1;
  if (i1 >>> 0 > 1073741823) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
   i3 = i1;
  } else i3 = i1;
 } else i3 = 1073741823;
 i1 = __Znwj(i3 << 2) | 0;
 i4 = i9 + 4 | 0;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i9 >> 2] = i1;
 HEAP32[i8 >> 2] = i1 + (i3 << 2);
 if ((i2 | 0) == (i10 | 0)) return;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = (HEAP32[i4 >> 2] | 0) + 4 | 0;
  HEAP32[i4 >> 2] = i1;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) != (i10 | 0));
 return;
}

function __ZN3p2t5Sweep12FillBasinReqERNS_12SweepContextEPNS_4NodeE(i12, i11, i1) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d13 = 0.0, d14 = 0.0;
 i7 = i11 + 40 | 0;
 i8 = i11 + 16 | 0;
 i9 = i11 + 24 | 0;
 i10 = i11 + 32 | 0;
 if (+HEAPF64[i10 >> 3] > +HEAPF64[(HEAP32[HEAP32[((HEAP8[i7 >> 0] | 0) == 0 ? i9 : i8) >> 2] >> 2] | 0) + 16 >> 3] - +HEAPF64[(HEAP32[i1 >> 2] | 0) + 16 >> 3]) return; else {
  i6 = i1;
  i5 = i1;
 }
 L3 : while (1) {
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i12, i11, i5);
  i1 = HEAP32[i5 + 12 >> 2] | 0;
  i3 = HEAP32[i5 + 8 >> 2] | 0;
  i4 = (i3 | 0) == (HEAP32[i9 >> 2] | 0);
  do if ((i1 | 0) == (HEAP32[i8 >> 2] | 0)) {
   if (i4) {
    i1 = 9;
    break L3;
   }
   i4 = HEAP32[i6 >> 2] | 0;
   i1 = HEAP32[i5 + 8 >> 2] | 0;
   i6 = HEAP32[i1 >> 2] | 0;
   i5 = HEAP32[HEAP32[i1 + 8 >> 2] >> 2] | 0;
   d13 = +HEAPF64[i5 + 8 >> 3];
   d2 = +HEAPF64[i6 + 16 >> 3];
   d14 = +HEAPF64[i5 + 16 >> 3];
   d13 = (+HEAPF64[i4 + 8 >> 3] - d13) * (d2 - d14) - (+HEAPF64[i4 + 16 >> 3] - d14) * (+HEAPF64[i6 + 8 >> 3] - d13);
   if (!(d13 > 0.0) & (!(d13 < 1.0e-012) | !(d13 > -1.0e-012))) {
    i1 = 9;
    break L3;
   }
  } else if (i4) {
   i5 = HEAP32[i6 >> 2] | 0;
   i6 = HEAP32[i1 >> 2] | 0;
   i4 = HEAP32[HEAP32[i1 + 12 >> 2] >> 2] | 0;
   d14 = +HEAPF64[i4 + 8 >> 3];
   d2 = +HEAPF64[i6 + 16 >> 3];
   d13 = +HEAPF64[i4 + 16 >> 3];
   d14 = (+HEAPF64[i5 + 8 >> 3] - d14) * (d2 - d13) - (+HEAPF64[i5 + 16 >> 3] - d13) * (+HEAPF64[i6 + 8 >> 3] - d14);
   if (d14 > 0.0 & (!(d14 < 1.0e-012) | !(d14 > -1.0e-012))) {
    i1 = 9;
    break L3;
   } else break;
  } else {
   i1 = +HEAPF64[(HEAP32[i1 >> 2] | 0) + 16 >> 3] < +HEAPF64[(HEAP32[i3 >> 2] | 0) + 16 >> 3] ? i1 : i3;
   d2 = +HEAPF64[(HEAP32[i1 >> 2] | 0) + 16 >> 3];
   break;
  } while (0);
  if (+HEAPF64[i10 >> 3] > +HEAPF64[(HEAP32[HEAP32[((HEAP8[i7 >> 0] | 0) == 0 ? i9 : i8) >> 2] >> 2] | 0) + 16 >> 3] - d2) {
   i1 = 9;
   break;
  } else {
   i6 = i1;
   i5 = i1;
  }
 }
 if ((i1 | 0) == 9) return;
}

function __ZNSt3__16vectorI14SegmentSubGoalNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i14, i12) {
 i14 = i14 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i15 = 0, i16 = 0;
 i15 = i14 + 4 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = (((HEAP32[i15 >> 2] | 0) - i1 | 0) / 40 | 0) + 1 | 0;
 if (i2 >>> 0 > 107374182) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i14);
  i13 = HEAP32[i14 >> 2] | 0;
 } else i13 = i1;
 i16 = i14 + 8 | 0;
 i3 = i13;
 i1 = ((HEAP32[i16 >> 2] | 0) - i3 | 0) / 40 | 0;
 if (i1 >>> 0 < 53687091) {
  i5 = i1 << 1;
  i2 = i5 >>> 0 < i2 >>> 0 ? i2 : i5;
  i5 = HEAP32[i15 >> 2] | 0;
  i1 = i5;
  i4 = (i1 - i3 | 0) / 40 | 0;
  if (!i2) {
   i6 = 0;
   i10 = 0;
  } else i7 = 6;
 } else {
  i5 = HEAP32[i15 >> 2] | 0;
  i1 = i5;
  i2 = 107374182;
  i4 = (i1 - i3 | 0) / 40 | 0;
  i7 = 6;
 }
 if ((i7 | 0) == 6) {
  i6 = i2;
  i10 = __Znwj(i2 * 40 | 0) | 0;
 }
 i2 = i10 + (i4 * 40 | 0) | 0;
 i9 = i2;
 i11 = i10 + (i6 * 40 | 0) | 0;
 HEAP32[i2 >> 2] = 5612;
 i8 = i10 + (i4 * 40 | 0) + 4 | 0;
 i6 = i12 + 4 | 0;
 i7 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
  i8 = i8 + 4 | 0;
  i6 = i6 + 4 | 0;
 } while ((i8 | 0) < (i7 | 0));
 i10 = i10 + ((i4 + 1 | 0) * 40 | 0) | 0;
 if ((i5 | 0) == (i13 | 0)) {
  i4 = i14;
  i5 = i15;
  i2 = i9;
 } else {
  i1 = i9;
  do {
   HEAP32[i2 + -40 >> 2] = 5612;
   i8 = i2 + -36 | 0;
   i6 = i5 + -36 | 0;
   i5 = i5 + -40 | 0;
   i7 = i8 + 36 | 0;
   do {
    HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
    i8 = i8 + 4 | 0;
    i6 = i6 + 4 | 0;
   } while ((i8 | 0) < (i7 | 0));
   i2 = i1 + -40 | 0;
   i1 = i2;
  } while ((i5 | 0) != (i13 | 0));
  i4 = i14;
  i5 = i15;
  i2 = i1;
  i3 = HEAP32[i14 >> 2] | 0;
  i1 = HEAP32[i15 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i2;
 HEAP32[i5 >> 2] = i10;
 HEAP32[i16 >> 2] = i11;
 i2 = i3;
 if ((i1 | 0) != (i2 | 0)) do {
  i1 = i1 + -40 | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[i1 >> 2] >> 2] & 255](i1);
 } while ((i1 | 0) != (i2 | 0));
 if (!i3) return;
 __ZdlPv(i3);
 return;
}

function _wcsrtombs(i3, i6, i1, i2) {
 i3 = i3 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 L1 : do if (!i3) {
  i3 = HEAP32[i6 >> 2] | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) i1 = 0; else {
   i1 = 0;
   do {
    if (i2 >>> 0 > 127) {
     i2 = _wcrtomb(i7, i2, 0) | 0;
     if ((i2 | 0) == -1) {
      i1 = -1;
      break L1;
     }
    } else i2 = 1;
    i1 = i2 + i1 | 0;
    i3 = i3 + 4 | 0;
    i2 = HEAP32[i3 >> 2] | 0;
   } while ((i2 | 0) != 0);
  }
 } else {
  L9 : do if (i1 >>> 0 > 3) {
   i2 = i1;
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) break;
     i5 = _wcrtomb(i3, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (i2 >>> 0 <= 3) break L9;
   }
   HEAP8[i3 >> 0] = 0;
   HEAP32[i6 >> 2] = 0;
   i1 = i1 - i2 | 0;
   break L1;
  } else i2 = i1; while (0);
  if (i2) {
   i4 = HEAP32[i6 >> 2] | 0;
   while (1) {
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 + -1 | 0) >>> 0 > 126) {
     if (!i5) {
      i4 = 19;
      break;
     }
     i5 = _wcrtomb(i7, i5, 0) | 0;
     if ((i5 | 0) == -1) {
      i1 = -1;
      break L1;
     }
     if (i2 >>> 0 < i5 >>> 0) {
      i4 = 22;
      break;
     }
     _wcrtomb(i3, HEAP32[i4 >> 2] | 0, 0) | 0;
     i3 = i3 + i5 | 0;
     i2 = i2 - i5 | 0;
    } else {
     HEAP8[i3 >> 0] = i5;
     i3 = i3 + 1 | 0;
     i2 = i2 + -1 | 0;
     i4 = HEAP32[i6 >> 2] | 0;
    }
    i4 = i4 + 4 | 0;
    HEAP32[i6 >> 2] = i4;
    if (!i2) break L1;
   }
   if ((i4 | 0) == 19) {
    HEAP8[i3 >> 0] = 0;
    HEAP32[i6 >> 2] = 0;
    i1 = i1 - i2 | 0;
    break;
   } else if ((i4 | 0) == 22) {
    i1 = i1 - i2 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function __ZN6MapDef5clearEv(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = HEAP32[i8 >> 2] | 0;
 i3 = i8 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i7 = i1 + -4 | 0;
  HEAP32[i3 >> 2] = i7;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = 0;
  if (i1) __ZdlPv(i1);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 i6 = HEAP32[i8 + 12 >> 2] | 0;
 i7 = i8 + 16 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) != (i6 | 0)) do {
  i4 = i1 + -4 | 0;
  HEAP32[i7 >> 2] = i4;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   __ZdlPv(i5);
  }
  i1 = HEAP32[i7 >> 2] | 0;
 } while ((i1 | 0) != (i6 | 0));
 i3 = i8 + 48 | 0;
 i2 = i8 + 52 | 0;
 __ZNSt3__16__treeINS_12__value_typeIPvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS2_S9_NS_4lessIS2_EELb1EEENS6_IS9_EEE7destroyEPNS_11__tree_nodeIS9_S2_EE(i3, HEAP32[i2 >> 2] | 0);
 HEAP32[i8 + 56 >> 2] = 0;
 HEAP32[i3 >> 2] = i2;
 HEAP32[i2 >> 2] = 0;
 i2 = HEAP32[i8 + 24 >> 2] | 0;
 i3 = i8 + 28 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) do {
  i7 = i1 + -4 | 0;
  HEAP32[i3 >> 2] = i7;
  i1 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = 0;
  if (i1) __ZdlPv(i1);
  i1 = HEAP32[i3 >> 2] | 0;
 } while ((i1 | 0) != (i2 | 0));
 i3 = HEAP32[i8 + 36 >> 2] | 0;
 i2 = i8 + 40 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) return;
 do {
  i8 = i1 + -4 | 0;
  HEAP32[i2 >> 2] = i8;
  i1 = HEAP32[i8 >> 2] | 0;
  HEAP32[i8 >> 2] = 0;
  if (i1) __ZdlPv(i1);
  i1 = HEAP32[i2 >> 2] | 0;
 } while ((i1 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__17__sort4IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_S9_T_(i12, i13, i10, i7, i1) {
 i12 = i12 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, i8 = 0, i9 = 0, i11 = 0;
 i11 = __ZNSt3__17__sort3IRNS_6__lessINS_4pairIfP6ObjectEES5_EEPS5_EEjT0_S9_S9_T_(i12, i13, i10, i1) | 0;
 d5 = +HEAPF32[i7 >> 2];
 d6 = +HEAPF32[i10 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i13 = i11;
   return i13 | 0;
  }
  i2 = i7 + 4 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i10 + 4 | 0;
  i1 = HEAP32[i4 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) {
   i9 = i4;
   break;
  } else {
   i13 = i11;
   return i13 | 0;
  }
 } else {
  i1 = i10 + 4 | 0;
  i3 = i7 + 4 | 0;
  i9 = i1;
  i2 = i3;
  i4 = i1;
  i3 = HEAP32[i3 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i10 >> 2] = d5;
 HEAPF32[i7 >> 2] = d6;
 HEAP32[i9 >> 2] = i3;
 HEAP32[i2 >> 2] = i1;
 i2 = i11 + 1 | 0;
 d5 = +HEAPF32[i10 >> 2];
 d6 = +HEAPF32[i13 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i13 = i2;
   return i13 | 0;
  }
  i4 = HEAP32[i4 >> 2] | 0;
  i3 = i13 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if (i4 >>> 0 < i1 >>> 0) {
   i7 = i3;
   i8 = i3;
   i2 = i4;
   break;
  } else {
   i13 = i2;
   return i13 | 0;
  }
 } else {
  i1 = i13 + 4 | 0;
  i7 = i1;
  i8 = i1;
  i2 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i13 >> 2] = d5;
 HEAPF32[i10 >> 2] = d6;
 HEAP32[i8 >> 2] = i2;
 HEAP32[i9 >> 2] = i1;
 i4 = i11 + 2 | 0;
 d5 = +HEAPF32[i13 >> 2];
 d6 = +HEAPF32[i12 >> 2];
 do if (!(d5 < d6)) {
  if (d6 < d5) {
   i13 = i4;
   return i13 | 0;
  }
  i3 = HEAP32[i7 >> 2] | 0;
  i2 = i12 + 4 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < i1 >>> 0) break; else {
   i13 = i4;
   return i13 | 0;
  }
 } else {
  i1 = i12 + 4 | 0;
  i2 = i1;
  i3 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 HEAPF32[i12 >> 2] = d5;
 HEAPF32[i13 >> 2] = d6;
 HEAP32[i2 >> 2] = i3;
 HEAP32[i8 >> 2] = i1;
 i13 = i11 + 3 | 0;
 return i13 | 0;
}

function __ZNSt3__13mapINS_4pairIP6VertexS3_EEP8HalfEdgeNS_4lessIS4_EENS_9allocatorINS1_IKS4_S6_EEEEEixERSA_(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i10;
 i4 = i9 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i1) {
  i4 = HEAP32[i8 >> 2] | 0;
  i5 = HEAP32[i8 + 4 >> 2] | 0;
  L4 : while (1) {
   i2 = HEAP32[i1 + 16 >> 2] | 0;
   do if (i4 >>> 0 >= i2 >>> 0) {
    if (i2 >>> 0 >= i4 >>> 0) {
     i2 = HEAP32[i1 + 20 >> 2] | 0;
     if (i5 >>> 0 < i2 >>> 0) {
      i7 = 6;
      break;
     }
     if (i2 >>> 0 >= i5 >>> 0) {
      i7 = 12;
      break L4;
     }
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i7 = 11;
     break L4;
    } else i1 = i3;
   } else i7 = 6; while (0);
   if ((i7 | 0) == 6) {
    i7 = 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = i1;
     i7 = 7;
     break;
    } else i1 = i2;
   }
  }
  if ((i7 | 0) == 7) {
   HEAP32[i6 >> 2] = i1;
   break;
  } else if ((i7 | 0) == 11) {
   HEAP32[i6 >> 2] = i1;
   break;
  } else if ((i7 | 0) == 12) {
   HEAP32[i6 >> 2] = i1;
   i2 = i6;
   i3 = i1;
   i7 = 14;
   break;
  }
 } else {
  HEAP32[i6 >> 2] = i4;
  i2 = i4;
  i3 = i1;
  i1 = i4;
  i7 = 14;
 } while (0);
 if ((i7 | 0) == 14) if (i3) {
  i9 = i3;
  i9 = i9 + 24 | 0;
  STACKTOP = i10;
  return i9 | 0;
 }
 i3 = __Znwj(28) | 0;
 i6 = i8;
 i7 = HEAP32[i6 + 4 >> 2] | 0;
 i8 = i3 + 16 | 0;
 HEAP32[i8 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i8 + 4 >> 2] = i7;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i1;
 HEAP32[i2 >> 2] = i3;
 i1 = HEAP32[HEAP32[i9 >> 2] >> 2] | 0;
 if (!i1) i1 = i3; else {
  HEAP32[i9 >> 2] = i1;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i9 + 4 >> 2] | 0, i1);
 i9 = i9 + 8 | 0;
 HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
 i9 = i3;
 i9 = i9 + 24 | 0;
 STACKTOP = i10;
 return i9 | 0;
}

function __ZN13MultiSegMaker10addSegmentERK4Vec2S2_S2_S2_i(i5, i1, i2, i3, i4, i11) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i11 = i11 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0, d17 = 0.0, d18 = 0.0, d19 = 0.0, d20 = 0.0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i12;
 i7 = __Znwj(64) | 0;
 i8 = i5 + 4 | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 i10 = i9 + 76 | 0;
 i14 = (HEAP32[i10 >> 2] | 0) - (HEAP32[i9 + 72 >> 2] | 0) >> 2;
 i5 = HEAP32[i5 + 8 >> 2] | 0;
 d20 = +HEAPF32[i1 >> 2];
 d19 = +HEAPF32[i2 >> 2];
 d18 = +HEAPF32[i1 + 4 >> 2];
 d17 = +HEAPF32[i2 + 4 >> 2];
 d16 = d20 - d19;
 d15 = d18 - d17;
 HEAP32[i7 + 4 >> 2] = 3;
 HEAP32[i7 + 8 >> 2] = i14;
 HEAPF32[i7 + 12 >> 2] = (d20 + d19) * .5;
 HEAPF32[i7 + 16 >> 2] = (d18 + d17) * .5;
 HEAPF32[i7 + 20 >> 2] = d16 > 0.0 ? d16 : -d16;
 HEAPF32[i7 + 24 >> 2] = d15 > 0.0 ? d15 : -d15;
 HEAP32[i7 >> 2] = 5732;
 i14 = i1;
 i1 = HEAP32[i14 + 4 >> 2] | 0;
 i13 = i7 + 28 | 0;
 HEAP32[i13 >> 2] = HEAP32[i14 >> 2];
 HEAP32[i13 + 4 >> 2] = i1;
 i13 = i2;
 i1 = HEAP32[i13 + 4 >> 2] | 0;
 i2 = i7 + 36 | 0;
 HEAP32[i2 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i2 + 4 >> 2] = i1;
 i2 = i3;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i3 = i7 + 44 | 0;
 HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i3 + 4 >> 2] = i1;
 i3 = i4;
 i4 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = i7 + 52 | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 HEAP32[i7 + 60 >> 2] = i5;
 HEAP32[i6 >> 2] = i7;
 i1 = HEAP32[i10 >> 2] | 0;
 if (i1 >>> 0 < (HEAP32[i9 + 80 >> 2] | 0) >>> 0) {
  HEAP32[i1 >> 2] = i7;
  HEAP32[i10 >> 2] = (HEAP32[i10 >> 2] | 0) + 4;
 } else __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i9 + 72 | 0, i6);
 if ((i11 | 0) <= -1) {
  STACKTOP = i12;
  return i7 | 0;
 }
 i14 = __Znwj(8) | 0;
 HEAP32[i14 >> 2] = 5820;
 HEAP32[i14 + 4 >> 2] = i7;
 HEAP32[(HEAP32[(HEAP32[i8 >> 2] | 0) + 120 >> 2] | 0) + (i11 << 2) >> 2] = i14;
 STACKTOP = i12;
 return i7 | 0;
}

function ___stdio_write(i14, i2, i1) {
 i14 = i14 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0;
 i15 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i11 = i15 + 16 | 0;
 i10 = i15;
 i3 = i15 + 32 | 0;
 i12 = i14 + 28 | 0;
 i4 = HEAP32[i12 >> 2] | 0;
 HEAP32[i3 >> 2] = i4;
 i13 = i14 + 20 | 0;
 i4 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = i2;
 HEAP32[i3 + 12 >> 2] = i1;
 i8 = i14 + 60 | 0;
 i9 = i14 + 44 | 0;
 i2 = 2;
 i4 = i4 + i1 | 0;
 while (1) {
  if (!(HEAP32[1581] | 0)) {
   HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i11 + 4 >> 2] = i3;
   HEAP32[i11 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i11 | 0) | 0) | 0;
  } else {
   _pthread_cleanup_push(182, i14 | 0);
   HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
   HEAP32[i10 + 4 >> 2] = i3;
   HEAP32[i10 + 8 >> 2] = i2;
   i6 = ___syscall_ret(___syscall146(146, i10 | 0) | 0) | 0;
   _pthread_cleanup_pop(0);
  }
  if ((i4 | 0) == (i6 | 0)) {
   i4 = 6;
   break;
  }
  if ((i6 | 0) < 0) {
   i4 = 8;
   break;
  }
  i4 = i4 - i6 | 0;
  i5 = HEAP32[i3 + 4 >> 2] | 0;
  if (i6 >>> 0 <= i5 >>> 0) if ((i2 | 0) == 2) {
   HEAP32[i12 >> 2] = (HEAP32[i12 >> 2] | 0) + i6;
   i7 = i5;
   i2 = 2;
  } else i7 = i5; else {
   i7 = HEAP32[i9 >> 2] | 0;
   HEAP32[i12 >> 2] = i7;
   HEAP32[i13 >> 2] = i7;
   i7 = HEAP32[i3 + 12 >> 2] | 0;
   i6 = i6 - i5 | 0;
   i3 = i3 + 8 | 0;
   i2 = i2 + -1 | 0;
  }
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + i6;
  HEAP32[i3 + 4 >> 2] = i7 - i6;
 }
 if ((i4 | 0) == 6) {
  i11 = HEAP32[i9 >> 2] | 0;
  HEAP32[i14 + 16 >> 2] = i11 + (HEAP32[i14 + 48 >> 2] | 0);
  i14 = i11;
  HEAP32[i12 >> 2] = i14;
  HEAP32[i13 >> 2] = i14;
 } else if ((i4 | 0) == 8) {
  HEAP32[i14 + 16 >> 2] = 0;
  HEAP32[i12 >> 2] = 0;
  HEAP32[i13 >> 2] = 0;
  HEAP32[i14 >> 2] = HEAP32[i14 >> 2] | 32;
  if ((i2 | 0) == 2) i1 = 0; else i1 = i1 - (HEAP32[i3 + 4 >> 2] | 0) | 0;
 }
 STACKTOP = i15;
 return i1 | 0;
}

function __ZNSt3__13mapINS_4pairIffEEP6VertexNS_4lessIS2_EENS_9allocatorINS1_IKS2_S4_EEEEEixERS8_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, i9 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i4 = i11 + 4 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 do if (i1) {
  d6 = +HEAPF32[i10 >> 2];
  d7 = +HEAPF32[i10 + 4 >> 2];
  L4 : while (1) {
   d5 = +HEAPF32[i1 + 16 >> 2];
   do if (!(d6 < d5)) {
    if (!(d5 < d6)) {
     d5 = +HEAPF32[i1 + 20 >> 2];
     if (d7 < d5) {
      i9 = 6;
      break;
     }
     if (!(d5 < d7)) {
      i9 = 12;
      break L4;
     }
    }
    i2 = i1 + 4 | 0;
    i3 = HEAP32[i2 >> 2] | 0;
    if (!i3) {
     i9 = 11;
     break L4;
    } else i1 = i3;
   } else i9 = 6; while (0);
   if ((i9 | 0) == 6) {
    i9 = 0;
    i2 = HEAP32[i1 >> 2] | 0;
    if (!i2) {
     i2 = i1;
     i9 = 7;
     break;
    } else i1 = i2;
   }
  }
  if ((i9 | 0) == 7) {
   HEAP32[i8 >> 2] = i1;
   break;
  } else if ((i9 | 0) == 11) {
   HEAP32[i8 >> 2] = i1;
   break;
  } else if ((i9 | 0) == 12) {
   HEAP32[i8 >> 2] = i1;
   i2 = i8;
   i3 = i1;
   i9 = 14;
   break;
  }
 } else {
  HEAP32[i8 >> 2] = i4;
  i2 = i4;
  i3 = i1;
  i1 = i4;
  i9 = 14;
 } while (0);
 if ((i9 | 0) == 14) if (i3) {
  i11 = i3;
  i11 = i11 + 24 | 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i3 = __Znwj(28) | 0;
 i8 = i10;
 i9 = HEAP32[i8 + 4 >> 2] | 0;
 i10 = i3 + 16 | 0;
 HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i10 + 4 >> 2] = i9;
 HEAP32[i3 + 24 >> 2] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = i1;
 HEAP32[i2 >> 2] = i3;
 i1 = HEAP32[HEAP32[i11 >> 2] >> 2] | 0;
 if (!i1) i1 = i3; else {
  HEAP32[i11 >> 2] = i1;
  i1 = HEAP32[i2 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i11 + 4 >> 2] | 0, i1);
 i11 = i11 + 8 | 0;
 HEAP32[i11 >> 2] = (HEAP32[i11 >> 2] | 0) + 1;
 i11 = i3;
 i11 = i11 + 24 | 0;
 STACKTOP = i12;
 return i11 | 0;
}

function __ZN3p2t5Sweep22FillLeftBelowEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i11, i10, i8, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var d1 = 0.0, i2 = 0, i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i12 = 0, d13 = 0.0, i14 = 0, d15 = 0.0;
 i2 = HEAP32[i9 >> 2] | 0;
 d1 = +HEAPF64[i2 + 8 >> 3];
 if (!(d1 > +HEAPF64[(HEAP32[i8 >> 2] | 0) + 8 >> 3])) return;
 i7 = i9 + 12 | 0;
 while (1) {
  i3 = HEAP32[i7 >> 2] | 0;
  i12 = HEAP32[i3 >> 2] | 0;
  i14 = HEAP32[HEAP32[i3 + 12 >> 2] >> 2] | 0;
  d5 = +HEAPF64[i14 + 8 >> 3];
  d13 = +HEAPF64[i14 + 16 >> 3];
  d5 = (d1 - d5) * (+HEAPF64[i12 + 16 >> 3] - d13) - (+HEAPF64[i2 + 16 >> 3] - d13) * (+HEAPF64[i12 + 8 >> 3] - d5);
  if (!(d5 > 0.0) & (!(d5 < 1.0e-012) | !(d5 > -1.0e-012))) {
   i4 = i3;
   break;
  }
  __ZN3p2t5Sweep23FillLeftConvexEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i11, i10, i8, i9);
  i2 = HEAP32[i9 >> 2] | 0;
  d1 = +HEAPF64[i2 + 8 >> 3];
  if (!(d1 > +HEAPF64[(HEAP32[i8 >> 2] | 0) + 8 >> 3])) {
   i6 = 9;
   break;
  }
 }
 if ((i6 | 0) == 9) return;
 i6 = i8 + 4 | 0;
 while (1) {
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i11, i10, i4);
  i4 = HEAP32[i7 >> 2] | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if ((i2 | 0) == (i3 | 0)) {
   i6 = 9;
   break;
  }
  i14 = HEAP32[i6 >> 2] | 0;
  d13 = +HEAPF64[i3 + 8 >> 3];
  d5 = +HEAPF64[i2 + 16 >> 3];
  d15 = +HEAPF64[i3 + 16 >> 3];
  d1 = +HEAPF64[i2 + 8 >> 3];
  d13 = (+HEAPF64[i14 + 8 >> 3] - d13) * (d5 - d15) - (+HEAPF64[i14 + 16 >> 3] - d15) * (d1 - d13);
  if (!(!(d13 > 0.0) & (!(d13 < 1.0e-012) | !(d13 > -1.0e-012)))) {
   i6 = 9;
   break;
  }
  i14 = HEAP32[i9 >> 2] | 0;
  i12 = HEAP32[HEAP32[i4 + 12 >> 2] >> 2] | 0;
  d13 = +HEAPF64[i12 + 8 >> 3];
  d15 = +HEAPF64[i12 + 16 >> 3];
  d15 = (+HEAPF64[i14 + 8 >> 3] - d13) * (d5 - d15) - (d1 - d13) * (+HEAPF64[i14 + 16 >> 3] - d15);
  if (!(!(d15 > 0.0) & (!(d15 < 1.0e-012) | !(d15 > -1.0e-012)))) {
   i6 = 9;
   break;
  }
 }
 if ((i6 | 0) == 9) return;
}

function __ZN11MyPrioQueueINSt3__14pairIfP6ObjectEEE4qpopEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i11 = i16 + 24 | 0;
 i10 = i16 + 20 | 0;
 i9 = i16 + 16 | 0;
 i12 = i16 + 12 | 0;
 i13 = i16 + 8 | 0;
 i14 = i16 + 4 | 0;
 i15 = i16;
 i8 = i7 + 4 | 0;
 if (!(HEAP8[i7 >> 0] | 0)) {
  i4 = HEAP32[i8 >> 2] | 0;
  i5 = i7 + 8 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
  i2 = i4;
  i6 = i1 - i2 | 0;
  i3 = i6 >> 3;
  if ((i6 | 0) > 8) {
   i6 = (i3 + -2 | 0) / 2 | 0;
   while (1) {
    HEAP32[i12 >> 2] = i2;
    HEAP32[i13 >> 2] = i1;
    HEAP32[i14 >> 2] = i4 + (i6 << 3);
    HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
    HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
    HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
    __ZNSt3__111__sift_downIRNS_6__lessINS_4pairIfP6ObjectEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeESB_(i9, i10, i15, i3, i11);
    if ((i6 | 0) > 0) i6 = i6 + -1 | 0; else break;
   }
  }
  HEAP8[i7 >> 0] = 1;
 } else i5 = i7 + 8 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i3 = i1;
 i4 = i2 - i3 | 0;
 if ((i4 | 0) <= 8) {
  i15 = i2;
  i15 = i15 + -8 | 0;
  HEAP32[i5 >> 2] = i15;
  STACKTOP = i16;
  return;
 }
 i8 = i2 + -8 | 0;
 i7 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i8 >> 2] = i7;
 i1 = i1 + 4 | 0;
 i7 = i2 + -4 | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = i6;
 HEAP32[i12 >> 2] = i3;
 HEAP32[i13 >> 2] = i8;
 HEAP32[i14 >> 2] = i3;
 HEAP32[i9 >> 2] = HEAP32[i12 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i13 >> 2];
 HEAP32[i11 >> 2] = HEAP32[i14 >> 2];
 __ZNSt3__111__sift_downIRNS_6__lessINS_4pairIfP6ObjectEES5_EENS_11__wrap_iterIPS5_EEEEvT0_SB_T_NS_15iterator_traitsISB_E15difference_typeESB_(i9, i10, i15, (i4 >> 3) + -1 | 0, i11);
 i15 = HEAP32[i5 >> 2] | 0;
 i15 = i15 + -8 | 0;
 HEAP32[i5 >> 2] = i15;
 STACKTOP = i16;
 return;
}

function __ZN3p2t5Sweep17FlipScanEdgeEventERNS_12SweepContextERNS_5PointES4_RNS_8TriangleES6_S4_(i14, i13, i10, i12, i11, i4, i2) {
 i14 = i14 | 0;
 i13 = i13 | 0;
 i10 = i10 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, i9 = 0, d15 = 0.0, d16 = 0.0, i17 = 0;
 i1 = __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i4, i2) | 0;
 i3 = __ZN3p2t8Triangle13OppositePointERS0_RNS_5PointE(i1, i4, i2) | 0;
 if (!(__ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i4, i2) | 0)) {
  i14 = ___cxa_allocate_exception(4) | 0;
  i13 = __Znwj(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i13, 20300);
  HEAP32[i14 >> 2] = i13;
  ___cxa_throw(i14 | 0, 336, 0);
 }
 i4 = i12 + 8 | 0;
 i9 = i12 + 16 | 0;
 while (1) {
  i17 = __ZN3p2t8Triangle8PointCCWERNS_5PointE(i11, i12) | 0;
  i2 = __ZN3p2t8Triangle7PointCWERNS_5PointE(i11, i12) | 0;
  d5 = +HEAPF64[i4 >> 3];
  d16 = +HEAPF64[i17 + 8 >> 3];
  d6 = +HEAPF64[i3 + 16 >> 3];
  d15 = +HEAPF64[i17 + 16 >> 3];
  d7 = +HEAPF64[i3 + 8 >> 3];
  d8 = +HEAPF64[i9 >> 3];
  if (!((d5 - d16) * (d6 - d15) - (d7 - d16) * (d8 - d15) >= -1.0e-012) ? (d15 = +HEAPF64[i2 + 8 >> 3], d16 = +HEAPF64[i2 + 16 >> 3], !((d5 - d15) * (d6 - d16) - (d7 - d15) * (d8 - d16) <= 1.0e-012)) : 0) {
   i2 = 6;
   break;
  }
  i17 = __ZN3p2t5Sweep13NextFlipPointERNS_5PointES2_RNS_8TriangleES2_(0, i10, i12, i1, i3) | 0;
  i2 = i1;
  i1 = __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i1, i17) | 0;
  i3 = __ZN3p2t8Triangle13OppositePointERS0_RNS_5PointE(i1, i2, i17) | 0;
  if (!(__ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i2, i17) | 0)) {
   i2 = 3;
   break;
  }
 }
 if ((i2 | 0) == 3) {
  i17 = ___cxa_allocate_exception(4) | 0;
  i14 = __Znwj(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i14, 20300);
  HEAP32[i17 >> 2] = i14;
  ___cxa_throw(i17 | 0, 336, 0);
 } else if ((i2 | 0) == 6) {
  __ZN3p2t5Sweep13FlipEdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i14, i13, i12, i3, i1, i3);
  return;
 }
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb(i6, i10, i5, i4, i7) {
 i6 = i6 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i11 + 20 | 0;
 i2 = i11 + 16 | 0;
 i3 = i11 + 12 | 0;
 i9 = i11;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i9 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i9 & 31](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 13572) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i9, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i9, i1);
  i5 = HEAP8[i9 >> 0] | 0;
  i8 = (i5 & 1) == 0;
  i1 = i9 + 1 | 0;
  i7 = i9 + 8 | 0;
  i6 = i8 ? i1 : i9 + 1 | 0;
  i1 = i8 ? i1 : HEAP32[i9 + 8 >> 2] | 0;
  i8 = i9 + 4 | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0)) do {
   i2 = HEAP8[i1 >> 0] | 0;
   i3 = HEAP32[i10 >> 2] | 0;
   do if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) != (HEAP32[i3 + 28 >> 2] | 0)) {
     HEAP32[i4 >> 2] = i5 + 1;
     HEAP8[i5 >> 0] = i2;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 31](i3, i2 & 255) | 0) == -1) HEAP32[i10 >> 2] = 0;
   } while (0);
   i1 = i1 + 1 | 0;
   i5 = HEAP8[i9 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + (i4 ? (i5 & 255) >>> 1 : HEAP32[i8 >> 2] | 0) | 0));
  i1 = HEAP32[i10 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i9);
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNSt3__16vectorINS_10unique_ptrI4GoalNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = i8 + 4 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = HEAP32[i8 >> 2] | 0;
 }
 i11 = i8 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 2 >>> 0 < 536870911) {
  i2 = i2 >> 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 1073741823;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 << 2) | 0;
 }
 i3 = i5 + (i1 << 2) | 0;
 i2 = i3;
 i9 = i5 + (i4 << 2) | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i3 >> 2] = i6;
 i6 = i5 + (i1 + 1 << 2) | 0;
 i5 = HEAP32[i8 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i8;
  i4 = i10;
  i8 = i5;
 } else {
  do {
   i1 = i1 + -4 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = i7;
   i3 = i2 + -4 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i8;
  i4 = i10;
  i2 = i1;
  i8 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i9;
 i7 = i8;
 if ((i1 | 0) != (i7 | 0)) do {
  i1 = i1 + -4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  if (i2) {
   i3 = HEAP32[i2 + 16 >> 2] | 0;
   i4 = i3;
   if (i3) {
    i5 = i2 + 20 | 0;
    i6 = HEAP32[i5 >> 2] | 0;
    if ((i6 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i6 + (~((i6 + -4 - i4 | 0) >>> 2) << 2);
    __ZdlPv(i3);
   }
   __ZdlPv(i2);
  }
 } while ((i1 | 0) != (i7 | 0));
 if (!i8) return;
 __ZdlPv(i8);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb(i6, i9, i5, i4, i7) {
 i6 = i6 | 0;
 i9 = i9 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i1 = i10 + 20 | 0;
 i2 = i10 + 16 | 0;
 i3 = i10 + 12 | 0;
 i8 = i10;
 if (!(HEAP32[i5 + 4 >> 2] & 1)) {
  i8 = HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i2 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = FUNCTION_TABLE_iiiiii[i8 & 31](i6, i1, i5, i4, i7 & 1) | 0;
 } else {
  i2 = __ZNKSt3__18ios_base6getlocEv(i5) | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i3, 13580) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i7) FUNCTION_TABLE_vii[HEAP32[i2 + 24 >> 2] & 63](i8, i1); else FUNCTION_TABLE_vii[HEAP32[i2 + 28 >> 2] & 63](i8, i1);
  i5 = HEAP8[i8 >> 0] | 0;
  i4 = (i5 & 1) == 0;
  i1 = i8 + 4 | 0;
  i7 = i8 + 8 | 0;
  i6 = i4 ? i1 : i8 + 4 | 0;
  i1 = i4 ? i1 : HEAP32[i8 + 8 >> 2] | 0;
  i4 = (i5 & 1) == 0;
  if ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0)) do {
   i2 = HEAP32[i1 >> 2] | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if (i3) {
    i4 = i3 + 24 | 0;
    i5 = HEAP32[i4 >> 2] | 0;
    if ((i5 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i3 >> 2] | 0) + 52 >> 2] & 31](i3, i2) | 0; else {
     HEAP32[i4 >> 2] = i5 + 4;
     HEAP32[i5 >> 2] = i2;
    }
    if ((i2 | 0) == -1) HEAP32[i9 >> 2] = 0;
   }
   i1 = i1 + 4 | 0;
   i5 = HEAP8[i8 >> 0] | 0;
   i4 = (i5 & 1) == 0;
  } while ((i1 | 0) != ((i4 ? i6 : HEAP32[i7 >> 2] | 0) + ((i4 ? (i5 & 255) >>> 1 : HEAP32[i6 >> 2] | 0) << 2) | 0));
  i1 = HEAP32[i9 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i8);
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__16vectorIN3p2t5PointENS_9allocatorIS2_EEE7reserveEj(i8, i5) {
 i8 = i8 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = i8 + 8 | 0;
 i7 = HEAP32[i8 >> 2] | 0;
 i6 = i7;
 if ((((HEAP32[i10 >> 2] | 0) - i6 | 0) / 40 | 0) >>> 0 >= i5 >>> 0) return;
 i9 = i8 + 4 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i1 = i3;
 if (!i5) i4 = 0; else i4 = __Znwj(i5 * 40 | 0) | 0;
 i2 = i4 + (((i1 - i6 | 0) / 40 | 0) * 40 | 0) | 0;
 i11 = i2;
 i5 = i4 + (i5 * 40 | 0) | 0;
 if ((i3 | 0) == (i7 | 0)) {
  i3 = i8;
  i4 = i9;
  i2 = i11;
  i7 = i6;
 } else {
  i1 = i11;
  do {
   i4 = i2 + -40 | 0;
   i12 = i3;
   i3 = i3 + -40 | 0;
   HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
   HEAP32[i4 + 4 >> 2] = HEAP32[i3 + 4 >> 2];
   HEAP32[i4 + 8 >> 2] = HEAP32[i3 + 8 >> 2];
   HEAP32[i4 + 12 >> 2] = HEAP32[i3 + 12 >> 2];
   HEAP32[i4 + 16 >> 2] = HEAP32[i3 + 16 >> 2];
   HEAP32[i4 + 20 >> 2] = HEAP32[i3 + 20 >> 2];
   i4 = i2 + -16 | 0;
   i6 = i12 + -16 | 0;
   HEAP32[i4 >> 2] = 0;
   i13 = i2 + -12 | 0;
   HEAP32[i13 >> 2] = 0;
   HEAP32[i2 + -8 >> 2] = 0;
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   i4 = i12 + -12 | 0;
   HEAP32[i13 >> 2] = HEAP32[i4 >> 2];
   i12 = i12 + -8 | 0;
   HEAP32[i2 + -8 >> 2] = HEAP32[i12 >> 2];
   HEAP32[i12 >> 2] = 0;
   HEAP32[i4 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   i2 = i1 + -40 | 0;
   i1 = i2;
  } while ((i3 | 0) != (i7 | 0));
  i3 = i8;
  i4 = i9;
  i2 = i1;
  i7 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i11;
 HEAP32[i10 >> 2] = i5;
 i6 = i7;
 if ((i1 | 0) != (i6 | 0)) do {
  i2 = HEAP32[i1 + -16 >> 2] | 0;
  i3 = i2;
  if (i2) {
   i4 = i1 + -12 | 0;
   i5 = HEAP32[i4 >> 2] | 0;
   if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
   __ZdlPv(i2);
  }
  i1 = i1 + -40 | 0;
 } while ((i1 | 0) != (i6 | 0));
 if (!i7) return;
 __ZdlPv(i7);
 return;
}

function ___cxx_global_array_dtor112(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16608);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16596);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16584);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16572);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16560);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16548);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16536);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16524);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16512);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16500);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16488);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16476);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16464);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16452);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16440);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16428);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16416);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16404);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16392);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16380);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16368);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16356);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16344);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(16332);
 return;
}

function ___cxx_global_array_dtor109(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16316);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16304);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16292);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16280);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16268);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16256);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16244);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16232);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16220);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16208);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16196);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16184);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16172);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16160);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16148);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16136);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16124);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16112);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16100);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16088);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16076);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16064);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16052);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(16040);
 return;
}

function ___cxx_global_array_dtor85(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15504);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15492);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15480);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15468);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15456);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15444);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15432);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15420);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15408);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15396);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15384);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15372);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15360);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15348);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15336);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15324);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15312);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15300);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15288);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15276);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15264);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15252);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15240);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(15228);
 return;
}

function ___cxx_global_array_dtor61(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15212);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15200);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15188);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15176);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15164);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15152);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15140);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15128);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15116);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15104);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15092);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15080);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15068);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15056);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15044);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15032);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15020);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(15008);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14996);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14984);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14972);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14960);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14948);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14936);
 return;
}

function __ZNSt3__16vectorINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i5) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i13;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 2 >>> 0 < 536870911) {
  i4 = i2 >> 1;
  i4 = i4 >>> 0 < i3 >>> 0 ? i3 : i4;
 } else i4 = 1073741823;
 i2 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
 HEAP32[i12 + 12 >> 2] = 0;
 HEAP32[i12 + 16 >> 2] = i9 + 8;
 if (!i4) i3 = 0; else i3 = __Znwj(i4 << 2) | 0;
 HEAP32[i12 >> 2] = i3;
 i1 = i3 + (i2 << 2) | 0;
 i6 = i12 + 8 | 0;
 i7 = i12 + 4 | 0;
 HEAP32[i7 >> 2] = i1;
 i8 = i12 + 12 | 0;
 HEAP32[i8 >> 2] = i3 + (i4 << 2);
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i1 >> 2] = i4;
 HEAP32[i6 >> 2] = i3 + (i2 + 1 << 2);
 i3 = HEAP32[i9 >> 2] | 0;
 i2 = HEAP32[i10 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i9;
  i5 = i10;
 } else {
  do {
   i2 = i2 + -4 | 0;
   i5 = HEAP32[i2 >> 2] | 0;
   HEAP32[i2 >> 2] = 0;
   HEAP32[i1 + -4 >> 2] = i5;
   i1 = (HEAP32[i7 >> 2] | 0) + -4 | 0;
   HEAP32[i7 >> 2] = i1;
  } while ((i2 | 0) != (i3 | 0));
  i4 = i9;
  i5 = i10;
  i3 = HEAP32[i9 >> 2] | 0;
  i2 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i4 >> 2] = i1;
 HEAP32[i7 >> 2] = i3;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i6 >> 2] = i2;
 i10 = HEAP32[i11 >> 2] | 0;
 HEAP32[i11 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i8 >> 2] = i10;
 HEAP32[i12 >> 2] = HEAP32[i7 >> 2];
 __ZNSt3__114__split_bufferINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev(i12);
 STACKTOP = i13;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2480] | 0) == 0 ? (___cxa_guard_acquire(2480) | 0) != 0 : 0) {
  if ((HEAP8[2488] | 0) == 0 ? (___cxa_guard_acquire(2488) | 0) != 0 : 0) {
   i1 = 14424;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 14592);
   ___cxa_atexit(188, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2488);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14424, 14592) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14436, 14620) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14448, 14648) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14460, 14680) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14472, 14720) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14484, 14756) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14496, 14784) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14508, 14820) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14520, 14836) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14532, 14852) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14544, 14868) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14556, 14884) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14568, 14900) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(14580, 14916) | 0;
  HEAP32[3733] = 14424;
  ___cxa_guard_release(2480);
 }
 return HEAP32[3733] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2464] | 0) == 0 ? (___cxa_guard_acquire(2464) | 0) != 0 : 0) {
  if ((HEAP8[2472] | 0) == 0 ? (___cxa_guard_acquire(2472) | 0) != 0 : 0) {
   i1 = 14252;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 14420);
   ___cxa_atexit(187, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2472);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14252, 29145) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14264, 29152) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14276, 29159) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14288, 29167) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14300, 29177) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14312, 29186) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14324, 29193) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14336, 29202) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14348, 29206) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14360, 29210) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14372, 29214) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14384, 29218) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14396, 29222) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(14408, 29226) | 0;
  HEAP32[3605] = 14252;
  ___cxa_guard_release(2464);
 }
 return HEAP32[3605] | 0;
}

function __ZN8Document10removeGoalEP4Goal(i1, i15) {
 i1 = i1 | 0;
 i15 = i15 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i14 = i1 + 192 | 0;
 i3 = HEAP32[i14 >> 2] | 0;
 i13 = i1 + 196 | 0;
 i2 = HEAP32[i13 >> 2] | 0;
 if ((i3 | 0) == (i2 | 0)) return; else i1 = i3;
 L3 : while (1) {
  i12 = i1;
  while (1) {
   if ((HEAP32[i1 >> 2] | 0) != (i15 | 0)) break;
   i5 = HEAP32[i14 >> 2] | 0;
   i5 = i5 + ((i12 - i5 >> 2) + 1 << 2) | 0;
   if ((i5 | 0) == (i2 | 0)) i7 = i1; else {
    i6 = i2 + -4 | 0;
    i3 = i5;
    i4 = i1;
    while (1) {
     i11 = HEAP32[i3 >> 2] | 0;
     HEAP32[i3 >> 2] = 0;
     i7 = HEAP32[i4 >> 2] | 0;
     HEAP32[i4 >> 2] = i11;
     if (i7) {
      i8 = HEAP32[i7 + 16 >> 2] | 0;
      i9 = i8;
      if (i8) {
       i10 = i7 + 20 | 0;
       i11 = HEAP32[i10 >> 2] | 0;
       if ((i11 | 0) != (i8 | 0)) HEAP32[i10 >> 2] = i11 + (~((i11 + -4 - i9 | 0) >>> 2) << 2);
       __ZdlPv(i8);
      }
      __ZdlPv(i7);
     }
     i3 = i3 + 4 | 0;
     if ((i3 | 0) == (i2 | 0)) break; else i4 = i4 + 4 | 0;
    }
    i7 = i1 + (((i6 - i5 | 0) >>> 2) + 1 << 2) | 0;
    i2 = HEAP32[i13 >> 2] | 0;
   }
   if ((i2 | 0) != (i7 | 0)) {
    do {
     i11 = i2 + -4 | 0;
     HEAP32[i13 >> 2] = i11;
     i2 = HEAP32[i11 >> 2] | 0;
     HEAP32[i11 >> 2] = 0;
     if (i2) {
      i3 = HEAP32[i2 + 16 >> 2] | 0;
      i4 = i3;
      if (i3) {
       i5 = i2 + 20 | 0;
       i6 = HEAP32[i5 >> 2] | 0;
       if ((i6 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i6 + (~((i6 + -4 - i4 | 0) >>> 2) << 2);
       __ZdlPv(i3);
      }
      __ZdlPv(i2);
     }
     i2 = HEAP32[i13 >> 2] | 0;
    } while ((i2 | 0) != (i7 | 0));
    i2 = i7;
   }
   if ((i1 | 0) == (i2 | 0)) {
    i1 = 24;
    break L3;
   }
  }
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i2 | 0)) {
   i1 = 24;
   break;
  }
 }
 if ((i1 | 0) == 24) return;
}

function __ZNSt3__16vectorIN7BihTree4NodeENS_9allocatorIS2_EEE8__appendEj(i9, i2) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i8 = i9 + 8 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i3 = i1;
 if (((i4 - i3 | 0) / 28 | 0) >>> 0 >= i2 >>> 0) {
  do {
   HEAP32[i1 >> 2] = 0;
   HEAP32[i1 + 4 >> 2] = 0;
   HEAP32[i1 + 8 >> 2] = 0;
   HEAP32[i1 + 12 >> 2] = 0;
   HEAP32[i1 + 16 >> 2] = 0;
   HEAP32[i1 + 20 >> 2] = 0;
   HEAP32[i1 + 24 >> 2] = 0;
   i1 = (HEAP32[i10 >> 2] | 0) + 28 | 0;
   HEAP32[i10 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 i5 = ((i3 - i1 | 0) / 28 | 0) + i2 | 0;
 if (i5 >>> 0 > 153391689) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i4 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i3 = (i4 - i1 | 0) / 28 | 0;
 if (i3 >>> 0 < 76695844) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0;
  if (!i3) {
   i4 = 0;
   i6 = 0;
   i5 = i1;
  } else i7 = 8;
 } else {
  i3 = 153391689;
  i1 = ((HEAP32[i10 >> 2] | 0) - i1 | 0) / 28 | 0;
  i7 = 8;
 }
 if ((i7 | 0) == 8) {
  i4 = i3;
  i6 = __Znwj(i3 * 28 | 0) | 0;
  i5 = i1;
 }
 i1 = i6 + (i5 * 28 | 0) | 0;
 i4 = i6 + (i4 * 28 | 0) | 0;
 i3 = i1;
 do {
  HEAP32[i3 >> 2] = 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 + 12 >> 2] = 0;
  HEAP32[i3 + 16 >> 2] = 0;
  HEAP32[i3 + 20 >> 2] = 0;
  HEAP32[i3 + 24 >> 2] = 0;
  i3 = i1 + 28 | 0;
  i1 = i3;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i2 = HEAP32[i9 >> 2] | 0;
 i3 = (HEAP32[i10 >> 2] | 0) - i2 | 0;
 i7 = i6 + ((((i3 | 0) / -28 | 0) + i5 | 0) * 28 | 0) | 0;
 _memcpy(i7 | 0, i2 | 0, i3 | 0) | 0;
 HEAP32[i9 >> 2] = i7;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i8 >> 2] = i4;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI17BuildingPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI16BuildingMoveItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZN3p2t12SweepContext7AddHoleENSt3__16vectorIPNS_5PointENS1_9allocatorIS4_EEEE(i11, i12) {
 i11 = i11 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i13 + 12 | 0;
 i5 = i13;
 __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEEC2ERKS6_(i5, i12);
 i10 = i5 + 4 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 i8 = (HEAP32[i10 >> 2] | 0) - i1 | 0;
 i9 = i8 >> 2;
 if ((i8 | 0) > 0) {
  i6 = i9 + -1 | 0;
  i7 = i11 + 4 | 0;
  i8 = i11 + 8 | 0;
  i3 = 0;
  do {
   i14 = i3;
   i3 = i3 + 1 | 0;
   i2 = __Znwj(8) | 0;
   __ZN3p2t4EdgeC2EPNS_5PointES2_(i2, HEAP32[i1 + (i14 << 2) >> 2] | 0, HEAP32[i1 + (((i14 | 0) < (i6 | 0) ? i3 : 0) << 2) >> 2] | 0);
   HEAP32[i4 >> 2] = i2;
   i1 = HEAP32[i7 >> 2] | 0;
   if (i1 >>> 0 < (HEAP32[i8 >> 2] | 0) >>> 0) {
    HEAP32[i1 >> 2] = i2;
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 4;
   } else __ZNSt3__16vectorIPN3p2t4EdgeENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i4);
   i1 = HEAP32[i5 >> 2] | 0;
  } while ((i3 | 0) < (i9 | 0));
 }
 i2 = i1;
 if (i1) {
  i3 = HEAP32[i10 >> 2] | 0;
  if ((i3 | 0) != (i1 | 0)) HEAP32[i10 >> 2] = i3 + (~((i3 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i5 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 if ((HEAP32[i5 >> 2] | 0) == (i1 | 0)) {
  STACKTOP = i13;
  return;
 }
 i6 = i11 + 60 | 0;
 i7 = i11 + 64 | 0;
 i4 = i11 + 56 | 0;
 i3 = 0;
 do {
  i1 = i1 + (i3 << 2) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  if ((i2 | 0) == (HEAP32[i7 >> 2] | 0)) __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i4, i1); else {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
  }
  i3 = i3 + 1 | 0;
  i1 = HEAP32[i12 >> 2] | 0;
 } while (i3 >>> 0 < (HEAP32[i5 >> 2] | 0) - i1 >> 2 >>> 0);
 STACKTOP = i13;
 return;
}

function __ZN16BuildingMoveItem6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d7 = 0.0, i8 = 0;
 i5 = i2 + 16 | 0;
 d4 = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 20 >> 2];
 d7 = +_emscripten_asm_const_1(2, +(+HEAPF32[i1 >> 2] - +HEAPF32[i5 >> 2]));
 d4 = +_emscripten_asm_const_1(2, +d4);
 i3 = HEAP32[i2 + 12 >> 2] | 0;
 i6 = HEAP32[i3 >> 2] | 0;
 i8 = i6 + 4 | 0;
 HEAPF32[i8 >> 2] = d7 + +HEAPF32[i8 >> 2];
 i6 = i6 + 8 | 0;
 HEAPF32[i6 >> 2] = d4 + +HEAPF32[i6 >> 2];
 i6 = HEAP32[i3 + 4 >> 2] | 0;
 i8 = i6 + 4 | 0;
 HEAPF32[i8 >> 2] = d7 + +HEAPF32[i8 >> 2];
 i6 = i6 + 8 | 0;
 HEAPF32[i6 >> 2] = d4 + +HEAPF32[i6 >> 2];
 i6 = HEAP32[i3 + 8 >> 2] | 0;
 i8 = i6 + 4 | 0;
 HEAPF32[i8 >> 2] = d7 + +HEAPF32[i8 >> 2];
 i6 = i6 + 8 | 0;
 HEAPF32[i6 >> 2] = d4 + +HEAPF32[i6 >> 2];
 i3 = HEAP32[i3 + 12 >> 2] | 0;
 i6 = i3 + 4 | 0;
 HEAPF32[i6 >> 2] = d7 + +HEAPF32[i6 >> 2];
 i3 = i3 + 8 | 0;
 HEAPF32[i3 >> 2] = d4 + +HEAPF32[i3 >> 2];
 i3 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 HEAP32[i5 >> 2] = i3;
 HEAP32[i5 + 4 >> 2] = i1;
 d4 = (HEAP32[tempDoublePtr >> 2] = i3, +HEAPF32[tempDoublePtr >> 2]);
 _emscripten_asm_const_3(1, i2 | 0, +d4, +(HEAP32[tempDoublePtr >> 2] = i1, +HEAPF32[tempDoublePtr >> 2])) | 0;
 i1 = HEAP32[i2 + 24 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 _emscripten_asm_const_3(1, i1 | 0, +(+HEAPF32[i3 + 4 >> 2]), +(+HEAPF32[i3 + 8 >> 2])) | 0;
 i3 = HEAP32[i2 + 28 >> 2] | 0;
 i1 = HEAP32[i3 + 12 >> 2] | 0;
 _emscripten_asm_const_3(1, i3 | 0, +(+HEAPF32[i1 + 4 >> 2]), +(+HEAPF32[i1 + 8 >> 2])) | 0;
 i1 = HEAP32[i2 + 32 >> 2] | 0;
 if (!i1) {
  i8 = i2 + 4 | 0;
  i8 = HEAP32[i8 >> 2] | 0;
  __ZN7NavCtrl18updateBoxesAndMeshEv(i8);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 255](i1);
 i8 = i2 + 4 | 0;
 i8 = HEAP32[i8 >> 2] | 0;
 __ZN7NavCtrl18updateBoxesAndMeshEv(i8);
 return;
}

function __ZN17BuildingPointItem6setPosERK4Vec2(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i2 = i3 + 12 | 0;
 i8 = i1;
 i6 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = (HEAP32[i2 >> 2] | 0) + 4 | 0;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = i6;
 HEAP32[(HEAP32[i3 + 16 >> 2] | 0) + 4 >> 2] = HEAP32[i1 >> 2];
 HEAP32[(HEAP32[i3 + 20 >> 2] | 0) + 8 >> 2] = HEAP32[i1 + 4 >> 2];
 i1 = HEAP32[i3 + 24 >> 2] | 0;
 i7 = i1 + 16 | 0;
 HEAP32[i7 >> 2] = 0;
 i6 = i1 + 20 | 0;
 HEAP32[i6 >> 2] = 0;
 i8 = HEAP32[i1 + 12 >> 2] | 0;
 i9 = HEAP32[i8 >> 2] | 0;
 d5 = +HEAPF32[i9 + 4 >> 2] + 0.0;
 HEAPF32[i7 >> 2] = d5;
 d4 = +HEAPF32[i9 + 8 >> 2] + 0.0;
 HEAPF32[i6 >> 2] = d4;
 i9 = HEAP32[i8 + 4 >> 2] | 0;
 d5 = d5 + +HEAPF32[i9 + 4 >> 2];
 HEAPF32[i7 >> 2] = d5;
 d4 = d4 + +HEAPF32[i9 + 8 >> 2];
 HEAPF32[i6 >> 2] = d4;
 i9 = HEAP32[i8 + 8 >> 2] | 0;
 d5 = d5 + +HEAPF32[i9 + 4 >> 2];
 HEAPF32[i7 >> 2] = d5;
 d4 = d4 + +HEAPF32[i9 + 8 >> 2];
 HEAPF32[i6 >> 2] = d4;
 i8 = HEAP32[i8 + 12 >> 2] | 0;
 d4 = d4 + +HEAPF32[i8 + 8 >> 2];
 d5 = (d5 + +HEAPF32[i8 + 4 >> 2]) * .25;
 HEAPF32[i7 >> 2] = d5;
 d4 = d4 * .25;
 HEAPF32[i6 >> 2] = d4;
 _emscripten_asm_const_3(1, i1 | 0, +d5, +d4) | 0;
 i1 = HEAP32[i1 + 32 >> 2] | 0;
 if (!i1) {
  i9 = HEAP32[i2 >> 2] | 0;
  i8 = i9 + 4 | 0;
  d4 = +HEAPF32[i8 >> 2];
  i9 = i9 + 8 | 0;
  d5 = +HEAPF32[i9 >> 2];
  _emscripten_asm_const_3(1, i3 | 0, +d4, +d5) | 0;
  i9 = i3 + 4 | 0;
  i9 = HEAP32[i9 >> 2] | 0;
  __ZN7NavCtrl18updateBoxesAndMeshEv(i9);
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 255](i1);
 i9 = HEAP32[i2 >> 2] | 0;
 i8 = i9 + 4 | 0;
 d4 = +HEAPF32[i8 >> 2];
 i9 = i9 + 8 | 0;
 d5 = +HEAPF32[i9 >> 2];
 _emscripten_asm_const_3(1, i3 | 0, +d4, +d5) | 0;
 i9 = i3 + 4 | 0;
 i9 = HEAP32[i9 >> 2] | 0;
 __ZN7NavCtrl18updateBoxesAndMeshEv(i9);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI13PolyPointItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI9AgentItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI8GoalItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNSt3__16vectorINS_10shared_ptrI7TriItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i12, i10) {
 i12 = i12 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i11 = 0, i13 = 0;
 i13 = i12 + 4 | 0;
 i1 = HEAP32[i12 >> 2] | 0;
 i3 = ((HEAP32[i13 >> 2] | 0) - i1 >> 3) + 1 | 0;
 if (i3 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i1 = HEAP32[i12 >> 2] | 0;
 }
 i11 = i12 + 8 | 0;
 i4 = i1;
 i2 = (HEAP32[i11 >> 2] | 0) - i4 | 0;
 if (i2 >> 3 >>> 0 < 268435455) {
  i2 = i2 >> 2;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i5 = HEAP32[i13 >> 2] | 0;
  i3 = i5 - i4 >> 3;
  if (!i2) {
   i7 = 0;
   i8 = 0;
   i6 = i3;
  } else i9 = 6;
 } else {
  i5 = HEAP32[i13 >> 2] | 0;
  i2 = 536870911;
  i3 = i5 - i4 >> 3;
  i9 = 6;
 }
 if ((i9 | 0) == 6) {
  i7 = i2;
  i8 = __Znwj(i2 << 3) | 0;
  i6 = i3;
 }
 i3 = i8 + (i6 << 3) | 0;
 i2 = i3;
 i7 = i8 + (i7 << 3) | 0;
 HEAP32[i3 >> 2] = HEAP32[i10 >> 2];
 i9 = i10 + 4 | 0;
 HEAP32[i8 + (i6 << 3) + 4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i10 >> 2] = 0;
 HEAP32[i9 >> 2] = 0;
 i6 = i8 + (i6 + 1 << 3) | 0;
 if ((i5 | 0) == (i1 | 0)) {
  i3 = i12;
  i1 = i2;
 } else {
  i4 = i5;
  do {
   i10 = i4;
   i4 = i4 + -8 | 0;
   HEAP32[i3 + -8 >> 2] = HEAP32[i4 >> 2];
   i10 = i10 + -4 | 0;
   HEAP32[i3 + -4 >> 2] = HEAP32[i10 >> 2];
   HEAP32[i4 >> 2] = 0;
   HEAP32[i10 >> 2] = 0;
   i3 = i2 + -8 | 0;
   i2 = i3;
  } while ((i4 | 0) != (i1 | 0));
  i1 = i2;
  i3 = i12;
  i4 = HEAP32[i12 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i1;
 i1 = HEAP32[i13 >> 2] | 0;
 HEAP32[i13 >> 2] = i6;
 HEAP32[i11 >> 2] = i7;
 i3 = i4;
 if ((i1 | 0) != (i3 | 0)) do {
  i2 = HEAP32[i1 + -4 >> 2] | 0;
  i1 = i1 + -8 | 0;
  if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZN3p2t5Sweep9FillBasinERNS_12SweepContextERNS_4NodeE(i8, i7, i1) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, d4 = 0.0, i5 = 0, i6 = 0, d9 = 0.0, i10 = 0;
 i6 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i1 + 8 >> 2] | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = HEAP32[i1 >> 2] | 0;
 d4 = +HEAPF64[i5 + 8 >> 3];
 d9 = +HEAPF64[i5 + 16 >> 3];
 d4 = (+HEAPF64[i6 + 8 >> 3] - d4) * (+HEAPF64[i2 + 16 >> 3] - d9) - (+HEAPF64[i6 + 16 >> 3] - d9) * (+HEAPF64[i2 + 8 >> 3] - d4);
 i2 = i1;
 if (d4 > 0.0 & (!(d4 < 1.0e-012) | !(d4 > -1.0e-012))) HEAP32[i7 + 16 >> 2] = i2; else {
  HEAP32[i7 + 16 >> 2] = i3;
  i1 = i3;
  i2 = i3;
 }
 i5 = i7 + 20 | 0;
 HEAP32[i5 >> 2] = i2;
 i3 = HEAP32[i2 + 8 >> 2] | 0;
 L5 : do if (!i3) i6 = i2; else while (1) {
  if (!(+HEAPF64[(HEAP32[i2 >> 2] | 0) + 16 >> 3] >= +HEAPF64[(HEAP32[i3 >> 2] | 0) + 16 >> 3])) {
   i6 = i2;
   break L5;
  }
  i2 = HEAP32[i2 + 8 >> 2] | 0;
  HEAP32[i5 >> 2] = i2;
  i3 = HEAP32[i2 + 8 >> 2] | 0;
  if (!i3) {
   i6 = i2;
   break;
  }
 } while (0);
 if ((i6 | 0) == (i1 | 0)) return;
 i5 = i7 + 24 | 0;
 HEAP32[i5 >> 2] = i6;
 i2 = HEAP32[i6 + 8 >> 2] | 0;
 L13 : do if (!i2) i2 = i6; else {
  d4 = +HEAPF64[(HEAP32[i6 >> 2] | 0) + 16 >> 3];
  i3 = i6;
  while (1) {
   d9 = d4;
   d4 = +HEAPF64[(HEAP32[i2 >> 2] | 0) + 16 >> 3];
   if (!(d9 < d4)) {
    i2 = i3;
    break L13;
   }
   HEAP32[i5 >> 2] = i2;
   i3 = HEAP32[i2 + 8 >> 2] | 0;
   if (!i3) break; else {
    i10 = i2;
    i2 = i3;
    i3 = i10;
   }
  }
 } while (0);
 if ((i2 | 0) == (i6 | 0)) return;
 i10 = HEAP32[i2 >> 2] | 0;
 HEAPF64[i7 + 32 >> 3] = +HEAPF64[i10 + 8 >> 3] - +HEAPF64[(HEAP32[i1 >> 2] | 0) + 8 >> 3];
 HEAP8[i7 + 40 >> 0] = +HEAPF64[(HEAP32[i1 >> 2] | 0) + 16 >> 3] > +HEAPF64[i10 + 16 >> 3] & 1;
 __ZN3p2t5Sweep12FillBasinReqERNS_12SweepContextEPNS_4NodeE(i8, i7, i6);
 return;
}

function __ZN11MyPrioQueueINSt3__14pairIfP6ObjectEEE5qpushERKS4_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, d6 = 0.0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, d11 = 0.0;
 i1 = i4 + 4 | 0;
 i5 = i4 + 8 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i4 + 12 >> 2] | 0)) __ZNSt3__16vectorINS_4pairIfP6ObjectEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i1, i3); else {
  i8 = i3;
  i9 = HEAP32[i8 + 4 >> 2] | 0;
  i10 = i2;
  HEAP32[i10 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i10 + 4 >> 2] = i9;
  HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 8;
 }
 if (!(HEAP8[i4 >> 0] | 0)) return;
 i10 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i9 = i2 - i10 | 0;
 i7 = i9 >> 3;
 if ((i9 | 0) <= 8) return;
 i5 = (i7 + -2 | 0) / 2 | 0;
 i1 = i10 + (i5 << 3) | 0;
 d6 = +HEAPF32[i1 >> 2];
 i8 = i2 + -8 | 0;
 d11 = +HEAPF32[i8 >> 2];
 do if (!(d6 < d11)) {
  if (d11 < d6) return;
  i3 = HEAP32[i10 + (i5 << 3) + 4 >> 2] | 0;
  i2 = i2 + -4 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if (i3 >>> 0 < i4 >>> 0) {
   i9 = i4;
   break;
  } else return;
 } else {
  i9 = i2 + -4 | 0;
  i2 = i9;
  i3 = HEAP32[i10 + (i5 << 3) + 4 >> 2] | 0;
  i9 = HEAP32[i9 >> 2] | 0;
 } while (0);
 HEAPF32[i8 >> 2] = d6;
 HEAP32[i2 >> 2] = i3;
 L21 : do if ((i7 + -1 | 0) >>> 0 >= 3) {
  i7 = i9;
  while (1) {
   i3 = i5;
   i5 = (i5 + -1 | 0) / 2 | 0;
   i4 = i10 + (i5 << 3) | 0;
   d6 = +HEAPF32[i4 >> 2];
   if (d6 < d11) i1 = HEAP32[i10 + (i5 << 3) + 4 >> 2] | 0; else {
    if (d11 < d6) break L21;
    i2 = HEAP32[i10 + (i5 << 3) + 4 >> 2] | 0;
    if (i2 >>> 0 >= i7 >>> 0) break L21;
    i1 = i2;
   }
   HEAPF32[i10 + (i3 << 3) >> 2] = d6;
   HEAP32[i10 + (i3 << 3) + 4 >> 2] = i1;
   if (i3 >>> 0 < 3) {
    i1 = i4;
    break;
   } else i1 = i4;
  }
 } while (0);
 HEAPF32[i1 >> 2] = d11;
 HEAP32[i1 + 4 >> 2] = i9;
 return;
}

function _mbsnrtowcs(i2, i12, i3, i1, i9) {
 i2 = i2 | 0;
 i12 = i12 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i9 = i9 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i13 = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 i8 = i13 + 8 | 0;
 i11 = i13;
 i7 = HEAP32[i12 >> 2] | 0;
 HEAP32[i11 >> 2] = i7;
 i10 = (i2 | 0) != 0;
 i1 = i10 ? i1 : 256;
 i2 = i10 ? i2 : i8;
 i4 = i7;
 L1 : do if ((i1 | 0) != 0 & (i7 | 0) != 0) {
  i6 = i1;
  i7 = i4;
  i1 = 0;
  while (1) {
   i4 = i3 >>> 2;
   i5 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 >>> 0 > 131 | i5)) {
    i4 = i7;
    break L1;
   }
   i4 = i5 ? i6 : i4;
   i3 = i3 - i4 | 0;
   i4 = _mbsrtowcs(i2, i11, i4, i9) | 0;
   if ((i4 | 0) == -1) {
    i1 = i3;
    break;
   }
   i14 = (i2 | 0) == (i8 | 0);
   i7 = i14 ? 0 : i4;
   i5 = i6 - i7 | 0;
   i2 = i14 ? i2 : i2 + (i4 << 2) | 0;
   i1 = i4 + i1 | 0;
   i4 = HEAP32[i11 >> 2] | 0;
   if ((i6 | 0) != (i7 | 0) & (i4 | 0) != 0) {
    i6 = i5;
    i7 = i4;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i3 = i1;
  i6 = 0;
  i4 = HEAP32[i11 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i4 | 0) != 0 ? (i6 | 0) != 0 & (i3 | 0) != 0 : 0) {
  i5 = i4;
  i4 = i2;
  while (1) {
   i2 = _mbrtowc(i4, i5, i3, i9) | 0;
   if ((i2 + 2 | 0) >>> 0 < 3) break;
   i5 = (HEAP32[i11 >> 2] | 0) + i2 | 0;
   HEAP32[i11 >> 2] = i5;
   i6 = i6 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != 0 & (i3 | 0) != (i2 | 0))) break L8; else {
    i3 = i3 - i2 | 0;
    i4 = i4 + 4 | 0;
   }
  }
  switch (i2 | 0) {
  case -1:
   {
    i1 = -1;
    break L8;
   }
  case 0:
   {
    HEAP32[i11 >> 2] = 0;
    break L8;
   }
  default:
   {
    HEAP32[i9 >> 2] = 0;
    break L8;
   }
  }
 } while (0);
 if (i10) HEAP32[i12 >> 2] = HEAP32[i11 >> 2];
 STACKTOP = i13;
 return i1 | 0;
}

function __ZNSt3__17__sort4IRPFbPKN3p2t5PointES4_EPPS2_EEjT0_SA_SA_SA_T_(i4, i5, i6, i7, i3) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0;
 i2 = FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
 do if (i1) {
  i1 = HEAP32[i4 >> 2] | 0;
  if (i2) {
   HEAP32[i4 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = i1;
   i1 = 1;
   break;
  }
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  HEAP32[i5 >> 2] = i1;
  if (FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i6 >> 2] | 0, i1) | 0) {
   i1 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
   HEAP32[i6 >> 2] = i1;
   i1 = 2;
  } else i1 = 1;
 } else if (i2) {
  i2 = HEAP32[i5 >> 2] | 0;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  HEAP32[i6 >> 2] = i2;
  if (FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0) {
   i1 = HEAP32[i4 >> 2] | 0;
   HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
   HEAP32[i5 >> 2] = i1;
   i1 = 2;
  } else i1 = 1;
 } else i1 = 0; while (0);
 if (!(FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i7 >> 2] | 0, HEAP32[i6 >> 2] | 0) | 0)) {
  i7 = i1;
  return i7 | 0;
 }
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i7 >> 2];
 HEAP32[i7 >> 2] = i2;
 if (!(FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i6 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0)) {
  i7 = i1 + 1 | 0;
  return i7 | 0;
 }
 i7 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 HEAP32[i6 >> 2] = i7;
 if (!(FUNCTION_TABLE_iii[HEAP32[i3 >> 2] & 31](HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0) | 0)) {
  i7 = i1 + 2 | 0;
  return i7 | 0;
 }
 i7 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i7;
 i7 = i1 + 3 | 0;
 return i7 | 0;
}

function __ZN4MeshD2Ev(i10) {
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 __ZN4Mesh5clearEv(i10);
 __ZNSt3__16__treeINS_12__value_typeIfNS_6vectorI4Vec2NS_9allocatorIS3_EEEEEENS_19__map_value_compareIfS7_NS_4lessIfEELb1EEENS4_IS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(i10 + 48 | 0, HEAP32[i10 + 52 >> 2] | 0);
 i1 = HEAP32[i10 + 36 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i10 + 40 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -52 - i2 | 0) >>> 0) / 52 | 0) * 52 | 0);
  __ZdlPv(i1);
 }
 i8 = i10 + 24 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (i1) {
  i9 = i10 + 28 | 0;
  i2 = HEAP32[i9 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i3 = i2 + -28 | 0;
    HEAP32[i9 >> 2] = i3;
    i4 = HEAP32[i2 + -16 >> 2] | 0;
    i5 = i4;
    if (i4) {
     i6 = i2 + -12 | 0;
     i7 = HEAP32[i6 >> 2] | 0;
     if ((i7 | 0) != (i4 | 0)) HEAP32[i6 >> 2] = i7 + (~((i7 + -4 - i5 | 0) >>> 2) << 2);
     __ZdlPv(i4);
    }
    i4 = HEAP32[i3 >> 2] | 0;
    i5 = i4;
    if (i4) {
     i2 = i2 + -24 | 0;
     i3 = HEAP32[i2 >> 2] | 0;
     if ((i3 | 0) != (i4 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -4 - i5 | 0) >>> 2) << 2);
     __ZdlPv(i4);
    }
    i2 = HEAP32[i9 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i8 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i10 + 12 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i10 + 16 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~(((i4 + -36 - i2 | 0) >>> 0) / 36 | 0) * 36 | 0);
  __ZdlPv(i1);
 }
 i3 = HEAP32[i10 >> 2] | 0;
 if (!i3) return;
 i1 = i10 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -12 - i3 | 0) >>> 0) / 12 | 0) * 12 | 0);
 __ZdlPv(i3);
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(i7, i1, i8) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i4 = i1;
 i5 = i8 - i4 >> 2;
 i2 = i7 + 8 | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 i3 = i6;
 L1 : do if (i5 >>> 0 > (HEAP32[i2 >> 2] | 0) - i3 >> 2 >>> 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv(i7);
  if (i5 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i7);
  i2 = (HEAP32[i2 >> 2] | 0) - (HEAP32[i7 >> 2] | 0) | 0;
  if (i2 >> 2 >>> 0 < 536870911) {
   i2 = i2 >> 1;
   i2 = i2 >>> 0 < i5 >>> 0 ? i5 : i2;
  } else i2 = 1073741823;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i7, i2);
  i2 = i7 + 4 | 0;
  if ((i1 | 0) != (i8 | 0)) do {
   HEAP32[HEAP32[i2 >> 2] >> 2] = HEAP32[i1 >> 2];
   HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 4;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i8 | 0));
 } else {
  i7 = i7 + 4 | 0;
  i2 = (HEAP32[i7 >> 2] | 0) - i3 >> 2;
  i5 = i5 >>> 0 > i2 >>> 0;
  i2 = i5 ? i1 + (i2 << 2) | 0 : i8;
  i3 = i2 - i4 | 0;
  _memmove(i6 | 0, i1 | 0, i3 | 0) | 0;
  i3 = i6 + (i3 >> 2 << 2) | 0;
  if (i5) {
   if ((i2 | 0) == (i8 | 0)) break; else i1 = i2;
   while (1) {
    HEAP32[HEAP32[i7 >> 2] >> 2] = HEAP32[i1 >> 2];
    HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 4;
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i8 | 0)) break L1;
   }
  }
  i1 = HEAP32[i7 >> 2] | 0;
  if ((i1 | 0) != (i3 | 0)) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i3 | 0));
   HEAP32[i7 >> 2] = i1;
  }
 } while (0);
 return;
}

function __ZN7NavCtrl10updateMeshEv(i11) {
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 __ZN8Document14runTriangulateEv(i11 + 72 | 0);
 __ZN7NavCtrl15sendPerminitersEv(i11);
 i9 = i11 + 12 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i10 = i11 + 16 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  while (1) {
   i1 = i2 + -8 | 0;
   HEAP32[i10 >> 2] = i1;
   i2 = HEAP32[i2 + -4 >> 2] | 0;
   if (i2) {
    __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
    i1 = HEAP32[i10 >> 2] | 0;
   }
   if ((i1 | 0) == (i3 | 0)) break; else i2 = i1;
  }
 }
 i1 = HEAP32[i11 + 216 >> 2] | 0;
 i5 = HEAP32[i11 + 220 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i11 = i11 + 312 | 0;
  HEAP32[i11 >> 2] = 0;
  STACKTOP = i12;
  return;
 }
 i6 = i8 + 4 | 0;
 i7 = i11 + 20 | 0;
 do {
  i2 = __Znwj(16) | 0;
  __ZN7TriItemC2EP7NavCtrlP8Triangle(i2, i11, i1);
  HEAP32[i8 >> 2] = i2;
  i3 = __Znwj(16) | 0;
  HEAP32[i3 + 4 >> 2] = 0;
  HEAP32[i3 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 3408;
  HEAP32[i3 + 12 >> 2] = i2;
  HEAP32[i6 >> 2] = i3;
  i4 = HEAP32[i10 >> 2] | 0;
  if (i4 >>> 0 >= (HEAP32[i7 >> 2] | 0) >>> 0) {
   __ZNSt3__16vectorINS_10shared_ptrI7TriItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9, i8);
   i2 = HEAP32[i6 >> 2] | 0;
   if (i2) __ZNSt3__119__shared_weak_count16__release_sharedEv(i2);
  } else {
   HEAP32[i4 >> 2] = i2;
   HEAP32[i4 + 4 >> 2] = i3;
   HEAP32[i8 >> 2] = 0;
   HEAP32[i6 >> 2] = 0;
   HEAP32[i10 >> 2] = i4 + 8;
  }
  i1 = i1 + 36 | 0;
 } while ((i1 | 0) != (i5 | 0));
 i11 = i11 + 312 | 0;
 HEAP32[i11 >> 2] = 0;
 STACKTOP = i12;
 return;
}

function __ZN7NavCtrl10removeGoalEP8GoalItem(i1, i13) {
 i1 = i1 | 0;
 i13 = i13 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i14 = 0, i15 = 0;
 i11 = i1 + 36 | 0;
 i3 = HEAP32[i11 >> 2] | 0;
 i12 = i1 + 40 | 0;
 i2 = HEAP32[i12 >> 2] | 0;
 if ((i3 | 0) == (i2 | 0)) return;
 i9 = i1 + 72 | 0;
 i10 = i13 + 12 | 0;
 i1 = i2;
 i2 = i3;
 L4 : while (1) {
  i8 = i2;
  while (1) {
   if ((HEAP32[i2 >> 2] | 0) != (i13 | 0)) break;
   __ZN8Document10removeGoalEP4Goal(i9, HEAP32[i10 >> 2] | 0);
   i3 = HEAP32[i11 >> 2] | 0;
   i3 = i3 + ((i8 - i3 >> 3) + 1 << 3) | 0;
   i5 = HEAP32[i12 >> 2] | 0;
   if ((i3 | 0) == (i5 | 0)) i1 = i2; else {
    i6 = i5 + -8 | 0;
    i1 = i3;
    i4 = i2;
    while (1) {
     i14 = HEAP32[i1 >> 2] | 0;
     i7 = i1 + 4 | 0;
     i15 = HEAP32[i7 >> 2] | 0;
     HEAP32[i1 >> 2] = 0;
     HEAP32[i7 >> 2] = 0;
     HEAP32[i4 >> 2] = i14;
     i14 = i4 + 4 | 0;
     i7 = HEAP32[i14 >> 2] | 0;
     HEAP32[i14 >> 2] = i15;
     if (i7) __ZNSt3__119__shared_weak_count16__release_sharedEv(i7);
     i1 = i1 + 8 | 0;
     if ((i1 | 0) == (i5 | 0)) break; else i4 = i4 + 8 | 0;
    }
    i1 = i2 + (((i6 - i3 | 0) >>> 3) + 1 << 3) | 0;
    i3 = HEAP32[i12 >> 2] | 0;
   }
   if ((i3 | 0) == (i1 | 0)) i1 = i3; else do {
    i4 = i3 + -8 | 0;
    HEAP32[i12 >> 2] = i4;
    i3 = HEAP32[i3 + -4 >> 2] | 0;
    if (!i3) i3 = i4; else {
     __ZNSt3__119__shared_weak_count16__release_sharedEv(i3);
     i3 = HEAP32[i12 >> 2] | 0;
    }
   } while ((i3 | 0) != (i1 | 0));
   if ((i2 | 0) == (i1 | 0)) {
    i1 = 17;
    break L4;
   }
  }
  i2 = i2 + 8 | 0;
  if ((i2 | 0) == (i1 | 0)) {
   i1 = 17;
   break;
  }
 }
 if ((i1 | 0) == 17) return;
}

function __ZN19SubGoalFromPointSeg11makeSubGoalEfRK4Vec2R4Plan(i1, d2, i12, i11) {
 i1 = i1 | 0;
 d2 = +d2;
 i12 = i12 | 0;
 i11 = i11 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0, i14 = 0, d15 = 0.0, d16 = 0.0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i13 = i14 + 32 | 0;
 i7 = i14 + 24 | 0;
 i8 = i14 + 16 | 0;
 i9 = i14 + 8 | 0;
 i10 = i14;
 i1 = i1 + 4 | 0;
 i6 = HEAP32[i1 >> 2] | 0;
 d16 = +HEAPF32[i6 + 28 >> 2];
 d3 = +HEAPF32[i6 + 36 >> 2] * d2 + d16;
 d15 = +HEAPF32[i6 + 32 >> 2];
 d4 = +HEAPF32[i6 + 40 >> 2] * d2 + d15;
 d5 = d16 + +HEAPF32[i6 + 44 >> 2] * d2;
 d2 = d15 + +HEAPF32[i6 + 48 >> 2] * d2;
 if (((d3 + d5) * .5 - d16) * (+HEAPF32[i12 + 4 >> 2] - d15) - (+HEAPF32[i12 >> 2] - d16) * ((d4 + d2) * .5 - d15) < 0.0) {
  HEAPF32[i7 >> 2] = d3;
  HEAPF32[i7 + 4 >> 2] = d4;
  HEAP32[i13 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i7 + 4 >> 2];
  __ZN4Plan6addSegE4Vec2RKS0_b(i11, i13, i6 + 36 | 0, 0);
  HEAPF32[i8 >> 2] = d5;
  HEAPF32[i8 + 4 >> 2] = d2;
  i12 = (HEAP32[i1 >> 2] | 0) + 44 | 0;
  HEAP32[i13 >> 2] = HEAP32[i8 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
  __ZN4Plan6addSegE4Vec2RKS0_b(i11, i13, i12, 0);
  STACKTOP = i14;
  return;
 } else {
  HEAPF32[i9 >> 2] = d5;
  HEAPF32[i9 + 4 >> 2] = d2;
  HEAP32[i13 >> 2] = HEAP32[i9 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i9 + 4 >> 2];
  __ZN4Plan6addSegE4Vec2RKS0_b(i11, i13, i6 + 44 | 0, 1);
  HEAPF32[i10 >> 2] = d3;
  HEAPF32[i10 + 4 >> 2] = d4;
  i12 = (HEAP32[i1 >> 2] | 0) + 36 | 0;
  HEAP32[i13 >> 2] = HEAP32[i10 >> 2];
  HEAP32[i13 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
  __ZN4Plan6addSegE4Vec2RKS0_b(i11, i13, i12, 1);
  STACKTOP = i14;
  return;
 }
}

function __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 2 >>> 0 < 536870911) {
  i2 = i2 >> 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 1073741823;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 << 2) | 0;
 }
 i3 = i5 + (i1 << 2) | 0;
 i2 = i3;
 i8 = i5 + (i4 << 2) | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i3 >> 2] = i6;
 i6 = i5 + (i1 + 1 << 2) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
 } else {
  do {
   i1 = i1 + -4 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = i7;
   i3 = i2 + -4 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i5 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i3 = i5;
 if ((i1 | 0) != (i3 | 0)) do {
  i1 = i1 + -4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  if (i2) __ZdlPv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function __ZNSt3__16vectorINS_10unique_ptrI5AABoxNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i3 = ((HEAP32[i10 >> 2] | 0) - i1 >> 2) + 1 | 0;
 if (i3 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i11 = i9 + 8 | 0;
 i2 = (HEAP32[i11 >> 2] | 0) - i1 | 0;
 if (i2 >> 2 >>> 0 < 536870911) {
  i2 = i2 >> 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  if (!i2) {
   i4 = 0;
   i5 = 0;
  } else i6 = 6;
 } else {
  i2 = 1073741823;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  i6 = 6;
 }
 if ((i6 | 0) == 6) {
  i4 = i2;
  i5 = __Znwj(i2 << 2) | 0;
 }
 i3 = i5 + (i1 << 2) | 0;
 i2 = i3;
 i8 = i5 + (i4 << 2) | 0;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i3 >> 2] = i6;
 i6 = i5 + (i1 + 1 << 2) | 0;
 i5 = HEAP32[i9 >> 2] | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 if ((i1 | 0) == (i5 | 0)) {
  i3 = i9;
  i4 = i10;
 } else {
  do {
   i1 = i1 + -4 | 0;
   i7 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = 0;
   HEAP32[i3 + -4 >> 2] = i7;
   i3 = i2 + -4 | 0;
   i2 = i3;
  } while ((i1 | 0) != (i5 | 0));
  i1 = i2;
  i3 = i9;
  i4 = i10;
  i2 = i1;
  i5 = HEAP32[i9 >> 2] | 0;
  i1 = HEAP32[i10 >> 2] | 0;
 }
 HEAP32[i3 >> 2] = i2;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i11 >> 2] = i8;
 i3 = i5;
 if ((i1 | 0) != (i3 | 0)) do {
  i1 = i1 + -4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  HEAP32[i1 >> 2] = 0;
  if (i2) __ZdlPv(i2);
 } while ((i1 | 0) != (i3 | 0));
 if (!i5) return;
 __ZdlPv(i5);
 return;
}

function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv(i6, i4) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP32[i4 + 48 >> 2] | 0;
 if (i1 & 16) {
  i1 = i4 + 44 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i3 = HEAP32[i4 + 24 >> 2] | 0;
  if (i2 >>> 0 < i3 >>> 0) HEAP32[i1 >> 2] = i3; else i3 = i2;
  i2 = HEAP32[i4 + 20 >> 2] | 0;
  i5 = i3 - i2 | 0;
  if (i5 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i6);
  if (i5 >>> 0 < 11) {
   HEAP8[i6 >> 0] = i5 << 1;
   i1 = i6 + 1 | 0;
  } else {
   i4 = i5 + 16 & -16;
   i1 = __Znwj(i4) | 0;
   HEAP32[i6 + 8 >> 2] = i1;
   HEAP32[i6 >> 2] = i4 | 1;
   HEAP32[i6 + 4 >> 2] = i5;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i1;
   while (1) {
    HEAP8[i4 >> 0] = HEAP8[i2 >> 0] | 0;
    i2 = i2 + 1 | 0;
    if ((i2 | 0) == (i3 | 0)) break; else i4 = i4 + 1 | 0;
   }
   i1 = i1 + i5 | 0;
  }
  HEAP8[i1 >> 0] = 0;
  return;
 }
 if (!(i1 & 8)) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i6 + 4 >> 2] = 0;
  HEAP32[i6 + 8 >> 2] = 0;
  return;
 }
 i2 = HEAP32[i4 + 8 >> 2] | 0;
 i4 = HEAP32[i4 + 16 >> 2] | 0;
 i5 = i4 - i2 | 0;
 if (i5 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i6);
 if (i5 >>> 0 < 11) {
  HEAP8[i6 >> 0] = i5 << 1;
  i1 = i6 + 1 | 0;
 } else {
  i3 = i5 + 16 & -16;
  i1 = __Znwj(i3) | 0;
  HEAP32[i6 + 8 >> 2] = i1;
  HEAP32[i6 >> 2] = i3 | 1;
  HEAP32[i6 + 4 >> 2] = i5;
 }
 if ((i2 | 0) != (i4 | 0)) {
  i3 = i1;
  while (1) {
   HEAP8[i3 >> 0] = HEAP8[i2 >> 0] | 0;
   i2 = i2 + 1 | 0;
   if ((i2 | 0) == (i4 | 0)) break; else i3 = i3 + 1 | 0;
  }
  i1 = i1 + i5 | 0;
 }
 HEAP8[i1 >> 0] = 0;
 return;
}

function __ZNSt3__118__insertion_sort_3IRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i7, i8, i6) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i9 = 0;
 i2 = i7 + 8 | 0;
 i1 = i7 + 4 | 0;
 i5 = FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i7 >> 2] | 0) | 0;
 i4 = FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] | 0) | 0;
 do if (i5) {
  i3 = HEAP32[i7 >> 2] | 0;
  if (i4) {
   HEAP32[i7 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i3;
   break;
  }
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i3;
  if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](HEAP32[i2 >> 2] | 0, i3) | 0) {
   i5 = HEAP32[i1 >> 2] | 0;
   HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i2 >> 2] = i5;
  }
 } else if (i4 ? (i4 = HEAP32[i1 >> 2] | 0, i5 = HEAP32[i2 >> 2] | 0, HEAP32[i1 >> 2] = i5, HEAP32[i2 >> 2] = i4, FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](i5, HEAP32[i7 >> 2] | 0) | 0) : 0) {
  i5 = HEAP32[i7 >> 2] | 0;
  HEAP32[i7 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i1 >> 2] = i5;
 } while (0);
 i1 = i7 + 12 | 0;
 if ((i1 | 0) == (i8 | 0)) return;
 while (1) {
  if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](HEAP32[i1 >> 2] | 0, HEAP32[i2 >> 2] | 0) | 0) {
   i5 = HEAP32[i1 >> 2] | 0;
   i4 = i5;
   i3 = i1;
   while (1) {
    HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
    if ((i2 | 0) == (i7 | 0)) break;
    i3 = i2 + -4 | 0;
    if (FUNCTION_TABLE_iii[HEAP32[i6 >> 2] & 31](i4, HEAP32[i3 >> 2] | 0) | 0) {
     i9 = i2;
     i2 = i3;
     i3 = i9;
    } else break;
   }
   HEAP32[i2 >> 2] = i5;
  }
  i2 = i1 + 4 | 0;
  if ((i2 | 0) == (i8 | 0)) break; else {
   i9 = i1;
   i1 = i2;
   i2 = i9;
  }
 }
 return;
}

function __ZN7BihTree5buildERNSt3__16vectorIP6ObjectNS0_9allocatorIS3_EEEE(i12, i1) {
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 if ((i12 | 0) != (i1 | 0)) __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_(i12, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 i9 = i12 + 12 | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 i11 = i12 + 16 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i10;
 if ((i1 | 0) == (i10 | 0)) i1 = i10; else {
  i1 = i1 + (~(((i1 + -28 - i2 | 0) >>> 0) / 28 | 0) * 28 | 0) | 0;
  HEAP32[i11 >> 2] = i1;
 }
 i4 = i12 + 4 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i6 = HEAP32[i12 >> 2] | 0;
 i7 = i5 - i6 >> 2;
 i8 = i12 + 20 | 0;
 if ((((HEAP32[i8 >> 2] | 0) - i2 | 0) / 28 | 0) >>> 0 >= i7 >>> 0) {
  i10 = i5;
  i11 = i6;
  i11 = i10 - i11 | 0;
  i11 = i11 >> 2;
  __ZN7BihTree8buildRecEiii(i12, 0, i11, 1) | 0;
  return;
 }
 i1 = i1 - i2 | 0;
 i2 = (i1 | 0) / 28 | 0;
 if (!i7) i3 = 0; else i3 = __Znwj(i7 * 28 | 0) | 0;
 i13 = i3 + ((((i1 | 0) / -28 | 0) + i2 | 0) * 28 | 0) | 0;
 _memcpy(i13 | 0, i10 | 0, i1 | 0) | 0;
 HEAP32[i9 >> 2] = i13;
 HEAP32[i11 >> 2] = i3 + (i2 * 28 | 0);
 HEAP32[i8 >> 2] = i3 + (i7 * 28 | 0);
 if (!i10) {
  i11 = i5;
  i13 = i6;
  i13 = i11 - i13 | 0;
  i13 = i13 >> 2;
  __ZN7BihTree8buildRecEiii(i12, 0, i13, 1) | 0;
  return;
 }
 __ZdlPv(i10);
 i11 = HEAP32[i4 >> 2] | 0;
 i13 = HEAP32[i12 >> 2] | 0;
 i13 = i11 - i13 | 0;
 i13 = i13 >> 2;
 __ZN7BihTree8buildRecEiii(i12, 0, i13, 1) | 0;
 return;
}

function _wcsnrtombs(i3, i11, i4, i2, i1) {
 i3 = i3 | 0;
 i11 = i11 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 i7 = i10 + 8 | 0;
 i9 = i10;
 i6 = HEAP32[i11 >> 2] | 0;
 HEAP32[i9 >> 2] = i6;
 i8 = (i3 | 0) != 0;
 i1 = i8 ? i2 : 256;
 i2 = i8 ? i3 : i7;
 i3 = i6;
 L1 : do if ((i1 | 0) != 0 & (i6 | 0) != 0) {
  i6 = i1;
  i5 = i3;
  i1 = 0;
  while (1) {
   i3 = i4 >>> 0 >= i6 >>> 0;
   if (!(i3 | i4 >>> 0 > 32)) {
    i3 = i5;
    break L1;
   }
   i3 = i3 ? i6 : i4;
   i4 = i4 - i3 | 0;
   i3 = _wcsrtombs(i2, i9, i3, 0) | 0;
   if ((i3 | 0) == -1) {
    i1 = i4;
    break;
   }
   i13 = (i2 | 0) == (i7 | 0);
   i12 = i13 ? 0 : i3;
   i5 = i6 - i12 | 0;
   i2 = i13 ? i2 : i2 + i3 | 0;
   i1 = i3 + i1 | 0;
   i3 = HEAP32[i9 >> 2] | 0;
   if ((i6 | 0) != (i12 | 0) & (i3 | 0) != 0) {
    i6 = i5;
    i5 = i3;
   } else {
    i6 = i5;
    break L1;
   }
  }
  i4 = i1;
  i6 = 0;
  i3 = HEAP32[i9 >> 2] | 0;
  i1 = -1;
 } else {
  i6 = i1;
  i1 = 0;
 } while (0);
 L8 : do if ((i3 | 0) != 0 ? (i6 | 0) != 0 & (i4 | 0) != 0 : 0) {
  i5 = i3;
  i3 = i2;
  while (1) {
   i2 = _wcrtomb(i3, HEAP32[i5 >> 2] | 0, 0) | 0;
   if ((i2 + 1 | 0) >>> 0 < 2) break;
   i5 = (HEAP32[i9 >> 2] | 0) + 4 | 0;
   HEAP32[i9 >> 2] = i5;
   i4 = i4 + -1 | 0;
   i1 = i1 + 1 | 0;
   if (!((i6 | 0) != (i2 | 0) & (i4 | 0) != 0)) break L8; else {
    i6 = i6 - i2 | 0;
    i3 = i3 + i2 | 0;
   }
  }
  if (!i2) HEAP32[i9 >> 2] = 0; else i1 = -1;
 } while (0);
 if (i8) HEAP32[i11 >> 2] = HEAP32[i9 >> 2];
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i8, i10, i1) {
 i8 = i8 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i5 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i8);
 if (!(HEAP8[i9 >> 0] | 0)) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i2 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i8 + (i2 + 24) >> 2];
 i7 = i8 + i2 | 0;
 i6 = HEAP32[i8 + (i2 + 4) >> 2] | 0;
 i3 = i10 + i1 | 0;
 i2 = i8 + (i2 + 76) | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) == -1) {
  HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i7) | 0;
  i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 13432) | 0;
  i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 32) | 0;
  __ZNSt3__16localeD2Ev(i4);
  i1 = i1 << 24 >> 24;
  HEAP32[i2 >> 2] = i1;
 }
 HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
 if (__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i4, i10, (i6 & 176 | 0) == 32 ? i3 : i10, i3, i7, i1 & 255) | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
  STACKTOP = i11;
  return i8 | 0;
 }
 i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
 __ZNSt3__18ios_base5clearEj(i8 + i10 | 0, HEAP32[i8 + (i10 + 16) >> 2] | 5);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i8 | 0;
}

function __ZN7BihTree8recQueryEiRNS_10QueryStateE(i9, i6, i8) {
 i9 = i9 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, d4 = 0.0, d5 = 0.0, i7 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i10;
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 i2 = HEAP32[i3 + (i6 * 28 | 0) + 8 >> 2] | 0;
 if (!i2) {
  i2 = HEAP32[i3 + (i6 * 28 | 0) >> 2] | 0;
  i6 = i3 + (i6 * 28 | 0) + 4 | 0;
  if ((i2 | 0) >= (HEAP32[i6 >> 2] | 0)) {
   STACKTOP = i10;
   return;
  }
  i3 = i8 + 32 | 0;
  while (1) {
   HEAP32[i7 >> 2] = HEAP32[(HEAP32[i9 >> 2] | 0) + (i2 << 2) >> 2];
   i1 = HEAP32[i3 >> 2] | 0;
   if (!i1) {
    i1 = 5;
    break;
   }
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 24 >> 2] & 63](i1, i7);
   i2 = i2 + 1 | 0;
   if ((i2 | 0) >= (HEAP32[i6 >> 2] | 0)) {
    i1 = 12;
    break;
   }
  }
  if ((i1 | 0) == 5) {
   i10 = ___cxa_allocate_exception(4) | 0;
   HEAP32[i10 >> 2] = 5528;
   ___cxa_throw(i10 | 0, 352, 51);
  } else if ((i1 | 0) == 12) {
   STACKTOP = i10;
   return;
  }
 }
 d4 = +HEAPF32[i8 + (HEAP32[i3 + (i6 * 28 | 0) + 16 >> 2] << 2) >> 2];
 d5 = +HEAPF32[i8 + 8 >> 2];
 if (d4 + d5 < +HEAPF32[i3 + (i6 * 28 | 0) + 24 >> 2]) {
  __ZN7BihTree8recQueryEiRNS_10QueryStateE(i9, i2, i8);
  STACKTOP = i10;
  return;
 }
 if (d4 - d5 > +HEAPF32[i3 + (i6 * 28 | 0) + 20 >> 2]) {
  __ZN7BihTree8recQueryEiRNS_10QueryStateE(i9, HEAP32[i3 + (i6 * 28 | 0) + 12 >> 2] | 0, i8);
  STACKTOP = i10;
  return;
 } else {
  __ZN7BihTree8recQueryEiRNS_10QueryStateE(i9, i2, i8);
  __ZN7BihTree8recQueryEiRNS_10QueryStateE(i9, HEAP32[i3 + (i6 * 28 | 0) + 12 >> 2] | 0, i8);
  STACKTOP = i10;
  return;
 }
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i3, i7, i6, i2, i4) {
 i3 = i3 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i1 = 0, i5 = 0, i8 = 0, i9 = 0;
 L1 : do if ((i3 | 0) == (HEAP32[i7 + 8 >> 2] | 0)) {
  if ((HEAP32[i7 + 4 >> 2] | 0) == (i6 | 0) ? (i1 = i7 + 28 | 0, (HEAP32[i1 >> 2] | 0) != 1) : 0) HEAP32[i1 >> 2] = i2;
 } else {
  if ((i3 | 0) != (HEAP32[i7 >> 2] | 0)) {
   i8 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 24 >> 2] & 3](i8, i7, i6, i2, i4);
   break;
  }
  if ((HEAP32[i7 + 16 >> 2] | 0) != (i6 | 0) ? (i5 = i7 + 20 | 0, (HEAP32[i5 >> 2] | 0) != (i6 | 0)) : 0) {
   HEAP32[i7 + 32 >> 2] = i2;
   i2 = i7 + 44 | 0;
   if ((HEAP32[i2 >> 2] | 0) == 4) break;
   i1 = i7 + 52 | 0;
   HEAP8[i1 >> 0] = 0;
   i9 = i7 + 53 | 0;
   HEAP8[i9 >> 0] = 0;
   i3 = HEAP32[i3 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 20 >> 2] & 15](i3, i7, i6, i6, 1, i4);
   if (HEAP8[i9 >> 0] | 0) {
    if (!(HEAP8[i1 >> 0] | 0)) {
     i1 = 1;
     i8 = 13;
    }
   } else {
    i1 = 0;
    i8 = 13;
   }
   do if ((i8 | 0) == 13) {
    HEAP32[i5 >> 2] = i6;
    i9 = i7 + 40 | 0;
    HEAP32[i9 >> 2] = (HEAP32[i9 >> 2] | 0) + 1;
    if ((HEAP32[i7 + 36 >> 2] | 0) == 1 ? (HEAP32[i7 + 24 >> 2] | 0) == 2 : 0) {
     HEAP8[i7 + 54 >> 0] = 1;
     if (i1) break;
    } else i8 = 16;
    if ((i8 | 0) == 16 ? i1 : 0) break;
    HEAP32[i2 >> 2] = 4;
    break L1;
   } while (0);
   HEAP32[i2 >> 2] = 3;
   break;
  }
  if ((i2 | 0) == 1) HEAP32[i7 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i7, i10, i1, i2, i6) {
 i11 = i11 | 0;
 i7 = i7 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i9 = HEAP32[i11 >> 2] | 0;
 if (!i9) {
  i11 = 0;
  STACKTOP = i12;
  return i11 | 0;
 }
 i13 = i7;
 i4 = i1 - i13 | 0;
 i5 = i2 + 12 | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 i4 = (i3 | 0) > (i4 | 0) ? i3 - i4 | 0 : 0;
 i3 = i10;
 i2 = i3 - i13 | 0;
 if ((i2 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, i7, i2) | 0) != (i2 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 do if ((i4 | 0) > 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i8, i4, i6);
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, (HEAP8[i8 >> 0] & 1) == 0 ? i8 + 1 | 0 : HEAP32[i8 + 8 >> 2] | 0, i4) | 0) == (i4 | 0)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
   break;
  }
  HEAP32[i11 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i8);
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 } while (0);
 i1 = i1 - i3 | 0;
 if ((i1 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i9 >> 2] | 0) + 48 >> 2] & 31](i9, i10, i1) | 0) != (i1 | 0) : 0) {
  HEAP32[i11 >> 2] = 0;
  i13 = 0;
  STACKTOP = i12;
  return i13 | 0;
 }
 HEAP32[i5 >> 2] = 0;
 i13 = i9;
 STACKTOP = i12;
 return i13 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[29032] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[29033] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[29034] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[29035] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[29036] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[29037] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 29038, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i8 = i6;
 i12 = i6 + 116 | 0;
 i14 = i6 + 104 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[29032] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[29033] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[29034] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[29035] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[29036] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[29037] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 29038, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZN8Document9init_testEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2 + 8 | 0;
 i4 = i2;
 HEAPF32[i3 >> 2] = -200.0;
 HEAPF32[i3 + 4 >> 2] = 0.0;
 i3 = __ZN8Document7addGoalERK4Vec2f9EGoalType(i1, i3, 50.0, 0) | 0;
 i5 = i4 + 4 | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = -140.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = -90.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = -40.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 10.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 60.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 110.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 160.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 210.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 260.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 HEAPF32[i4 >> 2] = 0.0;
 HEAPF32[i5 >> 2] = 310.0;
 __ZN8Document8addAgentERK4Vec2P4Goalfff(i1, i4, i3, 15.0, -1.0, -1.0) | 0;
 STACKTOP = i2;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[29032] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[29033] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[29034] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[29035] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[29036] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[29037] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 29038, 0, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i6;
 i12 = i6 + 56 | 0;
 i14 = i6 + 44 | 0;
 i7 = i6 + 20 | 0;
 i10 = i6 + 16 | 0;
 i5 = i6 + 12 | 0;
 i11 = i6 + 8 | 0;
 i9 = i6 + 4 | 0;
 HEAP8[i12 >> 0] = HEAP8[29032] | 0;
 HEAP8[i12 + 1 >> 0] = HEAP8[29033] | 0;
 HEAP8[i12 + 2 >> 0] = HEAP8[29034] | 0;
 HEAP8[i12 + 3 >> 0] = HEAP8[29035] | 0;
 HEAP8[i12 + 4 >> 0] = HEAP8[29036] | 0;
 HEAP8[i12 + 5 >> 0] = HEAP8[29037] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i12 + 1 | 0, 29038, 1, HEAP32[i2 + 4 >> 2] | 0);
 i13 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i8 >> 2] = i4;
 i12 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 12, i13, i12, i8) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i12, i2) | 0;
 i4 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i11 >> 2] = i4;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i12, i7, i10, i5, i11);
 __ZNSt3__114__shared_count16__release_sharedEv(i4) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 i4 = HEAP32[i10 >> 2] | 0;
 i5 = HEAP32[i5 >> 2] | 0;
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i8, i7, i4, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEE8__appendEj(i12, i14) {
 i12 = i12 | 0;
 i14 = i14 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i11 = i12 + 8 | 0;
 i2 = HEAP32[i11 >> 2] | 0;
 i13 = i12 + 4 | 0;
 i3 = HEAP32[i13 >> 2] | 0;
 i1 = i3;
 if (i2 - i1 >> 3 >>> 0 >= i14 >>> 0) {
  i1 = i14;
  i2 = i3;
  while (1) {
   HEAPF32[i2 >> 2] = 0.0;
   HEAPF32[i2 + 4 >> 2] = 0.0;
   i1 = i1 + -1 | 0;
   if (!i1) break; else i2 = i2 + 8 | 0;
  }
  HEAP32[i13 >> 2] = i3 + (i14 << 3);
  return;
 }
 i3 = HEAP32[i12 >> 2] | 0;
 i4 = i3;
 i6 = (i1 - i4 >> 3) + i14 | 0;
 if (i6 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i4 = HEAP32[i12 >> 2] | 0;
  i2 = HEAP32[i11 >> 2] | 0;
  i3 = i4;
 }
 i5 = i3;
 i1 = i2 - i5 | 0;
 if (i1 >> 3 >>> 0 < 268435455) {
  i1 = i1 >> 2;
  i1 = i1 >>> 0 < i6 >>> 0 ? i6 : i1;
  i5 = (HEAP32[i13 >> 2] | 0) - i5 | 0;
  i2 = i5 >> 3;
  if (!i1) {
   i7 = 0;
   i9 = 0;
   i8 = i2;
   i6 = i5;
  } else i10 = 9;
 } else {
  i5 = (HEAP32[i13 >> 2] | 0) - i5 | 0;
  i1 = 536870911;
  i2 = i5 >> 3;
  i10 = 9;
 }
 if ((i10 | 0) == 9) {
  i7 = i1;
  i9 = __Znwj(i1 << 3) | 0;
  i8 = i2;
  i6 = i5;
 }
 i2 = i9 + (i7 << 3) | 0;
 i1 = i14;
 i5 = i9 + (i8 << 3) | 0;
 while (1) {
  HEAPF32[i5 >> 2] = 0.0;
  HEAPF32[i5 + 4 >> 2] = 0.0;
  i1 = i1 + -1 | 0;
  if (!i1) break; else i5 = i5 + 8 | 0;
 }
 _memcpy(i9 | 0, i3 | 0, i6 | 0) | 0;
 HEAP32[i12 >> 2] = i9;
 HEAP32[i13 >> 2] = i9 + (i8 + i14 << 3);
 HEAP32[i11 >> 2] = i2;
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZN6MapDefD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 __ZN6MapDef5clearEv(i5);
 __ZNSt3__16__treeINS_12__value_typeIPvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS2_S9_NS_4lessIS2_EELb1EEENS6_IS9_EEE7destroyEPNS_11__tree_nodeIS9_S2_EE(i5 + 48 | 0, HEAP32[i5 + 52 >> 2] | 0);
 i3 = i5 + 36 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 40 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -4 | 0;
    HEAP32[i4 >> 2] = i6;
    i2 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = 0;
    if (i2) __ZdlPv(i2);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i3 = i5 + 24 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 28 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -4 | 0;
    HEAP32[i4 >> 2] = i6;
    i2 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = 0;
    if (i2) __ZdlPv(i2);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 __ZNSt3__113__vector_baseINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev(i5 + 12 | 0);
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) return;
 i3 = i5 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i6 = i2 + -4 | 0;
   HEAP32[i3 >> 2] = i6;
   i2 = HEAP32[i6 >> 2] | 0;
   HEAP32[i6 >> 2] = 0;
   if (i2) __ZdlPv(i2);
   i2 = HEAP32[i3 >> 2] | 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i5 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZN3p2t12SweepContext20CreateAdvancingFrontEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i3 = __Znwj(36) | 0;
 __ZN3p2t8TriangleC2ERNS_5PointES2_S2_(i3, HEAP32[HEAP32[i1 + 56 >> 2] >> 2] | 0, HEAP32[i1 + 100 >> 2] | 0, HEAP32[i1 + 96 >> 2] | 0);
 i7 = i1 + 80 | 0;
 i4 = __Znwj(12) | 0;
 HEAP32[i4 + 8 >> 2] = i3;
 HEAP32[i4 + 4 >> 2] = i7;
 i6 = HEAP32[i7 >> 2] | 0;
 HEAP32[i4 >> 2] = i6;
 HEAP32[i6 + 4 >> 2] = i4;
 HEAP32[i7 >> 2] = i4;
 i7 = i1 + 88 | 0;
 HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
 i7 = __Znwj(24) | 0;
 i4 = HEAP32[i3 + 12 >> 2] | 0;
 HEAP32[i7 >> 2] = i4;
 HEAP32[i7 + 4 >> 2] = i3;
 HEAP32[i7 + 8 >> 2] = 0;
 HEAP32[i7 + 12 >> 2] = 0;
 HEAPF64[i7 + 16 >> 3] = +HEAPF64[i4 + 8 >> 3];
 i4 = i1 + 104 | 0;
 HEAP32[i4 >> 2] = i7;
 i6 = __Znwj(24) | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 HEAP32[i6 >> 2] = i2;
 HEAP32[i6 + 4 >> 2] = i3;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAPF64[i6 + 16 >> 3] = +HEAPF64[i2 + 8 >> 3];
 i2 = i1 + 108 | 0;
 HEAP32[i2 >> 2] = i6;
 i6 = __Znwj(24) | 0;
 i3 = HEAP32[i3 + 16 >> 2] | 0;
 HEAP32[i6 >> 2] = i3;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAPF64[i6 + 16 >> 3] = +HEAPF64[i3 + 8 >> 3];
 i3 = i1 + 112 | 0;
 HEAP32[i3 >> 2] = i6;
 i5 = __Znwj(12) | 0;
 __ZN3p2t14AdvancingFrontC2ERNS_4NodeES2_(i5, i7, i6);
 HEAP32[i1 + 92 >> 2] = i5;
 i2 = HEAP32[i2 >> 2] | 0;
 i4 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 + 8 >> 2] = i2;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = i2;
 HEAP32[i3 + 8 >> 2] = i1;
 HEAP32[i3 + 12 >> 2] = i4;
 HEAP32[i1 + 12 >> 2] = i2;
 return;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i11, i8, i10, i2, i3, i7) {
 i11 = i11 | 0;
 i8 = i8 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 var i1 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i12 = 0, i13 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i12;
 i1 = HEAP32[i11 >> 2] | 0;
 L1 : do if (!i1) i1 = 0; else {
  i13 = i8;
  i5 = i2 - i13 >> 2;
  i6 = i3 + 12 | 0;
  i3 = HEAP32[i6 >> 2] | 0;
  i5 = (i3 | 0) > (i5 | 0) ? i3 - i5 | 0 : 0;
  i3 = i10;
  i13 = i3 - i13 | 0;
  i4 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, i8, i4) | 0) != (i4 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  do if ((i5 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i9, i5, i7);
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, (HEAP8[i9 >> 0] & 1) == 0 ? i9 + 4 | 0 : HEAP32[i9 + 8 >> 2] | 0, i5) | 0) == (i5 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    break;
   } else {
    HEAP32[i11 >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i9);
    i1 = 0;
    break L1;
   }
  } while (0);
  i13 = i2 - i3 | 0;
  i2 = i13 >> 2;
  if ((i13 | 0) > 0 ? (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 48 >> 2] & 31](i1, i10, i2) | 0) != (i2 | 0) : 0) {
   HEAP32[i11 >> 2] = 0;
   i1 = 0;
   break;
  }
  HEAP32[i6 >> 2] = 0;
 } while (0);
 STACKTOP = i12;
 return i1 | 0;
}

function ___dynamic_cast(i2, i3, i12, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i12 = i12 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0, i14 = 0;
 i14 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i13 = i14;
 i11 = HEAP32[i2 >> 2] | 0;
 i10 = i2 + (HEAP32[i11 + -8 >> 2] | 0) | 0;
 i11 = HEAP32[i11 + -4 >> 2] | 0;
 HEAP32[i13 >> 2] = i12;
 HEAP32[i13 + 4 >> 2] = i2;
 HEAP32[i13 + 8 >> 2] = i3;
 HEAP32[i13 + 12 >> 2] = i1;
 i1 = i13 + 16 | 0;
 i2 = i13 + 20 | 0;
 i3 = i13 + 24 | 0;
 i4 = i13 + 28 | 0;
 i5 = i13 + 32 | 0;
 i6 = i13 + 40 | 0;
 i7 = (i11 | 0) == (i12 | 0);
 i8 = i1;
 i9 = i8 + 36 | 0;
 do {
  HEAP32[i8 >> 2] = 0;
  i8 = i8 + 4 | 0;
 } while ((i8 | 0) < (i9 | 0));
 HEAP16[i1 + 36 >> 1] = 0;
 HEAP8[i1 + 38 >> 0] = 0;
 L1 : do if (i7) {
  HEAP32[i13 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 15](i12, i13, i10, i10, 1, 0);
  i1 = (HEAP32[i3 >> 2] | 0) == 1 ? i10 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i11 >> 2] | 0) + 24 >> 2] & 3](i11, i13, i10, 1, 0);
  switch (HEAP32[i13 + 36 >> 2] | 0) {
  case 0:
   {
    i1 = (HEAP32[i6 >> 2] | 0) == 1 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1 ? HEAP32[i2 >> 2] | 0 : 0;
    break L1;
   }
  case 1:
   break;
  default:
   {
    i1 = 0;
    break L1;
   }
  }
  if ((HEAP32[i3 >> 2] | 0) != 1 ? !((HEAP32[i6 >> 2] | 0) == 0 & (HEAP32[i4 >> 2] | 0) == 1 & (HEAP32[i5 >> 2] | 0) == 1) : 0) {
   i1 = 0;
   break;
  }
  i1 = HEAP32[i1 >> 2] | 0;
 } while (0);
 STACKTOP = i14;
 return i1 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE(i8, i1) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = i8 + 32 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i6, i1) | 0;
 i5 = i8 + 44 | 0;
 HEAP32[i5 >> 2] = 0;
 i7 = i8 + 48 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 if (i4 & 8) {
  i1 = HEAP8[i6 >> 0] | 0;
  if (!(i1 & 1)) {
   i1 = ((i1 & 255) >>> 1) + (i6 + 1) | 0;
   HEAP32[i5 >> 2] = i1;
   i2 = i6 + 1 | 0;
   i3 = i6 + 1 | 0;
  } else {
   i1 = (HEAP32[i8 + 40 >> 2] | 0) + (HEAP32[i8 + 36 >> 2] | 0) | 0;
   HEAP32[i5 >> 2] = i1;
   i3 = HEAP32[i8 + 40 >> 2] | 0;
   i2 = i3;
  }
  HEAP32[i8 + 8 >> 2] = i2;
  HEAP32[i8 + 12 >> 2] = i3;
  HEAP32[i8 + 16 >> 2] = i1;
 }
 if (!(i4 & 16)) return;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) {
  i4 = (i1 & 255) >>> 1;
  HEAP32[i5 >> 2] = i6 + 1 + i4;
  i1 = 10;
  i5 = i4;
 } else {
  i4 = HEAP32[i8 + 36 >> 2] | 0;
  HEAP32[i5 >> 2] = (HEAP32[i8 + 40 >> 2] | 0) + i4;
  i1 = (HEAP32[i6 >> 2] & -2) + -1 | 0;
  i5 = i4;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i6, i1, 0);
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) {
  i4 = i6 + 1 | 0;
  i3 = (i1 & 255) >>> 1;
  i2 = i6 + 1 | 0;
 } else {
  i2 = HEAP32[i8 + 40 >> 2] | 0;
  i4 = i2;
  i3 = HEAP32[i8 + 36 >> 2] | 0;
 }
 i1 = i8 + 24 | 0;
 HEAP32[i1 >> 2] = i2;
 HEAP32[i8 + 20 >> 2] = i2;
 HEAP32[i8 + 28 >> 2] = i4 + i3;
 if (!(HEAP32[i7 >> 2] & 3)) return;
 HEAP32[i1 >> 2] = i2 + i5;
 return;
}

function _vfprintf(i15, i11, i1) {
 i15 = i15 | 0;
 i11 = i11 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, i13 = 0, i14 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i10 = i16 + 120 | 0;
 i14 = i16 + 80 | 0;
 i13 = i16;
 i12 = i16 + 136 | 0;
 i2 = i14;
 i3 = i2 + 40 | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) < (i3 | 0));
 HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
 if ((_printf_core(0, i11, i10, i13, i14) | 0) < 0) i1 = -1; else {
  if ((HEAP32[i15 + 76 >> 2] | 0) > -1) i8 = ___lockfile(i15) | 0; else i8 = 0;
  i1 = HEAP32[i15 >> 2] | 0;
  i9 = i1 & 32;
  if ((HEAP8[i15 + 74 >> 0] | 0) < 1) HEAP32[i15 >> 2] = i1 & -33;
  i1 = i15 + 48 | 0;
  if (!(HEAP32[i1 >> 2] | 0)) {
   i3 = i15 + 44 | 0;
   i4 = HEAP32[i3 >> 2] | 0;
   HEAP32[i3 >> 2] = i12;
   i5 = i15 + 28 | 0;
   HEAP32[i5 >> 2] = i12;
   i6 = i15 + 20 | 0;
   HEAP32[i6 >> 2] = i12;
   HEAP32[i1 >> 2] = 80;
   i7 = i15 + 16 | 0;
   HEAP32[i7 >> 2] = i12 + 80;
   i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
   if (i4) {
    FUNCTION_TABLE_iiii[HEAP32[i15 + 36 >> 2] & 31](i15, 0, 0) | 0;
    i2 = (HEAP32[i6 >> 2] | 0) == 0 ? -1 : i2;
    HEAP32[i3 >> 2] = i4;
    HEAP32[i1 >> 2] = 0;
    HEAP32[i7 >> 2] = 0;
    HEAP32[i5 >> 2] = 0;
    HEAP32[i6 >> 2] = 0;
   }
  } else i2 = _printf_core(i15, i11, i10, i13, i14) | 0;
  i1 = HEAP32[i15 >> 2] | 0;
  HEAP32[i15 >> 2] = i1 | i9;
  if (i8) ___unlockfile(i15);
  i1 = (i1 & 32 | 0) == 0 ? i2 : -1;
 }
 STACKTOP = i16;
 return i1 | 0;
}

function __ZN3p2t12SweepContext17InitTriangulationEv(i11) {
 i11 = i11 | 0;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i12 = 0, d13 = 0.0, i14 = 0;
 i12 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i12;
 i9 = HEAP32[i11 + 56 >> 2] | 0;
 i10 = HEAP32[i9 >> 2] | 0;
 d1 = +HEAPF64[i10 + 8 >> 3];
 d5 = +HEAPF64[i10 + 16 >> 3];
 i10 = HEAP32[i11 + 60 >> 2] | 0;
 if ((i10 | 0) != (i9 | 0) ? (i6 = i10 - i9 >> 2, i6 >>> 0 > 1) : 0) {
  i7 = 1;
  d4 = d1;
  d3 = d1;
  d2 = d5;
  d1 = d5;
  do {
   i14 = HEAP32[i9 + (i7 << 2) >> 2] | 0;
   d13 = +HEAPF64[i14 + 8 >> 3];
   d5 = +HEAPF64[i14 + 16 >> 3];
   d4 = d13 > d4 ? d13 : d4;
   d3 = d13 < d3 ? d13 : d3;
   d2 = d5 > d2 ? d5 : d2;
   d1 = d5 < d1 ? d5 : d1;
   i7 = i7 + 1 | 0;
  } while (i7 >>> 0 < i6 >>> 0);
 } else {
  d4 = d1;
  d3 = d1;
  d2 = d5;
  d1 = d5;
 }
 d5 = (d4 - d3) * .3;
 i14 = __Znwj(40) | 0;
 d13 = d1 - (d2 - d1) * .3;
 HEAP32[i14 >> 2] = -1;
 HEAP8[i14 + 4 >> 0] = 0;
 HEAPF64[i14 + 8 >> 3] = d4 + d5;
 HEAPF64[i14 + 16 >> 3] = d13;
 HEAP32[i14 + 24 >> 2] = 0;
 HEAP32[i14 + 28 >> 2] = 0;
 HEAP32[i14 + 32 >> 2] = 0;
 HEAP32[i11 + 96 >> 2] = i14;
 i14 = __Znwj(40) | 0;
 HEAP32[i14 >> 2] = -1;
 HEAP8[i14 + 4 >> 0] = 0;
 HEAPF64[i14 + 8 >> 3] = d3 - d5;
 HEAPF64[i14 + 16 >> 3] = d13;
 HEAP32[i14 + 24 >> 2] = 0;
 HEAP32[i14 + 28 >> 2] = 0;
 HEAP32[i14 + 32 >> 2] = 0;
 HEAP32[i11 + 100 >> 2] = i14;
 HEAP32[i8 >> 2] = 28;
 __ZNSt3__16__sortIRPFbPKN3p2t5PointES4_EPPS2_EEvT0_SA_T_(i9, i10, i8);
 STACKTOP = i12;
 return;
}

function _mbrtowc(i4, i3, i7, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0, i10 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i9;
 i6 = (i1 | 0) == 0 ? 6640 : i1;
 i1 = HEAP32[i6 >> 2] | 0;
 L1 : do if (!i3) if (!i1) i1 = 0; else i8 = 15; else {
  i5 = (i4 | 0) == 0 ? i2 : i4;
  if (!i7) i1 = -2; else {
   if (!i1) {
    i1 = HEAP8[i3 >> 0] | 0;
    i2 = i1 & 255;
    if (i1 << 24 >> 24 > -1) {
     HEAP32[i5 >> 2] = i2;
     i1 = i1 << 24 >> 24 != 0 & 1;
     break;
    }
    i1 = i2 + -194 | 0;
    if (i1 >>> 0 > 50) {
     i8 = 15;
     break;
    }
    i1 = HEAP32[6368 + (i1 << 2) >> 2] | 0;
    i2 = i7 + -1 | 0;
    if (i2) {
     i3 = i3 + 1 | 0;
     i8 = 9;
    }
   } else {
    i2 = i7;
    i8 = 9;
   }
   L11 : do if ((i8 | 0) == 9) {
    i4 = HEAP8[i3 >> 0] | 0;
    i10 = (i4 & 255) >>> 3;
    if ((i10 + -16 | i10 + (i1 >> 26)) >>> 0 > 7) {
     i8 = 15;
     break L1;
    }
    while (1) {
     i3 = i3 + 1 | 0;
     i1 = (i4 & 255) + -128 | i1 << 6;
     i2 = i2 + -1 | 0;
     if ((i1 | 0) >= 0) break;
     if (!i2) break L11;
     i4 = HEAP8[i3 >> 0] | 0;
     if ((i4 & -64) << 24 >> 24 != -128) {
      i8 = 15;
      break L1;
     }
    }
    HEAP32[i6 >> 2] = 0;
    HEAP32[i5 >> 2] = i1;
    i1 = i7 - i2 | 0;
    break L1;
   } while (0);
   HEAP32[i6 >> 2] = i1;
   i1 = -2;
  }
 } while (0);
 if ((i8 | 0) == 15) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 }
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 i10 = i6;
 i5 = i6 + 180 | 0;
 i7 = i6 + 160 | 0;
 i8 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[29046] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[29047] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[29048] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[29049] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[29050] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[29051] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 48 >> 2] & 7](i12, i7, i9, i8) | 0;
 i5 = i8 + (i5 << 2) | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7 << 2) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv(i5, i3, i2, i1, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i10 = i6;
 i5 = i6 + 72 | 0;
 i7 = i6 + 52 | 0;
 i8 = i6 + 12 | 0;
 i12 = i6 + 8 | 0;
 i11 = i6 + 4 | 0;
 HEAP8[i5 >> 0] = HEAP8[29046] | 0;
 HEAP8[i5 + 1 >> 0] = HEAP8[29047] | 0;
 HEAP8[i5 + 2 >> 0] = HEAP8[29048] | 0;
 HEAP8[i5 + 3 >> 0] = HEAP8[29049] | 0;
 HEAP8[i5 + 4 >> 0] = HEAP8[29050] | 0;
 HEAP8[i5 + 5 >> 0] = HEAP8[29051] | 0;
 i9 = __ZNSt3__16__clocEv() | 0;
 HEAP32[i10 >> 2] = i4;
 i5 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i7, 20, i9, i5, i10) | 0;
 i9 = i7 + i5 | 0;
 i4 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i7, i9, i2) | 0;
 i13 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i12 >> 2] = i13;
 i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i12, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i13) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i12 >> 2] | 0) + 32 >> 2] & 7](i12, i7, i9, i8) | 0;
 i5 = i8 + i5 | 0;
 HEAP32[i11 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i11 >> 2];
 i5 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i10, i8, (i4 | 0) == (i9 | 0) ? i5 : i8 + (i4 - i7) | 0, i5, i2, i1) | 0;
 STACKTOP = i6;
 return i5 | 0;
}

function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_(i1, i8, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i2 = i1 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  HEAP32[i8 >> 2] = i2;
  i8 = i2;
  return i8 | 0;
 }
 i7 = HEAP8[i3 >> 0] | 0;
 i6 = (i7 & 1) == 0;
 i7 = i6 ? (i7 & 255) >>> 1 : HEAP32[i3 + 4 >> 2] | 0;
 i6 = i6 ? i3 + 1 | 0 : HEAP32[i3 + 8 >> 2] | 0;
 while (1) {
  i3 = i1 + 16 | 0;
  i2 = HEAP8[i3 >> 0] | 0;
  i4 = (i2 & 1) == 0;
  i2 = i4 ? (i2 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0;
  i3 = i4 ? i3 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0;
  i4 = i2 >>> 0 < i7 >>> 0;
  i9 = _memcmp(i6, i3, i4 ? i2 : i7) | 0;
  i5 = i7 >>> 0 < i2 >>> 0;
  if ((((i9 | 0) == 0 ? (i5 ? -2147483648 : 0) : i9) | 0) < 0) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i2 = i1;
    i3 = 5;
    break;
   } else i1 = i2;
  } else {
   i9 = _memcmp(i3, i6, i5 ? i7 : i2) | 0;
   if ((((i9 | 0) == 0 ? (i4 ? -2147483648 : 0) : i9) | 0) >= 0) {
    i3 = 10;
    break;
   }
   i2 = i1 + 4 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) {
    i3 = 9;
    break;
   } else i1 = i3;
  }
 }
 if ((i3 | 0) == 5) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 9) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  i9 = i8;
  return i9 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14) {
 i1 = i1 | 0;
 i12 = i12 | 0;
 i11 = i11 | 0;
 i10 = i10 | 0;
 i13 = i13 | 0;
 i14 = i14 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 if ((i1 | 0) == (HEAP32[i12 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i12, i11, i10, i13); else {
  i6 = i12 + 52 | 0;
  i7 = HEAP8[i6 >> 0] | 0;
  i8 = i12 + 53 | 0;
  i9 = HEAP8[i8 >> 0] | 0;
  i5 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i5 << 3) | 0;
  HEAP8[i6 >> 0] = 0;
  HEAP8[i8 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1 + 16 | 0, i12, i11, i10, i13, i14);
  L4 : do if ((i5 | 0) > 1) {
   i3 = i12 + 24 | 0;
   i4 = i1 + 8 | 0;
   i5 = i12 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    if (HEAP8[i5 >> 0] | 0) break L4;
    if (!(HEAP8[i6 >> 0] | 0)) {
     if ((HEAP8[i8 >> 0] | 0) != 0 ? (HEAP32[i4 >> 2] & 1 | 0) == 0 : 0) break L4;
    } else {
     if ((HEAP32[i3 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[i4 >> 2] & 2)) break L4;
    }
    HEAP8[i6 >> 0] = 0;
    HEAP8[i8 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i1, i12, i11, i10, i13, i14);
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  } while (0);
  HEAP8[i6 >> 0] = i7;
  HEAP8[i8 >> 0] = i9;
 }
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 204 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 29040, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 196 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 29040, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 75 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 29040, 0, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 23, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx(i6, i5, i4, i3, i1, i2) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 i9 = i7 + 8 | 0;
 i13 = i7;
 i14 = i7 + 74 | 0;
 i8 = i7 + 32 | 0;
 i11 = i7 + 28 | 0;
 i6 = i7 + 24 | 0;
 i12 = i7 + 20 | 0;
 i10 = i7 + 16 | 0;
 i15 = i13;
 HEAP32[i15 >> 2] = 37;
 HEAP32[i15 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i13 + 1 | 0, 29040, 1, HEAP32[i4 + 4 >> 2] | 0);
 i15 = __ZNSt3__16__clocEv() | 0;
 i16 = i9;
 HEAP32[i16 >> 2] = i1;
 HEAP32[i16 + 4 >> 2] = i2;
 i1 = i14 + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i14, 22, i15, i13, i9) | 0) | 0;
 i13 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i14, i1, i4) | 0;
 i2 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i12 >> 2] = i2;
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE(i14, i13, i1, i8, i11, i6, i12);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 HEAP32[i10 >> 2] = HEAP32[i5 >> 2];
 i5 = HEAP32[i11 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 HEAP32[i9 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(i9, i8, i5, i6, i4, i3) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_(i1, i8, i3) {
 i1 = i1 | 0;
 i8 = i8 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0;
 i2 = i1 + 4 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!i1) {
  HEAP32[i8 >> 2] = i2;
  i8 = i2;
  return i8 | 0;
 }
 i7 = HEAP8[i3 >> 0] | 0;
 i6 = (i7 & 1) == 0;
 i7 = i6 ? (i7 & 255) >>> 1 : HEAP32[i3 + 4 >> 2] | 0;
 i6 = i6 ? i3 + 1 | 0 : HEAP32[i3 + 8 >> 2] | 0;
 while (1) {
  i3 = i1 + 16 | 0;
  i2 = HEAP8[i3 >> 0] | 0;
  i4 = (i2 & 1) == 0;
  i2 = i4 ? (i2 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0;
  i3 = i4 ? i3 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0;
  i4 = i2 >>> 0 < i7 >>> 0;
  i9 = _memcmp(i6, i3, i4 ? i2 : i7) | 0;
  i5 = i7 >>> 0 < i2 >>> 0;
  if ((((i9 | 0) == 0 ? (i5 ? -2147483648 : 0) : i9) | 0) < 0) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!i2) {
    i2 = i1;
    i3 = 5;
    break;
   } else i1 = i2;
  } else {
   i9 = _memcmp(i3, i6, i5 ? i7 : i2) | 0;
   if ((((i9 | 0) == 0 ? (i4 ? -2147483648 : 0) : i9) | 0) >= 0) {
    i3 = 10;
    break;
   }
   i2 = i1 + 4 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) {
    i3 = 9;
    break;
   } else i1 = i3;
  }
 }
 if ((i3 | 0) == 5) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 9) {
  HEAP32[i8 >> 2] = i1;
  i9 = i2;
  return i9 | 0;
 } else if ((i3 | 0) == 10) {
  HEAP32[i8 >> 2] = i1;
  i9 = i8;
  return i9 | 0;
 }
 return 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj(i10, i8) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 12604) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13432) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i2 & 31](i7, i5, i4, i1 & 255, i8) | 0)) {
   i8 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi(i10, i8) {
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 12604) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13432) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiii[i2 & 31](i7, i5, i4, i1 & 255, i8) | 0)) {
   i8 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEf(i10, d8) {
 i10 = i10 | 0;
 d8 = +d8;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i5 = i11 + 20 | 0;
 i6 = i11 + 16 | 0;
 i9 = i11 + 8 | 0;
 i1 = i11;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i9, i10);
 if (HEAP8[i9 >> 0] | 0) {
  HEAP32[i1 >> 2] = __ZNKSt3__18ios_base6getlocEv(i10 + (HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 12604) | 0;
  __ZNSt3__16localeD2Ev(i1);
  i2 = HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0;
  i3 = HEAP32[i10 + (i2 + 24) >> 2] | 0;
  i4 = i10 + i2 | 0;
  i2 = i10 + (i2 + 76) | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == -1) {
   HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
   i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13432) | 0;
   i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 32) | 0;
   __ZNSt3__16localeD2Ev(i5);
   i1 = i1 << 24 >> 24;
   HEAP32[i2 >> 2] = i1;
  }
  i2 = HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] | 0;
  HEAP32[i6 >> 2] = i3;
  HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
  if (!(FUNCTION_TABLE_iiiiid[i2 & 7](i7, i5, i4, i1 & 255, d8) | 0)) {
   i7 = i10 + ((HEAP32[(HEAP32[i10 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i7 >> 2] = HEAP32[i7 >> 2] | 5;
  }
 }
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i9);
 STACKTOP = i11;
 return i10 | 0;
}

function __ZNSt3__16vectorIP13ISubGoalMakerNS_9allocatorIS2_EEE8__appendEj(i9, i2) {
 i9 = i9 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i8 = i9 + 8 | 0;
 i4 = HEAP32[i8 >> 2] | 0;
 i10 = i9 + 4 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i3 = i1;
 if (i4 - i3 >> 2 >>> 0 >= i2 >>> 0) {
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = (HEAP32[i10 >> 2] | 0) + 4 | 0;
   HEAP32[i10 >> 2] = i1;
   i2 = i2 + -1 | 0;
  } while ((i2 | 0) != 0);
  return;
 }
 i1 = HEAP32[i9 >> 2] | 0;
 i5 = (i3 - i1 >> 2) + i2 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i9);
  i4 = HEAP32[i8 >> 2] | 0;
  i1 = HEAP32[i9 >> 2] | 0;
 }
 i3 = i4 - i1 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  if (!i3) {
   i4 = 0;
   i6 = 0;
   i5 = i1;
  } else i7 = 8;
 } else {
  i3 = 1073741823;
  i1 = (HEAP32[i10 >> 2] | 0) - i1 >> 2;
  i7 = 8;
 }
 if ((i7 | 0) == 8) {
  i4 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i5 = i1;
 }
 i1 = i6 + (i5 << 2) | 0;
 i4 = i6 + (i4 << 2) | 0;
 i3 = i1;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i1 + 4 | 0;
  i1 = i3;
  i2 = i2 + -1 | 0;
 } while ((i2 | 0) != 0);
 i2 = HEAP32[i9 >> 2] | 0;
 i3 = (HEAP32[i10 >> 2] | 0) - i2 | 0;
 i7 = i6 + (i5 - (i3 >> 2) << 2) | 0;
 _memcpy(i7 | 0, i2 | 0, i3 | 0) | 0;
 HEAP32[i9 >> 2] = i7;
 HEAP32[i10 >> 2] = i1;
 HEAP32[i8 >> 2] = i4;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP32[i1 >> 2] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 4, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i8 = i1 + 4 | 0;
  i9 = i2 + 36 | 0;
  i4 = i2 + 40 | 0;
  i5 = i12 + 8 | 0;
  i6 = i12;
  i7 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i9 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i4 >> 2] | 0, i1, i8, i10, i12, i5, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i6 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i7 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i7 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi(i2, i14) {
 i2 = i2 | 0;
 i14 = i14 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i15 = 0, i16 = 0;
 i16 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i12 = i16 + 16 | 0;
 i1 = i16 + 8 | 0;
 i11 = i16 + 4 | 0;
 i10 = i16;
 i13 = (i14 | 0) == -1;
 L1 : do if (!i13) {
  HEAP8[i1 >> 0] = i14;
  if (HEAP8[i2 + 44 >> 0] | 0) if ((_fwrite(i1, 1, 1, HEAP32[i2 + 32 >> 2] | 0) | 0) == 1) {
   i15 = 11;
   break;
  } else {
   i1 = -1;
   break;
  }
  HEAP32[i11 >> 2] = i12;
  i9 = i1 + 1 | 0;
  i4 = i2 + 36 | 0;
  i5 = i2 + 40 | 0;
  i6 = i12 + 8 | 0;
  i7 = i12;
  i8 = i2 + 32 | 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   i2 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 >> 2] | 0, i1, i9, i10, i12, i6, i11) | 0;
   if ((HEAP32[i10 >> 2] | 0) == (i1 | 0)) {
    i1 = -1;
    break L1;
   }
   if ((i2 | 0) == 3) break;
   i3 = (i2 | 0) == 1;
   if (i2 >>> 0 >= 2) {
    i1 = -1;
    break L1;
   }
   i2 = (HEAP32[i11 >> 2] | 0) - i7 | 0;
   if ((_fwrite(i12, 1, i2, HEAP32[i8 >> 2] | 0) | 0) != (i2 | 0)) {
    i1 = -1;
    break L1;
   }
   if (i3) i1 = i3 ? HEAP32[i10 >> 2] | 0 : i1; else {
    i15 = 11;
    break L1;
   }
  }
  if ((_fwrite(i1, 1, 1, HEAP32[i8 >> 2] | 0) | 0) != 1) i1 = -1; else i15 = 11;
 } else i15 = 11; while (0);
 if ((i15 | 0) == 11) i1 = i13 ? 0 : i14;
 STACKTOP = i16;
 return i1 | 0;
}

function __Z9commonVtxP8TriangleS0_PP6VertexS3_(i1, i2, i17, i16) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i17 = i17 | 0;
 i16 = i16 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i18 = 0;
 i18 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i18;
 i10 = HEAP32[i1 >> 2] | 0;
 i15 = HEAP32[i1 + 4 >> 2] | 0;
 i5 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i6 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 i3 = (i10 | 0) == (i1 | 0);
 i4 = (i15 | 0) == (i2 | 0);
 if ((!(i3 & i4) ? (i11 = (i10 | 0) == (i2 | 0), i12 = (i15 | 0) == (i6 | 0), !(i12 & i11)) : 0) ? (i13 = (i10 | 0) == (i6 | 0), i14 = (i15 | 0) == (i1 | 0), !(i14 & i13)) : 0) {
  i1 = (i5 | 0) != (i1 | 0);
  if ((i1 | i11 ^ 1 ? (i7 = (i5 | 0) != (i2 | 0), i7 | i13 ^ 1) : 0) ? (i8 = (i5 | 0) != (i6 | 0), i8 | i3 ^ 1) : 0) {
   if ((i1 | i12 ^ 1) & ((i7 | i14 ^ 1) & (i8 | i4 ^ 1))) {
    i18 = ___cxa_allocate_exception(16) | 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i9, 21112, 22);
    __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i18, i9);
    ___cxa_throw(i18 | 0, 16, 12);
   }
   HEAP32[i16 >> 2] = i15;
   HEAP32[i17 >> 2] = i5;
   STACKTOP = i18;
   return;
  }
  HEAP32[i16 >> 2] = i5;
  HEAP32[i17 >> 2] = i10;
  STACKTOP = i18;
  return;
 }
 HEAP32[i16 >> 2] = i10;
 HEAP32[i17 >> 2] = i15;
 STACKTOP = i18;
 return;
}

function __ZNSt3__16vectorI16VelocityObstacleNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i14, i12) {
 i14 = i14 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = i14 + 4 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i13 >> 2] | 0) - i2 | 0) / 52 | 0) + 1 | 0;
 if (i5 >>> 0 > 82595524) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i14);
  i2 = HEAP32[i14 >> 2] | 0;
  i1 = i2;
 }
 i11 = i14 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i11 >> 2] | 0) - i4 | 0) / 52 | 0;
 if (i3 >>> 0 < 41297762) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 52 | 0;
  if (!i3) {
   i6 = 0;
   i9 = 0;
   i8 = i4;
   i7 = i5;
  } else i10 = 6;
 } else {
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i3 = 82595524;
  i4 = (i5 | 0) / 52 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i6 = i3;
  i9 = __Znwj(i3 * 52 | 0) | 0;
  i8 = i4;
  i7 = i5;
 }
 i5 = i9 + (i6 * 52 | 0) | 0;
 i6 = i9 + (i8 * 52 | 0) | 0;
 i3 = i12;
 i4 = i6 + 52 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  i6 = i6 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i6 | 0) < (i4 | 0));
 i12 = i9 + ((((i7 | 0) / -52 | 0) + i8 | 0) * 52 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i7 | 0) | 0;
 HEAP32[i14 >> 2] = i12;
 HEAP32[i13 >> 2] = i9 + ((i8 + 1 | 0) * 52 | 0);
 HEAP32[i11 >> 2] = i5;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZN3p2t5Sweep25FillRightConcaveEdgeEventERNS_12SweepContextEPNS_4EdgeERNS_4NodeE(i11, i10, i8, i9) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i1 = 0, d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, d6 = 0.0, i7 = 0, d12 = 0.0, d13 = 0.0, i14 = 0;
 i4 = i9 + 8 | 0;
 i5 = i8 + 4 | 0;
 i7 = HEAP32[i4 >> 2] | 0;
 while (1) {
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i11, i10, i7);
  i7 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i7 >> 2] | 0;
  i3 = HEAP32[i8 >> 2] | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = 7;
   break;
  }
  i14 = HEAP32[i5 >> 2] | 0;
  d12 = +HEAPF64[i3 + 8 >> 3];
  d6 = +HEAPF64[i1 + 16 >> 3];
  d13 = +HEAPF64[i3 + 16 >> 3];
  d2 = +HEAPF64[i1 + 8 >> 3];
  d12 = (+HEAPF64[i14 + 8 >> 3] - d12) * (d6 - d13) - (+HEAPF64[i14 + 16 >> 3] - d13) * (d2 - d12);
  if (!(d12 > 0.0 & (!(d12 < 1.0e-012) | !(d12 > -1.0e-012)))) {
   i1 = 7;
   break;
  }
  i1 = HEAP32[i7 + 8 >> 2] | 0;
  if (!i1) {
   i1 = 5;
   break;
  }
  i14 = HEAP32[i9 >> 2] | 0;
  i3 = HEAP32[i1 >> 2] | 0;
  d12 = +HEAPF64[i3 + 8 >> 3];
  d13 = +HEAPF64[i3 + 16 >> 3];
  d13 = (+HEAPF64[i14 + 8 >> 3] - d12) * (d6 - d13) - (d2 - d12) * (+HEAPF64[i14 + 16 >> 3] - d13);
  if (!(d13 > 0.0 & (!(d13 < 1.0e-012) | !(d13 > -1.0e-012)))) {
   i1 = 7;
   break;
  }
 }
 if ((i1 | 0) == 5) {
  i14 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i14, 20233);
  ___cxa_throw(i14 | 0, 624, 90);
 } else if ((i1 | 0) == 7) return;
}

function __ZN3p2t8Triangle12MarkNeighborERS0_(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i7 = HEAP32[i12 + 12 >> 2] | 0;
 i8 = HEAP32[i12 + 16 >> 2] | 0;
 i9 = HEAP32[i11 + 8 >> 2] | 0;
 i10 = (i9 | 0) == (i7 | 0);
 if ((!i10 ? (i2 = HEAP32[i11 + 12 >> 2] | 0, (i2 | 0) != (i7 | 0)) : 0) ? (i3 = HEAP32[i11 + 16 >> 2] | 0, (i3 | 0) != (i7 | 0)) : 0) i5 = i2; else i6 = 4;
 do if ((i6 | 0) == 4) {
  if (((i9 | 0) != (i8 | 0) ? (i1 = HEAP32[i11 + 12 >> 2] | 0, (i1 | 0) != (i8 | 0)) : 0) ? (i4 = HEAP32[i11 + 16 >> 2] | 0, (i4 | 0) != (i8 | 0)) : 0) {
   i5 = i1;
   i3 = i4;
   break;
  }
  HEAP32[i12 + 20 >> 2] = i11;
  __ZN3p2t8Triangle12MarkNeighborEPNS_5PointES2_PS0_(i11, i7, i8, i12);
  return;
 } while (0);
 i1 = HEAP32[i12 + 8 >> 2] | 0;
 i2 = (i9 | 0) == (i1 | 0);
 do if (i2 | (i5 | 0) == (i1 | 0) | (i3 | 0) == (i1 | 0)) if ((i9 | 0) == (i8 | 0) | (i5 | 0) == (i8 | 0) | (i3 | 0) == (i8 | 0)) {
  HEAP32[i12 + 24 >> 2] = i11;
  __ZN3p2t8Triangle12MarkNeighborEPNS_5PointES2_PS0_(i11, i1, i8, i12);
  return;
 } else {
  if (i2 | (i5 | 0) == (i1 | 0) | (i3 | 0) == (i1 | 0)) break;
  return;
 } else if (!((i5 | 0) == (i1 | 0) | (i3 | 0) == (i1 | 0))) return; while (0);
 if (!(i10 | (i5 | 0) == (i7 | 0) | (i3 | 0) == (i7 | 0))) return;
 HEAP32[i12 + 28 >> 2] = i11;
 __ZN3p2t8Triangle12MarkNeighborEPNS_5PointES2_PS0_(i11, i1, i7, i12);
 return;
}

function __ZNSt3__16vectorI8TriangleNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i14, i12) {
 i14 = i14 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = i14 + 4 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i13 >> 2] | 0) - i2 | 0) / 36 | 0) + 1 | 0;
 if (i5 >>> 0 > 119304647) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i14);
  i2 = HEAP32[i14 >> 2] | 0;
  i1 = i2;
 }
 i11 = i14 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i11 >> 2] | 0) - i4 | 0) / 36 | 0;
 if (i3 >>> 0 < 59652323) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 36 | 0;
  if (!i3) {
   i6 = 0;
   i9 = 0;
   i8 = i4;
   i7 = i5;
  } else i10 = 6;
 } else {
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i3 = 119304647;
  i4 = (i5 | 0) / 36 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i6 = i3;
  i9 = __Znwj(i3 * 36 | 0) | 0;
  i8 = i4;
  i7 = i5;
 }
 i5 = i9 + (i6 * 36 | 0) | 0;
 i6 = i9 + (i8 * 36 | 0) | 0;
 i3 = i12;
 i4 = i6 + 36 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  i6 = i6 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i6 | 0) < (i4 | 0));
 i12 = i9 + ((((i7 | 0) / -36 | 0) + i8 | 0) * 36 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i7 | 0) | 0;
 HEAP32[i14 >> 2] = i12;
 HEAP32[i13 >> 2] = i9 + ((i8 + 1 | 0) * 36 | 0);
 HEAP32[i11 >> 2] = i5;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorI8HalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i14, i12) {
 i14 = i14 | 0;
 i12 = i12 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i13 = 0;
 i13 = i14 + 4 | 0;
 i1 = HEAP32[i14 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i13 >> 2] | 0) - i2 | 0) / 52 | 0) + 1 | 0;
 if (i5 >>> 0 > 82595524) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i14);
  i2 = HEAP32[i14 >> 2] | 0;
  i1 = i2;
 }
 i11 = i14 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i11 >> 2] | 0) - i4 | 0) / 52 | 0;
 if (i3 >>> 0 < 41297762) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 52 | 0;
  if (!i3) {
   i6 = 0;
   i9 = 0;
   i8 = i4;
   i7 = i5;
  } else i10 = 6;
 } else {
  i5 = (HEAP32[i13 >> 2] | 0) - i4 | 0;
  i3 = 82595524;
  i4 = (i5 | 0) / 52 | 0;
  i10 = 6;
 }
 if ((i10 | 0) == 6) {
  i6 = i3;
  i9 = __Znwj(i3 * 52 | 0) | 0;
  i8 = i4;
  i7 = i5;
 }
 i5 = i9 + (i6 * 52 | 0) | 0;
 i6 = i9 + (i8 * 52 | 0) | 0;
 i3 = i12;
 i4 = i6 + 52 | 0;
 do {
  HEAP32[i6 >> 2] = HEAP32[i3 >> 2];
  i6 = i6 + 4 | 0;
  i3 = i3 + 4 | 0;
 } while ((i6 | 0) < (i4 | 0));
 i12 = i9 + ((((i7 | 0) / -52 | 0) + i8 | 0) * 52 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i7 | 0) | 0;
 HEAP32[i14 >> 2] = i12;
 HEAP32[i13 >> 2] = i9 + ((i8 + 1 | 0) * 52 | 0);
 HEAP32[i11 >> 2] = i5;
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_(i1, i3) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i4 = i1 + 4 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  i5 = HEAP8[i3 >> 0] | 0;
  i1 = (i5 & 1) == 0;
  i5 = i1 ? (i5 & 255) >>> 1 : HEAP32[i3 + 4 >> 2] | 0;
  i3 = i1 ? i3 + 1 | 0 : HEAP32[i3 + 8 >> 2] | 0;
  i1 = i4;
  L3 : do {
   while (1) {
    i6 = i2 + 16 | 0;
    i7 = HEAP8[i6 >> 0] | 0;
    i8 = (i7 & 1) == 0;
    i7 = i8 ? (i7 & 255) >>> 1 : HEAP32[i2 + 20 >> 2] | 0;
    i6 = _memcmp(i8 ? i6 + 1 | 0 : HEAP32[i2 + 24 >> 2] | 0, i3, i5 >>> 0 < i7 >>> 0 ? i5 : i7) | 0;
    if ((((i6 | 0) == 0 ? (i7 >>> 0 < i5 >>> 0 ? -2147483648 : 0) : i6) | 0) >= 0) {
     i1 = i2;
     break;
    }
    i2 = HEAP32[i2 + 4 >> 2] | 0;
    if (!i2) break L3;
   }
   i2 = HEAP32[i1 >> 2] | 0;
  } while ((i2 | 0) != 0);
  if ((i1 | 0) != (i4 | 0) ? (i8 = i1 + 16 | 0, i7 = HEAP8[i8 >> 0] | 0, i6 = (i7 & 1) == 0, i7 = i6 ? (i7 & 255) >>> 1 : HEAP32[i1 + 20 >> 2] | 0, i8 = _memcmp(i3, i6 ? i8 + 1 | 0 : HEAP32[i1 + 24 >> 2] | 0, i7 >>> 0 < i5 >>> 0 ? i7 : i5) | 0, (((i8 | 0) == 0 ? (i5 >>> 0 < i7 >>> 0 ? -2147483648 : 0) : i8) | 0) >= 0) : 0) {
   i8 = i1;
   return i8 | 0;
  }
 }
 i8 = i4;
 return i8 | 0;
}

function __ZN8DocumentC2Ev(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 i1 = i7 + 60 | 0;
 HEAP32[i7 + 64 >> 2] = 0;
 HEAP32[i7 + 68 >> 2] = 0;
 i2 = i7 + 64 | 0;
 i3 = i7;
 i4 = i3 + 60 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i1 >> 2] = i2;
 i1 = i7 + 180 | 0;
 HEAP32[i7 + 184 >> 2] = 0;
 HEAP32[i7 + 188 >> 2] = 0;
 i2 = i7 + 184 | 0;
 i3 = i7 + 72 | 0;
 i4 = i3 + 108 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 HEAP32[i1 >> 2] = i2;
 i1 = i7 + 192 | 0;
 i5 = i7 + 204 | 0;
 i6 = i7 + 208 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 __ZN8Document9init_testEv(i7);
 i1 = i7 + 212 | 0;
 i4 = 0;
 do {
  i2 = __Znwj(12) | 0;
  HEAP32[i2 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = -1018691584;
  HEAP32[i2 + 8 >> 2] = -1018691584;
  HEAP32[i8 >> 2] = i2;
  i3 = HEAP32[i6 >> 2] | 0;
  if (i3 >>> 0 < (HEAP32[i1 >> 2] | 0) >>> 0) {
   HEAP32[i3 >> 2] = i2;
   HEAP32[i6 >> 2] = (HEAP32[i6 >> 2] | 0) + 4;
  } else __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i5, i8);
  i4 = i4 + 1 | 0;
 } while ((i4 | 0) < 100);
 STACKTOP = i9;
 return;
}

function __ZN7NavCtrl8addAgentERK4Vec2ff(i9, i1, d2, d3) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 d3 = +d3;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 i4 = __ZN8Document8addAgentERK4Vec2P4Goalfff(i9 + 72 | 0, i1, 0, d2, d3, -1.0) | 0;
 i1 = __Znwj(16) | 0;
 HEAP32[i1 + 4 >> 2] = i9;
 HEAP8[i1 + 8 >> 0] = 1;
 HEAP32[i1 >> 2] = 2876;
 HEAP32[i1 + 12 >> 2] = i4;
 _emscripten_asm_const_5(5, i1 | 0, 20, +(+HEAPF32[i4 + 12 >> 2]), +(+HEAPF32[i4 + 16 >> 2]), +(+HEAPF32[i4 + 28 >> 2])) | 0;
 HEAP32[i8 >> 2] = i1;
 i4 = __Znwj(16) | 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 >> 2] = 3296;
 HEAP32[i4 + 12 >> 2] = i1;
 i5 = i8 + 4 | 0;
 HEAP32[i5 >> 2] = i4;
 i6 = i9 + 28 | 0;
 i7 = HEAP32[i6 >> 2] | 0;
 if (i7 >>> 0 < (HEAP32[i9 + 32 >> 2] | 0) >>> 0) {
  HEAP32[i7 >> 2] = i1;
  HEAP32[i7 + 4 >> 2] = i4;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i6 >> 2] = i7 + 8;
  i9 = i9 + 312 | 0;
  HEAP32[i9 >> 2] = 0;
  STACKTOP = i10;
  return;
 }
 __ZNSt3__16vectorINS_10shared_ptrI9AgentItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9 + 24 | 0, i8);
 i1 = HEAP32[i5 >> 2] | 0;
 if (!i1) {
  i9 = i9 + 312 | 0;
  HEAP32[i9 >> 2] = 0;
  STACKTOP = i10;
  return;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 i9 = i9 + 312 | 0;
 HEAP32[i9 >> 2] = 0;
 STACKTOP = i10;
 return;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj(i5, i3, i6, i7) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i8 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i4 = i5 + 4 | 0;
 i2 = HEAP32[i4 >> 2] | 0;
 L1 : do if (((i1 & 1) == 0 ? (i1 & 255) >>> 1 : i2) | 0) {
  if ((i3 | 0) != (i6 | 0)) {
   i1 = i6 + -4 | 0;
   if (i1 >>> 0 > i3 >>> 0) {
    i2 = i3;
    do {
     i8 = HEAP32[i2 >> 2] | 0;
     HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
     HEAP32[i1 >> 2] = i8;
     i2 = i2 + 4 | 0;
     i1 = i1 + -4 | 0;
    } while (i2 >>> 0 < i1 >>> 0);
   }
   i1 = HEAP8[i5 >> 0] | 0;
   i2 = HEAP32[i4 >> 2] | 0;
  }
  i8 = (i1 & 1) == 0;
  i4 = i8 ? i5 + 1 | 0 : HEAP32[i5 + 8 >> 2] | 0;
  i6 = i6 + -4 | 0;
  i5 = i4 + (i8 ? (i1 & 255) >>> 1 : i2) | 0;
  i2 = HEAP8[i4 >> 0] | 0;
  i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
  L10 : do if (i6 >>> 0 > i3 >>> 0) {
   while (1) {
    if (!i1 ? (i2 << 24 >> 24 | 0) != (HEAP32[i3 >> 2] | 0) : 0) break;
    i4 = (i5 - i4 | 0) > 1 ? i4 + 1 | 0 : i4;
    i3 = i3 + 4 | 0;
    i2 = HEAP8[i4 >> 0] | 0;
    i1 = i2 << 24 >> 24 < 1 | i2 << 24 >> 24 == 127;
    if (i3 >>> 0 >= i6 >>> 0) break L10;
   }
   HEAP32[i7 >> 2] = 4;
   break L1;
  } while (0);
  if (!i1 ? ((HEAP32[i6 >> 2] | 0) + -1 | 0) >>> 0 >= i2 << 24 >> 24 >>> 0 : 0) HEAP32[i7 >> 2] = 4;
 } while (0);
 return;
}

function __ZN3p2t5Sweep16NewFrontTriangleERNS_12SweepContextERNS_5PointERNS_4NodeE(i9, i8, i1, i7) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i10;
 i5 = __Znwj(36) | 0;
 i6 = i7 + 8 | 0;
 __ZN3p2t8TriangleC2ERNS_5PointES2_S2_(i5, i1, HEAP32[i7 >> 2] | 0, HEAP32[HEAP32[i6 >> 2] >> 2] | 0);
 __ZN3p2t8Triangle12MarkNeighborERS0_(i5, HEAP32[i7 + 4 >> 2] | 0);
 __ZN3p2t12SweepContext8AddToMapEPNS_8TriangleE(i8, i5);
 i3 = __Znwj(24) | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAPF64[i3 + 16 >> 3] = +HEAPF64[i1 + 8 >> 3];
 HEAP32[i4 >> 2] = i3;
 i1 = i9 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (HEAP32[i9 + 8 >> 2] | 0)) __ZNSt3__16vectorIPN3p2t4NodeENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i9, i4); else {
  HEAP32[i2 >> 2] = i3;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
 }
 HEAP32[i3 + 8 >> 2] = HEAP32[i6 >> 2];
 i1 = HEAP32[i4 >> 2] | 0;
 HEAP32[i1 + 12 >> 2] = i7;
 i7 = i1;
 HEAP32[(HEAP32[i6 >> 2] | 0) + 12 >> 2] = i7;
 HEAP32[i6 >> 2] = i7;
 if (__ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i9, i8, i5) | 0) {
  STACKTOP = i10;
  return i1 | 0;
 }
 __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i8, i5);
 STACKTOP = i10;
 return i1 | 0;
}

function ___stdio_read(i8, i7, i9) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i3 = i10 + 16 | 0;
 i2 = i10;
 i1 = i10 + 32 | 0;
 HEAP32[i1 >> 2] = i7;
 i4 = i1 + 4 | 0;
 i6 = i8 + 48 | 0;
 i11 = HEAP32[i6 >> 2] | 0;
 HEAP32[i4 >> 2] = i9 - ((i11 | 0) != 0 & 1);
 i5 = i8 + 44 | 0;
 HEAP32[i1 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 12 >> 2] = i11;
 if (!(HEAP32[1581] | 0)) {
  HEAP32[i3 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i3 + 4 >> 2] = i1;
  HEAP32[i3 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i3 | 0) | 0) | 0;
 } else {
  _pthread_cleanup_push(181, i8 | 0);
  HEAP32[i2 >> 2] = HEAP32[i8 + 60 >> 2];
  HEAP32[i2 + 4 >> 2] = i1;
  HEAP32[i2 + 8 >> 2] = 2;
  i1 = ___syscall_ret(___syscall145(145, i2 | 0) | 0) | 0;
  _pthread_cleanup_pop(0);
 }
 if ((i1 | 0) >= 1) {
  i4 = HEAP32[i4 >> 2] | 0;
  if (i1 >>> 0 > i4 >>> 0) {
   i3 = HEAP32[i5 >> 2] | 0;
   i2 = i8 + 4 | 0;
   HEAP32[i2 >> 2] = i3;
   HEAP32[i8 + 8 >> 2] = i3 + (i1 - i4);
   if (!(HEAP32[i6 >> 2] | 0)) i1 = i9; else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i7 + (i9 + -1) >> 0] = HEAP8[i3 >> 0] | 0;
    i1 = i9;
   }
  }
 } else {
  HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | i1 & 48 ^ 16;
  HEAP32[i8 + 8 >> 2] = 0;
  HEAP32[i8 + 4 >> 2] = 0;
 }
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i9 >> 2] | 0) - i2 | 0) / 12 | 0) + 1 | 0;
 if (i5 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i8 >> 2] | 0) - i4 | 0) / 12 | 0;
 if (i3 >>> 0 < 178956970) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 12 | 0;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 357913941;
  i4 = (i5 | 0) / 12 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 * 12 | 0) | 0;
  i3 = i5;
 }
 i12 = i6 + (i4 * 12 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 i12 = i6 + ((((i3 | 0) / -12 | 0) + i4 | 0) * 12 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i9 >> 2] = i6 + ((i4 + 1 | 0) * 12 | 0);
 HEAP32[i8 >> 2] = i6 + (i7 * 12 | 0);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorI7VtxWrapNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i9 >> 2] | 0) - i2 | 0) / 12 | 0) + 1 | 0;
 if (i5 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i8 >> 2] | 0) - i4 | 0) / 12 | 0;
 if (i3 >>> 0 < 178956970) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 12 | 0;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 357913941;
  i4 = (i5 | 0) / 12 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 * 12 | 0) | 0;
  i3 = i5;
 }
 i12 = i6 + (i4 * 12 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 i12 = i6 + ((((i3 | 0) / -12 | 0) + i4 | 0) * 12 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i9 >> 2] = i6 + ((i4 + 1 | 0) * 12 | 0);
 HEAP32[i8 >> 2] = i6 + (i7 * 12 | 0);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorI6VertexNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = (((HEAP32[i9 >> 2] | 0) - i2 | 0) / 12 | 0) + 1 | 0;
 if (i5 >>> 0 > 357913941) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = ((HEAP32[i8 >> 2] | 0) - i4 | 0) / 12 | 0;
 if (i3 >>> 0 < 178956970) {
  i3 = i3 << 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = (i5 | 0) / 12 | 0;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 357913941;
  i4 = (i5 | 0) / 12 | 0;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 * 12 | 0) | 0;
  i3 = i5;
 }
 i12 = i6 + (i4 * 12 | 0) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 i12 = i6 + ((((i3 | 0) / -12 | 0) + i4 | 0) * 12 | 0) | 0;
 _memcpy(i12 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i12;
 HEAP32[i9 >> 2] = i6 + ((i4 + 1 | 0) * 12 | 0);
 HEAP32[i8 >> 2] = i6 + (i7 * 12 | 0);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv(i1, i2, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i7 = i7 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i8 = i9;
 HEAP32[i7 >> 2] = HEAP32[HEAP32[i7 >> 2] >> 2];
 if (!((i1 | 0) == (i2 | 0) | (i2 | 0) == 736)) if (((i2 | 0) != 0 ? (i3 = ___dynamic_cast(i2, 648, 696, 0) | 0, (i3 | 0) != 0) : 0) ? (HEAP32[i3 + 8 >> 2] & ~HEAP32[i1 + 8 >> 2] | 0) == 0 : 0) {
  i2 = HEAP32[i1 + 12 >> 2] | 0;
  i1 = i3 + 12 | 0;
  if (!((i2 | 0) == 728 ? 1 : (i2 | 0) == (HEAP32[i1 >> 2] | 0))) if ((((i2 | 0) != 0 ? (i5 = ___dynamic_cast(i2, 648, 664, 0) | 0, (i5 | 0) != 0) : 0) ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) ? (i6 = ___dynamic_cast(i4, 648, 664, 0) | 0, (i6 | 0) != 0) : 0) {
   i1 = i8;
   i2 = i1 + 56 | 0;
   do {
    HEAP32[i1 >> 2] = 0;
    i1 = i1 + 4 | 0;
   } while ((i1 | 0) < (i2 | 0));
   HEAP32[i8 >> 2] = i6;
   HEAP32[i8 + 8 >> 2] = i5;
   HEAP32[i8 + 12 >> 2] = -1;
   HEAP32[i8 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 15](i6, i8, HEAP32[i7 >> 2] | 0, 1);
   if ((HEAP32[i8 + 24 >> 2] | 0) == 1) {
    HEAP32[i7 >> 2] = HEAP32[i8 + 16 >> 2];
    i1 = 1;
   } else i1 = 0;
  } else i1 = 0; else i1 = 1;
 } else i1 = 0; else i1 = 1;
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN3p2t5Sweep18LargeHole_DontFillEPNS_4NodeE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, i8 = 0, d9 = 0.0, d10 = 0.0, i11 = 0, i12 = 0, d13 = 0.0;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 i8 = HEAP32[i2 + 12 >> 2] | 0;
 i12 = HEAP32[i2 >> 2] | 0;
 i11 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i8 >> 2] | 0;
 d9 = +HEAPF64[i12 + 8 >> 3];
 d5 = +HEAPF64[i12 + 16 >> 3];
 d6 = +HEAPF64[i11 + 8 >> 3] - d9;
 d7 = +HEAPF64[i11 + 16 >> 3] - d5;
 d3 = +HEAPF64[i2 + 8 >> 3] - d9;
 d4 = +HEAPF64[i2 + 16 >> 3] - d5;
 d10 = +Math_atan2(+(d6 * d4 - d7 * d3), +(d6 * d3 + d7 * d4));
 if (!(d10 > 1.5707963267948966 | d10 < -1.5707963267948966)) {
  i12 = 0;
  return i12 | 0;
 }
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i12 = HEAP32[i1 >> 2] | 0, d13 = +HEAPF64[i12 + 8 >> 3] - d9, d10 = +HEAPF64[i12 + 16 >> 3] - d5, d10 = +Math_atan2(+(d4 * d13 - d3 * d10), +(d3 * d13 + d4 * d10)), !(d10 > 1.5707963267948966 | d10 < 0.0)) : 0) {
  i12 = 0;
  return i12 | 0;
 }
 i1 = HEAP32[i8 + 12 >> 2] | 0;
 if ((i1 | 0) != 0 ? (i12 = HEAP32[i1 >> 2] | 0, d10 = +HEAPF64[i12 + 8 >> 3] - d9, d13 = +HEAPF64[i12 + 16 >> 3] - d5, d13 = +Math_atan2(+(d6 * d13 - d7 * d10), +(d6 * d10 + d7 * d13)), !(d13 > 1.5707963267948966 | d13 < 0.0)) : 0) {
  i12 = 0;
  return i12 | 0;
 }
 i12 = 1;
 return i12 | 0;
}

function _update_goal(i1, d3, i2) {
 i1 = i1 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 if (!i1) return;
 i7 = ___dynamic_cast(i1, 32, 56, 0) | 0;
 if (!i7) return;
 i8 = HEAP32[711] | 0;
 i6 = i7 + 12 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 if (d3 >= 0.0) HEAPF32[i1 + 8 >> 2] = d3;
 if ((i2 | 0) > -1) HEAP32[i1 + 12 >> 2] = i2;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i4 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i2 | 0) != (i4 | 0)) {
  i5 = i8 + 72 | 0;
  i9 = HEAP32[i2 >> 2] | 0;
  i10 = i9 + 32 | 0;
  HEAP32[i10 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i10 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i10 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i10 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  __ZN8Document10updatePlanEP5Agent(i5, i9);
  i1 = i2 + 4 | 0;
  if ((i1 | 0) != (i4 | 0)) do {
   i2 = HEAP32[i6 >> 2] | 0;
   i10 = HEAP32[i1 >> 2] | 0;
   i9 = i10 + 32 | 0;
   HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
   HEAP32[i9 + 4 >> 2] = HEAP32[i2 + 4 >> 2];
   HEAP32[i9 + 8 >> 2] = HEAP32[i2 + 8 >> 2];
   HEAP32[i9 + 12 >> 2] = HEAP32[i2 + 12 >> 2];
   __ZN8Document10updatePlanEP5Agent(i5, i10);
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) != (i4 | 0));
  i1 = HEAP32[i6 >> 2] | 0;
 }
 HEAP32[i8 + 312 >> 2] = 0;
 _emscripten_asm_const_3(13, i7 | 0, +(+HEAPF32[i1 + 8 >> 2]), HEAP32[i1 + 12 >> 2] | 0) | 0;
 return;
}

function __ZN7NavCtrl7addGoalERK4Vec2fi(i9, i1, d2, i3) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 i1 = __ZN8Document7addGoalERK4Vec2f9EGoalType(i9 + 72 | 0, i1, d2, i3) | 0;
 i7 = __Znwj(16) | 0;
 HEAP32[i7 + 4 >> 2] = i9;
 HEAP8[i7 + 8 >> 0] = 1;
 HEAP32[i7 >> 2] = 2896;
 HEAP32[i7 + 12 >> 2] = i1;
 _emscripten_asm_const_6(6, i7 | 0, 25, +(+HEAPF32[i1 >> 2]), +(+HEAPF32[i1 + 4 >> 2]), HEAP32[i1 + 12 >> 2] | 0, +(+HEAPF32[i1 + 8 >> 2])) | 0;
 HEAP32[i8 >> 2] = i7;
 i1 = i7;
 i3 = __Znwj(16) | 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 >> 2] = 3324;
 HEAP32[i3 + 12 >> 2] = i1;
 i4 = i8 + 4 | 0;
 HEAP32[i4 >> 2] = i3;
 i5 = i9 + 40 | 0;
 i6 = HEAP32[i5 >> 2] | 0;
 if (i6 >>> 0 < (HEAP32[i9 + 44 >> 2] | 0) >>> 0) {
  HEAP32[i6 >> 2] = i1;
  HEAP32[i6 + 4 >> 2] = i3;
  HEAP32[i8 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
  HEAP32[i5 >> 2] = i6 + 8;
  STACKTOP = i10;
  return i7 | 0;
 }
 __ZNSt3__16vectorINS_10shared_ptrI8GoalItemEENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i9 + 36 | 0, i8);
 i1 = HEAP32[i4 >> 2] | 0;
 if (!i1) {
  STACKTOP = i10;
  return i7 | 0;
 }
 __ZNSt3__119__shared_weak_count16__release_sharedEv(i1);
 STACKTOP = i10;
 return i7 | 0;
}

function _mbtowc(i2, i6, i4) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i4 = i4 | 0;
 var i1 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 L1 : do if (!i6) i1 = 0; else {
  do if (i4) {
   i5 = (i2 | 0) == 0 ? i1 : i2;
   i1 = HEAP8[i6 >> 0] | 0;
   i2 = i1 & 255;
   if (i1 << 24 >> 24 > -1) {
    HEAP32[i5 >> 2] = i2;
    i1 = i1 << 24 >> 24 != 0 & 1;
    break L1;
   }
   i1 = i2 + -194 | 0;
   if (i1 >>> 0 <= 50) {
    i2 = i6 + 1 | 0;
    i3 = HEAP32[6368 + (i1 << 2) >> 2] | 0;
    if (i4 >>> 0 < 4 ? (i3 & -2147483648 >>> ((i4 * 6 | 0) + -6 | 0) | 0) != 0 : 0) break;
    i1 = HEAPU8[i2 >> 0] | 0;
    i4 = i1 >>> 3;
    if ((i4 + -16 | i4 + (i3 >> 26)) >>> 0 <= 7) {
     i1 = i1 + -128 | i3 << 6;
     if ((i1 | 0) >= 0) {
      HEAP32[i5 >> 2] = i1;
      i1 = 2;
      break L1;
     }
     i2 = HEAPU8[i6 + 2 >> 0] | 0;
     if ((i2 & 192 | 0) == 128) {
      i2 = i2 + -128 | i1 << 6;
      if ((i2 | 0) >= 0) {
       HEAP32[i5 >> 2] = i2;
       i1 = 3;
       break L1;
      }
      i1 = HEAPU8[i6 + 3 >> 0] | 0;
      if ((i1 & 192 | 0) == 128) {
       HEAP32[i5 >> 2] = i1 + -128 | i2 << 6;
       i1 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  i1 = -1;
 } while (0);
 STACKTOP = i7;
 return i1 | 0;
}

function __ZNSt3__16locale5__impC2ERKS1_PNS0_5facetEl(i8, i1, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 HEAP32[i8 + 4 >> 2] = -1;
 HEAP32[i8 >> 2] = 13408;
 i3 = i8 + 8 | 0;
 i4 = i1 + 12 | 0;
 i5 = i1 + 8 | 0;
 i2 = ((HEAP32[i4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) >> 2) + 1 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i3, i2 >>> 0 > 28 ? i2 : 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i8 + 144 | 0, 29132, 1);
 __ZNSt3__114__shared_count12__add_sharedEv(i6);
 if ((i8 | 0) != (i1 | 0)) __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6assignIPS3_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(i3, HEAP32[i5 >> 2] | 0, HEAP32[i4 >> 2] | 0);
 if ((HEAP32[i4 >> 2] | 0) != (HEAP32[i5 >> 2] | 0)) {
  i2 = 0;
  do {
   i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + (i2 << 2) >> 2] | 0;
   if (i1) __ZNSt3__114__shared_count12__add_sharedEv(i1);
   i2 = i2 + 1 | 0;
  } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) >> 2 >>> 0);
 }
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i8, i6, i7);
 if (i6) __ZNSt3__114__shared_count16__release_sharedEv(i6) | 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi(i9, i7) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i8 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i10 + 24 | 0;
 i1 = i10 + 20 | 0;
 i3 = i10 + 16 | 0;
 i4 = i10 + 12 | 0;
 i11 = i10 + 28 | 0;
 i6 = i10 + 8 | 0;
 i8 = i10 + 4 | 0;
 i5 = i10;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i11, i9, 0);
 if (HEAP8[i11 >> 0] | 0) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i9 + (HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i12 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 12472) | 0;
  i11 = HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0;
  i13 = HEAP32[(HEAP32[i12 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i9 + (i11 + 24) >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  FUNCTION_TABLE_iiiiiii[i13 & 63](i12, i1, i2, i9 + i11 | 0, i6, i8) | 0;
  __ZNSt3__16localeD2Ev(i5);
  HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
  i8 = HEAP32[(HEAP32[i9 >> 2] | 0) + -12 >> 2] | 0;
  i11 = i9 + (i8 + 16) | 0;
  HEAP32[i11 >> 2] = HEAP32[i11 >> 2] | HEAP32[i6 >> 2] | (HEAP32[i9 + (i8 + 24) >> 2] | 0) == 0;
 }
 STACKTOP = i10;
 return i9 | 0;
}

function __ZN4Mesh5clearEv(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i1 = HEAP32[i9 >> 2] | 0;
 i2 = i9 + 4 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~(((i3 + -12 - i1 | 0) >>> 0) / 12 | 0) * 12 | 0);
 i3 = HEAP32[i9 + 12 >> 2] | 0;
 i1 = i9 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -36 - i3 | 0) >>> 0) / 36 | 0) * 36 | 0);
 i7 = HEAP32[i9 + 24 >> 2] | 0;
 i8 = i9 + 28 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i1 | 0) != (i7 | 0)) do {
  i2 = i1 + -28 | 0;
  HEAP32[i8 >> 2] = i2;
  i3 = HEAP32[i1 + -16 >> 2] | 0;
  i4 = i3;
  if (i3) {
   i5 = i1 + -12 | 0;
   i6 = HEAP32[i5 >> 2] | 0;
   if ((i6 | 0) != (i3 | 0)) HEAP32[i5 >> 2] = i6 + (~((i6 + -4 - i4 | 0) >>> 2) << 2);
   __ZdlPv(i3);
  }
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = i3;
  if (i3) {
   i1 = i1 + -24 | 0;
   i2 = HEAP32[i1 >> 2] | 0;
   if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -4 - i4 | 0) >>> 2) << 2);
   __ZdlPv(i3);
  }
  i1 = HEAP32[i8 >> 2] | 0;
 } while ((i1 | 0) != (i7 | 0));
 i3 = HEAP32[i9 + 36 >> 2] | 0;
 i1 = i9 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 HEAP32[i1 >> 2] = i2 + (~(((i2 + -52 - i3 | 0) >>> 0) / 52 | 0) * 52 | 0);
 return;
}

function __ZNSt3__16vectorI9AgentDataNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 4) + 1 | 0;
 if (i5 >>> 0 > 268435455) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 4 >>> 0 < 134217727) {
  i3 = i3 >> 3;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 4;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 268435455;
  i4 = i5 >> 4;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 4) | 0;
  i3 = i5;
 }
 i12 = i6 + (i4 << 4) | 0;
 HEAP32[i12 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i12 + 4 >> 2] = HEAP32[i10 + 4 >> 2];
 HEAP32[i12 + 8 >> 2] = HEAP32[i10 + 8 >> 2];
 HEAP32[i12 + 12 >> 2] = HEAP32[i10 + 12 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 4);
 HEAP32[i8 >> 2] = i6 + (i7 << 4);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 8 | 0;
 i3 = i10 + 4 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP32[i3 >> 2] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 4 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi(i5, i1) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i9 = i10 + 16 | 0;
 i8 = i10 + 4 | 0;
 i3 = i10 + 8 | 0;
 i4 = i10;
 i6 = i5 + 52 | 0;
 i2 = (HEAP8[i6 >> 0] | 0) != 0;
 L1 : do if ((i1 | 0) == -1) if (i2) i1 = -1; else {
  i1 = HEAP32[i5 + 48 >> 2] | 0;
  HEAP8[i6 >> 0] = (i1 | 0) != -1 & 1;
 } else {
  i7 = i5 + 48 | 0;
  L5 : do if (i2) {
   HEAP8[i3 >> 0] = HEAP32[i7 >> 2];
   i2 = HEAP32[i5 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[i2 >> 2] | 0) + 12 >> 2] & 15](i2, HEAP32[i5 + 40 >> 2] | 0, i3, i3 + 1 | 0, i4, i9, i9 + 8 | 0, i8) | 0) {
   case 1:
   case 2:
    {
     i1 = -1;
     break L1;
    }
   case 3:
    {
     HEAP8[i9 >> 0] = HEAP32[i7 >> 2];
     HEAP32[i8 >> 2] = i9 + 1;
     break;
    }
   default:
    {}
   }
   i2 = i5 + 32 | 0;
   while (1) {
    i3 = HEAP32[i8 >> 2] | 0;
    if (i3 >>> 0 <= i9 >>> 0) break L5;
    i5 = i3 + -1 | 0;
    HEAP32[i8 >> 2] = i5;
    if ((_ungetc(HEAP8[i5 >> 0] | 0, HEAP32[i2 >> 2] | 0) | 0) == -1) {
     i1 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[i7 >> 2] = i1;
  HEAP8[i6 >> 0] = 1;
 } while (0);
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 11) i6 = 10; else i6 = (i2 + 16 & -16) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 10) {
   i2 = __Znwj(i6 + 1 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 1 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 1 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _memcpy(i2 | 0, i4 | 0, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE15__insert_uniqueERKS6_(i6, i7, i3) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i8;
 i4 = __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE12__find_equalIS6_EERPNS_16__tree_node_baseIPvEESG_RKT_(i7, i2, i3) | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 if (i1) {
  i5 = 0;
  i7 = i1;
  HEAP32[i6 >> 2] = i7;
  i7 = i6 + 4 | 0;
  HEAP8[i7 >> 0] = i5;
  STACKTOP = i8;
  return;
 }
 i5 = __Znwj(28) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i5 + 16 | 0, i3);
 i1 = HEAP32[i2 >> 2] | 0;
 HEAP32[i5 >> 2] = 0;
 HEAP32[i5 + 4 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i5;
 i1 = HEAP32[HEAP32[i7 >> 2] >> 2] | 0;
 if (!i1) i1 = i5; else {
  HEAP32[i7 >> 2] = i1;
  i1 = HEAP32[i4 >> 2] | 0;
 }
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[i7 + 4 >> 2] | 0, i1);
 i4 = i7 + 8 | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
 i4 = 1;
 i7 = i5;
 HEAP32[i6 >> 2] = i7;
 i7 = i6 + 4 | 0;
 HEAP8[i7 >> 0] = i4;
 STACKTOP = i8;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj(i8, i2) {
 i8 = i8 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 if (i2 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i8);
 i1 = HEAP8[i8 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i8 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i7 = (i1 & 255) >>> 1; else i7 = HEAP32[i8 + 4 >> 2] | 0;
 i2 = i7 >>> 0 > i2 >>> 0 ? i7 : i2;
 if (i2 >>> 0 < 2) i6 = 1; else i6 = (i2 + 4 & -4) + -1 | 0;
 do if ((i6 | 0) != (i3 | 0)) {
  do if ((i6 | 0) != 1) {
   i2 = __Znwj((i6 << 2) + 4 | 0) | 0;
   if (!(i1 & 1)) {
    i3 = 1;
    i4 = i8 + 4 | 0;
    i5 = 0;
    break;
   } else {
    i3 = 1;
    i4 = HEAP32[i8 + 8 >> 2] | 0;
    i5 = 1;
    break;
   }
  } else {
   i2 = i8 + 4 | 0;
   i3 = 0;
   i4 = HEAP32[i8 + 8 >> 2] | 0;
   i5 = 1;
  } while (0);
  if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i8 + 4 >> 2] | 0;
  _wmemcpy(i2, i4, i1 + 1 | 0) | 0;
  if (i5) __ZdlPv(i4);
  if (i3) {
   HEAP32[i8 >> 2] = i6 + 1 | 1;
   HEAP32[i8 + 4 >> 2] = i7;
   HEAP32[i8 + 8 >> 2] = i2;
   break;
  } else {
   HEAP8[i8 >> 0] = i7 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__16vectorI12MultiSegmentNS_9allocatorIS1_EEE8__appendEj(i12, i11) {
 i12 = i12 | 0;
 i11 = i11 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i13 = 0;
 i9 = i12 + 8 | 0;
 i3 = HEAP32[i9 >> 2] | 0;
 i10 = i12 + 4 | 0;
 i1 = HEAP32[i10 >> 2] | 0;
 i2 = i1;
 if ((i3 - i2 | 0) >>> 0 >= i11 >>> 0) {
  HEAP32[i10 >> 2] = i1 + i11;
  return;
 }
 i1 = HEAP32[i12 >> 2] | 0;
 i4 = i1;
 i2 = i2 - i4 + i11 | 0;
 if ((i2 | 0) < 0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i12);
  i4 = HEAP32[i12 >> 2] | 0;
  i3 = HEAP32[i9 >> 2] | 0;
  i8 = i4;
 } else i8 = i1;
 i7 = i8;
 i1 = i3 - i7 | 0;
 if (i1 >>> 0 < 1073741823) {
  i1 = i1 << 1;
  i1 = i1 >>> 0 < i2 >>> 0 ? i2 : i1;
  i3 = HEAP32[i10 >> 2] | 0;
  i2 = i3 - i7 | 0;
  if (!i1) {
   i6 = 0;
   i5 = 0;
   i1 = i3;
  } else i13 = 8;
 } else {
  i2 = HEAP32[i10 >> 2] | 0;
  i1 = 2147483647;
  i3 = i2;
  i2 = i2 - i7 | 0;
  i13 = 8;
 }
 if ((i13 | 0) == 8) {
  i6 = i1;
  i5 = __Znwj(i1) | 0;
  i1 = i3;
 }
 i7 = i1 - i7 | 0;
 i13 = i5 + (i2 - i7) | 0;
 _memcpy(i13 | 0, i8 | 0, i7 | 0) | 0;
 HEAP32[i12 >> 2] = i13;
 HEAP32[i10 >> 2] = i5 + (i2 + i11);
 HEAP32[i9 >> 2] = i5 + i6;
 if (!i4) return;
 __ZdlPv(i4);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(i8, i1, i3, i5, i4, i2) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0, i9 = 0, i10 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i7;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 i9 = HEAP8[i2 >> 0] | 0;
 i10 = (i9 & 1) == 0;
 i1 = i10 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0;
 i9 = i10 ? (i9 & 255) >>> 1 : HEAP32[i2 + 4 >> 2] | 0;
 i2 = i1 + i9 | 0;
 if ((i9 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i6, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 i1 = _catgets((i3 | 0) == -1 ? -1 : i3 << 1, i5, i4, (HEAP8[i6 >> 0] & 1) == 0 ? i6 + 1 | 0 : HEAP32[i6 + 8 >> 2] | 0) | 0;
 HEAP32[i8 >> 2] = 0;
 HEAP32[i8 + 4 >> 2] = 0;
 HEAP32[i8 + 8 >> 2] = 0;
 i10 = _strlen(i1) | 0;
 i2 = i1 + i10 | 0;
 if ((i10 | 0) > 0) do {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i8, HEAP8[i1 >> 0] | 0);
  i1 = i1 + 1 | 0;
 } while (i1 >>> 0 < i2 >>> 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i6);
 STACKTOP = i7;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i7 = i9;
 i4 = HEAP32[i8 + 8 >> 2] | 0;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 if (i4 - i1 >> 2 >>> 0 < i6 >>> 0) {
  i2 = HEAP32[i8 >> 2] | 0;
  i5 = i1 - i2 >> 2;
  i3 = i5 + i6 | 0;
  if (i3 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i8);
  i1 = i4 - i2 | 0;
  if (i1 >> 2 >>> 0 < 536870911) {
   i1 = i1 >> 1;
   i1 = i1 >>> 0 < i3 >>> 0 ? i3 : i1;
  } else i1 = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i7, i1, i5, i8 + 16 | 0);
  i5 = i7 + 8 | 0;
  i4 = HEAP32[i5 >> 2] | 0;
  _memset(i4 | 0, 0, i6 << 2 | 0) | 0;
  HEAP32[i5 >> 2] = i4 + (i6 << 2);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i8, i7);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i7);
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i8, i6);
 STACKTOP = i9;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i10, i5, i7, i8, i6) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i11 + 4 | 0;
 i4 = i11;
 i9 = i1 + 8 | 0;
 i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i9 >> 2] | 0) + 8 >> 2] & 127](i9) | 0;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) i2 = (i1 & 255) >>> 1; else i2 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = HEAP8[i9 + 12 >> 0] | 0;
 if (!(i1 & 1)) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i9 + 16 >> 2] | 0;
 do if ((i2 | 0) != (0 - i1 | 0)) {
  HEAP32[i4 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
  i1 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i5, i3, i9, i9 + 24 | 0, i6, i8, 0) | 0;
  i2 = HEAP32[i10 >> 2] | 0;
  if ((i1 | 0) == (i9 | 0) & (i2 | 0) == 12) {
   HEAP32[i10 >> 2] = 0;
   break;
  }
  if ((i2 | 0) < 12 & (i1 - i9 | 0) == 12) HEAP32[i10 >> 2] = i2 + 12;
 } else HEAP32[i8 >> 2] = HEAP32[i8 >> 2] | 4; while (0);
 STACKTOP = i11;
 return;
}

function __ZL25default_terminate_handlerv() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i7 = i5 + 32 | 0;
 i3 = i5 + 24 | 0;
 i8 = i5 + 16 | 0;
 i6 = i5;
 i5 = i5 + 36 | 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if ((i1 | 0) != 0 ? (i4 = HEAP32[i1 >> 2] | 0, (i4 | 0) != 0) : 0) {
  i1 = i4 + 48 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  if (!((i2 & -256 | 0) == 1126902528 & (i1 | 0) == 1129074247)) {
   HEAP32[i3 >> 2] = HEAP32[1580];
   _abort_message(22177, i3);
  }
  if ((i2 | 0) == 1126902529 & (i1 | 0) == 1129074247) i1 = HEAP32[i4 + 44 >> 2] | 0; else i1 = i4 + 80 | 0;
  HEAP32[i5 >> 2] = i1;
  i4 = HEAP32[i4 >> 2] | 0;
  i1 = HEAP32[i4 + 4 >> 2] | 0;
  if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[616 >> 2] | 0) + 16 >> 2] & 31](616, i4, i5) | 0) {
   i8 = HEAP32[i5 >> 2] | 0;
   i5 = HEAP32[1580] | 0;
   i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i8 >> 2] | 0) + 8 >> 2] & 127](i8) | 0;
   HEAP32[i6 >> 2] = i5;
   HEAP32[i6 + 4 >> 2] = i1;
   HEAP32[i6 + 8 >> 2] = i8;
   _abort_message(22091, i6);
  } else {
   HEAP32[i8 >> 2] = HEAP32[1580];
   HEAP32[i8 + 4 >> 2] = i1;
   _abort_message(22136, i8);
  }
 }
 _abort_message(22215, i7);
}

function __ZNSt3__16vectorINS_4pairIfP6ObjectEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 3) + 1 | 0;
 if (i5 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 3 >>> 0 < 268435455) {
  i3 = i3 >> 2;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 3;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 536870911;
  i4 = i5 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 3) | 0;
  i3 = i5;
 }
 i5 = i10;
 i10 = HEAP32[i5 + 4 >> 2] | 0;
 i12 = i6 + (i4 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 3);
 HEAP32[i8 >> 2] = i6 + (i7 << 3);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 if (i2 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i2 & 1024) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i7 = i2 & 260;
 i5 = i2 >>> 14;
 i8 = (i7 | 0) == 260;
 if (i8) i6 = 0; else {
  HEAP8[i1 >> 0] = 46;
  HEAP8[i1 + 1 >> 0] = 42;
  i1 = i1 + 2 | 0;
  i6 = 1;
 }
 i2 = HEAP8[i4 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i3 = i1;
  while (1) {
   i4 = i4 + 1 | 0;
   i1 = i3 + 1 | 0;
   HEAP8[i3 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) break; else i3 = i1;
  }
 }
 L14 : do switch (i7 | 0) {
 case 4:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 102;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 70;
   break L14;
  }
 case 256:
  if (!(i5 & 1)) {
   HEAP8[i1 >> 0] = 101;
   break L14;
  } else {
   HEAP8[i1 >> 0] = 69;
   break L14;
  }
 default:
  {
   i2 = (i5 & 1 | 0) != 0;
   if (i8) if (i2) {
    HEAP8[i1 >> 0] = 65;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 97;
    break L14;
   } else if (i2) {
    HEAP8[i1 >> 0] = 71;
    break L14;
   } else {
    HEAP8[i1 >> 0] = 103;
    break L14;
   }
  }
 } while (0);
 return i6 | 0;
}

function __ZN8GoalItem6setPosERK4Vec2(i6, i1) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, d7 = 0.0, d8 = 0.0, i9 = 0, i10 = 0, i11 = 0;
 i5 = i6 + 12 | 0;
 i3 = i1;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i1 + 4 >> 2] = i2;
 i1 = HEAP32[i5 >> 2] | 0;
 i2 = HEAP32[i1 + 16 >> 2] | 0;
 i3 = HEAP32[i1 + 20 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) {
  i5 = i1;
  d8 = +HEAPF32[i5 >> 2];
  i5 = i5 + 4 | 0;
  d7 = +HEAPF32[i5 >> 2];
  _emscripten_asm_const_3(1, i6 | 0, +d8, +d7) | 0;
  return;
 }
 i4 = i6 + 4 | 0;
 do {
  i10 = HEAP32[i2 >> 2] | 0;
  i9 = HEAP32[i4 >> 2] | 0;
  i11 = i10 + 32 | 0;
  HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i11 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i11 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
  HEAP32[i11 + 12 >> 2] = HEAP32[i1 + 12 >> 2];
  HEAP32[i10 + 48 >> 2] = i1;
  HEAP8[i10 + 88 >> 0] = 0;
  HEAP8[i10 + 89 >> 0] = 0;
  __ZN8Document10updatePlanEP5Agent(i9 + 72 | 0, i10);
  HEAP32[i9 + 312 >> 2] = 0;
  i2 = i2 + 4 | 0;
  i1 = HEAP32[i5 >> 2] | 0;
 } while ((i2 | 0) != (i3 | 0));
 d7 = +HEAPF32[i1 >> 2];
 i11 = i1 + 4 | 0;
 d8 = +HEAPF32[i11 >> 2];
 _emscripten_asm_const_3(1, i6 | 0, +d7, +d8) | 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERf(i8, i7) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i2 = i9 + 20 | 0;
 i1 = i9 + 16 | 0;
 i3 = i9 + 12 | 0;
 i4 = i9 + 8 | 0;
 i10 = i9 + 24 | 0;
 i6 = i9 + 4 | 0;
 i5 = i9;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b(i10, i8, 0);
 if (HEAP8[i10 >> 0] | 0) {
  HEAP32[i6 >> 2] = 0;
  HEAP32[i5 >> 2] = __ZNKSt3__18ios_base6getlocEv(i8 + (HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
  i11 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 12472) | 0;
  i10 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
  i12 = HEAP32[(HEAP32[i11 >> 2] | 0) + 40 >> 2] | 0;
  HEAP32[i3 >> 2] = HEAP32[i8 + (i10 + 24) >> 2];
  HEAP32[i4 >> 2] = 0;
  HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
  HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
  FUNCTION_TABLE_iiiiiii[i12 & 63](i11, i1, i2, i8 + i10 | 0, i6, i7) | 0;
  __ZNSt3__16localeD2Ev(i5);
  i7 = HEAP32[(HEAP32[i8 >> 2] | 0) + -12 >> 2] | 0;
  i10 = i8 + (i7 + 16) | 0;
  HEAP32[i10 >> 2] = HEAP32[i10 >> 2] | HEAP32[i6 >> 2] | (HEAP32[i8 + (i7 + 24) >> 2] | 0) == 0;
 }
 STACKTOP = i9;
 return i8 | 0;
}

function __ZNSt3__16vectorI9BHalfEdgeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 3) + 1 | 0;
 if (i5 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 3 >>> 0 < 268435455) {
  i3 = i3 >> 2;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 3;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 536870911;
  i4 = i5 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 3) | 0;
  i3 = i5;
 }
 i5 = i10;
 i10 = HEAP32[i5 + 4 >> 2] | 0;
 i12 = i6 + (i4 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 3);
 HEAP32[i8 >> 2] = i6 + (i7 << 3);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 1;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 >> 2;
 do if (i6) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 4 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i7 + ((i8 - i3 | 0) >>> 2) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + (i7 << 2) | 0;
   while (1) {
    HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
    i1 = i1 + 4 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 4 | 0;
   }
  }
  HEAP32[i4 + (i3 << 2) >> 2] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function __ZNSt3__16vectorI8PrioNodeNS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 3) + 1 | 0;
 if (i5 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 3 >>> 0 < 268435455) {
  i3 = i3 >> 2;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 3;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 536870911;
  i4 = i5 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 3) | 0;
  i3 = i5;
 }
 i5 = i10;
 i10 = HEAP32[i5 + 4 >> 2] | 0;
 i12 = i6 + (i4 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 3);
 HEAP32[i8 >> 2] = i6 + (i7 << 3);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEE21__push_back_slow_pathIS1_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 3) + 1 | 0;
 if (i5 >>> 0 > 536870911) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 3 >>> 0 < 268435455) {
  i3 = i3 >> 2;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 3;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 536870911;
  i4 = i5 >> 3;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 3) | 0;
  i3 = i5;
 }
 i5 = i10;
 i10 = HEAP32[i5 + 4 >> 2] | 0;
 i12 = i6 + (i4 << 3) | 0;
 HEAP32[i12 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i12 + 4 >> 2] = i10;
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 3);
 HEAP32[i8 >> 2] = i6 + (i7 << 3);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_(i9, i5, i8) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i3 = i5;
 i1 = HEAP8[i9 >> 0] | 0;
 if (!(i1 & 1)) {
  i2 = 10;
  i7 = (i1 & 255) >>> 1;
 } else {
  i1 = HEAP32[i9 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i7 = HEAP32[i9 + 4 >> 2] | 0;
  i1 = i1 & 255;
 }
 i6 = i8 - i3 | 0;
 do if ((i8 | 0) != (i5 | 0)) {
  if ((i2 - i7 | 0) >>> 0 < i6 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i9, i2, i7 + i6 - i2 | 0, i7, i7, 0, 0);
   i1 = HEAP8[i9 >> 0] | 0;
  }
  if (!(i1 & 1)) i4 = i9 + 1 | 0; else i4 = HEAP32[i9 + 8 >> 2] | 0;
  i3 = i8 + (i7 - i3) | 0;
  if ((i5 | 0) != (i8 | 0)) {
   i1 = i5;
   i2 = i4 + i7 | 0;
   while (1) {
    HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
    i1 = i1 + 1 | 0;
    if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 1 | 0;
   }
  }
  HEAP8[i4 + i3 >> 0] = 0;
  i1 = i7 + i6 | 0;
  if (!(HEAP8[i9 >> 0] & 1)) {
   HEAP8[i9 >> 0] = i1 << 1;
   break;
  } else {
   HEAP32[i9 + 4 >> 2] = i1;
   break;
  }
 } while (0);
 return i9 | 0;
}

function __ZN3p2t5Sweep11SweepPointsERNS_12SweepContextE(i10, i9) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 i7 = i9 + 60 | 0;
 i8 = i9 + 56 | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (((HEAP32[i7 >> 2] | 0) - i1 | 0) > 4) i6 = 1; else return;
 do {
  i2 = HEAP32[i1 + (i6 << 2) >> 2] | 0;
  i1 = __ZN3p2t12SweepContext10LocateNodeERNS_5PointE(i9, i2) | 0;
  i5 = __ZN3p2t5Sweep16NewFrontTriangleERNS_12SweepContextERNS_5PointERNS_4NodeE(i10, i9, i2, i1) | 0;
  if (+HEAPF64[i2 + 8 >> 3] <= +HEAPF64[(HEAP32[i1 >> 2] | 0) + 8 >> 3] + 1.0e-012) __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i10, i9, i1);
  __ZN3p2t5Sweep18FillAdvancingFrontERNS_12SweepContextERNS_4NodeE(i10, i9, i5);
  i4 = i2 + 28 | 0;
  i3 = i2 + 24 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((HEAP32[i4 >> 2] | 0) != (i1 | 0)) {
   i2 = 0;
   do {
    __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextEPNS_4EdgeEPNS_4NodeE(i10, i9, HEAP32[i1 + (i2 << 2) >> 2] | 0, i5);
    i2 = i2 + 1 | 0;
    i1 = HEAP32[i3 >> 2] | 0;
   } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) - i1 >> 2 >>> 0);
  }
  i6 = i6 + 1 | 0;
  i1 = HEAP32[i8 >> 2] | 0;
 } while ((i6 | 0) < ((HEAP32[i7 >> 2] | 0) - i1 >> 2 | 0));
 return;
}

function __ZN8Document7addGoalERK4Vec2f9EGoalType(i3, i1, d5, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 d5 = +d5;
 i2 = i2 | 0;
 var i4 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i8;
 i7 = __Znwj(28) | 0;
 i9 = i1;
 i6 = HEAP32[i9 + 4 >> 2] | 0;
 i1 = i7;
 HEAP32[i1 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i1 + 4 >> 2] = i6;
 HEAPF32[i7 + 8 >> 2] = d5;
 HEAP32[i7 + 12 >> 2] = i2;
 HEAP32[i7 + 16 >> 2] = 0;
 HEAP32[i7 + 20 >> 2] = 0;
 HEAP32[i7 + 24 >> 2] = 0;
 HEAP32[i4 >> 2] = i7;
 i1 = i3 + 196 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i2 >>> 0 < (HEAP32[i3 + 200 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = i7;
  HEAP32[i1 >> 2] = i2 + 4;
  HEAP32[i4 >> 2] = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 __ZNSt3__16vectorINS_10unique_ptrI4GoalNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i3 + 192 | 0, i4);
 i6 = HEAP32[i4 >> 2] | 0;
 HEAP32[i4 >> 2] = 0;
 if (!i6) {
  STACKTOP = i8;
  return i7 | 0;
 }
 i1 = HEAP32[i6 + 16 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i6 + 20 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 __ZdlPv(i6);
 STACKTOP = i8;
 return i7 | 0;
}

function __ZN4Mesh14findContainingERK4Vec2RNSt3__16vectorIS0_NS3_9allocatorIS0_EEEE(i2, i3, i5) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, d4 = 0.0, i6 = 0, d7 = 0.0, d8 = 0.0, d9 = 0.0, d10 = 0.0, d11 = 0.0, d12 = 0.0, d13 = 0.0, i14 = 0;
 i1 = HEAP32[i2 + 12 >> 2] | 0;
 i6 = HEAP32[i2 + 16 >> 2] | 0;
 if ((i1 | 0) == (i6 | 0)) {
  i6 = 0;
  return i6 | 0;
 }
 d7 = +HEAPF32[i3 >> 2];
 d4 = +HEAPF32[i3 + 4 >> 2];
 i2 = HEAP32[i5 >> 2] | 0;
 while (1) {
  i14 = HEAP32[HEAP32[i1 >> 2] >> 2] | 0;
  i3 = HEAP32[HEAP32[i1 + 4 >> 2] >> 2] | 0;
  i5 = HEAP32[HEAP32[i1 + 8 >> 2] >> 2] | 0;
  d8 = +HEAPF32[i2 + (i14 << 3) >> 2];
  d10 = +HEAPF32[i2 + (i14 << 3) + 4 >> 2];
  d13 = +HEAPF32[i2 + (i3 << 3) >> 2];
  d12 = +HEAPF32[i2 + (i3 << 3) + 4 >> 2];
  d9 = +HEAPF32[i2 + (i5 << 3) >> 2];
  d11 = +HEAPF32[i2 + (i5 << 3) + 4 >> 2];
  i5 = (d7 - d9) * (d12 - d11) - (d13 - d9) * (d4 - d11) < 0.0;
  if (!((d7 - d13) * (d10 - d12) - (d8 - d13) * (d4 - d12) < 0.0 ^ i5) ? !(i5 ^ (d7 - d8) * (d11 - d10) - (d4 - d10) * (d9 - d8) < 0.0) : 0) {
   i2 = 6;
   break;
  }
  i1 = i1 + 36 | 0;
  if ((i1 | 0) == (i6 | 0)) {
   i1 = 0;
   i2 = 6;
   break;
  }
 }
 if ((i2 | 0) == 6) return i1 | 0;
 return 0;
}

function __ZN3p2t5Sweep18FillAdvancingFrontERNS_12SweepContextERNS_4NodeE(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i3 = i4 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 i1 = i2 + 8 | 0;
 L1 : do if (HEAP32[i1 >> 2] | 0) do {
  if (__ZN3p2t5Sweep18LargeHole_DontFillEPNS_4NodeE(i6, i2) | 0) break L1;
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i6, i5, i2);
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = i2 + 8 | 0;
 } while ((HEAP32[i1 >> 2] | 0) != 0); while (0);
 i2 = HEAP32[i4 + 12 >> 2] | 0;
 i1 = i2 + 12 | 0;
 L6 : do if (HEAP32[i1 >> 2] | 0) do {
  if (__ZN3p2t5Sweep18LargeHole_DontFillEPNS_4NodeE(i6, i2) | 0) break L6;
  __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i6, i5, i2);
  i2 = HEAP32[i1 >> 2] | 0;
  i1 = i2 + 12 | 0;
 } while ((HEAP32[i1 >> 2] | 0) != 0); while (0);
 i1 = HEAP32[i3 >> 2] | 0;
 if (!i1) return;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (!i1) return;
 i2 = HEAP32[i4 >> 2] | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!(+Math_atan2(+(+HEAPF64[i2 + 16 >> 3] - +HEAPF64[i3 + 16 >> 3]), +(+HEAPF64[i2 + 8 >> 3] - +HEAPF64[i3 + 8 >> 3])) < 2.356194490192345)) return;
 __ZN3p2t5Sweep9FillBasinERNS_12SweepContextERNS_4NodeE(i6, i5, i4);
 return;
}

function _memchr(i1, i5, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 i6 = i5 & 255;
 i3 = (i2 | 0) != 0;
 L1 : do if (i3 & (i1 & 3 | 0) != 0) {
  i4 = i5 & 255;
  while (1) {
   if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) {
    i7 = 6;
    break L1;
   }
   i1 = i1 + 1 | 0;
   i2 = i2 + -1 | 0;
   i3 = (i2 | 0) != 0;
   if (!(i3 & (i1 & 3 | 0) != 0)) {
    i7 = 5;
    break;
   }
  }
 } else i7 = 5; while (0);
 if ((i7 | 0) == 5) if (i3) i7 = 6; else i2 = 0;
 L8 : do if ((i7 | 0) == 6) {
  i4 = i5 & 255;
  if ((HEAP8[i1 >> 0] | 0) != i4 << 24 >> 24) {
   i3 = Math_imul(i6, 16843009) | 0;
   L11 : do if (i2 >>> 0 > 3) while (1) {
    i6 = HEAP32[i1 >> 2] ^ i3;
    if ((i6 & -2139062144 ^ -2139062144) & i6 + -16843009) break;
    i1 = i1 + 4 | 0;
    i2 = i2 + -4 | 0;
    if (i2 >>> 0 <= 3) {
     i7 = 11;
     break L11;
    }
   } else i7 = 11; while (0);
   if ((i7 | 0) == 11) if (!i2) {
    i2 = 0;
    break;
   }
   while (1) {
    if ((HEAP8[i1 >> 0] | 0) == i4 << 24 >> 24) break L8;
    i1 = i1 + 1 | 0;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i2 = 0;
     break;
    }
   }
  }
 } while (0);
 return ((i2 | 0) != 0 ? i1 : 0) | 0;
}

function __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 HEAP32[i2 >> 2] = 3020;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i2 + 4 | 0, i1);
 i6 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(10748, 18677, 10) | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 i5 = (i2 & 1) == 0;
 i2 = __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j(i6, i5 ? i1 + 1 | 0 : HEAP32[i1 + 8 >> 2] | 0, i5 ? (i2 & 255) >>> 1 : HEAP32[i1 + 4 >> 2] | 0) | 0;
 HEAP32[i4 >> 2] = __ZNKSt3__18ios_base6getlocEv(i2 + (HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) | 0) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i4, 13432) | 0;
 i1 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 31](i1, 10) | 0;
 __ZNSt3__16localeD2Ev(i4);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i2, i1) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) | 0;
 STACKTOP = i3;
 return;
}

function ___cxx_global_array_dtor46(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14580);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14568);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14556);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14544);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14532);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14520);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14508);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14496);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14484);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14472);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14460);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14448);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14436);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(14424);
 return;
}

function ___cxx_global_array_dtor(i1) {
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14408);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14396);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14384);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14372);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14360);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14348);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14336);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14324);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14312);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14300);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14288);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14276);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14264);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(14252);
 return;
}

function __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIPN3p2t4NodeENS_9allocatorIS3_EEE21__push_back_slow_pathIRKS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIPN3p2t4EdgeENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP8TriangleNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP8PolylineNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP8HalfEdgeNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP8ISubGoalNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP5AgentNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIP6ObjectNS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIRKfEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZNSt3__16vectorIfNS_9allocatorIfEEE21__push_back_slow_pathIfEEvOT_(i11, i10) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i12 = 0;
 i9 = i11 + 4 | 0;
 i1 = HEAP32[i11 >> 2] | 0;
 i2 = i1;
 i5 = ((HEAP32[i9 >> 2] | 0) - i2 >> 2) + 1 | 0;
 if (i5 >>> 0 > 1073741823) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i11);
  i2 = HEAP32[i11 >> 2] | 0;
  i1 = i2;
 }
 i8 = i11 + 8 | 0;
 i4 = i1;
 i3 = (HEAP32[i8 >> 2] | 0) - i4 | 0;
 if (i3 >> 2 >>> 0 < 536870911) {
  i3 = i3 >> 1;
  i3 = i3 >>> 0 < i5 >>> 0 ? i5 : i3;
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i4 = i5 >> 2;
  if (!i3) {
   i7 = 0;
   i6 = 0;
   i3 = i5;
  } else i12 = 6;
 } else {
  i5 = (HEAP32[i9 >> 2] | 0) - i4 | 0;
  i3 = 1073741823;
  i4 = i5 >> 2;
  i12 = 6;
 }
 if ((i12 | 0) == 6) {
  i7 = i3;
  i6 = __Znwj(i3 << 2) | 0;
  i3 = i5;
 }
 HEAP32[i6 + (i4 << 2) >> 2] = HEAP32[i10 >> 2];
 _memcpy(i6 | 0, i1 | 0, i3 | 0) | 0;
 HEAP32[i11 >> 2] = i6;
 HEAP32[i9 >> 2] = i6 + (i4 + 1 << 2);
 HEAP32[i8 >> 2] = i6 + (i7 << 2);
 if (!i2) return;
 __ZdlPv(i2);
 return;
}

function __ZN5AgentD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 HEAP32[i5 >> 2] = 5548;
 i3 = i5 + 152 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1) {
  i4 = i5 + 156 | 0;
  i2 = HEAP32[i4 >> 2] | 0;
  if ((i2 | 0) != (i1 | 0)) {
   do {
    i6 = i2 + -40 | 0;
    HEAP32[i4 >> 2] = i6;
    FUNCTION_TABLE_vi[HEAP32[HEAP32[i6 >> 2] >> 2] & 255](i6);
    i2 = HEAP32[i4 >> 2] | 0;
   } while ((i2 | 0) != (i1 | 0));
   i1 = HEAP32[i3 >> 2] | 0;
  }
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 + 140 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 144 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
  __ZdlPv(i1);
 }
 i1 = HEAP32[i5 + 128 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 132 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 i3 = HEAP32[i5 + 108 >> 2] | 0;
 if (!i3) return;
 i1 = i5 + 112 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~(((i2 + -52 - i3 | 0) >>> 0) / 52 | 0) * 52 | 0);
 __ZdlPv(i3);
 return;
}

function __ZN3p2t14AdvancingFront11LocatePointEPKNS_5PointE(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var d2 = 0.0, d3 = 0.0, i4 = 0, i6 = 0;
 d3 = +HEAPF64[i5 + 8 >> 3];
 i6 = i1 + 8 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 d2 = +HEAPF64[i1 + 8 >> 3];
 L1 : do if (d3 == d2) {
  if ((i1 | 0) != (i5 | 0)) {
   i1 = HEAP32[i4 + 12 >> 2] | 0;
   if ((HEAP32[i1 >> 2] | 0) != (i5 | 0)) {
    i1 = HEAP32[i4 + 8 >> 2] | 0;
    if ((HEAP32[i1 >> 2] | 0) != (i5 | 0)) {
     i6 = ___cxa_allocate_exception(8) | 0;
     __ZNSt13runtime_errorC2EPKc(i6, 20051);
     ___cxa_throw(i6 | 0, 624, 90);
    }
   }
  } else i1 = i4;
  if (!i1) {
   i6 = 0;
   return i6 | 0;
  }
 } else if (d3 < d2) {
  i1 = i4;
  while (1) {
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) break L1;
  }
  return i1 | 0;
 } else {
  i1 = i4;
  while (1) {
   i1 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i1) {
    i1 = 0;
    break;
   }
   if ((HEAP32[i1 >> 2] | 0) == (i5 | 0)) break L1;
  }
  return i1 | 0;
 } while (0);
 HEAP32[i6 >> 2] = i1;
 i6 = i1;
 return i6 | 0;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 L1 : do if ((i1 | 0) == (i6 | 0)) {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } else {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  do if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0) {
    i1 = 2147483647;
    break L1;
   }
  } else {
   if ((i2 | 0) < -1 | (i2 | 0) == -1 & i1 >>> 0 < 2147483648) {
    HEAP32[i7 >> 2] = 4;
    break;
   }
   if ((i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 2147483647) {
    HEAP32[i7 >> 2] = 4;
    i1 = 2147483647;
    break L1;
   } else break L1;
  } while (0);
  i1 = -2147483648;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN3p2t4EdgeC2EPNS_5PointES2_(i7, i2, i3) {
 i7 = i7 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i1 = 0, d4 = 0.0, d5 = 0.0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 HEAP32[i7 >> 2] = i2;
 i1 = i7 + 4 | 0;
 HEAP32[i1 >> 2] = i3;
 d4 = +HEAPF64[i2 + 16 >> 3];
 d5 = +HEAPF64[i3 + 16 >> 3];
 do if (!(d4 > d5)) if (d4 == d5) {
  d5 = +HEAPF64[i2 + 8 >> 3];
  d4 = +HEAPF64[i3 + 8 >> 3];
  if (d5 > d4) {
   HEAP32[i1 >> 2] = i2;
   HEAP32[i7 >> 2] = i3;
   break;
  }
  if (d5 == d4) {
   i8 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i8, 20367);
   ___cxa_throw(i8 | 0, 624, 90);
  } else i2 = i3;
 } else i2 = i3; else {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i7 >> 2] = i3;
 } while (0);
 HEAP32[i6 >> 2] = i7;
 i1 = i2 + 28 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (i3 >>> 0 < (HEAP32[i2 + 32 >> 2] | 0) >>> 0) {
  HEAP32[i3 >> 2] = i7;
  HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 4;
  STACKTOP = i8;
  return;
 } else {
  __ZNSt3__16vectorIPN3p2t4EdgeENS_9allocatorIS3_EEE21__push_back_slow_pathIS3_EEvOT_(i2 + 24 | 0, i6);
  STACKTOP = i8;
  return;
 }
}

function __ZN7BihTree5queryERK4Vec2fRKNSt3__18functionIFvP6ObjectEEE(i6, i1, d2, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i7 = 0, i8 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 i5 = i7;
 i8 = i1;
 i1 = HEAP32[i8 + 4 >> 2] | 0;
 i3 = i5;
 HEAP32[i3 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i3 + 4 >> 2] = i1;
 HEAPF32[i5 + 8 >> 2] = d2;
 i3 = i5 + 16 | 0;
 i1 = HEAP32[i4 + 16 >> 2] | 0;
 do if (i1) if ((i1 | 0) == (i4 | 0)) {
  HEAP32[i5 + 32 >> 2] = i3;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 63](i1, i3);
  break;
 } else {
  HEAP32[i5 + 32 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 127](i1) | 0;
  break;
 } else HEAP32[i5 + 32 >> 2] = 0; while (0);
 __ZN7BihTree8recQueryEiRNS_10QueryStateE(i6, 0, i5);
 i1 = HEAP32[i5 + 32 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 16 >> 2] & 255](i3);
  STACKTOP = i7;
  return;
 }
 if (!i1) {
  STACKTOP = i7;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 255](i1);
 STACKTOP = i7;
 return;
}

function __ZN5Agent24computePreferredVelocityEf(i7, d6) {
 i7 = i7 | 0;
 d6 = +d6;
 var d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, i5 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, d12 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i8;
 i5 = i7 + 84 | 0;
 i11 = HEAP32[i5 >> 2] | 0;
 i10 = i7 + 12 | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[i11 >> 2] | 0) + 8 >> 2] & 3](i9, i11, i10);
 d2 = +HEAPF32[i9 >> 2] - +HEAPF32[i10 >> 2];
 d1 = +HEAPF32[i9 + 4 >> 2] - +HEAPF32[i7 + 16 >> 2];
 d3 = +Math_sqrt(+(d2 * d2 + d1 * d1));
 i5 = HEAP32[i5 >> 2] | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 16 >> 2] & 127](i5) | 0;
 if ((HEAP32[i7 + 44 >> 2] | 0) == 1) {
  d12 = d3 - +HEAPF32[i7 + 40 >> 2] * .9;
  d4 = d12 / d3;
  d1 = d1 * d4;
  d4 = d2 * d4;
  d3 = d12;
 } else d4 = d2;
 d2 = +HEAPF32[i7 + 68 >> 2];
 if (i5 & d2 * d6 > d3) {
  d12 = 1.0 / d6;
  HEAPF32[i7 + 72 >> 2] = d4 * d12;
  HEAPF32[i7 + 76 >> 2] = d1 * d12;
  STACKTOP = i8;
  return;
 } else {
  d12 = d2 / d3;
  HEAPF32[i7 + 72 >> 2] = d4 * d12;
  HEAPF32[i7 + 76 >> 2] = d1 * d12;
  STACKTOP = i8;
  return;
 }
}

function __ZN16BuildingMoveItemC2EP7NavCtrlP5AABox(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d4 = 0.0, d5 = 0.0, i6 = 0, i7 = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP8[i3 + 8 >> 0] = 1;
 HEAP32[i3 >> 2] = 2936;
 HEAP32[i3 + 12 >> 2] = i1;
 i6 = i3 + 16 | 0;
 i2 = i3 + 20 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = 0;
 HEAP32[i6 + 12 >> 2] = 0;
 HEAP32[i6 + 16 >> 2] = 0;
 i7 = HEAP32[i1 >> 2] | 0;
 d5 = +HEAPF32[i7 + 4 >> 2] + 0.0;
 HEAPF32[i6 >> 2] = d5;
 d4 = +HEAPF32[i7 + 8 >> 2] + 0.0;
 HEAPF32[i2 >> 2] = d4;
 i7 = HEAP32[i1 + 4 >> 2] | 0;
 d5 = d5 + +HEAPF32[i7 + 4 >> 2];
 HEAPF32[i6 >> 2] = d5;
 d4 = d4 + +HEAPF32[i7 + 8 >> 2];
 HEAPF32[i2 >> 2] = d4;
 i7 = HEAP32[i1 + 8 >> 2] | 0;
 d5 = d5 + +HEAPF32[i7 + 4 >> 2];
 HEAPF32[i6 >> 2] = d5;
 d4 = d4 + +HEAPF32[i7 + 8 >> 2];
 HEAPF32[i2 >> 2] = d4;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 d4 = d4 + +HEAPF32[i1 + 8 >> 2];
 d5 = (d5 + +HEAPF32[i1 + 4 >> 2]) * .25;
 HEAPF32[i6 >> 2] = d5;
 d4 = d4 * .25;
 HEAPF32[i2 >> 2] = d4;
 _emscripten_asm_const_4(9, i3 | 0, 10, +d5, +d4) | 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((1073741806 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 4 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 536870887) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i8) _wmemcpy(i3, i6, i8) | 0;
 if (i7) _wmemcpy(i3 + (i8 << 2) | 0, i5, i7) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _wmemcpy(i3 + (i7 + i8 << 2) | 0, i6 + (i9 + i8 << 2) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 1) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP32[i3 + (i10 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i11, i10, i1, i4, i8, i9, i7, i5) {
 i11 = i11 | 0;
 i10 = i10 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 if ((-18 - i10 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i11);
 if (!(HEAP8[i11 >> 0] & 1)) i6 = i11 + 1 | 0; else i6 = HEAP32[i11 + 8 >> 2] | 0;
 if (i10 >>> 0 < 2147483623) {
  i2 = i1 + i10 | 0;
  i3 = i10 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i8) _memcpy(i3 | 0, i6 | 0, i8 | 0) | 0;
 if (i7) _memcpy(i3 + i8 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i9 | 0;
 if ((i1 | 0) != (i8 | 0)) _memcpy(i3 + (i7 + i8) | 0, i6 + (i9 + i8) | 0, i1 - i8 | 0) | 0;
 if ((i10 | 0) != 10) __ZdlPv(i6);
 HEAP32[i11 + 8 >> 2] = i3;
 HEAP32[i11 >> 2] = i2 | 1;
 i10 = i1 + i7 | 0;
 HEAP32[i11 + 4 >> 2] = i10;
 HEAP8[i3 + i10 >> 0] = 0;
 return;
}

function ___fwritex(i3, i4, i6) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i7 = 0;
 i1 = i6 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (!i2) if (!(___towrite(i6) | 0)) {
  i2 = HEAP32[i1 >> 2] | 0;
  i5 = 4;
 } else i1 = 0; else i5 = 4;
 L4 : do if ((i5 | 0) == 4) {
  i7 = i6 + 20 | 0;
  i5 = HEAP32[i7 >> 2] | 0;
  if ((i2 - i5 | 0) >>> 0 < i4 >>> 0) {
   i1 = FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 31](i6, i3, i4) | 0;
   break;
  }
  L9 : do if ((HEAP8[i6 + 75 >> 0] | 0) > -1) {
   i1 = i4;
   while (1) {
    if (!i1) {
     i2 = i5;
     i1 = 0;
     break L9;
    }
    i2 = i1 + -1 | 0;
    if ((HEAP8[i3 + i2 >> 0] | 0) == 10) break; else i1 = i2;
   }
   if ((FUNCTION_TABLE_iiii[HEAP32[i6 + 36 >> 2] & 31](i6, i3, i1) | 0) >>> 0 < i1 >>> 0) break L4;
   i4 = i4 - i1 | 0;
   i3 = i3 + i1 | 0;
   i2 = HEAP32[i7 >> 2] | 0;
  } else {
   i2 = i5;
   i1 = 0;
  } while (0);
  _memcpy(i2 | 0, i3 | 0, i4 | 0) | 0;
  HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + i4;
  i1 = i1 + i4 | 0;
 } while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i14 = i6 + 8 | 0;
 i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i14 >> 2] | 0) + 20 >> 2] & 127](i14) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i12 = HEAP8[i14 >> 0] | 0;
 i13 = (i12 & 1) == 0;
 i2 = i14 + 4 | 0;
 i1 = i13 ? i2 : HEAP32[i14 + 8 >> 2] | 0;
 i2 = i1 + ((i13 ? (i12 & 255) >>> 1 : HEAP32[i2 >> 2] | 0) << 2) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _vsnprintf(i3, i1, i10, i8) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i10 = i10 | 0;
 i8 = i8 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i9 = 0, i11 = 0;
 i11 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i2 = i11 + 112 | 0;
 i9 = i11;
 i4 = i9;
 i5 = 6644;
 i6 = i4 + 112 | 0;
 do {
  HEAP32[i4 >> 2] = HEAP32[i5 >> 2];
  i4 = i4 + 4 | 0;
  i5 = i5 + 4 | 0;
 } while ((i4 | 0) < (i6 | 0));
 if ((i1 + -1 | 0) >>> 0 > 2147483646) if (!i1) {
  i1 = 1;
  i7 = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  i1 = -1;
 } else {
  i2 = i3;
  i7 = 4;
 }
 if ((i7 | 0) == 4) {
  i7 = -2 - i2 | 0;
  i7 = i1 >>> 0 > i7 >>> 0 ? i7 : i1;
  HEAP32[i9 + 48 >> 2] = i7;
  i3 = i9 + 20 | 0;
  HEAP32[i3 >> 2] = i2;
  HEAP32[i9 + 44 >> 2] = i2;
  i1 = i2 + i7 | 0;
  i2 = i9 + 16 | 0;
  HEAP32[i2 >> 2] = i1;
  HEAP32[i9 + 28 >> 2] = i1;
  i1 = _vfprintf(i9, i10, i8) | 0;
  if (i7) {
   i10 = HEAP32[i3 >> 2] | 0;
   HEAP8[i10 + (((i10 | 0) == (HEAP32[i2 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
  }
 }
 STACKTOP = i11;
 return i1 | 0;
}

function __ZNSt3__113__vector_baseINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEED2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) return;
 i7 = i8 + 4 | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i1 | 0)) {
  do {
   i5 = i2 + -4 | 0;
   HEAP32[i7 >> 2] = i5;
   i6 = HEAP32[i5 >> 2] | 0;
   HEAP32[i5 >> 2] = 0;
   if (i6) {
    i2 = HEAP32[i6 + 12 >> 2] | 0;
    i3 = i2;
    if (i2) {
     i4 = i6 + 16 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
     __ZdlPv(i2);
    }
    i2 = HEAP32[i6 >> 2] | 0;
    i3 = i2;
    if (i2) {
     i4 = i6 + 4 | 0;
     i5 = HEAP32[i4 >> 2] | 0;
     if ((i5 | 0) != (i2 | 0)) HEAP32[i4 >> 2] = i5 + (~((i5 + -4 - i3 | 0) >>> 2) << 2);
     __ZdlPv(i2);
    }
    __ZdlPv(i6);
   }
   i2 = HEAP32[i7 >> 2] | 0;
  } while ((i2 | 0) != (i1 | 0));
  i1 = HEAP32[i8 >> 2] | 0;
 }
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0, i12 = 0, i13 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 i12 = i6 + 8 | 0;
 i12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i12 >> 2] | 0) + 20 >> 2] & 127](i12) | 0;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 i2 = HEAP8[i12 >> 0] | 0;
 i13 = (i2 & 1) == 0;
 i1 = i13 ? i12 + 1 | 0 : HEAP32[i12 + 8 >> 2] | 0;
 i2 = i1 + (i13 ? (i2 & 255) >>> 1 : HEAP32[i12 + 4 >> 2] | 0) | 0;
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, i1, i2) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc(i7, i8, i1, i2, i6, i3, i4) {
 i7 = i7 | 0;
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i9 + 4 | 0;
 i1 = i9;
 HEAP32[i1 >> 2] = i5 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i7 + 8 | 0, i5, i1, i6, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i8 >> 2] | 0;
 if ((i5 | 0) != (i6 | 0)) do {
  i4 = HEAP8[i5 >> 0] | 0;
  do if (i1) {
   i2 = i1 + 24 | 0;
   i3 = HEAP32[i2 >> 2] | 0;
   if ((i3 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) {
    i8 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, i4 & 255) | 0) == -1;
    i1 = i8 ? 0 : i1;
    break;
   } else {
    HEAP32[i2 >> 2] = i3 + 1;
    HEAP8[i3 >> 0] = i4;
    break;
   }
  } else i1 = 0; while (0);
  i5 = i5 + 1 | 0;
 } while ((i5 | 0) != (i6 | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN8Document9clearObstEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 + 72 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i5 = i1 + 76 | 0;
 i1 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0)) return;
 L3 : while (1) {
  i4 = i2;
  while (1) {
   i3 = HEAP32[i2 >> 2] | 0;
   if (!i3) break;
   if ((___dynamic_cast(i3, 368, 376, 0) | 0) == 0 ? (___dynamic_cast(i3, 368, 392, 0) | 0) == 0 : 0) break;
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 255](i3);
   i3 = HEAP32[i6 >> 2] | 0;
   i3 = i3 + ((i4 - i3 >> 2) + 1 << 2) | 0;
   i1 = (HEAP32[i5 >> 2] | 0) - i3 | 0;
   _memmove(i2 | 0, i3 | 0, i1 | 0) | 0;
   i1 = i2 + (i1 >> 2 << 2) | 0;
   i3 = HEAP32[i5 >> 2] | 0;
   if ((i3 | 0) != (i1 | 0)) {
    i1 = i3 + (~((i3 + -4 - i1 | 0) >>> 2) << 2) | 0;
    HEAP32[i5 >> 2] = i1;
   }
   if ((i2 | 0) == (i1 | 0)) {
    i1 = 10;
    break L3;
   }
  }
  i2 = i2 + 4 | 0;
  if ((i2 | 0) == (i1 | 0)) {
   i1 = 10;
   break;
  }
 }
 if ((i1 | 0) == 10) return;
}

function __ZNSt3__114__split_bufferINS_10unique_ptrI8PolylineNS_14default_deleteIS2_EEEERNS_9allocatorIS5_EEED2Ev(i8) {
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = HEAP32[i8 + 4 >> 2] | 0;
 i7 = i8 + 8 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) != (i6 | 0)) do {
  i4 = i1 + -4 | 0;
  HEAP32[i7 >> 2] = i4;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  if (i5) {
   i1 = HEAP32[i5 + 12 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 16 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   i1 = HEAP32[i5 >> 2] | 0;
   i2 = i1;
   if (i1) {
    i3 = i5 + 4 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -4 - i2 | 0) >>> 2) << 2);
    __ZdlPv(i1);
   }
   __ZdlPv(i5);
  }
  i1 = HEAP32[i7 >> 2] | 0;
 } while ((i1 | 0) != (i6 | 0));
 i1 = HEAP32[i8 >> 2] | 0;
 if (!i1) return;
 __ZdlPv(i1);
 return;
}

function __ZN6MapDef9addBoxVtxERK4Vec2(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 i7 = __Znwj(12) | 0;
 i3 = i5 + 36 | 0;
 i1 = i5 + 40 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 HEAP32[i7 >> 2] = (i2 - (HEAP32[i3 >> 2] | 0) >> 2) + ((HEAP32[i5 + 4 >> 2] | 0) - (HEAP32[i5 >> 2] | 0) >> 2);
 i10 = i4;
 i9 = HEAP32[i10 + 4 >> 2] | 0;
 i4 = i7 + 4 | 0;
 HEAP32[i4 >> 2] = HEAP32[i10 >> 2];
 HEAP32[i4 + 4 >> 2] = i9;
 HEAP32[i6 >> 2] = i7;
 if (i2 >>> 0 < (HEAP32[i5 + 44 >> 2] | 0) >>> 0) {
  HEAP32[i2 >> 2] = i7;
  HEAP32[i1 >> 2] = i2 + 4;
  HEAP32[i6 >> 2] = 0;
  STACKTOP = i8;
  return i7 | 0;
 }
 __ZNSt3__16vectorINS_10unique_ptrI6VertexNS_14default_deleteIS2_EEEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_(i3, i6);
 i1 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = 0;
 if (!i1) {
  STACKTOP = i8;
  return i7 | 0;
 }
 __ZdlPv(i1);
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEEclEOS9_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i7;
 i6 = HEAP32[i1 + 4 >> 2] | 0;
 i4 = HEAP32[i1 + 8 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i6 | 0) == (i1 | 0)) {
  STACKTOP = i7;
  return;
 }
 d3 = +FUNCTION_TABLE_dii[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 3](i1, i6 + 12 | 0);
 if (!(d3 < +HEAPF32[i4 >> 2])) {
  STACKTOP = i7;
  return;
 }
 i2 = i6 + 124 | 0;
 HEAPF32[i5 >> 2] = d3;
 HEAP32[i5 + 4 >> 2] = i1;
 __ZN11MyPrioQueueINSt3__14pairIfP6ObjectEEE5qpushERKS4_(i2, i5);
 i1 = i6 + 128 | 0;
 if ((HEAP32[i6 + 132 >> 2] | 0) - (HEAP32[i1 >> 2] | 0) >> 3 >>> 0 <= (HEAP32[i6 + 52 >> 2] | 0) >>> 0) {
  STACKTOP = i7;
  return;
 }
 __ZN11MyPrioQueueINSt3__14pairIfP6ObjectEEE4qpopEv(i2);
 HEAP32[i4 >> 2] = HEAP32[HEAP32[i1 >> 2] >> 2];
 STACKTOP = i7;
 return;
}

function ___shgetc(i6) {
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i2 = i6 + 104 | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 if ((i5 | 0) != 0 ? (HEAP32[i6 + 108 >> 2] | 0) >= (i5 | 0) : 0) i7 = 4; else {
  i1 = ___uflow(i6) | 0;
  if ((i1 | 0) >= 0) {
   i4 = HEAP32[i2 >> 2] | 0;
   i2 = i6 + 8 | 0;
   if (i4) {
    i3 = HEAP32[i2 >> 2] | 0;
    i5 = HEAP32[i6 + 4 >> 2] | 0;
    i2 = i3;
    i4 = i4 - (HEAP32[i6 + 108 >> 2] | 0) + -1 | 0;
    if ((i2 - i5 | 0) > (i4 | 0)) HEAP32[i6 + 100 >> 2] = i5 + i4; else i7 = 9;
   } else {
    i3 = HEAP32[i2 >> 2] | 0;
    i2 = i3;
    i7 = 9;
   }
   if ((i7 | 0) == 9) HEAP32[i6 + 100 >> 2] = i2;
   i2 = HEAP32[i6 + 4 >> 2] | 0;
   if (i3) {
    i6 = i6 + 108 | 0;
    HEAP32[i6 >> 2] = i3 + 1 - i2 + (HEAP32[i6 >> 2] | 0);
   }
   i2 = i2 + -1 | 0;
   if ((HEAPU8[i2 >> 0] | 0 | 0) != (i1 | 0)) HEAP8[i2 >> 0] = i1;
  } else i7 = 4;
 }
 if ((i7 | 0) == 4) {
  HEAP32[i6 + 100 >> 2] = 0;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZN5Agent16computeNeighborsER7BihTree(i6, i5) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0, i8 = 0, d9 = 0.0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i4 = i8 + 24 | 0;
 i7 = i8;
 i1 = HEAP32[i6 + 128 >> 2] | 0;
 i2 = i6 + 132 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if ((i3 | 0) != (i1 | 0)) HEAP32[i2 >> 2] = i3 + (~((i3 + -8 - i1 | 0) >>> 3) << 3);
 HEAP8[i6 + 124 >> 0] = 0;
 d9 = +HEAPF32[i6 + 56 >> 2];
 HEAPF32[i4 >> 2] = d9 * d9;
 i1 = i7 + 16 | 0;
 HEAP32[i1 >> 2] = i7;
 HEAP32[i7 >> 2] = 5484;
 HEAP32[i7 + 4 >> 2] = i6;
 HEAP32[i7 + 8 >> 2] = i4;
 __ZN7BihTree5queryERK4Vec2fRKNSt3__18functionIFvP6ObjectEEE(i5, i6 + 12 | 0, d9, i7);
 i1 = HEAP32[i1 >> 2] | 0;
 if ((i1 | 0) == (i7 | 0)) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i7 >> 2] | 0) + 16 >> 2] & 255](i7);
  STACKTOP = i8;
  return;
 }
 if (!i1) {
  STACKTOP = i8;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 255](i1);
 STACKTOP = i8;
 return;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc(i6, i7, i1, i2, i5, i3, i4) {
 i6 = i6 | 0;
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 i2 = i8 + 8 | 0;
 i1 = i8;
 HEAP32[i1 >> 2] = i2 + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i6 + 8 | 0, i2, i1, i5, i3, i4);
 i6 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  i5 = i2;
  do {
   i2 = HEAP32[i5 >> 2] | 0;
   if (!i1) i1 = 0; else {
    i3 = i1 + 24 | 0;
    i4 = HEAP32[i3 >> 2] | 0;
    if ((i4 | 0) == (HEAP32[i1 + 28 >> 2] | 0)) i2 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[i1 >> 2] | 0) + 52 >> 2] & 31](i1, i2) | 0; else {
     HEAP32[i3 >> 2] = i4 + 4;
     HEAP32[i4 >> 2] = i2;
    }
    i1 = (i2 | 0) == -1 ? 0 : i1;
   }
   i5 = i5 + 4 | 0;
  } while ((i5 | 0) != (i6 | 0));
 }
 STACKTOP = i8;
 return i1 | 0;
}

function __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextEPNS_4EdgeEPNS_4NodeE(i8, i7, i5, i6) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i9 = 0, i10 = 0;
 HEAP32[i7 + 48 >> 2] = i5;
 i9 = HEAP32[i5 >> 2] | 0;
 i4 = i5 + 4 | 0;
 i10 = HEAP32[i4 >> 2] | 0;
 HEAP8[i7 + 52 >> 0] = +HEAPF64[i9 + 8 >> 3] > +HEAPF64[i10 + 8 >> 3] & 1;
 i1 = i6 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = __ZN3p2t8Triangle9EdgeIndexEPKNS_5PointES3_(i2, i9, i10) | 0;
 if ((i3 | 0) == -1) {
  __ZN3p2t5Sweep13FillEdgeEventERNS_12SweepContextEPNS_4EdgeEPNS_4NodeE(i8, i7, i5, i6);
  i10 = HEAP32[i4 >> 2] | 0;
  __ZN3p2t5Sweep9EdgeEventERNS_12SweepContextERNS_5PointES4_PNS_8TriangleES4_(i8, i7, HEAP32[i5 >> 2] | 0, i10, HEAP32[i1 >> 2] | 0, i10);
  return;
 }
 __ZN3p2t8Triangle19MarkConstrainedEdgeEi(i2, i3);
 i1 = HEAP32[i2 + 20 + (i3 << 2) >> 2] | 0;
 if (!i1) return;
 __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i1, i9, i10);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc(i7, i5) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i8;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i6, i7);
 L1 : do if (HEAP8[i6 >> 0] | 0) {
  i2 = HEAP32[i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  i3 = i2;
  do if (i2) {
   i4 = i3 + 24 | 0;
   i1 = HEAP32[i4 >> 2] | 0;
   if ((i1 | 0) == (HEAP32[i3 + 28 >> 2] | 0)) if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i2 >> 2] | 0) + 52 >> 2] & 31](i3, i5 & 255) | 0) == -1) break; else break L1; else {
    HEAP32[i4 >> 2] = i1 + 1;
    HEAP8[i1 >> 0] = i5;
    break L1;
   }
  } while (0);
  i5 = i7 + ((HEAP32[(HEAP32[i7 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i5 >> 2] = HEAP32[i5 >> 2] | 1;
 } while (0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i6);
 STACKTOP = i8;
 return i7 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi(i9, i8) {
 i9 = i9 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i2 = i9 + 44 | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 i3 = HEAP32[i9 + 24 >> 2] | 0;
 if (i1 >>> 0 < i3 >>> 0) {
  HEAP32[i2 >> 2] = i3;
  i1 = i3;
 }
 i6 = i9 + 8 | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 i7 = i9 + 12 | 0;
 i4 = HEAP32[i7 >> 2] | 0;
 i5 = i2;
 if (i2 >>> 0 >= i4 >>> 0) {
  i9 = -1;
  return i9 | 0;
 }
 if ((i8 | 0) == -1) {
  HEAP32[i6 >> 2] = i2;
  HEAP32[i7 >> 2] = i4 + -1;
  HEAP32[i9 + 16 >> 2] = i1;
  i9 = 0;
  return i9 | 0;
 }
 if (!(HEAP32[i9 + 48 >> 2] & 16)) {
  i3 = i8 & 255;
  i2 = i4 + -1 | 0;
  if (i3 << 24 >> 24 != (HEAP8[i2 >> 0] | 0)) {
   i9 = -1;
   return i9 | 0;
  }
 } else {
  i3 = i8 & 255;
  i2 = i4 + -1 | 0;
 }
 HEAP32[i6 >> 2] = i5;
 HEAP32[i7 >> 2] = i2;
 HEAP32[i9 + 16 >> 2] = i1;
 HEAP8[i2 >> 0] = i3;
 i9 = i8;
 return i9 | 0;
}

function __ZN7NavCtrl18updateBoxesAndMeshEv(i9) {
 i9 = i9 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0;
 __ZN6MapDef11makeBoxPolyEv(i9 + 84 | 0);
 i1 = HEAP32[i9 + 60 >> 2] | 0;
 i8 = HEAP32[i9 + 64 >> 2] | 0;
 if ((i1 | 0) == (i8 | 0)) {
  __ZN7NavCtrl10updateMeshEv(i9);
  return;
 }
 do {
  i5 = HEAP32[i1 >> 2] | 0;
  i6 = HEAP32[i5 + 12 >> 2] | 0;
  i2 = i5 + 32 | 0;
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = (i3 | 0) == 0;
  if (!(HEAP8[i6 + 16 >> 0] | 0)) {
   if (!i4) {
    HEAP32[i2 >> 2] = 0;
    FUNCTION_TABLE_vi[HEAP32[(HEAP32[i3 >> 2] | 0) + 4 >> 2] & 255](i3);
   }
  } else if (i4 ? (i4 = __Znwj(16) | 0, __ZN12ErrorBoxItemC2EP7NavCtrlP5AABox(i4, HEAP32[i5 + 4 >> 2] | 0, i6), i7 = HEAP32[i2 >> 2] | 0, HEAP32[i2 >> 2] = i4, (i7 | 0) != 0) : 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i7 >> 2] | 0) + 4 >> 2] & 255](i7);
  i1 = i1 + 8 | 0;
 } while ((i1 | 0) != (i8 | 0));
 __ZN7NavCtrl10updateMeshEv(i9);
 return;
}

function __ZN3p2t5Sweep19FinalizationPolygonERNS_12SweepContextE(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i1 = HEAP32[(HEAP32[HEAP32[i5 + 92 >> 2] >> 2] | 0) + 8 >> 2] | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i1 + 4 >> 2] | 0;
 while (1) {
  if (__ZN3p2t8Triangle20GetConstrainedEdgeCWERNS_5PointE(i1, i2) | 0) {
   i2 = 5;
   break;
  }
  i1 = __ZN3p2t8Triangle11NeighborCCWERNS_5PointE(i1, i2) | 0;
  if (!i1) {
   i2 = 4;
   break;
  }
 }
 if ((i2 | 0) == 4) {
  i5 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i3, 20112, 25);
  __ZN9ExceptionC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i5, i3);
  ___cxa_throw(i5 | 0, 16, 12);
 } else if ((i2 | 0) == 5) {
  __ZN3p2t12SweepContext9MeshCleanERNS_8TriangleE(i5, i1);
  STACKTOP = i4;
  return;
 }
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 65535 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else {
   i1 = i1 & 65535;
   break;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(i2, i5, i3, i1, i4) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 HEAP8[i5 + 53 >> 0] = 1;
 do if ((HEAP32[i5 + 4 >> 2] | 0) == (i1 | 0)) {
  HEAP8[i5 + 52 >> 0] = 1;
  i1 = i5 + 16 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (!i2) {
   HEAP32[i1 >> 2] = i3;
   HEAP32[i5 + 24 >> 2] = i4;
   HEAP32[i5 + 36 >> 2] = 1;
   if (!((i4 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  if ((i2 | 0) != (i3 | 0)) {
   i4 = i5 + 36 | 0;
   HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + 1;
   HEAP8[i5 + 54 >> 0] = 1;
   break;
  }
  i2 = i5 + 24 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  if ((i1 | 0) == 2) {
   HEAP32[i2 >> 2] = i4;
   i1 = i4;
  }
  if ((i1 | 0) == 1 ? (HEAP32[i5 + 48 >> 2] | 0) == 1 : 0) HEAP8[i5 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZN3p2t12SweepContext8clearMapEv(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i7 + 80 | 0;
 i5 = i7 + 84 | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) != (i6 | 0)) {
  i3 = i2;
  i4 = i2;
  do {
   i2 = HEAP32[i3 + 8 >> 2] | 0;
   if (i2) __ZdlPv(i2);
   i4 = HEAP32[i4 + 4 >> 2] | 0;
   i3 = i4;
  } while ((i3 | 0) != (i6 | 0));
 }
 i2 = i7 + 88 | 0;
 if ((HEAP32[i2 >> 2] | 0) != 0 ? (i1 = HEAP32[i5 >> 2] | 0, i5 = (HEAP32[i6 >> 2] | 0) + 4 | 0, i4 = HEAP32[i1 >> 2] | 0, HEAP32[i4 + 4 >> 2] = HEAP32[i5 >> 2], HEAP32[HEAP32[i5 >> 2] >> 2] = i4, HEAP32[i2 >> 2] = 0, (i1 | 0) != (i6 | 0)) : 0) do {
  i5 = i1;
  i1 = HEAP32[i1 + 4 >> 2] | 0;
  __ZdlPv(i5);
 } while ((i1 | 0) != (i6 | 0));
 i3 = HEAP32[i7 + 68 >> 2] | 0;
 i1 = i7 + 72 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 HEAP32[i1 >> 2] = i2 + (~((i2 + -4 - i3 | 0) >>> 2) << 2);
 return;
}

function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 28 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoll_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i8 = (i2 | 0) > 0 | (i2 | 0) == 0 & i1 >>> 0 > 0;
   tempRet0 = i8 ? 2147483647 : -2147483648;
   STACKTOP = i9;
   return (i8 ? -1 : 0) | 0;
  }
 } else {
  HEAP32[i7 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji(i1, i6, i7, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i8 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i9;
 do if ((i1 | 0) != (i6 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  i4 = ___errno_location() | 0;
  i5 = HEAP32[i4 >> 2] | 0;
  HEAP32[i4 >> 2] = 0;
  i1 = _strtoull_l(i1, i8, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = tempRet0;
  i3 = HEAP32[i4 >> 2] | 0;
  if (!i3) HEAP32[i4 >> 2] = i5;
  if ((HEAP32[i8 >> 2] | 0) != (i6 | 0)) {
   HEAP32[i7 >> 2] = 4;
   i1 = 0;
   break;
  }
  if (i2 >>> 0 > 0 | (i2 | 0) == 0 & i1 >>> 0 > 4294967295 | (i3 | 0) == 34) {
   HEAP32[i7 >> 2] = 4;
   i1 = -1;
   break;
  } else break;
 } else {
  HEAP32[i7 >> 2] = 4;
  i1 = 0;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 92 | 0;
 if ((HEAP32[i4 + 20 >> 2] | 0) == 0 ? (i3 = HEAP32[i1 >> 2] | 0, i3 = __ZN3p2t14AdvancingFront11LocatePointEPKNS_5PointE(i3, __ZN3p2t8Triangle7PointCWERNS_5PointE(i4, HEAP32[i4 + 8 >> 2] | 0) | 0) | 0, (i3 | 0) != 0) : 0) HEAP32[i3 + 4 >> 2] = i4;
 if ((HEAP32[i4 + 24 >> 2] | 0) == 0 ? (i2 = HEAP32[i1 >> 2] | 0, i2 = __ZN3p2t14AdvancingFront11LocatePointEPKNS_5PointE(i2, __ZN3p2t8Triangle7PointCWERNS_5PointE(i4, HEAP32[i4 + 12 >> 2] | 0) | 0) | 0, (i2 | 0) != 0) : 0) HEAP32[i2 + 4 >> 2] = i4;
 if (HEAP32[i4 + 28 >> 2] | 0) return;
 i1 = HEAP32[i1 >> 2] | 0;
 i1 = __ZN3p2t14AdvancingFront11LocatePointEPKNS_5PointE(i1, __ZN3p2t8Triangle7PointCWERNS_5PointE(i4, HEAP32[i4 + 16 >> 2] | 0) | 0) | 0;
 if (!i1) return;
 HEAP32[i1 + 4 >> 2] = i4;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((1073741807 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 4 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 536870887) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 2 ? 2 : i2 + 4 & -4;
 } else i2 = 1073741807;
 i3 = __Znwj(i2 << 2) | 0;
 if (i7) _wmemcpy(i3, i5, i7) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _wmemcpy(i3 + (i6 + i7 << 2) | 0, i5 + (i8 + i7 << 2) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 1) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function __ZN3p2t8Triangle13OppositePointERS0_RNS_5PointE(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = HEAP32[i4 + 12 >> 2] | 0;
  if ((i2 | 0) != (i3 | 0)) if ((HEAP32[i4 + 16 >> 2] | 0) == (i3 | 0)) i1 = i2; else {
   i5 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i5, 20076);
   ___cxa_throw(i5 | 0, 624, 90);
  }
 } else i1 = HEAP32[i4 + 16 >> 2] | 0;
 i2 = HEAP32[i5 + 8 >> 2] | 0;
 if ((i2 | 0) == (i1 | 0)) {
  i5 = HEAP32[i5 + 16 >> 2] | 0;
  return i5 | 0;
 }
 i3 = HEAP32[i5 + 12 >> 2] | 0;
 if ((i3 | 0) == (i1 | 0)) {
  i5 = i2;
  return i5 | 0;
 }
 if ((HEAP32[i5 + 16 >> 2] | 0) == (i1 | 0)) {
  i5 = i3;
  return i5 | 0;
 } else {
  i5 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i5, 20076);
  ___cxa_throw(i5 | 0, 624, 90);
 }
 return 0;
}

function __ZNSt3__16vectorItNS_9allocatorItEEEC2IPKtEET_NS_9enable_ifIXaasr21__is_forward_iteratorIS7_EE5valuesr16is_constructibleItNS_15iterator_traitsIS7_E9referenceEEE5valueES7_E4typeE(i5, i1, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0, i7 = 0;
 HEAP32[i5 >> 2] = 0;
 i7 = i5 + 4 | 0;
 HEAP32[i7 >> 2] = 0;
 HEAP32[i5 + 8 >> 2] = 0;
 i3 = i1;
 i2 = i8 - i3 | 0;
 i4 = i2 >> 1;
 if (!i4) return;
 if ((i2 | 0) < 0) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i5);
 i6 = __Znwj(i2) | 0;
 HEAP32[i7 >> 2] = i6;
 HEAP32[i5 >> 2] = i6;
 HEAP32[i5 + 8 >> 2] = i6 + (i4 << 1);
 if ((i1 | 0) == (i8 | 0)) return;
 i3 = (i8 + -2 - i3 | 0) >>> 1;
 i2 = i6;
 while (1) {
  HEAP16[i2 >> 1] = HEAP16[i1 >> 1] | 0;
  i1 = i1 + 2 | 0;
  if ((i1 | 0) == (i8 | 0)) break; else i2 = i2 + 2 | 0;
 }
 HEAP32[i7 >> 2] = i6 + (i3 + 1 << 1);
 return;
}

function __ZNSt3__16__treeINS_12__value_typeIfNS_6vectorI4Vec2NS_9allocatorIS3_EEEEEENS_19__map_value_compareIfS7_NS_4lessIfEELb1EEENS4_IS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 if (!i5) return;
 __ZNSt3__16__treeINS_12__value_typeIfNS_6vectorI4Vec2NS_9allocatorIS3_EEEEEENS_19__map_value_compareIfS7_NS_4lessIfEELb1EEENS4_IS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(i1, HEAP32[i5 >> 2] | 0);
 __ZNSt3__16__treeINS_12__value_typeIfNS_6vectorI4Vec2NS_9allocatorIS3_EEEEEENS_19__map_value_compareIfS7_NS_4lessIfEELb1EEENS4_IS7_EEE7destroyEPNS_11__tree_nodeIS7_PvEE(i1, HEAP32[i5 + 4 >> 2] | 0);
 i1 = HEAP32[i5 + 20 >> 2] | 0;
 i2 = i1;
 if (i1) {
  i3 = i5 + 24 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if ((i4 | 0) != (i1 | 0)) HEAP32[i3 >> 2] = i4 + (~((i4 + -8 - i2 | 0) >>> 3) << 3);
  __ZdlPv(i1);
 }
 __ZdlPv(i5);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i10, i9, i1, i4, i7, i8, i6) {
 i10 = i10 | 0;
 i9 = i9 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0;
 if ((-17 - i9 | 0) >>> 0 < i1 >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i10);
 if (!(HEAP8[i10 >> 0] & 1)) i5 = i10 + 1 | 0; else i5 = HEAP32[i10 + 8 >> 2] | 0;
 if (i9 >>> 0 < 2147483623) {
  i2 = i1 + i9 | 0;
  i3 = i9 << 1;
  i2 = i2 >>> 0 < i3 >>> 0 ? i3 : i2;
  i2 = i2 >>> 0 < 11 ? 11 : i2 + 16 & -16;
 } else i2 = -17;
 i3 = __Znwj(i2) | 0;
 if (i7) _memcpy(i3 | 0, i5 | 0, i7 | 0) | 0;
 i1 = i4 - i8 | 0;
 if ((i1 | 0) != (i7 | 0)) _memcpy(i3 + (i6 + i7) | 0, i5 + (i8 + i7) | 0, i1 - i7 | 0) | 0;
 if ((i9 | 0) != 10) __ZdlPv(i5);
 HEAP32[i10 + 8 >> 2] = i3;
 HEAP32[i10 >> 2] = i2 | 1;
 return;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 13424) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 48 >> 2] & 7](i8, 27643, 27675, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 13580) | 0;
 HEAP32[i2 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP32[i4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji(i1, i5, i6, i2) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i1 | 0) != (i5 | 0)) {
  if ((HEAP8[i1 >> 0] | 0) == 45) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  i1 = _strtoull_l(i1, i7, i2, __ZNSt3__16__clocEv() | 0) | 0;
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   i2 = 0;
   i1 = 0;
   break;
  }
  if ((i2 | 0) == 34) {
   HEAP32[i6 >> 2] = 4;
   i2 = -1;
   i1 = -1;
  } else i2 = tempRet0;
 } else {
  HEAP32[i6 >> 2] = 4;
  i2 = 0;
  i1 = 0;
 } while (0);
 tempRet0 = i2;
 STACKTOP = i8;
 return i1 | 0;
}

function __ZNSt3__16vectorI4Vec2NS_9allocatorIS1_EEEC2ERKS4_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 3;
 if (!i2) return;
 if (i2 >>> 0 > 536870911) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i1 = __Znwj(i1) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i1 + (i2 << 3);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  i7 = i2;
  i4 = HEAP32[i7 + 4 >> 2] | 0;
  i5 = i1;
  HEAP32[i5 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i5 + 4 >> 2] = i4;
  i1 = (HEAP32[i6 >> 2] | 0) + 8 | 0;
  HEAP32[i6 >> 2] = i1;
  i2 = i2 + 8 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0;
 L1 : do if ((i1 | 0) != (HEAP32[i5 + 8 >> 2] | 0)) {
  i3 = HEAP32[i1 + 12 >> 2] | 0;
  i2 = i1 + 16 + (i3 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1 + 16 | 0, i5, i4, i6);
  if ((i3 | 0) > 1) {
   i3 = i5 + 54 | 0;
   i1 = i1 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i1, i5, i4, i6);
    if (HEAP8[i3 >> 0] | 0) break L1;
    i1 = i1 + 8 | 0;
   } while (i1 >>> 0 < i2 >>> 0);
  }
 } else __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i5, i4, i6); while (0);
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_(i5, i3, i1, i2, i4) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i6 = 0, i7 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 i3 = __ZNKSt3__18ios_base6getlocEv(i3) | 0;
 HEAP32[i7 >> 2] = i3;
 i8 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 13432) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i8 >> 2] | 0) + 32 >> 2] & 7](i8, 27643, 27675, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i7, 13572) | 0;
 HEAP8[i2 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 127](i1) | 0;
 HEAP8[i4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i5, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i3) | 0;
 STACKTOP = i6;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 do if ((i6 | 0) == (HEAP32[i4 + 8 >> 2] | 0)) {
  if ((HEAP32[i4 + 4 >> 2] | 0) == (i3 | 0) ? (i2 = i4 + 28 | 0, (HEAP32[i2 >> 2] | 0) != 1) : 0) HEAP32[i2 >> 2] = i5;
 } else if ((i6 | 0) == (HEAP32[i4 >> 2] | 0)) {
  if ((HEAP32[i4 + 16 >> 2] | 0) != (i3 | 0) ? (i1 = i4 + 20 | 0, (HEAP32[i1 >> 2] | 0) != (i3 | 0)) : 0) {
   HEAP32[i4 + 32 >> 2] = i5;
   HEAP32[i1 >> 2] = i3;
   i7 = i4 + 40 | 0;
   HEAP32[i7 >> 2] = (HEAP32[i7 >> 2] | 0) + 1;
   if ((HEAP32[i4 + 36 >> 2] | 0) == 1 ? (HEAP32[i4 + 24 >> 2] | 0) == 2 : 0) HEAP8[i4 + 54 >> 0] = 1;
   HEAP32[i4 + 44 >> 2] = 4;
   break;
  }
  if ((i5 | 0) == 1) HEAP32[i4 + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj(i1, i3, i6, i5) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i2 = 0, i4 = 0;
 if (i5 & 2048) {
  HEAP8[i1 >> 0] = 43;
  i1 = i1 + 1 | 0;
 }
 if (i5 & 512) {
  HEAP8[i1 >> 0] = 35;
  i1 = i1 + 1 | 0;
 }
 i2 = HEAP8[i3 >> 0] | 0;
 if (i2 << 24 >> 24) {
  i4 = i3;
  while (1) {
   i4 = i4 + 1 | 0;
   i3 = i1 + 1 | 0;
   HEAP8[i1 >> 0] = i2;
   i2 = HEAP8[i4 >> 0] | 0;
   if (!(i2 << 24 >> 24)) {
    i1 = i3;
    break;
   } else i1 = i3;
  }
 }
 L11 : do switch (i5 & 74 | 0) {
 case 64:
  {
   HEAP8[i1 >> 0] = 111;
   break;
  }
 case 8:
  if (!(i5 & 16384)) {
   HEAP8[i1 >> 0] = 120;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 88;
   break L11;
  }
 default:
  if (i6) {
   HEAP8[i1 >> 0] = 100;
   break L11;
  } else {
   HEAP8[i1 >> 0] = 117;
   break L11;
  }
 } while (0);
 return;
}

function __ZNSt3__111__stdoutbufIwE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10 + 8 | 0;
 i7 = i10;
 i3 = i1 + 36 | 0;
 i4 = i1 + 40 | 0;
 i5 = i8 + 8 | 0;
 i6 = i8;
 i2 = i1 + 32 | 0;
 L1 : while (1) {
  i1 = HEAP32[i3 >> 2] | 0;
  i1 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 31](i1, HEAP32[i4 >> 2] | 0, i8, i5, i7) | 0;
  i11 = (HEAP32[i7 >> 2] | 0) - i6 | 0;
  if ((_fwrite(i8, 1, i11, HEAP32[i2 >> 2] | 0) | 0) != (i11 | 0)) {
   i1 = -1;
   break;
  }
  switch (i1 | 0) {
  case 1:
   break;
  case 2:
   {
    i1 = -1;
    break L1;
   }
  default:
   {
    i9 = 4;
    break L1;
   }
  }
 }
 if ((i9 | 0) == 4) i1 = ((_fflush(HEAP32[i2 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = i10;
 return i1 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i4, i1, i6) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i5 = i1;
 i2 = i6 - i5 | 0;
 i3 = i2 >> 2;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i4);
 if (i3 >>> 0 < 2) {
  HEAP8[i4 >> 0] = i2 >>> 1;
  i4 = i4 + 4 | 0;
 } else {
  i7 = i3 + 4 & -4;
  i2 = __Znwj(i7 << 2) | 0;
  HEAP32[i4 + 8 >> 2] = i2;
  HEAP32[i4 >> 2] = i7 | 1;
  HEAP32[i4 + 4 >> 2] = i3;
  i4 = i2;
 }
 i3 = (i6 - i5 | 0) >>> 2;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i4;
  while (1) {
   HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
   i1 = i1 + 4 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 4 | 0;
  }
 }
 HEAP32[i4 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 10; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 1 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _memmove(i1 | 0, i5 | 0, i4 | 0) | 0;
  HEAP8[i1 + i4 >> 0] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if (i5) {
  i1 = HEAP8[i6 >> 0] | 0;
  if (!(i1 & 1)) i2 = 10; else {
   i1 = HEAP32[i6 >> 2] | 0;
   i2 = (i1 & -2) + -1 | 0;
   i1 = i1 & 255;
  }
  if (!(i1 & 1)) i3 = (i1 & 255) >>> 1; else i3 = HEAP32[i6 + 4 >> 2] | 0;
  if ((i2 - i3 | 0) >>> 0 < i5 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i6, i2, i5 - i2 + i3 | 0, i3, i3, 0, 0);
   i1 = HEAP8[i6 >> 0] | 0;
  }
  if (!(i1 & 1)) i2 = i6 + 1 | 0; else i2 = HEAP32[i6 + 8 >> 2] | 0;
  _memset(i2 + i3 | 0, i4 | 0, i5 | 0) | 0;
  i1 = i3 + i5 | 0;
  if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = i1 << 1; else HEAP32[i6 + 4 >> 2] = i1;
  HEAP8[i2 + i1 >> 0] = 0;
 }
 return i6 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i3 = 1; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i3 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 i2 = (i1 & 1) == 0;
 do if (i3 >>> 0 >= i4 >>> 0) {
  if (i2) i1 = i6 + 4 | 0; else i1 = HEAP32[i6 + 8 >> 2] | 0;
  _wmemmove(i1, i5, i4) | 0;
  HEAP32[i1 + (i4 << 2) >> 2] = 0;
  if (!(HEAP8[i6 >> 0] & 1)) {
   HEAP8[i6 >> 0] = i4 << 1;
   break;
  } else {
   HEAP32[i6 + 4 >> 2] = i4;
   break;
  }
 } else {
  if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i6 + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw(i6, i3, i4 - i3 | 0, i1, 0, i1, i4, i5);
 } while (0);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj(i6, i5, i4) {
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP8[i6 >> 0] | 0;
 if (!(i1 & 1)) i2 = 10; else {
  i1 = HEAP32[i6 >> 2] | 0;
  i2 = (i1 & -2) + -1 | 0;
  i1 = i1 & 255;
 }
 if (!(i1 & 1)) i3 = (i1 & 255) >>> 1; else i3 = HEAP32[i6 + 4 >> 2] | 0;
 if ((i2 - i3 | 0) >>> 0 >= i4 >>> 0) {
  if (i4) {
   if (!(i1 & 1)) i2 = i6 + 1 | 0; else i2 = HEAP32[i6 + 8 >> 2] | 0;
   _memcpy(i2 + i3 | 0, i5 | 0, i4 | 0) | 0;
   i1 = i3 + i4 | 0;
   if (!(HEAP8[i6 >> 0] & 1)) HEAP8[i6 >> 0] = i1 << 1; else HEAP32[i6 + 4 >> 2] = i1;
   HEAP8[i2 + i1 >> 0] = 0;
  }
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc(i6, i2, i4 - i2 + i3 | 0, i3, i3, 0, i4, i5);
 return i6 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 1;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 4 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i6;
 HEAP32[i1 + (i2 << 2) >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv(i6, i1, i4) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0, i5 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 i5 = i7;
 if ((i6 | 0) != (i1 | 0)) if ((i1 | 0) != 0 ? (i3 = ___dynamic_cast(i1, 648, 664, 0) | 0, (i3 | 0) != 0) : 0) {
  i1 = i5;
  i2 = i1 + 56 | 0;
  do {
   HEAP32[i1 >> 2] = 0;
   i1 = i1 + 4 | 0;
  } while ((i1 | 0) < (i2 | 0));
  HEAP32[i5 >> 2] = i3;
  HEAP32[i5 + 8 >> 2] = i6;
  HEAP32[i5 + 12 >> 2] = -1;
  HEAP32[i5 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 15](i3, i5, HEAP32[i4 >> 2] | 0, 1);
  if ((HEAP32[i5 + 24 >> 2] | 0) == 1) {
   HEAP32[i4 >> 2] = HEAP32[i5 + 16 >> 2];
   i1 = 1;
  } else i1 = 0;
 } else i1 = 0; else i1 = 1;
 STACKTOP = i7;
 return i1 | 0;
}

function _wcrtomb(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 do if (i1) {
  if (i3 >>> 0 < 128) {
   HEAP8[i1 >> 0] = i3;
   i1 = 1;
   break;
  }
  if (i3 >>> 0 < 2048) {
   HEAP8[i1 >> 0] = i3 >>> 6 | 192;
   HEAP8[i1 + 1 >> 0] = i3 & 63 | 128;
   i1 = 2;
   break;
  }
  if (i3 >>> 0 < 55296 | (i3 & -8192 | 0) == 57344) {
   HEAP8[i1 >> 0] = i3 >>> 12 | 224;
   HEAP8[i1 + 1 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 & 63 | 128;
   i1 = 3;
   break;
  }
  if ((i3 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[i1 >> 0] = i3 >>> 18 | 240;
   HEAP8[i1 + 1 >> 0] = i3 >>> 12 & 63 | 128;
   HEAP8[i1 + 2 >> 0] = i3 >>> 6 & 63 | 128;
   HEAP8[i1 + 3 >> 0] = i3 & 63 | 128;
   i1 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   i1 = -1;
   break;
  }
 } else i1 = 1; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 16 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 24 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__16__treeINS_12__value_typeIPvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS2_S9_NS_4lessIS2_EELb1EEENS6_IS9_EEE7destroyEPNS_11__tree_nodeIS9_S2_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIPvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS2_S9_NS_4lessIS2_EELb1EEENS6_IS9_EEE7destroyEPNS_11__tree_nodeIS9_S2_EE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIPvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS2_S9_NS_4lessIS2_EELb1EEENS6_IS9_EEE7destroyEPNS_11__tree_nodeIS9_S2_EE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 20 | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(i4, i6) {
 i4 = i4 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i5 = 0;
 i1 = HEAP8[i4 >> 0] | 0;
 i2 = (i1 & 1) != 0;
 if (i2) {
  i3 = (HEAP32[i4 >> 2] & -2) + -1 | 0;
  i5 = HEAP32[i4 + 4 >> 2] | 0;
 } else {
  i3 = 10;
  i5 = (i1 & 255) >>> 1;
 }
 if ((i5 | 0) == (i3 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj(i4, i3, 1, i3, i3, 0, 0);
  if (!(HEAP8[i4 >> 0] & 1)) i3 = 7; else i3 = 8;
 } else if (i2) i3 = 8; else i3 = 7;
 if ((i3 | 0) == 7) {
  HEAP8[i4 >> 0] = (i5 << 1) + 2;
  i1 = i4 + 1 | 0;
  i2 = i5 + 1 | 0;
 } else if ((i3 | 0) == 8) {
  i1 = HEAP32[i4 + 8 >> 2] | 0;
  i2 = i5 + 1 | 0;
  HEAP32[i4 + 4 >> 2] = i2;
 }
 HEAP8[i1 + i5 >> 0] = i6;
 HEAP8[i1 + i2 >> 0] = 0;
 return;
}

function __ZN3p2t5Sweep13NextFlipPointERNS_5PointES2_RNS_8TriangleES2_(i5, i1, i2, i4, i3) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var d6 = 0.0, d7 = 0.0;
 d6 = +HEAPF64[i1 + 8 >> 3];
 d7 = +HEAPF64[i1 + 16 >> 3];
 d6 = (+HEAPF64[i2 + 8 >> 3] - d6) * (+HEAPF64[i3 + 16 >> 3] - d7) - (+HEAPF64[i2 + 16 >> 3] - d7) * (+HEAPF64[i3 + 8 >> 3] - d6);
 switch ((d6 > -1.0e-012 & d6 < 1.0e-012 ? 2 : d6 > 0.0 & 1) | 0) {
 case 0:
  {
   i5 = __ZN3p2t8Triangle8PointCCWERNS_5PointE(i4, i3) | 0;
   return i5 | 0;
  }
 case 1:
  {
   i5 = __ZN3p2t8Triangle7PointCWERNS_5PointE(i4, i3) | 0;
   return i5 | 0;
  }
 default:
  {
   i5 = ___cxa_allocate_exception(4) | 0;
   i4 = __Znwj(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i4, 20251);
   HEAP32[i5 >> 2] = i4;
   ___cxa_throw(i5 | 0, 336, 0);
  }
 }
 return 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i2, i4, i3, i5, i6) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i7 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i7;
 HEAP32[i6 >> 2] = i3;
 i3 = _uselocale(HEAP32[i2 + 8 >> 2] | 0) | 0;
 i2 = _wcrtomb(i1, 0, i4) | 0;
 if (i3) _uselocale(i3) | 0;
 switch (i2 | 0) {
 case 0:
 case -1:
  {
   i1 = 2;
   break;
  }
 default:
  {
   i2 = i2 + -1 | 0;
   if (i2 >>> 0 <= (i5 - (HEAP32[i6 >> 2] | 0) | 0) >>> 0) if (!i2) i1 = 0; else while (1) {
    i4 = HEAP8[i1 >> 0] | 0;
    i5 = HEAP32[i6 >> 2] | 0;
    HEAP32[i6 >> 2] = i5 + 1;
    HEAP8[i5 >> 0] = i4;
    i2 = i2 + -1 | 0;
    if (!i2) {
     i1 = 0;
     break;
    } else i1 = i1 + 1 | 0;
   } else i1 = 1;
  }
 }
 STACKTOP = i7;
 return i1 | 0;
}

function __ZN3p2t5Sweep4FillERNS_12SweepContextERNS_4NodeE(i4, i3, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i5 = 0, i6 = 0;
 i1 = __Znwj(36) | 0;
 i6 = i2 + 12 | 0;
 i5 = i2 + 8 | 0;
 __ZN3p2t8TriangleC2ERNS_5PointES2_S2_(i1, HEAP32[HEAP32[i6 >> 2] >> 2] | 0, HEAP32[i2 >> 2] | 0, HEAP32[HEAP32[i5 >> 2] >> 2] | 0);
 __ZN3p2t8Triangle12MarkNeighborERS0_(i1, HEAP32[(HEAP32[i6 >> 2] | 0) + 4 >> 2] | 0);
 __ZN3p2t8Triangle12MarkNeighborERS0_(i1, HEAP32[i2 + 4 >> 2] | 0);
 __ZN3p2t12SweepContext8AddToMapEPNS_8TriangleE(i3, i1);
 i2 = HEAP32[i6 >> 2] | 0;
 HEAP32[i2 + 8 >> 2] = HEAP32[i5 >> 2];
 HEAP32[(HEAP32[i5 >> 2] | 0) + 12 >> 2] = i2;
 if (__ZN3p2t5Sweep8LegalizeERNS_12SweepContextERNS_8TriangleE(i4, i3, i1) | 0) return;
 __ZN3p2t12SweepContext18MapTriangleToNodesERNS_8TriangleE(i3, i1);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13424) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i9 = i7;
 i10 = __ZNKSt3__18ios_base6getlocEv(i4) | 0;
 HEAP32[i11 >> 2] = i10;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i11, 13432) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(i10) | 0;
 HEAP32[i9 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i6, i5 + 20 | 0, i1, i8, i3, i4);
 STACKTOP = i7;
 return HEAP32[i1 >> 2] | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i5 >> 2] | 0) + 4 >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 288 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 288) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = i7;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i1, i6) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i7 = 0;
 i4 = i1;
 i2 = i6 - i4 | 0;
 if (i2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i3);
 if (i2 >>> 0 < 11) {
  HEAP8[i3 >> 0] = i2 << 1;
  i5 = i3 + 1 | 0;
 } else {
  i7 = i2 + 16 & -16;
  i5 = __Znwj(i7) | 0;
  HEAP32[i3 + 8 >> 2] = i5;
  HEAP32[i3 >> 2] = i7 | 1;
  HEAP32[i3 + 4 >> 2] = i2;
 }
 i3 = i6 - i4 | 0;
 if ((i1 | 0) != (i6 | 0)) {
  i2 = i5;
  while (1) {
   HEAP8[i2 >> 0] = HEAP8[i1 >> 0] | 0;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) == (i6 | 0)) break; else i2 = i2 + 1 | 0;
  }
 }
 HEAP8[i5 + i3 >> 0] = 0;
 return;
}

function __ZN3p2t14AdvancingFront10LocateNodeERKd(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, d5 = 0.0, i6 = 0, i7 = 0, i8 = 0;
 i6 = i1 + 8 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 d5 = +HEAPF64[i2 >> 3];
 if (d5 < +HEAPF64[i1 + 16 >> 3]) {
  while (1) {
   i1 = HEAP32[i1 + 12 >> 2] | 0;
   if (!i1) {
    i7 = 0;
    i8 = 8;
    break;
   }
   if (d5 >= +HEAPF64[i1 + 16 >> 3]) {
    i3 = i1;
    break;
   }
  }
  if ((i8 | 0) == 8) return i7 | 0;
  HEAP32[i6 >> 2] = i3;
  i8 = i3;
  return i8 | 0;
 } else {
  while (1) {
   i1 = HEAP32[i1 + 8 >> 2] | 0;
   if (!i1) {
    i7 = 0;
    i8 = 8;
    break;
   }
   if (d5 < +HEAPF64[i1 + 16 >> 3]) {
    i4 = i1;
    break;
   }
  }
  if ((i8 | 0) == 8) return i7 | 0;
  i8 = HEAP32[i4 + 12 >> 2] | 0;
  HEAP32[i6 >> 2] = i8;
  return i8 | 0;
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE(i5, i6, i1, i3, i4, i2) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 4 | 0;
 i9 = i7;
 i5 = i5 + 8 | 0;
 i5 = FUNCTION_TABLE_ii[HEAP32[HEAP32[i5 >> 2] >> 2] & 127](i5) | 0;
 HEAP32[i9 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i9 >> 2];
 i1 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb(i1, i8, i5, i5 + 168 | 0, i2, i4, 0) | 0) - i5 | 0;
 if ((i1 | 0) < 168) HEAP32[i6 >> 2] = ((i1 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = i7;
 return;
}

function __ZN3p2t8Triangle12MarkNeighborEPNS_5PointES2_PS0_(i9, i1, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i2 = HEAP32[i9 + 16 >> 2] | 0;
 i4 = (i2 | 0) == (i1 | 0);
 i5 = HEAP32[i9 + 12 >> 2] | 0;
 if (!(i4 & (i5 | 0) == (i7 | 0)) ? (i6 = (i5 | 0) == (i1 | 0), !(i6 & (i2 | 0) == (i7 | 0))) : 0) {
  i3 = HEAP32[i9 + 8 >> 2] | 0;
  i1 = (i3 | 0) == (i1 | 0);
  if (i1 & (i2 | 0) == (i7 | 0) | i4 & (i3 | 0) == (i7 | 0)) {
   HEAP32[i9 + 24 >> 2] = i8;
   return;
  }
  if (!(i1 & (i5 | 0) == (i7 | 0) | i6 & (i3 | 0) == (i7 | 0))) {
   i9 = ___cxa_allocate_exception(8) | 0;
   __ZNSt13runtime_errorC2EPKc(i9, 20063);
   ___cxa_throw(i9 | 0, 624, 90);
  }
  HEAP32[i9 + 28 >> 2] = i8;
  return;
 }
 HEAP32[i9 + 20 >> 2] = i8;
 return;
}

function __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEEC2ERKS6_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 2;
 if (!i2) return;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i1 = __Znwj(i1) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i1 + (i2 << 2);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
  HEAP32[i6 >> 2] = i1;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEEclEOS9_(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6;
 i4 = HEAP32[i1 >> 2] | 0;
 HEAP32[i5 >> 2] = i4;
 i1 = HEAP32[i4 >> 2] | 0;
 i2 = HEAP32[i3 + 4 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i2 >> 2] | 0)) {
  STACKTOP = i6;
  return;
 }
 HEAP32[i2 >> 2] = i1;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i3 = i2 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) {
  __ZNSt3__16vectorIP6VertexNS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(i2, i5);
  STACKTOP = i6;
  return;
 } else {
  HEAP32[i1 >> 2] = i4;
  HEAP32[i3 >> 2] = (HEAP32[i3 >> 2] | 0) + 4;
  STACKTOP = i6;
  return;
 }
}

function __ZNSt3__16vectorIPN3p2t5PointENS_9allocatorIS3_EEEC2ERKS6_(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0, i5 = 0, i6 = 0;
 HEAP32[i4 >> 2] = 0;
 i6 = i4 + 4 | 0;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 i5 = i3 + 4 | 0;
 i1 = (HEAP32[i5 >> 2] | 0) - (HEAP32[i3 >> 2] | 0) | 0;
 i2 = i1 >> 2;
 if (!i2) return;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i4);
 i1 = __Znwj(i1) | 0;
 HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 HEAP32[i4 + 8 >> 2] = i1 + (i2 << 2);
 i2 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i5 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) return;
 do {
  HEAP32[i1 >> 2] = HEAP32[i2 >> 2];
  i1 = (HEAP32[i6 >> 2] | 0) + 4 | 0;
  HEAP32[i6 >> 2] = i1;
  i2 = i2 + 4 | 0;
 } while ((i2 | 0) != (i3 | 0));
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEEclEOSA_(i3, i4, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i1 = HEAP32[i2 >> 2] | 0;
 if ((i1 | 0) < 0) {
  i1 = i2 + 4 | 0;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = i3;
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = i2;
  return;
 }
 i1 = HEAP32[(HEAP32[(HEAP32[i4 + 4 >> 2] | 0) + 120 >> 2] | 0) + (i1 << 2) >> 2] | 0;
 if (!i1) {
  i1 = i2 + 4 | 0;
  i2 = HEAP32[i1 + 4 >> 2] | 0;
  i4 = i3;
  HEAP32[i4 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i4 + 4 >> 2] = i2;
  return;
 } else {
  FUNCTION_TABLE_viid[HEAP32[(HEAP32[i1 >> 2] | 0) + 12 >> 2] & 3](i3, i1, +HEAPF32[(HEAP32[HEAP32[i4 + 8 >> 2] >> 2] | 0) + 28 >> 2]);
  return;
 }
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i6 = i2 + 4 | 0;
 i3 = i1 + 4 | 0;
 i5 = (HEAP32[i6 >> 2] | 0) - i4 | 0;
 i7 = (HEAP32[i3 >> 2] | 0) + (0 - (i5 >> 2) << 2) | 0;
 HEAP32[i3 >> 2] = i7;
 _memcpy(i7 | 0, i4 | 0, i5 | 0) | 0;
 i5 = HEAP32[i2 >> 2] | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i3 >> 2] = i5;
 i5 = i1 + 8 | 0;
 i4 = HEAP32[i6 >> 2] | 0;
 HEAP32[i6 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i5 >> 2] = i4;
 i5 = i2 + 8 | 0;
 i2 = i1 + 12 | 0;
 i4 = HEAP32[i5 >> 2] | 0;
 HEAP32[i5 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i2 >> 2] = i4;
 HEAP32[i1 >> 2] = HEAP32[i3 >> 2];
 return;
}

function __ZN3p2t12SweepContextC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 i3 = i1 + 56 | 0;
 i2 = i1 + 80 | 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP32[i3 + 12 >> 2] = 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 20 >> 2] = 0;
 HEAP32[i2 >> 2] = i2;
 HEAP32[i1 + 84 >> 2] = i2;
 i2 = i1 + 88 | 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAPF64[i1 + 32 >> 3] = 0.0;
 HEAP8[i1 + 40 >> 0] = 0;
 HEAP32[i1 + 48 >> 2] = 0;
 HEAP8[i1 + 52 >> 0] = 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 16 >> 2] = 0;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 24 >> 2] = 0;
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 184;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 194;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 184;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 >> 2;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 194;
 HEAP32[i8 >> 2] = i1 + (i5 << 2);
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + (i3 >>> 2 << 2);
 return;
}

function _fputc(i5, i6) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i7 = 0;
 if ((HEAP32[i6 + 76 >> 2] | 0) >= 0 ? (___lockfile(i6) | 0) != 0 : 0) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i2 = i6 + 20 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i2 >> 2] = i3 + 1;
   HEAP8[i3 >> 0] = i5;
   i1 = i5 & 255;
  } else i1 = ___overflow(i6, i5) | 0;
  ___unlockfile(i6);
 } else i7 = 3;
 do if ((i7 | 0) == 3) {
  if ((HEAP8[i6 + 75 >> 0] | 0) != (i5 | 0) ? (i4 = i6 + 20 | 0, i1 = HEAP32[i4 >> 2] | 0, i1 >>> 0 < (HEAP32[i6 + 16 >> 2] | 0) >>> 0) : 0) {
   HEAP32[i4 >> 2] = i1 + 1;
   HEAP8[i1 >> 0] = i5;
   i1 = i5 & 255;
   break;
  }
  i1 = ___overflow(i6, i5) | 0;
 } while (0);
 return i1 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13424) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 48 >> 2] & 7](i7, 27643, 27669, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13580) | 0;
 HEAP32[i3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_(i6, i8, i7) {
 i6 = i6 | 0;
 i8 = i8 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i6 + 4 | 0;
 i2 = (HEAP32[i4 >> 2] | 0) != 184;
 i1 = HEAP32[i6 >> 2] | 0;
 i5 = i1;
 i3 = (HEAP32[i7 >> 2] | 0) - i5 | 0;
 i3 = i3 >>> 0 < 2147483647 ? i3 << 1 : -1;
 i5 = (HEAP32[i8 >> 2] | 0) - i5 | 0;
 i1 = _realloc(i2 ? i1 : 0, i3) | 0;
 if (!i1) __ZSt17__throw_bad_allocv();
 if (!i2) {
  i2 = HEAP32[i6 >> 2] | 0;
  HEAP32[i6 >> 2] = i1;
  if (i2) {
   FUNCTION_TABLE_vi[HEAP32[i4 >> 2] & 255](i2);
   i1 = HEAP32[i6 >> 2] | 0;
  }
 } else HEAP32[i6 >> 2] = i1;
 HEAP32[i4 >> 2] = 194;
 HEAP32[i8 >> 2] = i1 + i5;
 HEAP32[i7 >> 2] = (HEAP32[i6 >> 2] | 0) + i3;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i2 = __ZNKSt3__18ios_base6getlocEv(i2) | 0;
 HEAP32[i6 >> 2] = i2;
 i7 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13432) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 32 >> 2] & 7](i7, 27643, 27669, i1) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i6, 13572) | 0;
 HEAP8[i3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 127](i1) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i1 >> 2] | 0) + 20 >> 2] & 63](i4, i1);
 __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
 STACKTOP = i5;
 return;
}

function __ZN18SubGoalFromSegment11makeSubGoalEfRK4Vec2R4Plan(i4, d3, i2, i1) {
 i4 = i4 | 0;
 d3 = +d3;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, d9 = 0.0, d10 = 0.0, d11 = 0.0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i5 + 8 | 0;
 i8 = i5;
 i6 = HEAP32[i4 + 4 >> 2] | 0;
 d10 = +HEAPF32[i6 + 28 >> 2];
 d9 = +HEAPF32[i6 + 44 >> 2] * d3 + d10;
 d11 = +HEAPF32[i6 + 32 >> 2];
 d3 = +HEAPF32[i6 + 48 >> 2] * d3 + d11;
 i4 = (d9 - d10) * (+HEAPF32[i2 + 4 >> 2] - d11) - (d3 - d11) * (+HEAPF32[i2 >> 2] - d10) > 0.0;
 HEAPF32[i8 >> 2] = d9;
 HEAPF32[i8 + 4 >> 2] = d3;
 HEAP32[i7 >> 2] = HEAP32[i8 >> 2];
 HEAP32[i7 + 4 >> 2] = HEAP32[i8 + 4 >> 2];
 __ZN4Plan6addSegE4Vec2RKS0_b(i1, i7, i6 + 44 | 0, i4);
 STACKTOP = i5;
 return;
}

function ___overflow(i8, i6) {
 i8 = i8 | 0;
 i6 = i6 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i7 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i9;
 i5 = i6 & 255;
 HEAP8[i7 >> 0] = i5;
 i2 = i8 + 16 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 if (!i3) if (!(___towrite(i8) | 0)) {
  i3 = HEAP32[i2 >> 2] | 0;
  i4 = 4;
 } else i1 = -1; else i4 = 4;
 do if ((i4 | 0) == 4) {
  i2 = i8 + 20 | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if (i4 >>> 0 < i3 >>> 0 ? (i1 = i6 & 255, (i1 | 0) != (HEAP8[i8 + 75 >> 0] | 0)) : 0) {
   HEAP32[i2 >> 2] = i4 + 1;
   HEAP8[i4 >> 0] = i5;
   break;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[i8 + 36 >> 2] & 31](i8, i7, 1) | 0) == 1) i1 = HEAPU8[i7 >> 0] | 0; else i1 = -1;
 } while (0);
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j(i1, i10, i2, i8, i9) {
 i1 = i1 | 0;
 i10 = i10 | 0;
 i2 = i2 | 0;
 i8 = i8 | 0;
 i9 = i9 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i7 = i8;
 i6 = i1 + 8 | 0;
 L1 : do if ((i2 | 0) == (i8 | 0) | (i9 | 0) == 0) i1 = 0; else {
  i1 = 0;
  i5 = 0;
  while (1) {
   i4 = _uselocale(HEAP32[i6 >> 2] | 0) | 0;
   i3 = _mbrlen(i2, i7 - i2 | 0, i10) | 0;
   if (i4) _uselocale(i4) | 0;
   switch (i3 | 0) {
   case -2:
   case -1:
    break L1;
   case 0:
    {
     i2 = i2 + 1 | 0;
     i3 = 1;
     break;
    }
   default:
    i2 = i2 + i3 | 0;
   }
   i1 = i3 + i1 | 0;
   i5 = i5 + 1 | 0;
   if ((i2 | 0) == (i8 | 0) | i5 >>> 0 >= i9 >>> 0) break L1;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if (HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i1, i2);
  if ((HEAP8[i1 >> 0] | 0) != 0 ? (i4 = HEAP32[i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0) == -1) : 0) {
   i4 = i2 + ((HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
   HEAP32[i4 >> 2] = HEAP32[i4 >> 2] | 1;
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1);
 }
 STACKTOP = i3;
 return i2 | 0;
}

function __ZN3p2t8Triangle8LegalizeERNS_5PointES2_(i1, i7, i6) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i2 = i1 + 8 | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i4 = i1 + 12 | 0;
 if ((i3 | 0) == (i7 | 0)) {
  HEAP32[i4 >> 2] = i7;
  i7 = i1 + 16 | 0;
  HEAP32[i2 >> 2] = HEAP32[i7 >> 2];
  HEAP32[i7 >> 2] = i6;
  return;
 }
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = i1 + 16 | 0;
 if ((i5 | 0) == (i7 | 0)) {
  HEAP32[i1 >> 2] = i7;
  HEAP32[i4 >> 2] = i3;
  HEAP32[i2 >> 2] = i6;
  return;
 }
 if ((HEAP32[i1 >> 2] | 0) != (i7 | 0)) {
  i7 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i7, 20084);
  ___cxa_throw(i7 | 0, 624, 90);
 }
 HEAP32[i2 >> 2] = i7;
 HEAP32[i1 >> 2] = i5;
 HEAP32[i4 >> 2] = i6;
 return;
}

function __ZN3p2t8Triangle9EdgeIndexEPKNS_5PointES3_(i1, i4, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i6 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 do if ((i2 | 0) == (i4 | 0)) if ((i3 | 0) != (i5 | 0)) if ((HEAP32[i1 + 16 >> 2] | 0) == (i5 | 0)) i1 = 1; else i6 = 10; else i1 = 2; else {
  i1 = HEAP32[i1 + 16 >> 2] | 0;
  if ((i3 | 0) == (i4 | 0)) {
   if ((i1 | 0) == (i5 | 0)) {
    i1 = 0;
    break;
   }
   if ((i2 | 0) == (i5 | 0)) {
    i1 = 2;
    break;
   } else {
    i6 = 10;
    break;
   }
  }
  if ((i1 | 0) == (i4 | 0)) if ((i2 | 0) != (i5 | 0)) if ((i3 | 0) == (i5 | 0)) i1 = 0; else i6 = 10; else i1 = 1; else i6 = 10;
 } while (0);
 if ((i6 | 0) == 10) i1 = -1;
 return i1 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2544] | 0) == 0 ? (___cxa_guard_acquire(2544) | 0) != 0 : 0) {
  if ((HEAP8[2552] | 0) == 0 ? (___cxa_guard_acquire(2552) | 0) != 0 : 0) {
   i1 = 16332;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 16620);
   ___cxa_atexit(192, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2552);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16332, 16620) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16344, 16632) | 0;
  HEAP32[4161] = 16332;
  ___cxa_guard_release(2544);
 }
 return HEAP32[4161] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2528] | 0) == 0 ? (___cxa_guard_acquire(2528) | 0) != 0 : 0) {
  if ((HEAP8[2536] | 0) == 0 ? (___cxa_guard_acquire(2536) | 0) != 0 : 0) {
   i1 = 16040;
   do {
    HEAP32[i1 >> 2] = 0;
    HEAP32[i1 + 4 >> 2] = 0;
    HEAP32[i1 + 8 >> 2] = 0;
    i1 = i1 + 12 | 0;
   } while ((i1 | 0) != 16328);
   ___cxa_atexit(191, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(2536);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16040, 29360) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16052, 29363) | 0;
  HEAP32[4082] = 16040;
  ___cxa_guard_release(2528);
 }
 return HEAP32[4082] | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 4 | 0;
 i3 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0;
 if (((((HEAP32[i3 + (i2 + 24) >> 2] | 0) != 0 ? (HEAP32[i3 + (i2 + 16) >> 2] | 0) == 0 : 0) ? (HEAP32[i3 + (i2 + 4) >> 2] & 8192 | 0) != 0 : 0) ? !(__ZSt18uncaught_exceptionv() | 0) : 0) ? (i3 = HEAP32[i1 >> 2] | 0, i3 = HEAP32[i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0, (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 24 >> 2] & 127](i3) | 0) == -1) : 0) {
  i3 = HEAP32[i1 >> 2] | 0;
  i3 = i3 + ((HEAP32[(HEAP32[i3 >> 2] | 0) + -12 >> 2] | 0) + 16) | 0;
  HEAP32[i3 >> 2] = HEAP32[i3 >> 2] | 1;
 }
 return;
}

function _fflush(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 do if (i2) {
  if ((HEAP32[i2 + 76 >> 2] | 0) <= -1) {
   i1 = ___fflush_unlocked(i2) | 0;
   break;
  }
  i3 = (___lockfile(i2) | 0) == 0;
  i1 = ___fflush_unlocked(i2) | 0;
  if (!i3) ___unlockfile(i2);
 } else {
  if (!(HEAP32[1646] | 0)) i1 = 0; else i1 = _fflush(HEAP32[1646] | 0) | 0;
  ___lock(6352);
  i2 = HEAP32[1587] | 0;
  if (i2) do {
   if ((HEAP32[i2 + 76 >> 2] | 0) > -1) i3 = ___lockfile(i2) | 0; else i3 = 0;
   if ((HEAP32[i2 + 20 >> 2] | 0) >>> 0 > (HEAP32[i2 + 28 >> 2] | 0) >>> 0) i1 = ___fflush_unlocked(i2) | 0 | i1;
   if (i3) ___unlockfile(i2);
   i2 = HEAP32[i2 + 56 >> 2] | 0;
  } while ((i2 | 0) != 0);
  ___unlock(6352);
 } while (0);
 return i1 | 0;
}

function _pad(i6, i2, i5, i4, i1) {
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i3 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 i7 = i8;
 do if ((i5 | 0) > (i4 | 0) & (i1 & 73728 | 0) == 0) {
  i1 = i5 - i4 | 0;
  _memset(i7 | 0, i2 | 0, (i1 >>> 0 > 256 ? 256 : i1) | 0) | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = (i2 & 32 | 0) == 0;
  if (i1 >>> 0 > 255) {
   i4 = i5 - i4 | 0;
   do {
    if (i3) {
     ___fwritex(i7, 256, i6) | 0;
     i2 = HEAP32[i6 >> 2] | 0;
    }
    i1 = i1 + -256 | 0;
    i3 = (i2 & 32 | 0) == 0;
   } while (i1 >>> 0 > 255);
   if (i3) i1 = i4 & 255; else break;
  } else if (!i3) break;
  ___fwritex(i7, i1, i6) | 0;
 } while (0);
 STACKTOP = i8;
 return;
}

function ___remdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i5 | 0;
 i7 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i10 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i1 = _i64Subtract(i7 ^ i1, i6 ^ i2, i7, i6) | 0;
 i2 = tempRet0;
 ___udivmoddi4(i1, i2, _i64Subtract(i10 ^ i3, i9 ^ i4, i10, i9) | 0, tempRet0, i8) | 0;
 i4 = _i64Subtract(HEAP32[i8 >> 2] ^ i7, HEAP32[i8 + 4 >> 2] ^ i6, i7, i6) | 0;
 i3 = tempRet0;
 STACKTOP = i5;
 return (tempRet0 = i3, i4) | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_(i6, i9, i8, i4, i3, i5, 29052, 29060) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_(i6, i9, i8, i4, i3, i5, 14e3, 14032) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i5, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i3 = i3 | 0;
 var i6 = 0, i8 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i6 + 4 | 0;
 i8 = i6;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i5, i3, 4) | 0;
 if (!(HEAP32[i5 >> 2] & 4)) {
  if ((i1 | 0) < 69) i1 = i1 + 2e3 | 0; else i1 = (i1 + -69 | 0) >>> 0 < 31 ? i1 + 1900 | 0 : i1;
  HEAP32[i7 >> 2] = i1 + -1900;
 }
 STACKTOP = i6;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc(i4, i5, i6, i3, i1, i2) {
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 i10 = i7 + 16 | 0;
 i11 = i7 + 12 | 0;
 i8 = i7;
 i9 = i7 + 8 | 0;
 HEAP32[i11 >> 2] = i10 + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i4, i10, i11, i3, i1, i2);
 i2 = i8;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i9 >> 2] = i10;
 i2 = (HEAP32[i6 >> 2] | 0) - i5 >> 2;
 i1 = _uselocale(HEAP32[i4 >> 2] | 0) | 0;
 i2 = _mbsrtowcs(i5, i9, i2, i8) | 0;
 if (i1) _uselocale(i1) | 0;
 HEAP32[i6 >> 2] = i5 + (i2 << 2);
 STACKTOP = i7;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl(i6, i1, i2, i4, i3, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i7 = 0, i8 = 0, i9 = 0, i10 = 0, i11 = 0;
 i7 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i7 + 12 | 0;
 i9 = i7 + 8 | 0;
 i11 = i7 + 4 | 0;
 i10 = i7;
 HEAP32[i11 >> 2] = HEAP32[i1 >> 2];
 HEAP32[i10 >> 2] = HEAP32[i2 >> 2];
 HEAP32[i9 >> 2] = HEAP32[i11 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i10 >> 2];
 i6 = __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_(i6, i9, i8, i4, i3, i5) | 0;
 STACKTOP = i7;
 return i6 | 0;
}

function _update_agent(i1, d4, d3) {
 i1 = i1 | 0;
 d4 = +d4;
 d3 = +d3;
 var i2 = 0, i5 = 0, i6 = 0, d7 = 0.0;
 if (!i1) return;
 i1 = ___dynamic_cast(i1, 32, 40, 0) | 0;
 if (!i1) return;
 i2 = HEAP32[711] | 0;
 if (d4 > 0.0) {
  i5 = i1 + 12 | 0;
  i6 = HEAP32[i5 >> 2] | 0;
  HEAPF32[i6 + 28 >> 2] = d4;
  d7 = d4 * 2.0;
  HEAPF32[i6 + 20 >> 2] = d7;
  HEAPF32[i6 + 24 >> 2] = d7;
  HEAPF32[i6 + 56 >> 2] = d7;
  _emscripten_asm_const_2(12, i1 | 0, +(+HEAPF32[(HEAP32[i5 >> 2] | 0) + 28 >> 2])) | 0;
  __ZN8Document14addAgentRadiusEf(i2 + 72 | 0, d4);
 }
 if (d3 > 0.0) {
  i6 = HEAP32[i1 + 12 >> 2] | 0;
  HEAPF32[i6 + 68 >> 2] = d3;
  HEAPF32[i6 + 64 >> 2] = d3 * 2.0;
 }
 HEAP32[i2 + 312 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 < (HEAP32[i5 >> 2] | 0) >>> 0) {
    HEAP32[i4 >> 2] = i2 + 1;
    i2 = HEAP8[i2 >> 0] | 0;
   } else {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
    i2 = i2 & 255;
   }
   HEAP8[i3 >> 0] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 31](i7, HEAP32[i3 >> 2] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP32[i3 >> 2] | 0;
    HEAP32[i4 >> 2] = i2 + 4;
    HEAP32[i2 >> 2] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i4 = i7 + 24 | 0;
 i5 = i7 + 28 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i7 >> 2] | 0) + 52 >> 2] & 31](i7, HEAPU8[i3 >> 0] | 0) | 0) == -1) break L1;
   } else {
    i8 = HEAP8[i3 >> 0] | 0;
    HEAP32[i4 >> 2] = i2 + 1;
    HEAP8[i2 >> 0] = i8;
   }
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 1 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 12 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 L1 : do switch (HEAP32[i2 + 4 >> 2] & 176 | 0) {
 case 16:
  {
   i2 = HEAP8[i1 >> 0] | 0;
   switch (i2 << 24 >> 24) {
   case 43:
   case 45:
    {
     i1 = i1 + 1 | 0;
     break L1;
    }
   default:
    {}
   }
   if ((i3 - i1 | 0) > 1 & i2 << 24 >> 24 == 48) {
    switch (HEAP8[i1 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      i4 = 7;
      break L1;
     }
    }
    i1 = i1 + 2 | 0;
   } else i4 = 7;
   break;
  }
 case 32:
  {
   i1 = i3;
   break;
  }
 default:
  i4 = 7;
 } while (0);
 return i1 | 0;
}

function _scalbn(d1, i3) {
 d1 = +d1;
 i3 = i3 | 0;
 var i2 = 0;
 if ((i3 | 0) > 1023) {
  d1 = d1 * 89884656743115795.0e291;
  i2 = i3 + -1023 | 0;
  if ((i2 | 0) > 1023) {
   i2 = i3 + -2046 | 0;
   i2 = (i2 | 0) > 1023 ? 1023 : i2;
   d1 = d1 * 89884656743115795.0e291;
  }
 } else if ((i3 | 0) < -1022) {
  d1 = d1 * 2.2250738585072014e-308;
  i2 = i3 + 1022 | 0;
  if ((i2 | 0) < -1022) {
   i2 = i3 + 2044 | 0;
   i2 = (i2 | 0) < -1022 ? -1022 : i2;
   d1 = d1 * 2.2250738585072014e-308;
  }
 } else i2 = i3;
 i2 = _bitshift64Shl(i2 + 1023 | 0, 0, 52) | 0;
 i3 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = i2;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(d1 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 2) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 + -1 | 0) >>> 0 < 31 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i6, i2, i4, i7, i3) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i7, i3, 3) | 0;
 i2 = HEAP32[i7 >> 2] | 0;
 if ((i1 | 0) < 366 & (i2 & 4 | 0) == 0) HEAP32[i6 >> 2] = i1; else HEAP32[i7 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 11700;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13500) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 11828;
 HEAP32[i3 + 32 >> 2] = i1;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i5, 13492) | 0;
 __ZNSt3__16localeD2Ev(i5);
 HEAP32[i3 + 36 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP8[i3 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 STACKTOP = i4;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 13 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1 + -1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function _frexp(d1, i5) {
 d1 = +d1;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i2 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 i4 = _bitshift64Lshr(i2 | 0, i3 | 0, 52) | 0;
 i4 = i4 & 2047;
 switch (i4 | 0) {
 case 0:
  {
   if (d1 != 0.0) {
    d1 = +_frexp(d1 * 18446744073709552.0e3, i5);
    i2 = (HEAP32[i5 >> 2] | 0) + -64 | 0;
   } else i2 = 0;
   HEAP32[i5 >> 2] = i2;
   break;
  }
 case 2047:
  break;
 default:
  {
   HEAP32[i5 >> 2] = i4 + -1022;
   HEAP32[tempDoublePtr >> 2] = i2;
   HEAP32[tempDoublePtr + 4 >> 2] = i3 & -2146435073 | 1071644672;
   d1 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +d1;
}

function __ZNSt3__16__treeINS_12__value_typeINS_4pairIP6VertexS4_EEP8HalfEdgeEENS_19__map_value_compareIS5_S8_NS_4lessIS5_EELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeINS_4pairIP6VertexS4_EEP8HalfEdgeEENS_19__map_value_compareIS5_S8_NS_4lessIS5_EELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeINS_4pairIP6VertexS4_EEP8HalfEdgeEENS_19__map_value_compareIS5_S8_NS_4lessIS5_EELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi(i7, i1, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i4 = i7 + 12 | 0;
 i5 = i7 + 16 | 0;
 L1 : do if ((i6 | 0) > 0) {
  i3 = i1;
  i1 = 0;
  while (1) {
   i2 = HEAP32[i4 >> 2] | 0;
   if (i2 >>> 0 >= (HEAP32[i5 >> 2] | 0) >>> 0) {
    i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i7 >> 2] | 0) + 40 >> 2] & 127](i7) | 0;
    if ((i2 | 0) == -1) break L1;
   } else {
    HEAP32[i4 >> 2] = i2 + 4;
    i2 = HEAP32[i2 >> 2] | 0;
   }
   HEAP32[i3 >> 2] = i2;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i6 | 0)) i3 = i3 + 4 | 0; else break;
  }
 } else i1 = 0; while (0);
 return i1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 1) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 7 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 60 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 61 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 2) | 0;
 i2 = HEAP32[i6 >> 2] | 0;
 if ((i1 | 0) < 24 & (i2 & 4 | 0) == 0) HEAP32[i7 >> 2] = i1; else HEAP32[i6 >> 2] = i2 | 4;
 STACKTOP = i5;
 return;
}

function __ZN3p2t8Triangle19MarkConstrainedEdgeEPNS_5PointES2_(i9, i7, i8) {
 i9 = i9 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = HEAP32[i9 + 8 >> 2] | 0;
 i4 = (i1 | 0) == (i8 | 0);
 i5 = HEAP32[i9 + 12 >> 2] | 0;
 if (!(i4 & (i5 | 0) == (i7 | 0)) ? (i6 = (i5 | 0) == (i8 | 0), !(i6 & (i1 | 0) == (i7 | 0))) : 0) {
  i2 = HEAP32[i9 + 16 >> 2] | 0;
  if (!(i4 & (i2 | 0) == (i7 | 0)) ? (i3 = (i2 | 0) == (i8 | 0), !(i3 & (i1 | 0) == (i7 | 0))) : 0) {
   if (!(i6 & (i2 | 0) == (i7 | 0) | i3 & (i5 | 0) == (i7 | 0))) return;
   HEAP8[i9 >> 0] = 1;
   return;
  }
  HEAP8[i9 + 1 >> 0] = 1;
  return;
 }
 HEAP8[i9 + 2 >> 0] = 1;
 return;
}

function _ungetc(i1, i5) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 do if ((i1 | 0) != -1) {
  if ((HEAP32[i5 + 76 >> 2] | 0) > -1) i4 = ___lockfile(i5) | 0; else i4 = 0;
  if (!((HEAP32[i5 + 8 >> 2] | 0) == 0 ? (___toread(i5) | 0) != 0 : 0)) i6 = 6;
  if ((i6 | 0) == 6 ? (i2 = i5 + 4 | 0, i3 = HEAP32[i2 >> 2] | 0, i3 >>> 0 > ((HEAP32[i5 + 44 >> 2] | 0) + -8 | 0) >>> 0) : 0) {
   i6 = i3 + -1 | 0;
   HEAP32[i2 >> 2] = i6;
   HEAP8[i6 >> 0] = i1;
   HEAP32[i5 >> 2] = HEAP32[i5 >> 2] & -17;
   if (!i4) break;
   ___unlockfile(i5);
   break;
  }
  if (i4) {
   ___unlockfile(i5);
   i1 = -1;
  } else i1 = -1;
 } else i1 = -1; while (0);
 return i1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeIP6VertexNS_4pairIS3_S3_EEEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIP6VertexNS_4pairIS3_S3_EEEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIP6VertexNS_4pairIS3_S3_EEEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) == (i5 | 0)) {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } else {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj(i2, i5, i6) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 var d1 = 0.0, i3 = 0, i4 = 0, i7 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i8;
 do if ((i2 | 0) != (i5 | 0)) {
  i3 = ___errno_location() | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  HEAP32[i3 >> 2] = 0;
  d1 = +_strtold_l(i2, i7, __ZNSt3__16__clocEv() | 0);
  i2 = HEAP32[i3 >> 2] | 0;
  if (!i2) HEAP32[i3 >> 2] = i4;
  if ((HEAP32[i7 >> 2] | 0) != (i5 | 0)) {
   HEAP32[i6 >> 2] = 4;
   d1 = 0.0;
   break;
  }
  if ((i2 | 0) == 34) HEAP32[i6 >> 2] = 4;
 } else {
  HEAP32[i6 >> 2] = 4;
  d1 = 0.0;
 } while (0);
 STACKTOP = i8;
 return +d1;
}

function _started_new_poly() {
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i4;
 i2 = HEAP32[711] | 0;
 i3 = HEAP32[i2 + 100 >> 2] | 0;
 if ((HEAP32[i2 + 96 >> 2] | 0) == (i3 | 0)) {
  STACKTOP = i4;
  return;
 }
 i3 = HEAP32[i3 + -4 >> 2] | 0;
 if ((HEAP32[i3 >> 2] | 0) == (HEAP32[i3 + 4 >> 2] | 0)) {
  STACKTOP = i4;
  return;
 };
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 __ZN6MapDef3addERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(i2 + 84 | 0, i1) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1);
 STACKTOP = i4;
 return;
}

function ___fflush_unlocked(i7) {
 i7 = i7 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i1 = i7 + 20 | 0;
 i5 = i7 + 28 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i5 >> 2] | 0) >>> 0 ? (FUNCTION_TABLE_iiii[HEAP32[i7 + 36 >> 2] & 31](i7, 0, 0) | 0, (HEAP32[i1 >> 2] | 0) == 0) : 0) i1 = -1; else {
  i6 = i7 + 4 | 0;
  i2 = HEAP32[i6 >> 2] | 0;
  i3 = i7 + 8 | 0;
  i4 = HEAP32[i3 >> 2] | 0;
  if (i2 >>> 0 < i4 >>> 0) FUNCTION_TABLE_iiii[HEAP32[i7 + 40 >> 2] & 31](i7, i2 - i4 | 0, 1) | 0;
  HEAP32[i7 + 16 >> 2] = 0;
  HEAP32[i5 >> 2] = 0;
  HEAP32[i1 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i6 >> 2] = 0;
  i1 = 0;
 }
 return i1 | 0;
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = HEAP8[i2 >> 0] | 0;
  if (i3 << 24 >> 24 < i4 << 24 >> 24) {
   i1 = -1;
   break L1;
  }
  if (i4 << 24 >> 24 < i3 << 24 >> 24) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 1 | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeINS_4pairIffEEP6VertexEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeINS_4pairIffEEP6VertexEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeINS_4pairIffEEP6VertexEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function _strtox(i7, i6, i1) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var d2 = 0.0, i3 = 0, i4 = 0, i5 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i5 = i8;
 i3 = i5;
 i4 = i3 + 112 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 i3 = i5 + 4 | 0;
 HEAP32[i3 >> 2] = i7;
 i4 = i5 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i5 + 44 >> 2] = i7;
 HEAP32[i5 + 76 >> 2] = -1;
 ___shlim(i5, 0);
 d2 = +___floatscan(i5, i1, 1);
 i1 = (HEAP32[i3 >> 2] | 0) - (HEAP32[i4 >> 2] | 0) + (HEAP32[i5 + 108 >> 2] | 0) | 0;
 if (i6) HEAP32[i6 >> 2] = (i1 | 0) != 0 ? i7 + i1 | 0 : i7;
 STACKTOP = i8;
 return +d2;
}

function __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 i1 = i5 + 44 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 i3 = HEAP32[i5 + 24 >> 2] | 0;
 if (i2 >>> 0 < i3 >>> 0) {
  HEAP32[i1 >> 2] = i3;
  i2 = i3;
 }
 if (!(HEAP32[i5 + 48 >> 2] & 8)) {
  i5 = -1;
  return i5 | 0;
 }
 i4 = i5 + 16 | 0;
 i1 = HEAP32[i4 >> 2] | 0;
 i3 = i5 + 12 | 0;
 if (i1 >>> 0 < i2 >>> 0) {
  i3 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = i2;
  i1 = i2;
 } else i3 = HEAP32[i3 >> 2] | 0;
 if (i3 >>> 0 >= i1 >>> 0) {
  i5 = -1;
  return i5 | 0;
 }
 i5 = HEAPU8[i3 >> 0] | 0;
 return i5 | 0;
}

function __ZNSt3__16locale5__impD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0;
 HEAP32[i5 >> 2] = 13408;
 i3 = i5 + 8 | 0;
 i4 = i5 + 12 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i4 >> 2] | 0) != (i1 | 0)) {
  i2 = 0;
  do {
   i1 = HEAP32[i1 + (i2 << 2) >> 2] | 0;
   if (i1) __ZNSt3__114__shared_count16__release_sharedEv(i1) | 0;
   i2 = i2 + 1 | 0;
   i1 = HEAP32[i3 >> 2] | 0;
  } while (i2 >>> 0 < (HEAP32[i4 >> 2] | 0) - i1 >> 2 >>> 0);
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i5 + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i3);
 return;
}

function _vasprintf(i7, i6, i5) {
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i8 = 0;
 i8 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i8;
 i2 = _malloc(240) | 0;
 do if (i2) {
  HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
  i1 = _vsnprintf(i2, 240, i6, i1) | 0;
  if (i1 >>> 0 < 240) {
   i6 = _realloc(i2, i1 + 1 | 0) | 0;
   HEAP32[i7 >> 2] = (i6 | 0) != 0 ? i6 : i2;
   break;
  }
  _free(i2);
  if ((i1 | 0) >= 0 ? (i4 = i1 + 1 | 0, i3 = _malloc(i4) | 0, HEAP32[i7 >> 2] = i3, (i3 | 0) != 0) : 0) i1 = _vsnprintf(i3, i4, i6, i5) | 0; else i1 = -1;
 } else i1 = -1; while (0);
 STACKTOP = i8;
 return i1 | 0;
}

function _getc(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 if ((HEAP32[i4 + 76 >> 2] | 0) >= 0 ? (___lockfile(i4) | 0) != 0 : 0) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
  } else i1 = ___uflow(i4) | 0;
  ___unlockfile(i4);
 } else i3 = 3;
 do if ((i3 | 0) == 3) {
  i1 = i4 + 4 | 0;
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < (HEAP32[i4 + 8 >> 2] | 0) >>> 0) {
   HEAP32[i1 >> 2] = i2 + 1;
   i1 = HEAPU8[i2 >> 0] | 0;
   break;
  } else {
   i1 = ___uflow(i4) | 0;
   break;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__16__treeINS_12__value_typeIPN3p2t5PointEiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIPN3p2t5PointEiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIPN3p2t5PointEiEENS_19__map_value_compareIS4_S5_NS_4lessIS4_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_(i3, i1, i6, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i6 = i6 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 var i4 = 0, i7 = 0;
 L1 : do if ((i2 | 0) == (i5 | 0)) i7 = 6; else while (1) {
  if ((i1 | 0) == (i6 | 0)) {
   i1 = -1;
   break L1;
  }
  i3 = HEAP32[i1 >> 2] | 0;
  i4 = HEAP32[i2 >> 2] | 0;
  if ((i3 | 0) < (i4 | 0)) {
   i1 = -1;
   break L1;
  }
  if ((i4 | 0) < (i3 | 0)) {
   i1 = 1;
   break L1;
  }
  i1 = i1 + 4 | 0;
  i2 = i2 + 4 | 0;
  if ((i2 | 0) == (i5 | 0)) {
   i7 = 6;
   break;
  }
 } while (0);
 if ((i7 | 0) == 6) i1 = (i1 | 0) != (i6 | 0) & 1;
 return i1 | 0;
}

function _memcpy(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i2 | 0) >= 4096) return _emscripten_memcpy_big(i1 | 0, i4 | 0, i2 | 0) | 0;
 i3 = i1 | 0;
 if ((i1 & 3) == (i4 & 3)) {
  while (i1 & 3) {
   if (!i2) return i3 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
   i1 = i1 + 1 | 0;
   i4 = i4 + 1 | 0;
   i2 = i2 - 1 | 0;
  }
  while ((i2 | 0) >= 4) {
   HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
   i1 = i1 + 4 | 0;
   i4 = i4 + 4 | 0;
   i2 = i2 - 4 | 0;
  }
 }
 while ((i2 | 0) > 0) {
  HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  i1 = i1 + 1 | 0;
  i4 = i4 + 1 | 0;
  i2 = i2 - 1 | 0;
 }
 return i3 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE(i1, i7, i2, i4, i6, i3) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i3 = i3 | 0;
 var i5 = 0, i8 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i5 + 4 | 0;
 i8 = i5;
 HEAP32[i8 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 >> 2] = HEAP32[i8 >> 2];
 i1 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi(i2, i1, i6, i3, 4) | 0;
 if (!(HEAP32[i6 >> 2] & 4)) HEAP32[i7 >> 2] = i1 + -1900;
 STACKTOP = i5;
 return;
}

function _realloc(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0, i4 = 0;
 if (!i3) {
  i3 = _malloc(i2) | 0;
  return i3 | 0;
 }
 if (i2 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  i3 = 0;
  return i3 | 0;
 }
 i1 = _try_realloc_chunk(i3 + -8 | 0, i2 >>> 0 < 11 ? 16 : i2 + 11 & -8) | 0;
 if (i1) {
  i3 = i1 + 8 | 0;
  return i3 | 0;
 }
 i1 = _malloc(i2) | 0;
 if (!i1) {
  i3 = 0;
  return i3 | 0;
 }
 i4 = HEAP32[i3 + -4 >> 2] | 0;
 i4 = (i4 & -8) - ((i4 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy(i1 | 0, i3 | 0, (i4 >>> 0 < i2 >>> 0 ? i4 : i2) | 0) | 0;
 _free(i3);
 i3 = i1;
 return i3 | 0;
}

function ___divdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0, i7 = 0, i8 = 0, i9 = 0, i10 = 0;
 i10 = i2 >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i9 = ((i2 | 0) < 0 ? -1 : 0) >> 31 | ((i2 | 0) < 0 ? -1 : 0) << 1;
 i6 = i4 >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i5 = ((i4 | 0) < 0 ? -1 : 0) >> 31 | ((i4 | 0) < 0 ? -1 : 0) << 1;
 i8 = _i64Subtract(i10 ^ i1, i9 ^ i2, i10, i9) | 0;
 i7 = tempRet0;
 i1 = i6 ^ i10;
 i2 = i5 ^ i9;
 return _i64Subtract((___udivmoddi4(i8, i7, _i64Subtract(i6 ^ i3, i5 ^ i4, i6, i5) | 0, tempRet0, 0) | 0) ^ i1, tempRet0 ^ i2, i1, i2) | 0;
}

function __ZNSt3__16__treeINS_12__value_typeIP5AgentiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_12__value_typeIP5AgentiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_12__value_typeIP5AgentiEENS_19__map_value_compareIS3_S4_NS_4lessIS3_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function ___toread(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = i3 + 74 | 0;
 i2 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i2 + 255 | i2;
 i1 = i3 + 20 | 0;
 i2 = i3 + 44 | 0;
 if ((HEAP32[i1 >> 2] | 0) >>> 0 > (HEAP32[i2 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[i3 + 36 >> 2] & 31](i3, 0, 0) | 0;
 HEAP32[i3 + 16 >> 2] = 0;
 HEAP32[i3 + 28 >> 2] = 0;
 HEAP32[i1 >> 2] = 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if (i1 & 20) if (!(i1 & 4)) i1 = -1; else {
  HEAP32[i3 >> 2] = i1 | 32;
  i1 = -1;
 } else {
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i3 + 8 >> 2] = i1;
  HEAP32[i3 + 4 >> 2] = i1;
  i1 = 0;
 }
 return i1 | 0;
}

function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i2 = i1 + i5 | 0;
 HEAP32[i2 >> 2] = 5860;
 i3 = i1 + (i5 + 64) | 0;
 HEAP32[i3 >> 2] = 5900;
 HEAP32[i1 + (i5 + 8) >> 2] = 5880;
 i4 = i1 + (i5 + 12) | 0;
 HEAP32[i4 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i5 + 44) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i4);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i3);
 __ZdlPv(i2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc(i5, i4, i3) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP8[i5 >> 0] | 0;
 i2 = (i1 & 1) == 0;
 if (i2) i1 = (i1 & 255) >>> 1; else i1 = HEAP32[i5 + 4 >> 2] | 0;
 do if (i1 >>> 0 >= i4 >>> 0) if (i2) {
  HEAP8[i5 + 1 + i4 >> 0] = 0;
  HEAP8[i5 >> 0] = i4 << 1;
  break;
 } else {
  HEAP8[(HEAP32[i5 + 8 >> 2] | 0) + i4 >> 0] = 0;
  HEAP32[i5 + 4 >> 2] = i4;
  break;
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc(i5, i4 - i1 | 0, i3) | 0; while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(i1, i4, i3, i5) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i2 = 0;
 i1 = i4 + 16 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 do if (i2) {
  if ((i2 | 0) != (i3 | 0)) {
   i5 = i4 + 36 | 0;
   HEAP32[i5 >> 2] = (HEAP32[i5 >> 2] | 0) + 1;
   HEAP32[i4 + 24 >> 2] = 2;
   HEAP8[i4 + 54 >> 0] = 1;
   break;
  }
  i1 = i4 + 24 | 0;
  if ((HEAP32[i1 >> 2] | 0) == 2) HEAP32[i1 >> 2] = i5;
 } else {
  HEAP32[i1 >> 2] = i3;
  HEAP32[i4 + 24 >> 2] = i5;
  HEAP32[i4 + 36 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 11764;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i4 + 4 | 0;
 i5 = i4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i3);
 HEAP32[i3 >> 2] = 11892;
 HEAP32[i3 + 32 >> 2] = i1;
 HEAP32[i3 + 40 >> 2] = i2;
 HEAP32[i3 + 48 >> 2] = -1;
 HEAP8[i3 + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_(i6, i3 + 4 | 0);
 HEAP32[i5 >> 2] = HEAP32[i6 >> 2];
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i3, i5);
 __ZNSt3__16localeD2Ev(i5);
 STACKTOP = i4;
 return;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc(i9, i5, i6, i7, i3, i4) {
 i9 = i9 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i8 = 0, i10 = 0;
 i10 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i8 = i10;
 HEAP8[i8 >> 0] = 37;
 i1 = i8 + 1 | 0;
 HEAP8[i1 >> 0] = i3;
 i2 = i8 + 2 | 0;
 HEAP8[i2 >> 0] = i4;
 HEAP8[i8 + 3 >> 0] = 0;
 if (i4 << 24 >> 24) {
  HEAP8[i1 >> 0] = i4;
  HEAP8[i2 >> 0] = i3;
 }
 HEAP32[i6 >> 2] = i5 + (_strftime_l(i5 | 0, (HEAP32[i6 >> 2] | 0) - i5 | 0, i8 | 0, i7 | 0, HEAP32[i9 >> 2] | 0) | 0);
 STACKTOP = i10;
 return;
}

function _strtox555(i8, i7, i3, i1, i2) {
 i8 = i8 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i9 = 0;
 i9 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i6 = i9;
 HEAP32[i6 >> 2] = 0;
 i4 = i6 + 4 | 0;
 HEAP32[i4 >> 2] = i8;
 HEAP32[i6 + 44 >> 2] = i8;
 i5 = i6 + 8 | 0;
 HEAP32[i5 >> 2] = (i8 | 0) < 0 ? -1 : i8 + 2147483647 | 0;
 HEAP32[i6 + 76 >> 2] = -1;
 ___shlim(i6, 0);
 i1 = ___intscan(i6, i3, 1, i1, i2) | 0;
 if (i7) HEAP32[i7 >> 2] = i8 + ((HEAP32[i4 >> 2] | 0) + (HEAP32[i6 + 108 >> 2] | 0) - (HEAP32[i5 >> 2] | 0));
 STACKTOP = i9;
 return i1 | 0;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i4, i5) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 var i1 = 0, i3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv(i4);
 i3 = i2 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((HEAP32[i2 + 12 >> 2] | 0) - i1 >> 2 >>> 0 <= i5 >>> 0) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i3, i5 + 1 | 0);
  i1 = HEAP32[i3 >> 2] | 0;
 }
 i2 = HEAP32[i1 + (i5 << 2) >> 2] | 0;
 if (i2) {
  __ZNSt3__114__shared_count16__release_sharedEv(i2) | 0;
  i1 = HEAP32[i3 >> 2] | 0;
 }
 HEAP32[i1 + (i5 << 2) >> 2] = i4;
 return;
}

function _fmt_u(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 if (i3 >>> 0 > 0 | (i3 | 0) == 0 & i2 >>> 0 > 4294967295) while (1) {
  i4 = ___uremdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = i4 | 48;
  i4 = ___udivdi3(i2 | 0, i3 | 0, 10, 0) | 0;
  if (i3 >>> 0 > 9 | (i3 | 0) == 9 & i2 >>> 0 > 4294967295) {
   i2 = i4;
   i3 = tempRet0;
  } else {
   i2 = i4;
   break;
  }
 }
 if (i2) while (1) {
  i1 = i1 + -1 | 0;
  HEAP8[i1 >> 0] = (i2 >>> 0) % 10 | 0 | 48;
  if (i2 >>> 0 < 10) break; else i2 = (i2 >>> 0) / 10 | 0;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_(i5, i3, i4, i1) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i5 + 12 >> 2] = 0;
 HEAP32[i5 + 16 >> 2] = i1;
 do if (i3) {
  i2 = i1 + 112 | 0;
  if (i3 >>> 0 < 29 & (HEAP8[i2 >> 0] | 0) == 0) {
   HEAP8[i2 >> 0] = 1;
   break;
  } else {
   i1 = __Znwj(i3 << 2) | 0;
   break;
  }
 } else i1 = 0; while (0);
 HEAP32[i5 >> 2] = i1;
 i4 = i1 + (i4 << 2) | 0;
 HEAP32[i5 + 8 >> 2] = i4;
 HEAP32[i5 + 4 >> 2] = i4;
 HEAP32[i5 + 12 >> 2] = i1 + (i3 << 2);
 return;
}

function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i2 = i1 + i5 | 0;
 HEAP32[i2 >> 2] = 3056;
 i3 = i1 + (i5 + 56) | 0;
 HEAP32[i3 >> 2] = 3076;
 i4 = i1 + (i5 + 4) | 0;
 HEAP32[i4 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i5 + 36) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i4);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i3);
 __ZdlPv(i2);
 return;
}

function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0, i5 = 0;
 i5 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 i2 = i1 + i5 | 0;
 HEAP32[i2 >> 2] = 3176;
 i3 = i1 + (i5 + 60) | 0;
 HEAP32[i3 >> 2] = 3196;
 i4 = i1 + (i5 + 8) | 0;
 HEAP32[i4 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i5 + 40) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i4);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i3);
 __ZdlPv(i2);
 return;
}

function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i1 + i4 >> 2] = 5860;
 i2 = i1 + (i4 + 64) | 0;
 HEAP32[i2 >> 2] = 5900;
 HEAP32[i1 + (i4 + 8) >> 2] = 5880;
 i3 = i1 + (i4 + 12) | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i4 + 44) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_(i5, i1, i2, i3, i4, i6, i7, i8) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 var i9 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i9 = i5 + 4 | 0;
 i1 = i5;
 HEAP32[i9 >> 2] = i2;
 HEAP32[i1 >> 2] = i6;
 i7 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE(i2, i3, i9, i6, i7, i1, 1114111, 0) | 0;
 HEAP32[i4 >> 2] = HEAP32[i9 >> 2];
 HEAP32[i8 >> 2] = HEAP32[i1 >> 2];
 STACKTOP = i5;
 return i7 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i6 = 0, i7 = 0;
 i7 = i5 + 4 | 0;
 i1 = HEAP32[i7 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 i3 = i1 - i2 >> 2;
 if (i3 >>> 0 >= i4 >>> 0) {
  if (i3 >>> 0 > i4 >>> 0 ? (i6 = i2 + (i4 << 2) | 0, (i1 | 0) != (i6 | 0)) : 0) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i6 | 0));
   HEAP32[i7 >> 2] = i1;
  }
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj(i5, i4 - i3 | 0);
 return;
}

function _strlen(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = i1;
 L1 : do if (!(i4 & 3)) i3 = 4; else {
  i2 = i1;
  i1 = i4;
  while (1) {
   if (!(HEAP8[i2 >> 0] | 0)) break L1;
   i2 = i2 + 1 | 0;
   i1 = i2;
   if (!(i1 & 3)) {
    i1 = i2;
    i3 = 4;
    break;
   }
  }
 } while (0);
 if ((i3 | 0) == 4) {
  while (1) {
   i2 = HEAP32[i1 >> 2] | 0;
   if (!((i2 & -2139062144 ^ -2139062144) & i2 + -16843009)) i1 = i1 + 4 | 0; else break;
  }
  if ((i2 & 255) << 24 >> 24) do i1 = i1 + 1 | 0; while ((HEAP8[i1 >> 0] | 0) != 0);
 }
 return i1 - i4 | 0;
}

function __ZN7NavCtrlC2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0, i4 = 0;
 i1 = i2 + 72 | 0;
 i3 = i2;
 i4 = i3 + 72 | 0;
 do {
  HEAP32[i3 >> 2] = 0;
  i3 = i3 + 4 | 0;
 } while ((i3 | 0) < (i4 | 0));
 __ZN8DocumentC2Ev(i1);
 i4 = i2 + 296 | 0;
 HEAP32[i2 + 320 >> 2] = 0;
 HEAP32[i2 + 324 >> 2] = 0;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 HEAP32[i4 + 8 >> 2] = 0;
 HEAP32[i4 + 12 >> 2] = 0;
 HEAP32[i4 + 16 >> 2] = 0;
 HEAP32[i2 + 316 >> 2] = i2 + 320;
 HEAP32[i2 + 332 >> 2] = 0;
 HEAP32[i2 + 336 >> 2] = 0;
 HEAP32[i2 + 328 >> 2] = i2 + 332;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcjj(i2, i3, i4, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 var i5 = 0;
 if (i1 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i2);
 if (i1 >>> 0 < 11) {
  HEAP8[i2 >> 0] = i4 << 1;
  i1 = i2 + 1 | 0;
 } else {
  i5 = i1 + 16 & -16;
  i1 = __Znwj(i5) | 0;
  HEAP32[i2 + 8 >> 2] = i1;
  HEAP32[i2 >> 2] = i5 | 1;
  HEAP32[i2 + 4 >> 2] = i4;
 }
 _memcpy(i1 | 0, i3 | 0, i4 | 0) | 0;
 HEAP8[i1 + i4 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memcpy(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemcpy(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 11) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 1 | 0;
 } else {
  i5 = i3 + 16 & -16;
  i4 = __Znwj(i5) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _memset(i1 | 0, i2 | 0, i3 | 0) | 0;
 HEAP8[i1 + i3 >> 0] = 0;
 return;
}

function __ZN3p2t5SweepD2Ev(i5) {
 i5 = i5 | 0;
 var i1 = 0, i2 = 0, i3 = 0, i4 = 0, i6 = 0;
 i6 = i5 + 4 | 0;
 i1 = HEAP32[i6 >> 2] | 0;
 i2 = HEAP32[i5 >> 2] | 0;
 if ((i1 | 0) == (i2 | 0)) i2 = i1; else {
  i4 = 0;
  do {
   i3 = HEAP32[i2 + (i4 << 2) >> 2] | 0;
   if (i3) {
    __ZdlPv(i3);
    i2 = HEAP32[i5 >> 2] | 0;
    i1 = HEAP32[i6 >> 2] | 0;
   }
   i4 = i4 + 1 | 0;
  } while (i4 >>> 0 < i1 - i2 >> 2 >>> 0);
 }
 if (!i2) return;
 if ((i1 | 0) != (i2 | 0)) HEAP32[i6 >> 2] = i1 + (~((i1 + -4 - i2 | 0) >>> 2) << 2);
 __ZdlPv(i2);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 if (i3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1);
 if (i3 >>> 0 < 2) {
  HEAP8[i1 >> 0] = i3 << 1;
  i1 = i1 + 4 | 0;
 } else {
  i5 = i3 + 4 & -4;
  i4 = __Znwj(i5 << 2) | 0;
  HEAP32[i1 + 8 >> 2] = i4;
  HEAP32[i1 >> 2] = i5 | 1;
  HEAP32[i1 + 4 >> 2] = i3;
  i1 = i4;
 }
 _wmemset(i1, i2, i3) | 0;
 HEAP32[i1 + (i3 << 2) >> 2] = 0;
 return;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 _pthread_mutex_lock(11948) | 0;
 if ((HEAP32[i2 >> 2] | 0) == 1) do _pthread_cond_wait(11976, 11948) | 0; while ((HEAP32[i2 >> 2] | 0) == 1);
 if (!(HEAP32[i2 >> 2] | 0)) {
  HEAP32[i2 >> 2] = 1;
  _pthread_mutex_unlock(11948) | 0;
  FUNCTION_TABLE_vi[i3 & 255](i1);
  _pthread_mutex_lock(11948) | 0;
  HEAP32[i2 >> 2] = -1;
  _pthread_mutex_unlock(11948) | 0;
  _pthread_cond_broadcast(11976) | 0;
 } else _pthread_mutex_unlock(11948) | 0;
 return;
}

function _memset(i2, i6, i1) {
 i2 = i2 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i7 = 0;
 i3 = i2 + i1 | 0;
 if ((i1 | 0) >= 20) {
  i6 = i6 & 255;
  i5 = i2 & 3;
  i7 = i6 | i6 << 8 | i6 << 16 | i6 << 24;
  i4 = i3 & ~3;
  if (i5) {
   i5 = i2 + 4 - i5 | 0;
   while ((i2 | 0) < (i5 | 0)) {
    HEAP8[i2 >> 0] = i6;
    i2 = i2 + 1 | 0;
   }
  }
  while ((i2 | 0) < (i4 | 0)) {
   HEAP32[i2 >> 2] = i7;
   i2 = i2 + 4 | 0;
  }
 }
 while ((i2 | 0) < (i3 | 0)) {
  HEAP8[i2 >> 0] = i6;
  i2 = i2 + 1 | 0;
 }
 return i2 - i1 | 0;
}

function __ZNK7Segment15distSqToSurfaceERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0, d8 = 0.0, d9 = 0.0;
 d8 = +HEAPF32[i2 + 28 >> 2];
 d4 = +HEAPF32[i2 + 36 >> 2] - d8;
 d6 = +HEAPF32[i2 + 32 >> 2];
 d5 = +HEAPF32[i2 + 40 >> 2] - d6;
 d9 = +HEAPF32[i1 >> 2];
 d7 = +HEAPF32[i1 + 4 >> 2];
 d3 = (d4 * (d9 - d8) + d5 * (d7 - d6)) / (d4 * d4 + d5 * d5);
 d3 = d3 < 0.0 ? 0.0 : d3;
 d3 = d3 > 1.0 ? 1.0 : d3;
 d4 = d9 - (d8 + d4 * d3);
 d3 = d7 - (d6 + d5 * d3);
 return +(d4 * d4 + d3 * d3);
}

function _cpp_progress(d3) {
 d3 = +d3;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[711] | 0;
 i2 = i1 + 312 | 0;
 if ((HEAP32[i2 >> 2] | 0) > 99) {
  i2 = 1;
  return i2 | 0;
 }
 if ((HEAP32[i1 + 36 >> 2] | 0) == (HEAP32[i1 + 40 >> 2] | 0)) {
  i2 = 1;
  return i2 | 0;
 }
 __ZN7NavCtrl11recordFrameEv(i1);
 if (!(__ZN8Document6doStepEfbi(i1 + 72 | 0, d3, 1, (((HEAP32[i1 + 300 >> 2] | 0) - (HEAP32[i1 + 296 >> 2] | 0) | 0) / 12 | 0) + -1 | 0) | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 i2 = 0;
 return i2 | 0;
}

function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i1 + i4 >> 2] = 3056;
 i2 = i1 + (i4 + 56) | 0;
 HEAP32[i2 >> 2] = 3076;
 i3 = i1 + (i4 + 4) | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i4 + 36) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i4 = HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0;
 HEAP32[i1 + i4 >> 2] = 3176;
 i2 = i1 + (i4 + 60) | 0;
 HEAP32[i2 >> 2] = 3196;
 i3 = i1 + (i4 + 8) | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + (i4 + 40) | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function _strerror(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = 0;
 while (1) {
  if ((HEAPU8[22236 + i2 >> 0] | 0) == (i1 | 0)) {
   i3 = 2;
   break;
  }
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == 87) {
   i2 = 87;
   i1 = 22324;
   i3 = 5;
   break;
  }
 }
 if ((i3 | 0) == 2) if (!i2) i1 = 22324; else {
  i1 = 22324;
  i3 = 5;
 }
 if ((i3 | 0) == 5) while (1) {
  i3 = i1;
  while (1) {
   i1 = i3 + 1 | 0;
   if (!(HEAP8[i3 >> 0] | 0)) break; else i3 = i1;
  }
  i2 = i2 + -1 | 0;
  if (!i2) break; else i3 = 5;
 }
 return i1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i4 + 8 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 if ((i1 | 0) != (i2 | 0)) {
  do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
  HEAP32[i3 >> 2] = i1;
 }
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i1 = HEAP32[i4 + 16 >> 2] | 0;
  if ((i1 | 0) == (i2 | 0)) {
   HEAP8[i1 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZNK12PointSegment14spanningPointsERK4Vec2fPS0_S3_(i5, i1, d2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d6 = 0.0, i7 = 0;
 i1 = i5 + 28 | 0;
 i7 = i5 + 32 | 0;
 d6 = +HEAPF32[i5 + 40 >> 2] * d2 + +HEAPF32[i7 >> 2];
 HEAPF32[i3 >> 2] = +HEAPF32[i5 + 36 >> 2] * d2 + +HEAPF32[i1 >> 2];
 HEAPF32[i3 + 4 >> 2] = d6;
 d6 = +HEAPF32[i5 + 48 >> 2] * d2 + +HEAPF32[i7 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i5 + 44 >> 2] * d2 + +HEAPF32[i1 >> 2];
 HEAPF32[i4 + 4 >> 2] = d6;
 return 1;
}

function __ZN3p2t8Triangle7PointCWERNS_5PointE(i4, i3) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = HEAP32[i4 + 8 >> 2] | 0;
 if ((i1 | 0) == (i3 | 0)) {
  i4 = HEAP32[i4 + 16 >> 2] | 0;
  return i4 | 0;
 }
 i2 = HEAP32[i4 + 12 >> 2] | 0;
 if ((i2 | 0) == (i3 | 0)) {
  i4 = i1;
  return i4 | 0;
 }
 if ((HEAP32[i4 + 16 >> 2] | 0) == (i3 | 0)) {
  i4 = i2;
  return i4 | 0;
 } else {
  i4 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i4, 20076);
  ___cxa_throw(i4 | 0, 624, 90);
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4); else {
  i5 = HEAP32[i5 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i5 >> 2] | 0) + 20 >> 2] & 15](i5, i3, i2, i1, i4, i6);
 }
 return;
}

function __ZN3p2t8Triangle8PointCCWERNS_5PointE(i1, i4) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 i3 = HEAP32[i1 + 12 >> 2] | 0;
 if ((i2 | 0) == (i4 | 0)) {
  i4 = i3;
  return i4 | 0;
 }
 i1 = HEAP32[i1 + 16 >> 2] | 0;
 if ((i3 | 0) == (i4 | 0)) {
  i4 = i1;
  return i4 | 0;
 }
 if ((i1 | 0) == (i4 | 0)) {
  i4 = i2;
  return i4 | 0;
 } else {
  i4 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i4, 20103);
  ___cxa_throw(i4 | 0, 624, 90);
 }
 return 0;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, HEAP32[i2 >> 2] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 4 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 4, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci(i4, i1, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i2 = 0;
 L1 : do if (!(HEAP8[i4 + 44 >> 0] | 0)) if ((i3 | 0) > 0) {
  i2 = i1;
  i1 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[i4 >> 2] | 0) + 52 >> 2] & 31](i4, HEAPU8[i2 >> 0] | 0) | 0) == -1) break L1;
   i1 = i1 + 1 | 0;
   if ((i1 | 0) < (i3 | 0)) i2 = i2 + 1 | 0; else break;
  }
 } else i1 = 0; else i1 = _fwrite(i1, 1, i3, HEAP32[i4 + 32 >> 2] | 0) | 0; while (0);
 return i1 | 0;
}

function __ZN7TriItemC2EP7NavCtrlP8Triangle(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = 2956;
 HEAP32[i3 + 12 >> 2] = i2;
 HEAP8[i3 + 8 >> 0] = 0;
 i4 = HEAP32[i2 >> 2] | 0;
 i1 = HEAP32[i2 + 4 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 _emscripten_asm_const_8(4, i3 | 0, 0, +(+HEAPF32[i4 + 4 >> 2]), +(+HEAPF32[i4 + 8 >> 2]), +(+HEAPF32[i1 + 4 >> 2]), +(+HEAPF32[i1 + 8 >> 2]), +(+HEAPF32[i2 + 4 >> 2]), +(+HEAPF32[i2 + 8 >> 2])) | 0;
 return;
}

function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + -8 | 0;
 HEAP32[i1 >> 2] = 5860;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = 5900;
 HEAP32[i1 + 8 >> 2] = 5880;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 44 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i7, i5, i4, i3, i6, i8) {
 i7 = i7 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i6 = i6 | 0;
 i8 = i8 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i7 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i7 = HEAP32[i7 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i7 >> 2] | 0) + 20 >> 2] & 15](i7, i5, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i6 : 2, i8);
 return;
}

function __ZN9AgentItem6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i3 = i2 + 12 | 0;
 i4 = HEAP32[i3 >> 2] | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 63](i4, i1);
 i1 = HEAP32[i3 >> 2] | 0;
 _emscripten_asm_const_4(0, i2 | 0, +(+HEAPF32[i1 + 12 >> 2]), +(+HEAPF32[i1 + 16 >> 2]), +(+HEAPF32[i1 + 120 >> 2])) | 0;
 i2 = HEAP32[i2 + 4 >> 2] | 0;
 __ZN8Document10updatePlanEP5Agent(i2 + 72 | 0, HEAP32[i3 >> 2] | 0);
 HEAP32[i2 + 312 >> 2] = 0;
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt(i1, i6, i5, i2) {
 i1 = i1 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = (i5 - i6 | 0) >>> 2;
 if ((i6 | 0) != (i5 | 0)) {
  i3 = i6;
  while (1) {
   i1 = HEAP32[i3 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAPU16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] | 0; else i1 = 0;
   HEAP16[i2 >> 1] = i1;
   i3 = i3 + 4 | 0;
   if ((i3 | 0) == (i5 | 0)) break; else i2 = i2 + 2 | 0;
  }
 }
 return i6 + (i4 << 2) | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE10deallocateEv(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 if (i2) {
  i3 = i4 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
   HEAP32[i3 >> 2] = i1;
  }
  if ((i4 + 16 | 0) == (i2 | 0)) HEAP8[i4 + 128 >> 0] = 0; else __ZdlPv(i2);
  HEAP32[i4 + 8 >> 2] = 0;
  HEAP32[i3 >> 2] = 0;
  HEAP32[i4 >> 2] = 0;
 }
 return;
}

function ___stdio_seek(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 i6 = i5;
 i3 = i5 + 20 | 0;
 HEAP32[i6 >> 2] = HEAP32[i1 + 60 >> 2];
 HEAP32[i6 + 4 >> 2] = 0;
 HEAP32[i6 + 8 >> 2] = i2;
 HEAP32[i6 + 12 >> 2] = i3;
 HEAP32[i6 + 16 >> 2] = i4;
 if ((___syscall_ret(___syscall140(140, i6 | 0) | 0) | 0) < 0) {
  HEAP32[i3 >> 2] = -1;
  i1 = -1;
 } else i1 = HEAP32[i3 >> 2] | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + -8 | 0;
 HEAP32[i3 >> 2] = 5860;
 i1 = i3 + 64 | 0;
 HEAP32[i1 >> 2] = 5900;
 HEAP32[i3 + 8 >> 2] = 5880;
 i2 = i3 + 12 | 0;
 HEAP32[i2 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i3 + 44 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i2);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNK7Segment14spanningPointsERK4Vec2fPS0_S3_(i5, i1, d2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d6 = 0.0;
 d6 = +HEAPF32[i5 + 48 >> 2] * d2 + +HEAPF32[i5 + 32 >> 2];
 HEAPF32[i3 >> 2] = +HEAPF32[i5 + 44 >> 2] * d2 + +HEAPF32[i5 + 28 >> 2];
 HEAPF32[i3 + 4 >> 2] = d6;
 d6 = +HEAPF32[i5 + 56 >> 2] * d2 + +HEAPF32[i5 + 40 >> 2];
 HEAPF32[i4 >> 2] = +HEAPF32[i5 + 52 >> 2] * d2 + +HEAPF32[i5 + 36 >> 2];
 HEAPF32[i4 + 4 >> 2] = d6;
 return 1;
}

function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 5860;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = 5900;
 HEAP32[i1 + 8 >> 2] = 5880;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 44 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__16__treeINS_4pairIP6VertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!i1) return; else {
  __ZNSt3__16__treeINS_4pairIP6VertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 >> 2] | 0);
  __ZNSt3__16__treeINS_4pairIP6VertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE(i2, HEAP32[i1 + 4 >> 2] | 0);
  __ZdlPv(i1);
  return;
 }
}

function _wmemmove(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0;
 if (i4 - i3 >> 2 >>> 0 < i1 >>> 0) {
  if (!i2) do {
   i1 = i1 + -1 | 0;
   HEAP32[i4 + (i1 << 2) >> 2] = HEAP32[i3 + (i1 << 2) >> 2];
  } while ((i1 | 0) != 0);
 } else if (!i2) {
  i2 = i3;
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 if (i2 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i3);
 i1 = i3 + 128 | 0;
 if (i2 >>> 0 < 29 & (HEAP8[i1 >> 0] | 0) == 0) {
  HEAP8[i1 >> 0] = 1;
  i1 = i3 + 16 | 0;
 } else i1 = __Znwj(i2 << 2) | 0;
 HEAP32[i3 + 4 >> 2] = i1;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 8 >> 2] = i1 + (i2 << 2);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib(i6, i4, i3, i5, i7) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 24 >> 2] & 3](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2, i7);
 return;
}

function __ZN13PolyPointItem6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = i2 + 12 | 0;
 i5 = i1;
 i4 = HEAP32[i5 + 4 >> 2] | 0;
 i1 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i5 >> 2];
 HEAP32[i1 + 4 >> 2] = i4;
 i1 = HEAP32[i3 >> 2] | 0;
 _emscripten_asm_const_3(1, i2 | 0, +(+HEAPF32[i1 + 4 >> 2]), +(+HEAPF32[i1 + 8 >> 2])) | 0;
 __ZN7NavCtrl10updateMeshEv(HEAP32[i2 + 4 >> 2] | 0);
 HEAP8[i2 + 16 >> 0] = 1;
 return;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev(i4) {
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i2 = HEAP32[i4 >> 2] | 0;
 do if (i2) {
  i3 = i4 + 4 | 0;
  i1 = HEAP32[i3 >> 2] | 0;
  if ((i1 | 0) != (i2 | 0)) {
   do i1 = i1 + -4 | 0; while ((i1 | 0) != (i2 | 0));
   HEAP32[i3 >> 2] = i1;
  }
  if ((i4 + 16 | 0) == (i2 | 0)) {
   HEAP8[i4 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv(i2);
   break;
  }
 } while (0);
 return;
}

function __ZN3p2t8TriangleC2ERNS_5PointES2_S2_(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 HEAP32[i4 + 8 >> 2] = i1;
 HEAP32[i4 + 12 >> 2] = i2;
 HEAP32[i4 + 16 >> 2] = i3;
 i3 = i4 + 20 | 0;
 HEAP8[i4 >> 0] = 0;
 HEAP8[i4 + 1 >> 0] = 0;
 HEAP8[i4 + 2 >> 0] = 0;
 HEAP8[i4 + 3 >> 0] = 0;
 HEAP8[i4 + 4 >> 0] = 0;
 HEAP8[i4 + 5 >> 0] = 0;
 HEAP32[i3 >> 2] = 0;
 HEAP32[i3 + 4 >> 2] = 0;
 HEAP32[i3 + 8 >> 2] = 0;
 HEAP8[i3 + 12 >> 0] = 0;
 return;
}

function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 5860;
 i2 = i1 + 64 | 0;
 HEAP32[i2 >> 2] = 5900;
 HEAP32[i1 + 8 >> 2] = 5880;
 i3 = i1 + 12 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 44 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3); else {
  i4 = HEAP32[i4 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 28 >> 2] & 15](i4, i2, i1, i3);
 }
 return;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13500) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13492) | 0;
 i3 = i2 + 36 | 0;
 HEAP32[i3 >> 2] = i4;
 i1 = i2 + 44 | 0;
 HEAP32[i1 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[i4 >> 2] | 0) + 24 >> 2] & 127](i4) | 0;
 i3 = HEAP32[i3 >> 2] | 0;
 HEAP8[i2 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i3 >> 2] | 0) + 28 >> 2] & 127](i3) | 0) & 1;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i6, i4, i3, i5) {
 i6 = i6 | 0;
 i4 = i4 | 0;
 i3 = i3 | 0;
 i5 = i5 | 0;
 var i1 = 0, i2 = 0;
 i2 = HEAP32[i6 + 4 >> 2] | 0;
 i1 = i2 >> 8;
 if (i2 & 1) i1 = HEAP32[(HEAP32[i3 >> 2] | 0) + i1 >> 2] | 0;
 i6 = HEAP32[i6 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[i6 >> 2] | 0) + 28 >> 2] & 15](i6, i4, i3 + i1 | 0, (i2 & 2 | 0) != 0 ? i5 : 2);
 return;
}

function ___towrite(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i1 = i2 + 74 | 0;
 i3 = HEAP8[i1 >> 0] | 0;
 HEAP8[i1 >> 0] = i3 + 255 | i3;
 i1 = HEAP32[i2 >> 2] | 0;
 if (!(i1 & 8)) {
  HEAP32[i2 + 8 >> 2] = 0;
  HEAP32[i2 + 4 >> 2] = 0;
  i1 = HEAP32[i2 + 44 >> 2] | 0;
  HEAP32[i2 + 28 >> 2] = i1;
  HEAP32[i2 + 20 >> 2] = i1;
  HEAP32[i2 + 16 >> 2] = i1 + (HEAP32[i2 + 48 >> 2] | 0);
  i1 = 0;
 } else {
  HEAP32[i2 >> 2] = i1 | 32;
  i1 = -1;
 }
 return i1 | 0;
}

function ___stdout_write(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 i4 = i5;
 HEAP32[i2 + 36 >> 2] = 8;
 if ((HEAP32[i2 >> 2] & 64 | 0) == 0 ? (HEAP32[i4 >> 2] = HEAP32[i2 + 60 >> 2], HEAP32[i4 + 4 >> 2] = 21505, HEAP32[i4 + 8 >> 2] = i5 + 12, (___syscall54(54, i4 | 0) | 0) != 0) : 0) HEAP8[i2 + 75 >> 0] = -1;
 i4 = ___stdio_write(i2, i1, i3) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function copyTempDouble(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[i1 + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[i1 + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[i1 + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[i1 + 7 >> 0];
}

function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 3056;
 i2 = i1 + 56 | 0;
 HEAP32[i2 >> 2] = 3076;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 36 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 3176;
 i2 = i1 + 60 | 0;
 HEAP32[i2 >> 2] = 3196;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 40 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 >= 128) break L1;
  if (!((HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16)) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function _memcmp(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i4 = 0, i5 = 0;
 L1 : do if (!i1) i1 = 0; else {
  i5 = i1;
  i4 = i2;
  while (1) {
   i2 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i3 >> 0] | 0;
   if (i2 << 24 >> 24 != i1 << 24 >> 24) break;
   i5 = i5 + -1 | 0;
   if (!i5) {
    i1 = 0;
    break L1;
   } else {
    i4 = i4 + 1 | 0;
    i3 = i3 + 1 | 0;
   }
  }
  i1 = (i2 & 255) - (i1 & 255) | 0;
 } while (0);
 return i1 | 0;
}

function __ZN16BuildingMoveItemD0Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 >> 2] = 2936;
 i3 = i2 + 32 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 HEAP32[i2 >> 2] = 2976;
 if (!(HEAP8[i2 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i2 | 0) | 0;
  __ZdlPv(i2);
  return;
 } else {
  _emscripten_asm_const_1(15, i2 | 0) | 0;
  __ZdlPv(i2);
  return;
 }
}

function _vsscanf(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0, i5 = 0, i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 i2 = i6;
 i5 = i2;
 i7 = i5 + 112 | 0;
 do {
  HEAP32[i5 >> 2] = 0;
  i5 = i5 + 4 | 0;
 } while ((i5 | 0) < (i7 | 0));
 HEAP32[i2 + 32 >> 2] = 28;
 HEAP32[i2 + 44 >> 2] = i4;
 HEAP32[i2 + 76 >> 2] = -1;
 HEAP32[i2 + 84 >> 2] = i4;
 i7 = _vfscanf(i2, i3, i1) | 0;
 STACKTOP = i6;
 return i7 | 0;
}

function __ZN3p2t8Triangle5IndexEPKNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i2 + 8 >> 2] | 0) == (i1 | 0)) {
  i2 = 0;
  return i2 | 0;
 }
 if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i2 = 1;
  return i2 | 0;
 }
 if ((HEAP32[i2 + 16 >> 2] | 0) == (i1 | 0)) {
  i2 = 2;
  return i2 | 0;
 } else {
  i2 = ___cxa_allocate_exception(8) | 0;
  __ZNSt13runtime_errorC2EPKc(i2, 20093);
  ___cxa_throw(i2 | 0, 624, 90);
 }
 return 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc(i1, i7, i6, i5, i4) {
 i1 = i1 | 0;
 i7 = i7 | 0;
 i6 = i6 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i6 - i7 | 0) >>> 2;
 if ((i7 | 0) != (i6 | 0)) {
  i2 = i7;
  i1 = i4;
  while (1) {
   i4 = HEAP32[i2 >> 2] | 0;
   HEAP8[i1 >> 0] = i4 >>> 0 < 128 ? i4 & 255 : i5;
   i2 = i2 + 4 | 0;
   if ((i2 | 0) == (i6 | 0)) break; else i1 = i1 + 1 | 0;
  }
 }
 return i7 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_(i2, i4, i1, i3) {
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 L1 : do if ((i1 | 0) == (i3 | 0)) i1 = i3; else while (1) {
  i2 = HEAP32[i1 >> 2] | 0;
  if (i2 >>> 0 < 128 ? (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i2 << 1) >> 1] & i4) << 16 >> 16 != 0 : 0) break L1;
  i1 = i1 + 4 | 0;
  if ((i1 | 0) == (i3 | 0)) {
   i1 = i3;
   break;
  }
 } while (0);
 return i1 | 0;
}

function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 3056;
 i2 = i1 + 56 | 0;
 HEAP32[i2 >> 2] = 3076;
 i3 = i1 + 4 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 36 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 HEAP32[i1 >> 2] = 3176;
 i2 = i1 + 60 | 0;
 HEAP32[i2 >> 2] = 3196;
 i3 = i1 + 8 | 0;
 HEAP32[i3 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 40 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i3);
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i2);
 return;
}

function ___string_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0, i7 = 0;
 i4 = i2 + 84 | 0;
 i6 = HEAP32[i4 >> 2] | 0;
 i7 = i3 + 256 | 0;
 i5 = _memchr(i6, 0, i7) | 0;
 i5 = (i5 | 0) == 0 ? i7 : i5 - i6 | 0;
 i3 = i5 >>> 0 < i3 >>> 0 ? i5 : i3;
 _memcpy(i1 | 0, i6 | 0, i3 | 0) | 0;
 HEAP32[i2 + 4 >> 2] = i6 + i3;
 i1 = i6 + i5 | 0;
 HEAP32[i2 + 8 >> 2] = i1;
 HEAP32[i4 >> 2] = i1;
 return i3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw(i1, i5, i4) {
 i1 = i1 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i2 = 0, i3 = 0;
 i3 = (i4 - i5 | 0) >>> 2;
 if ((i5 | 0) != (i4 | 0)) {
  i2 = i5;
  do {
   i1 = HEAP32[i2 >> 2] | 0;
   if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
   HEAP32[i2 >> 2] = i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i4 | 0));
 }
 return i5 + (i3 << 2) | 0;
}

function __ZNSt3__18ios_base4initEPv(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 HEAP32[i2 + 24 >> 2] = i1;
 HEAP32[i2 + 16 >> 2] = (i1 | 0) == 0 & 1;
 HEAP32[i2 + 20 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 4098;
 HEAP32[i2 + 12 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 6;
 i3 = i2 + 28 | 0;
 i1 = i2 + 32 | 0;
 i2 = i1 + 40 | 0;
 do {
  HEAP32[i1 >> 2] = 0;
  i1 = i1 + 4 | 0;
 } while ((i1 | 0) < (i2 | 0));
 __ZNSt3__16localeC2Ev(i3);
 return;
}

function _strcmp(i4, i2) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = HEAP8[i4 >> 0] | 0;
 i1 = HEAP8[i2 >> 0] | 0;
 if (i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24) i2 = i3; else {
  do {
   i4 = i4 + 1 | 0;
   i2 = i2 + 1 | 0;
   i3 = HEAP8[i4 >> 0] | 0;
   i1 = HEAP8[i2 >> 0] | 0;
  } while (!(i3 << 24 >> 24 == 0 ? 1 : i3 << 24 >> 24 != i1 << 24 >> 24));
  i2 = i3;
 }
 return (i2 & 255) - (i1 & 255) | 0;
}

function __ZN19SubGoalFromPointSeg11makePathRefEf(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0, d5 = 0.0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 d5 = +HEAPF32[i3 + 28 >> 2];
 d4 = +HEAPF32[i3 + 32 >> 2];
 d4 = (+HEAPF32[i3 + 40 >> 2] * d2 + d4 + (d4 + +HEAPF32[i3 + 48 >> 2] * d2)) * .5;
 HEAPF32[i1 >> 2] = (+HEAPF32[i3 + 36 >> 2] * d2 + d5 + (d5 + +HEAPF32[i3 + 44 >> 2] * d2)) * .5;
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 HEAP8[i2 + 128 >> 0] = 0;
 if (i1) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj(i2, i1);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i2, i1);
 }
 return;
}

function __ZN12ErrorBoxItemC2EP7NavCtrlP5AABox(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i4 = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 >> 2] = 2996;
 HEAP32[i3 + 12 >> 2] = i1;
 HEAP8[i3 + 8 >> 0] = 0;
 i4 = HEAP32[i1 >> 2] | 0;
 i2 = HEAP32[i1 + 8 >> 2] | 0;
 _emscripten_asm_const_6(17, i3 | 0, 5, +(+HEAPF32[i4 + 4 >> 2]), +(+HEAPF32[i4 + 8 >> 2]), +(+HEAPF32[i2 + 4 >> 2]), +(+HEAPF32[i2 + 8 >> 2])) | 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (!(HEAP8[i1 >> 0] & 1)) {
  HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
  HEAP32[i2 + 4 >> 2] = HEAP32[i1 + 4 >> 2];
  HEAP32[i2 + 8 >> 2] = HEAP32[i1 + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i2, HEAP32[i1 + 8 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function __ZN16BuildingMoveItemD2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 HEAP32[i2 >> 2] = 2936;
 i3 = i2 + 32 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 HEAP32[i2 >> 2] = 2976;
 if (!(HEAP8[i2 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i2 | 0) | 0;
  return;
 } else {
  _emscripten_asm_const_1(15, i2 | 0) | 0;
  return;
 }
}

function __ZNSt3__16locale14__install_ctorERKS0_PNS0_5facetEl(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i5 = 0;
 if (!i1) {
  i1 = HEAP32[i3 >> 2] | 0;
  HEAP32[i4 >> 2] = i1;
 } else {
  i5 = __Znwj(160) | 0;
  __ZNSt3__16locale5__impC2ERKS1_PNS0_5facetEl(i5, HEAP32[i3 >> 2] | 0, i1, i2);
  HEAP32[i4 >> 2] = i5;
  i1 = i5;
 }
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 if ((i2 | 0) != (i1 | 0)) {
  i3 = HEAP8[i1 >> 0] | 0;
  i4 = (i3 & 1) == 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i2, i4 ? i1 + 1 | 0 : HEAP32[i1 + 8 >> 2] | 0, i4 ? (i3 & 255) >>> 1 : HEAP32[i1 + 4 >> 2] | 0) | 0;
 }
 return i2 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i1 = i1 + 8 | 0;
 i2 = _uselocale(HEAP32[i1 >> 2] | 0) | 0;
 i3 = _mbtowc(0, 0, 4) | 0;
 if (i2) _uselocale(i2) | 0;
 if (!i3) {
  i1 = HEAP32[i1 >> 2] | 0;
  if (i1) {
   i1 = _uselocale(i1) | 0;
   if (!i1) i1 = 0; else {
    _uselocale(i1) | 0;
    i1 = 0;
   }
  } else i1 = 1;
 } else i1 = -1;
 return i1 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_(i3, i2) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i1 = 0;
 HEAP8[i3 >> 0] = 0;
 HEAP32[i3 + 4 >> 2] = i2;
 i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[i2 + (i1 + 16) >> 2] | 0)) {
  i1 = HEAP32[i2 + (i1 + 72) >> 2] | 0;
  if (i1) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(i1) | 0;
  HEAP8[i3 >> 0] = 1;
 }
 return;
}

function ___muldsi3(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0, i6 = 0;
 i6 = i1 & 65535;
 i5 = i2 & 65535;
 i3 = Math_imul(i5, i6) | 0;
 i4 = i1 >>> 16;
 i1 = (i3 >>> 16) + (Math_imul(i5, i4) | 0) | 0;
 i5 = i2 >>> 16;
 i2 = Math_imul(i5, i6) | 0;
 return (tempRet0 = (i1 >>> 16) + (Math_imul(i5, i4) | 0) + (((i1 & 65535) + i2 | 0) >>> 16) | 0, i1 + i2 << 16 | i3 & 65535 | 0) | 0;
}

function _copysign(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 var i3 = 0, i4 = 0;
 HEAPF64[tempDoublePtr >> 3] = d1;
 i4 = HEAP32[tempDoublePtr >> 2] | 0;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = d2;
 i3 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | i3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = i4;
 HEAP32[tempDoublePtr + 4 >> 2] = i3;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __Znwj(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = (i1 | 0) == 0 ? 1 : i1;
 i1 = _malloc(i2) | 0;
 L1 : do if (!i1) {
  while (1) {
   i1 = __ZSt15get_new_handlerv() | 0;
   if (!i1) break;
   FUNCTION_TABLE_v[i1 & 3]();
   i1 = _malloc(i2) | 0;
   if (i1) break L1;
  }
  i2 = ___cxa_allocate_exception(4) | 0;
  HEAP32[i2 >> 2] = 6100;
  ___cxa_throw(i2 | 0, 600, 88);
 } while (0);
 return i1 | 0;
}

function __ZSt9terminatev() {
 var i1 = 0, i2 = 0;
 i1 = ___cxa_get_globals_fast() | 0;
 if (((i1 | 0) != 0 ? (i2 = HEAP32[i1 >> 2] | 0, (i2 | 0) != 0) : 0) ? (i1 = i2 + 48 | 0, (HEAP32[i1 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[i1 + 4 >> 2] | 0) == 1129074247 : 0) : 0) __ZSt11__terminatePFvvE(HEAP32[i2 + 12 >> 2] | 0);
 i2 = HEAP32[1522] | 0;
 HEAP32[1522] = i2 + 0;
 __ZSt11__terminatePFvvE(i2);
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i1 | 0) != (i3 | 0)) {
  i2 = i1;
  do {
   i1 = HEAP8[i2 >> 0] | 0;
   if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
   HEAP8[i2 >> 0] = i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i3 | 0;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i5, i4) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i3 = 0;
 i1 = HEAP32[i5 + 40 >> 2] | 0;
 i2 = i5 + 32 | 0;
 i3 = i5 + 36 | 0;
 if (i1) do {
  i1 = i1 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[i2 >> 2] | 0) + (i1 << 2) >> 2] & 3](i4, i5, HEAP32[(HEAP32[i3 >> 2] | 0) + (i1 << 2) >> 2] | 0);
 } while ((i1 | 0) != 0);
 return;
}

function _fwrite(i2, i5, i1, i3) {
 i2 = i2 | 0;
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i6 = 0;
 i4 = Math_imul(i1, i5) | 0;
 if ((HEAP32[i3 + 76 >> 2] | 0) > -1) {
  i6 = (___lockfile(i3) | 0) == 0;
  i2 = ___fwritex(i2, i4, i3) | 0;
  if (!i6) ___unlockfile(i3);
 } else i2 = ___fwritex(i2, i4, i3) | 0;
 if ((i2 | 0) != (i4 | 0)) i1 = (i2 >>> 0) / (i5 >>> 0) | 0;
 return i1 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib(i5, i3, i2, i1, i4, i6) {
 i5 = i5 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i6 = i6 | 0;
 if ((i5 | 0) == (HEAP32[i3 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, i3, i2, i1, i4);
 return;
}

function __ZN3p2t12SweepContext8AddToMapEPNS_8TriangleE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i3 = i1 + 80 | 0;
 i4 = __Znwj(12) | 0;
 HEAP32[i4 + 8 >> 2] = i2;
 HEAP32[i4 + 4 >> 2] = i3;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i4 >> 2] = i2;
 HEAP32[i2 + 4 >> 2] = i4;
 HEAP32[i3 >> 2] = i4;
 i2 = i1 + 88 | 0;
 HEAP32[i2 >> 2] = (HEAP32[i2 >> 2] | 0) + 1;
 return;
}

function _memmove(i1, i4, i2) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 if ((i4 | 0) < (i1 | 0) & (i1 | 0) < (i4 + i2 | 0)) {
  i3 = i1;
  i4 = i4 + i2 | 0;
  i1 = i1 + i2 | 0;
  while ((i2 | 0) > 0) {
   i1 = i1 - 1 | 0;
   i4 = i4 - 1 | 0;
   i2 = i2 - 1 | 0;
   HEAP8[i1 >> 0] = HEAP8[i4 >> 0] | 0;
  }
  i1 = i3;
 } else _memcpy(i1, i4, i2) | 0;
 return i1 | 0;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz(i5, i4, i1, i3, i2) {
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i6 = 0, i7 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i7 = i6;
 HEAP32[i7 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsnprintf(i5, i4, i3, i7) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i6;
 return i1 | 0;
}

function __ZNSt3__18ios_base5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i4;
 i5 = i2 + 28 | 0;
 __ZNSt3__16localeC2ERKS0_(i3, i5);
 __ZNSt3__16localeaSERKS0_(i5, i1) | 0;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i2, 1);
 STACKTOP = i4;
 return HEAP32[i3 >> 2] | 0;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13500) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[i2 >> 2] | 0) + 24 >> 2] & 127](i2) | 0;
 i1 = __ZNKSt3__16locale9use_facetERNS0_2idE(i1, 13492) | 0;
 HEAP32[i2 + 36 >> 2] = i1;
 HEAP8[i2 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 28 >> 2] & 127](i1) | 0) & 1;
 return;
}

function _llvm_cttz_i32(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = HEAP8[cttz_i8 + (i2 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 8 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 8 | 0;
 i1 = HEAP8[cttz_i8 + (i2 >> 16 & 255) >> 0] | 0;
 if ((i1 | 0) < 8) return i1 + 16 | 0;
 return (HEAP8[cttz_i8 + (i2 >>> 24) >> 0] | 0) + 24 | 0;
}

function __ZNSt3__16locale2id5__getEv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 >> 2] | 0) != -1) {
  HEAP32[i1 >> 2] = i2;
  HEAP32[i1 + 4 >> 2] = 185;
  HEAP32[i1 + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(i2, i1, 186);
 }
 STACKTOP = i3;
 return (HEAP32[i2 + 4 >> 2] | 0) + -1 | 0;
}

function ___cxa_can_catch(i1, i2, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 var i3 = 0, i5 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i5;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 i1 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 31](i1, i2, i3) | 0;
 if (i1) HEAP32[i4 >> 2] = HEAP32[i3 >> 2];
 STACKTOP = i5;
 return i1 & 1 | 0;
}

function __ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7__cloneEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = __Znwj(12) | 0;
 HEAP32[i2 >> 2] = 5484;
 i4 = i1 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i1 = i2 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = i3;
 return i2 | 0;
}

function _calloc(i3, i1) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i3) {
  i2 = Math_imul(i1, i3) | 0;
  if ((i1 | i3) >>> 0 > 65535) i2 = ((i2 >>> 0) / (i3 >>> 0) | 0 | 0) == (i1 | 0) ? i2 : -1;
 } else i2 = 0;
 i1 = _malloc(i2) | 0;
 if (!i1) return i1 | 0;
 if (!(HEAP32[i1 + -4 >> 2] & 3)) return i1 | 0;
 _memset(i1 | 0, 0, i2 | 0) | 0;
 return i1 | 0;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7__cloneEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = __Znwj(12) | 0;
 HEAP32[i2 >> 2] = 5688;
 i4 = i1 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i1 = i2 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = i3;
 return i2 | 0;
}

function __ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7__cloneEPNS0_6__baseISA_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 5484;
 i4 = i2 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7__cloneEPNS0_6__baseISB_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 5688;
 i4 = i2 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2568] | 0) == 0 ? (___cxa_guard_acquire(2568) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16696, 16660, _wcslen(16660) | 0);
  ___cxa_atexit(193, 16696, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2568);
 }
 return 16696;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2616] | 0) == 0 ? (___cxa_guard_acquire(2616) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16936, 16888, _wcslen(16888) | 0);
  ___cxa_atexit(193, 16936, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2616);
 }
 return 16936;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2600] | 0) == 0 ? (___cxa_guard_acquire(2600) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16864, 16780, _wcslen(16780) | 0);
  ___cxa_atexit(193, 16864, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2600);
 }
 return 16864;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2584] | 0) == 0 ? (___cxa_guard_acquire(2584) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(16756, 16720, _wcslen(16720) | 0);
  ___cxa_atexit(193, 16756, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2584);
 }
 return 16756;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7__cloneEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0, i4 = 0;
 i2 = __Znwj(12) | 0;
 HEAP32[i2 >> 2] = 5644;
 i4 = i1 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i1 = i2 + 4 | 0;
 HEAP32[i1 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i1 + 4 >> 2] = i3;
 return i2 | 0;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = i2 + 4 | 0;
 i1 = HEAP32[i3 >> 2] | 0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = (HEAP32[i2 >> 2] | 0) + (i3 >> 1) | 0;
 if (i3 & 1) i1 = HEAP32[(HEAP32[i2 >> 2] | 0) + i1 >> 2] | 0;
 FUNCTION_TABLE_vi[i1 & 255](i2);
 return;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7__cloneEPNS0_6__baseISA_EE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 HEAP32[i1 >> 2] = 5644;
 i4 = i2 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1 + 4 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vasprintf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function _add_goal(i3, i4, d1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i7 = HEAP32[711] | 0;
 HEAPF32[i6 >> 2] = +(i3 | 0);
 HEAPF32[i6 + 4 >> 2] = +(i4 | 0);
 i4 = __ZN7NavCtrl7addGoalERK4Vec2fi(i7, i6, d1, i2) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc(i3, i2, i5, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i5 | 0)) while (1) {
  i3 = HEAP8[i2 >> 0] | 0;
  HEAP8[i1 >> 0] = i3 << 24 >> 24 > -1 ? i3 : i4;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i5 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i5 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = i1 + 4 | 0;
 i1 = i2;
 i2 = HEAP32[i3 >> 2] | 0;
 do {
  HEAP32[i2 >> 2] = 0;
  i2 = (HEAP32[i3 >> 2] | 0) + 4 | 0;
  HEAP32[i3 >> 2] = i2;
  i1 = i1 + -1 | 0;
 } while ((i1 | 0) != 0);
 return;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z(i4, i1, i3, i2) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i2;
 i2 = _uselocale(i1) | 0;
 i1 = _vsscanf(i4, i3, i6) | 0;
 if (i2) _uselocale(i2) | 0;
 STACKTOP = i5;
 return i1 | 0;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP32[i2 >> 2] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 4 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0;
 if ((i2 | 0) == (i3 | 0)) i1 = 0; else {
  i1 = 0;
  do {
   i1 = (HEAP8[i2 >> 0] | 0) + (i1 << 4) | 0;
   i4 = i1 & -268435456;
   i1 = (i4 >>> 24 | i4) ^ i1;
   i2 = i2 + 1 | 0;
  } while ((i2 | 0) != (i3 | 0));
 }
 return i1 | 0;
}

function __ZNSt3__18ios_base4InitD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(10748) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(10916) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(11088) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(11256) | 0;
 return;
}

function __ZN3p2t8Triangle21SetConstrainedEdgeCCWERNS_5PointEb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i3 + 8 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 2 >> 0] = i1 & 1;
  return;
 }
 if ((HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 >> 0] = i1 & 1;
  return;
 } else {
  HEAP8[i3 + 1 >> 0] = i1 & 1;
  return;
 }
}

function __ZN3p2t8Triangle17SetDelunayEdgeCCWERNS_5PointEb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i3 + 8 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 5 >> 0] = i1 & 1;
  return;
 }
 if ((HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 3 >> 0] = i1 & 1;
  return;
 } else {
  HEAP8[i3 + 4 >> 0] = i1 & 1;
  return;
 }
}

function __ZN3p2t8Triangle20SetConstrainedEdgeCWERNS_5PointEb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i3 + 8 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 1 >> 0] = i1 & 1;
  return;
 }
 if ((HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 2 >> 0] = i1 & 1;
  return;
 } else {
  HEAP8[i3 >> 0] = i1 & 1;
  return;
 }
}

function __ZN3p2t8Triangle16SetDelunayEdgeCWERNS_5PointEb(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((HEAP32[i3 + 8 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 4 >> 0] = i1 & 1;
  return;
 }
 if ((HEAP32[i3 + 12 >> 2] | 0) == (i2 | 0)) {
  HEAP8[i3 + 5 >> 0] = i1 & 1;
  return;
 } else {
  HEAP8[i3 + 3 >> 0] = i1 & 1;
  return;
 }
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2608] | 0) == 0 ? (___cxa_guard_acquire(2608) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16876, 29405, 11);
  ___cxa_atexit(178, 16876, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2608);
 }
 return 16876;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2592] | 0) == 0 ? (___cxa_guard_acquire(2592) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16768, 29384, 20);
  ___cxa_atexit(178, 16768, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2592);
 }
 return 16768;
}

function _moved_object(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0, i6 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 i6 = HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] | 0;
 HEAPF32[i5 >> 2] = +(i2 | 0);
 HEAPF32[i5 + 4 >> 2] = +(i3 | 0);
 FUNCTION_TABLE_vii[i6 & 63](i1, i5);
 STACKTOP = i4;
 return;
}

function ___uflow(i2) {
 i2 = i2 | 0;
 var i1 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i1 = i3;
 if ((HEAP32[i2 + 8 >> 2] | 0) == 0 ? (___toread(i2) | 0) != 0 : 0) i1 = -1; else if ((FUNCTION_TABLE_iiii[HEAP32[i2 + 32 >> 2] & 31](i2, i1, 1) | 0) == 1) i1 = HEAPU8[i1 >> 0] | 0; else i1 = -1;
 STACKTOP = i3;
 return i1 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = i1 + 8 | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[i4 >> 2] | 0) + 16 >> 2] & 15](i3, i4, HEAP32[i1 >> 2] | 0, HEAP32[i1 + 4 >> 2] | 0, 0, i2);
 return;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2560] | 0) == 0 ? (___cxa_guard_acquire(2560) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16648, 29366, 8);
  ___cxa_atexit(178, 16648, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2560);
 }
 return 16648;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv(i1) {
 i1 = i1 | 0;
 if ((HEAP8[2576] | 0) == 0 ? (___cxa_guard_acquire(2576) | 0) != 0 : 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(16708, 29375, 8);
  ___cxa_atexit(178, 16708, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2576);
 }
 return 16708;
}

function __ZNSt3__13mapINS_4pairIP6VertexS3_EEP8HalfEdgeNS_4lessIS4_EENS_9allocatorINS1_IKS4_S6_EEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__16__treeINS_12__value_typeINS_4pairIP6VertexS4_EEP8HalfEdgeEENS_19__map_value_compareIS5_S8_NS_4lessIS5_EELb1EEENS_9allocatorIS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(i1, HEAP32[i1 + 4 >> 2] | 0);
 return;
}

function ___shlim(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i1 = 0, i2 = 0, i5 = 0;
 HEAP32[i3 + 104 >> 2] = i4;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = HEAP32[i3 + 8 >> 2] | 0;
 i5 = i2 - i1 | 0;
 HEAP32[i3 + 108 >> 2] = i5;
 if ((i4 | 0) != 0 & (i5 | 0) > (i4 | 0)) HEAP32[i3 + 100 >> 2] = i1 + i4; else HEAP32[i3 + 100 >> 2] = i2;
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi(i4, i2, i1, i3) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 if ((i4 | 0) == (HEAP32[i2 + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, i2, i1, i3);
 return;
}

function _added_agent(i3, i4, d1, d2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 d1 = +d1;
 d2 = +d2;
 var i5 = 0, i6 = 0, i7 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 i7 = HEAP32[711] | 0;
 HEAPF32[i6 >> 2] = +(i3 | 0);
 HEAPF32[i6 + 4 >> 2] = +(i4 | 0);
 __ZN7NavCtrl8addAgentERK4Vec2ff(i7, i6, d1, d2);
 STACKTOP = i5;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj(i5, i6, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = 0;
 HEAP32[i6 + 4 >> 2] = 0;
 i6 = i5 + 8 | 0;
 HEAP32[i6 >> 2] = -1;
 HEAP32[i6 + 4 >> 2] = -1;
 return;
}

function __ZN3p2t3cmpEPKNS_5PointES2_(i3, i4) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 var d1 = 0.0, d2 = 0.0;
 d1 = +HEAPF64[i3 + 16 >> 3];
 d2 = +HEAPF64[i4 + 16 >> 3];
 if (d1 < d2) {
  i4 = 1;
  return i4 | 0;
 }
 if (d1 == d2 ? +HEAPF64[i3 + 8 >> 3] < +HEAPF64[i4 + 8 >> 3] : 0) {
  i4 = 1;
  return i4 | 0;
 }
 i4 = 0;
 return i4 | 0;
}

function __ZN3p2t8Triangle17GetDelunayEdgeCCWERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i1 = i2 + 3 | 0;
  break;
 } else {
  i1 = i2 + 4 | 0;
  break;
 } else i1 = i2 + 5 | 0; while (0);
 return (HEAP8[i1 >> 0] | 0) != 0 | 0;
}

function __ZN3p2t5Sweep11TriangulateERNS_12SweepContextE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZN3p2t12SweepContext17InitTriangulationEv(i1);
 __ZN3p2t12SweepContext20CreateAdvancingFrontEv(i1);
 __ZN3p2t5Sweep11SweepPointsERNS_12SweepContextE(i2, i1);
 __ZN3p2t5Sweep19FinalizationPolygonERNS_12SweepContextE(0, i1);
 return;
}

function __ZN3p2t8Triangle16GetDelunayEdgeCWERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i1 = i2 + 5 | 0;
  break;
 } else {
  i1 = i2 + 3 | 0;
  break;
 } else i1 = i2 + 4 | 0; while (0);
 return (HEAP8[i1 >> 0] | 0) != 0 | 0;
}

function __ZNSt3__118__libcpp_refstringC2EPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0, i4 = 0;
 i4 = _strlen(i1) | 0;
 i3 = __Znwj(i4 + 13 | 0) | 0;
 HEAP32[i3 >> 2] = i4;
 HEAP32[i3 + 4 >> 2] = i4;
 HEAP32[i3 + 8 >> 2] = 0;
 i3 = i3 + 12 | 0;
 _memcpy(i3 | 0, i1 | 0, i4 + 1 | 0) | 0;
 HEAP32[i2 >> 2] = i3;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12096;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12032;
 __ZNSt3__16localeC2Ev(i1 + 4 | 0);
 i1 = i1 + 8 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 HEAP32[i1 + 12 >> 2] = 0;
 HEAP32[i1 + 16 >> 2] = 0;
 HEAP32[i1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 4;
  i1 = HEAP32[i1 >> 2] | 0;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[i1 >> 2] | 0) + 36 >> 2] & 127](i1) | 0) == -1) i1 = -1; else {
  i2 = i1 + 12 | 0;
  i1 = HEAP32[i2 >> 2] | 0;
  HEAP32[i2 >> 2] = i1 + 1;
  i1 = HEAPU8[i1 >> 0] | 0;
 }
 return i1 | 0;
}

function _sn_write(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0, i5 = 0;
 i4 = i1 + 20 | 0;
 i5 = HEAP32[i4 >> 2] | 0;
 i1 = (HEAP32[i1 + 16 >> 2] | 0) - i5 | 0;
 i1 = i1 >>> 0 > i2 >>> 0 ? i2 : i1;
 _memcpy(i5 | 0, i3 | 0, i1 | 0) | 0;
 HEAP32[i4 >> 2] = (HEAP32[i4 >> 2] | 0) + i1;
 return i2 | 0;
}

function __ZN12ErrorBoxItem6updateEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = HEAP32[i1 + 12 >> 2] | 0;
 i3 = HEAP32[i2 >> 2] | 0;
 i2 = HEAP32[i2 + 8 >> 2] | 0;
 _emscripten_asm_const_5(18, i1 | 0, +(+HEAPF32[i3 + 4 >> 2]), +(+HEAPF32[i3 + 8 >> 2]), +(+HEAPF32[i2 + 4 >> 2]), +(+HEAPF32[i2 + 8 >> 2])) | 0;
 return;
}

function __ZNSt3__18ios_baseD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12320;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE(i1, 0);
 __ZNSt3__16localeD2Ev(i1 + 28 | 0);
 _free(HEAP32[i1 + 32 >> 2] | 0);
 _free(HEAP32[i1 + 36 >> 2] | 0);
 _free(HEAP32[i1 + 48 >> 2] | 0);
 _free(HEAP32[i1 + 60 >> 2] | 0);
 return;
}

function __ZN3p2t8Triangle14NeighborAcrossERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i1 = i2 + 24 | 0;
  break;
 } else {
  i1 = i2 + 28 | 0;
  break;
 } else i1 = i2 + 20 | 0; while (0);
 return HEAP32[i1 >> 2] | 0;
}

function __ZN18SubGoalFromSegment11makePathRefEf(i1, i3, d2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 d2 = +d2;
 var d4 = 0.0;
 i3 = HEAP32[i3 + 4 >> 2] | 0;
 d4 = +HEAPF32[i3 + 48 >> 2] * d2 + +HEAPF32[i3 + 32 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i3 + 44 >> 2] * d2 + +HEAPF32[i3 + 28 >> 2];
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function __ZN3p2t8Triangle11NeighborCCWERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i1 = i2 + 20 | 0;
  break;
 } else {
  i1 = i2 + 24 | 0;
  break;
 } else i1 = i2 + 28 | 0; while (0);
 return HEAP32[i1 >> 2] | 0;
}

function __ZN3p2t8Triangle10NeighborCWERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 do if ((HEAP32[i2 + 8 >> 2] | 0) != (i1 | 0)) if ((HEAP32[i2 + 12 >> 2] | 0) == (i1 | 0)) {
  i1 = i2 + 28 | 0;
  break;
 } else {
  i1 = i2 + 20 | 0;
  break;
 } else i1 = i2 + 24 | 0; while (0);
 return HEAP32[i1 >> 2] | 0;
}

function __ZNSt3__15ctypeIcEC2EPKtbj(i4, i3, i2, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i4 + 4 >> 2] = i1 + -1;
 HEAP32[i4 >> 2] = 13448;
 i1 = i4 + 8 | 0;
 HEAP32[i1 >> 2] = i3;
 HEAP8[i4 + 12 >> 0] = i2 & 1;
 if (!i3) HEAP32[i1 >> 2] = HEAP32[(___ctype_b_loc() | 0) >> 2];
 return;
}

function _added_poly_point(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = HEAP32[711] | 0;
 HEAPF32[i4 >> 2] = +(i1 | 0);
 HEAPF32[i4 + 4 >> 2] = +(i2 | 0);
 __ZN7NavCtrl12addPolyPointERK4Vec2(i5, i4);
 STACKTOP = i3;
 return;
}

function __ZNK6Circle15distSqToSurfaceERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2] - +HEAPF32[i2 + 12 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 16 >> 2];
 d3 = +Math_sqrt(+(d4 * d4 + d3 * d3));
 d3 = d3 - +HEAPF32[i2 + 28 >> 2];
 return +(d3 * d3);
}

function __ZN3p2t8Triangle21GetConstrainedEdgeCCWERNS_5PointE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 do if ((HEAP32[i1 + 8 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) break; else {
  i1 = i1 + 1 | 0;
  break;
 } else i1 = i1 + 2 | 0; while (0);
 return (HEAP8[i1 >> 0] | 0) != 0 | 0;
}

function _added_building(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0, i5 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i4 = i3;
 i5 = HEAP32[711] | 0;
 HEAPF32[i4 >> 2] = +(i1 | 0);
 HEAPF32[i4 + 4 >> 2] = +(i2 | 0);
 __ZN7NavCtrl11addBuildingERK4Vec2(i5, i4);
 STACKTOP = i3;
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _catopen((HEAP8[i2 >> 0] & 1) == 0 ? i2 + 1 | 0 : HEAP32[i2 + 8 >> 2] | 0, 1) | 0;
 return i3 >>> ((i3 | 0) != (-1 | 0) & 1) | 0;
}

function __ZN3p2t8Triangle20GetConstrainedEdgeCWERNS_5PointE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 do if ((HEAP32[i1 + 8 >> 2] | 0) != (i2 | 0)) if ((HEAP32[i1 + 12 >> 2] | 0) == (i2 | 0)) {
  i1 = i1 + 2 | 0;
  break;
 } else break; else i1 = i1 + 1 | 0; while (0);
 return (HEAP8[i1 >> 0] | 0) != 0 | 0;
}

function ___uremdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i6 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i6 | 0;
 ___udivmoddi4(i1, i2, i3, i4, i5) | 0;
 STACKTOP = i6;
 return (tempRet0 = HEAP32[i5 + 4 >> 2] | 0, HEAP32[i5 >> 2] | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj(i3, i4, i1, i2) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = i3;
 HEAP32[i4 >> 2] = 0;
 HEAP32[i4 + 4 >> 2] = 0;
 i4 = i3 + 8 | 0;
 HEAP32[i4 >> 2] = -1;
 HEAP32[i4 + 4 >> 2] = -1;
 return;
}

function dynCall_iiiiiiiii(i9, i1, i2, i3, i4, i5, i6, i7, i8) {
 i9 = i9 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[i9 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0, i8 | 0) | 0;
}

function __ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = HEAP32[i1 >> 2] | 0;
 if (!i3) return;
 i1 = i1 + 4 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (i3 | 0)) HEAP32[i1 >> 2] = i2 + (~((i2 + -4 - i3 | 0) >>> 2) << 2);
 __ZdlPv(i3);
 return;
}

function __ZNSt3__114__shared_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 8 >> 2] & 255](i1);
  i1 = 1;
 } else i1 = 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP8[i1 >> 0] = HEAP8[i2 >> 0] | 0;
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 1 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 32 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_(i3, i4, i2, i1) {
 i3 = i3 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_(i3, i2, i1);
 return;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw(i3, i2, i4, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i1 = i1 | 0;
 if ((i2 | 0) != (i4 | 0)) while (1) {
  HEAP32[i1 >> 2] = HEAP8[i2 >> 0];
  i2 = i2 + 1 | 0;
  if ((i2 | 0) == (i4 | 0)) break; else i1 = i1 + 4 | 0;
 }
 return i4 | 0;
}

function __ZNSt3__18numpunctIwEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 13636;
 HEAP32[i2 + 8 >> 2] = 46;
 HEAP32[i2 + 12 >> 2] = 44;
 i2 = i2 + 16 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__18numpunctIcEC2Ej(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 4 >> 2] = i1 + -1;
 HEAP32[i2 >> 2] = 13596;
 HEAP8[i2 + 8 >> 0] = 46;
 HEAP8[i2 + 9 >> 0] = 44;
 i2 = i2 + 12 | 0;
 HEAP32[i2 >> 2] = 0;
 HEAP32[i2 + 4 >> 2] = 0;
 HEAP32[i2 + 8 >> 2] = 0;
 return;
}

function ___muldi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = i1;
 i6 = i3;
 i3 = ___muldsi3(i5, i6) | 0;
 i1 = tempRet0;
 return (tempRet0 = (Math_imul(i2, i6) | 0) + (Math_imul(i4, i5) | 0) + i1 | i1 & 0, i3 | 0 | 0) | 0;
}

function __ZNK14SegmentSubGoal8isPassedERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +(HEAP32[i2 + 36 >> 2] | 0) * (+HEAPF32[i2 + 20 >> 2] * (+HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 8 >> 2]) - (+HEAPF32[i1 >> 2] - +HEAPF32[i2 + 4 >> 2]) * +HEAPF32[i2 + 24 >> 2]) < 0.0 | 0;
}

function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 3108;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 32 | 0);
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 return;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE(i1) {
 i1 = i1 | 0;
 switch (HEAP32[i1 + 4 >> 2] & 74 | 0) {
 case 64:
  {
   i1 = 8;
   break;
  }
 case 8:
  {
   i1 = 16;
   break;
  }
 case 0:
  {
   i1 = 0;
   break;
  }
 default:
  i1 = 10;
 }
 return i1 | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_(i6, i1, i4, i2, i5, i7, i3, i8) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 i7 = i7 | 0;
 i3 = i3 | 0;
 i8 = i8 | 0;
 HEAP32[i5 >> 2] = i4;
 HEAP32[i8 >> 2] = i7;
 return 3;
}

function _wmemcpy(i4, i2, i1) {
 i4 = i4 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 if (i1) {
  i3 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i3 >> 2] = HEAP32[i2 >> 2];
   if (!i1) break; else {
    i2 = i2 + 4 | 0;
    i3 = i3 + 4 | 0;
   }
  }
 }
 return i4 | 0;
}

function __ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNK14SegmentSubGoal7getDestERK4Vec2(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var d4 = 0.0;
 d4 = +HEAPF32[i3 + 8 >> 2] + +HEAPF32[i3 + 32 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i3 + 4 >> 2] + +HEAPF32[i3 + 28 >> 2];
 HEAPF32[i1 + 4 >> 2] = d4;
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function ___cxa_get_globals_fast() {
 var i1 = 0, i2 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(6316, 2) | 0)) {
  i2 = _pthread_getspecific(HEAP32[1578] | 0) | 0;
  STACKTOP = i1;
  return i2 | 0;
 } else _abort_message(21869, i1);
 return 0;
}

function dynCall_iiiiiiii(i8, i1, i2, i3, i4, i5, i6, i7) {
 i8 = i8 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 return FUNCTION_TABLE_iiiiiiii[i8 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0, i7 | 0) | 0;
}

function __ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNK12PointSubGoal8isPassedERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i1 >> 2] - +HEAPF32[i2 + 4 >> 2];
 d3 = +HEAPF32[i1 + 4 >> 2] - +HEAPF32[i2 + 8 >> 2];
 return d4 * d4 + d3 * d3 < +HEAPF32[i2 + 12 >> 2] | 0;
}

function __ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 12 >> 2] | 0;
 if (!i1) return;
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__16localeaSERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__114__shared_count12__add_sharedEv(HEAP32[i1 >> 2] | 0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i2 >> 2] | 0) | 0;
 HEAP32[i2 >> 2] = HEAP32[i1 >> 2];
 return i2 | 0;
}

function __ZN17BuildingPointItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function _snprintf(i3, i2, i1, i4) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 var i5 = 0, i6 = 0;
 i5 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i6 = i5;
 HEAP32[i6 >> 2] = i4;
 i4 = _vsnprintf(i3, i2, i1, i6) | 0;
 STACKTOP = i5;
 return i4 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free(i1);
 if (!(_pthread_setspecific(HEAP32[1578] | 0, 0) | 0)) {
  STACKTOP = i2;
  return;
 } else _abort_message(22038, i2);
}

function __ZNSt3__119__shared_weak_count14__release_weakEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = i1 + 8 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if (!i2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 16 >> 2] & 255](i1);
 return;
}

function __ZNK14SegmentSubGoal14representPointEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var d3 = 0.0;
 d3 = +HEAPF32[i2 + 8 >> 2] + +HEAPF32[i2 + 32 >> 2];
 HEAPF32[i1 >> 2] = +HEAPF32[i2 + 4 >> 2] + +HEAPF32[i2 + 28 >> 2];
 HEAPF32[i1 + 4 >> 2] = d3;
 return;
}

function __ZN13PolyPointItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function __ZN12ErrorBoxItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE(i2, i3, i4, 1114111, 0) | 0;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13312) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13276) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13240) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13204) | 0);
 return;
}

function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = (HEAP32[i1 >> 2] | 0) + -4 | 0;
 i2 = HEAP32[i3 >> 2] | 0;
 HEAP32[i3 >> 2] = i2 + -1;
 if ((i2 + -1 | 0) < 0) __ZdlPv((HEAP32[i1 >> 2] | 0) + -12 | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12912) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12880) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12848) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12756) | 0);
 return;
}

function __ZN9AgentItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12664) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12604) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12544) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12472) | 0);
 return;
}

function __ZN8GoalItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function __ZN7TriItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function __ZNK12PointSegment15distSqToSurfaceERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var d3 = 0.0, d4 = 0.0;
 d4 = +HEAPF32[i2 + 28 >> 2] - +HEAPF32[i1 >> 2];
 d3 = +HEAPF32[i2 + 32 >> 2] - +HEAPF32[i1 + 4 >> 2];
 return +(d4 * d4 + d3 * d3);
}

function __ZN4ItemD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  __ZdlPv(i1);
  return;
 }
}

function ___stdio_close(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i3 = i2;
 HEAP32[i3 >> 2] = HEAP32[i1 + 60 >> 2];
 i1 = ___syscall_ret(___syscall6(6, i3 | 0) | 0) | 0;
 STACKTOP = i2;
 return i1 | 0;
}

function __ZNSt3__16locale8__globalEv() {
 if ((HEAP8[2456] | 0) == 0 ? (___cxa_guard_acquire(2456) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[3551] = 14200;
  ___cxa_guard_release(2456);
 }
 return HEAP32[3551] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if ((HEAP8[2288] | 0) == 0 ? (___cxa_guard_acquire(2288) | 0) != 0 : 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[3549] = 14192;
  ___cxa_guard_release(2288);
 }
 return HEAP32[3549] | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 i1 = HEAP32[i1 + 8 >> 2] | 0;
 if (i1) {
  i1 = _uselocale(i1) | 0;
  if (!i1) i1 = 4; else {
   _uselocale(i1) | 0;
   i1 = 4;
  }
 } else i1 = 1;
 return i1 | 0;
}

function copyTempFloat(i1) {
 i1 = i1 | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[i1 >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[i1 + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[i1 + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[i1 + 3 >> 0];
}

function dynCall_iiiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 return FUNCTION_TABLE_iiiiiii[i7 & 63](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0) | 0;
}

function _bitshift64Ashr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = (i2 | 0) < 0 ? -1 : 0;
 return i2 >> i1 - 32 | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19673 ? i2 + 12 | 0 : 0) | 0;
}

function __ZNK12PointSubGoal7getDestERK4Vec2(i1, i3, i2) {
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 var i4 = 0;
 i4 = i3 + 4 | 0;
 i2 = HEAP32[i4 + 4 >> 2] | 0;
 i3 = i1;
 HEAP32[i3 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i3 + 4 >> 2] = i2;
 return;
}

function _newlocale(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 if (((HEAP8[i3 >> 0] | 0) != 0 ? (_strcmp(i3, 29030) | 0) != 0 : 0) ? (_strcmp(i3, 24403) | 0) != 0 : 0) i1 = 0; else if (!i1) i1 = _calloc(1, 4) | 0;
 return i1 | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19531 ? i2 + 12 | 0 : 0) | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 HEAP32[i1 >> 2] = 13516;
 i1 = i1 + 8 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNKSt3__15ctypeIwE5do_isEtw(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = (HEAP16[(HEAP32[(___ctype_b_loc() | 0) >> 2] | 0) + (i1 << 1) >> 1] & i2) << 16 >> 16 != 0; else i1 = 0;
 return i1 | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19145 ? i2 + 12 | 0 : 0) | 0;
}

function __ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE6targetERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19841 ? i2 + 4 | 0 : 0) | 0;
}

function dynCall_iiiiiid(i7, i1, i2, i3, i4, i5, d6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 return FUNCTION_TABLE_iiiiiid[i7 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, +d6) | 0;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE6targetERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 20515 ? i2 + 4 | 0 : 0) | 0;
}

function _sscanf(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 var i4 = 0, i5 = 0;
 i4 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i5 = i4;
 HEAP32[i5 >> 2] = i3;
 i3 = _vsscanf(i2, i1, i5) | 0;
 STACKTOP = i4;
 return i3 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj(i2, i1, _wcslen(i1) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj(i2, i1, _strlen(i1) | 0) | 0;
}

function __ZNK12PointSubGoal14representPointEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = i2 + 4 | 0;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function __ZNKSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19275 ? i2 + 12 | 0 : 0) | 0;
}

function dynCall_viiiiii(i7, i1, i2, i3, i4, i5, i6) {
 i7 = i7 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 FUNCTION_TABLE_viiiiii[i7 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0, i6 | 0);
}

function __ZNKSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19399 ? i2 + 12 | 0 : 0) | 0;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE6targetERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 20697 ? i2 + 4 | 0 : 0) | 0;
}

function __ZNKSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return ((HEAP32[i1 + 4 >> 2] | 0) == 19805 ? i2 + 12 | 0 : 0) | 0;
}

function _wmemset(i4, i3, i1) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 var i2 = 0;
 if (i1) {
  i2 = i4;
  while (1) {
   i1 = i1 + -1 | 0;
   HEAP32[i2 >> 2] = i3;
   if (!i1) break; else i2 = i2 + 4 | 0;
  }
 }
 return i4 | 0;
}

function _bitshift64Shl(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 << i1 | (i3 & (1 << i1) - 1 << 32 - i1) >>> 32 - i1;
  return i3 << i1;
 }
 tempRet0 = i3 << i1 - 32;
 return 0;
}

function _abort_message(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[i3 >> 2] = i2;
 i2 = HEAP32[1643] | 0;
 _vfprintf(i2, i1, i3) | 0;
 _fputc(10, i2) | 0;
 _abort();
}

function __ZN6Object7setSizeERK4Vec2(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 var i3 = 0, i4 = 0;
 i4 = i2;
 i3 = HEAP32[i4 + 4 >> 2] | 0;
 i2 = i1 + 20 | 0;
 HEAP32[i2 >> 2] = HEAP32[i4 >> 2];
 HEAP32[i2 + 4 >> 2] = i3;
 return;
}

function _bitshift64Lshr(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 if ((i1 | 0) < 32) {
  tempRet0 = i2 >>> i1;
  return i3 >>> i1 | (i2 & (1 << i1) - 1) << 32 - i1;
 }
 tempRet0 = 0;
 return i2 >>> i1 - 32 | 0;
}

function __ZNKSt3__18ios_base6getlocEv(i1) {
 i1 = i1 | 0;
 var i2 = 0, i3 = 0;
 i3 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 i2 = i3;
 __ZNSt3__16localeC2ERKS0_(i2, i1 + 28 | 0);
 STACKTOP = i3;
 return HEAP32[i2 >> 2] | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var i1 = 0;
 i1 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(6312, 180) | 0)) {
  STACKTOP = i1;
  return;
 } else _abort_message(21988, i1);
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j(i5, i1, i3, i2, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 i2 = i2 | 0;
 i4 = i4 | 0;
 i5 = i2 - i3 | 0;
 return (i5 >>> 0 < i4 >>> 0 ? i5 : i4) | 0;
}

function __ZNK9Exception4whatEv(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2 + 4 | 0;
 if (!(HEAP8[i1 >> 0] & 1)) {
  i2 = i1 + 1 | 0;
  return i2 | 0;
 } else {
  i2 = HEAP32[i2 + 12 >> 2] | 0;
  return i2 | 0;
 }
 return 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13556) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13564) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 if ((HEAP8[1968] | 0) == 0 ? (___cxa_guard_acquire(1968) | 0) != 0 : 0) {
  HEAP32[3499] = _newlocale(2147483647, 29030, 0) | 0;
  ___cxa_guard_release(1968);
 }
 return HEAP32[3499] | 0;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13500) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13492) | 0);
 return;
}

function __ZNKSt3__16locale9use_facetERNS0_2idE(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 i2 = __ZNSt3__16locale2id5__getEv(i2) | 0;
 return HEAP32[(HEAP32[i1 + 8 >> 2] | 0) + (i2 << 2) >> 2] | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 24 >> 24 << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZN4ItemD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 2976;
 if (!(HEAP8[i1 + 8 >> 0] | 0)) {
  _emscripten_asm_const_1(16, i1 | 0) | 0;
  return;
 } else {
  _emscripten_asm_const_1(15, i1 | 0) | 0;
  return;
 }
}

function runPostSets() {}
function _i64Subtract(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i4 = i2 - i4 - (i3 >>> 0 > i1 >>> 0 | 0) >>> 0;
 return (tempRet0 = i4, i1 - i3 >>> 0 | 0) | 0;
}

function __ZN6Object6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = i1;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = i2 + 12 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = i1;
 return;
}

function dynCall_iiiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiiiii[i6 & 31](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0) | 0;
}

function __ZN5Agent6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 var i3 = 0;
 i3 = i1;
 i1 = HEAP32[i3 + 4 >> 2] | 0;
 i2 = i2 + 12 | 0;
 HEAP32[i2 >> 2] = HEAP32[i3 >> 2];
 HEAP32[i2 + 4 >> 2] = i1;
 return;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 << 24 >> 24 > -1) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + ((i1 & 255) << 2) >> 2] & 255;
 return i1 | 0;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13168) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13104) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13040) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12976) | 0);
 return;
}

function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function dynCall_iiiiid(i6, i1, i2, i3, i4, d5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 return FUNCTION_TABLE_iiiiid[i6 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0, +d5) | 0;
}

function dynCall_iiidii(i6, i1, i2, d3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 return FUNCTION_TABLE_iiidii[i6 & 3](i1 | 0, i2 | 0, +d3, i4 | 0, i5 | 0) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1 + (HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var i1 = 0;
 i1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
 HEAP32[3550] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return 14200;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13580) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13572) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13392) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13352) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12400) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(12360) | 0);
 return;
}

function dynCall_viiiii(i6, i1, i2, i3, i4, i5) {
 i6 = i6 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 FUNCTION_TABLE_viiiii[i6 & 3](i1 | 0, i2 | 0, i3 | 0, i4 | 0, i5 | 0);
}

function __ZNSt3__16localeC2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[i1 >> 2] = i2;
 __ZNSt3__114__shared_count12__add_sharedEv(i2);
 return;
}

function __ZNSt3__119__shared_weak_count16__release_sharedEv(i1) {
 i1 = i1 | 0;
 if (__ZNSt3__114__shared_count16__release_sharedEv(i1) | 0) __ZNSt3__119__shared_weak_count14__release_weakEv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 14228, _wcslen(14228) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13424) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl(i2, i1, __ZNSt3__16locale2id5__getEv(13432) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(i1, 14208, _wcslen(14208) | 0);
 return;
}

function __ZNSt3__15ctypeIcED2Ev(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 HEAP32[i2 >> 2] = 13448;
 i1 = HEAP32[i2 + 8 >> 2] | 0;
 if ((i1 | 0) != 0 ? (HEAP8[i2 + 12 >> 0] | 0) != 0 : 0) __ZdaPv(i1);
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 if (i1 >>> 0 < 128) i1 = HEAP32[(HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0) + (i1 << 2) >> 2] | 0;
 return i1 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP8[i1 >> 0] = 2;
 HEAP8[i1 + 1 >> 0] = 3;
 HEAP8[i1 + 2 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_(i3, i1, i4, i2, i5) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i5 = i5 | 0;
 HEAP32[i5 >> 2] = i4;
 return 3;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc(i1, 1, 45);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZN3p2t14AdvancingFrontC2ERNS_4NodeES2_(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i3 >> 2] = i1;
 HEAP32[i3 + 4 >> 2] = i2;
 HEAP32[i3 + 8 >> 2] = i1;
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 12) | 0);
 return;
}

function dynCall_iiiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return FUNCTION_TABLE_iiiii[i5 & 7](i1 | 0, i2 | 0, i3 | 0, i4 | 0) | 0;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 29139, 5);
 return;
}

function _i64Add(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i3 = i1 + i3 >>> 0;
 return (tempRet0 = i2 + i4 + (i3 >>> 0 < i1 >>> 0 | 0) >>> 0, i3 | 0) | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + ((HEAP32[(HEAP32[i1 >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(i1, 29134, 4);
 return;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_(i1, i2 + 12 | 0);
 return;
}

function __ZN3p2t12SweepContext10LocateNodeERNS_5PointE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return __ZN3p2t14AdvancingFront10LocateNodeERKd(HEAP32[i2 + 92 >> 2] | 0, i1 + 8 | 0) | 0;
}

function __ZNSt3__110__time_putD2Ev(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if ((i2 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[i1 >> 2] | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function b14(i1, i2, i3, i4, i5, i6, i7, i8) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 i8 = i8 | 0;
 abort(14);
 return 0;
}

function __ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__16localeC2ERKS0_(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i1 = HEAP32[i1 >> 2] | 0;
 HEAP32[i2 >> 2] = i1;
 __ZNSt3__114__shared_count12__add_sharedEv(i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_countD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv(i2, i3, i1) {
 i2 = i2 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 return (i2 | 0) == (i3 | 0) | 0;
}

function dynCall_viiii(i5, i1, i2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_viiii[i5 & 15](i1 | 0, i2 | 0, i3 | 0, i4 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZN9ExceptionD0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 3020;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE18destroy_deallocateEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN3p2t12SweepContext12GetTrianglesEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZNSt3__16vectorIPN3p2t8TriangleENS_9allocatorIS3_EEEC2ERKS6_(i1, i2 + 68 | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE18destroy_deallocateEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 HEAP32[i1 >> 2] = 0;
 HEAP32[i1 + 4 >> 2] = 0;
 HEAP32[i1 + 8 >> 2] = 0;
 return;
}

function __ZNSt3__18numpunctIwED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 13636;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 13596;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 12 | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _uselocale(i3) {
 i3 = i3 | 0;
 var i1 = 0, i2 = 0;
 i1 = (_pthread_self() | 0) + 176 | 0;
 i2 = HEAP32[i1 >> 2] | 0;
 if (i3) HEAP32[i1 >> 2] = i3;
 return i2 | 0;
}

function dynCall_vidii(i5, i1, d2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 FUNCTION_TABLE_vidii[i5 & 3](i1 | 0, +d2, i3 | 0, i4 | 0);
}

function __ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE18destroy_deallocateEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZSt11__terminatePFvvE(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
 _abort_message(21933, i2);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12096;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12032;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1 + -8 | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1) {
 i1 = i1 | 0;
 if (HEAP8[i1 >> 0] & 1) __ZdlPv(HEAP32[i1 + 8 >> 2] | 0);
 return;
}

function __ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN9ExceptionD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 3020;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt13runtime_errorC2EPKc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 >> 2] = 6124;
 __ZNSt3__118__libcpp_refstringC2EPKc(i2 + 4 | 0, i1);
 return;
}

function dynCall_iiii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return FUNCTION_TABLE_iiii[i4 & 31](i1 | 0, i2 | 0, i3 | 0) | 0;
}

function b0(i1, i2, i3, i4, i5, i6, i7) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 i7 = i7 | 0;
 abort(0);
 return 0;
}

function __ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE11target_typeEv(i1) {
 i1 = i1 | 0;
 return 320;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv(i1) {
 i1 = i1 | 0;
 if (i1) FUNCTION_TABLE_vi[HEAP32[(HEAP32[i1 >> 2] | 0) + 4 >> 2] & 255](i1);
 return;
}

function __ZNSt3__16locale2id6__initEv(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = HEAP32[3355] | 0;
 HEAP32[3355] = i2 + 1;
 HEAP32[i1 + 4 >> 2] = i2 + 1;
 return;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE11target_typeEv(i1) {
 i1 = i1 | 0;
 return 424;
}

function __ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __GLOBAL__sub_I_Mesh_cpp() {
 HEAP32[1460] = 0;
 HEAP32[1461] = 0;
 HEAP32[1459] = 5840;
 ___cxa_atexit(179, 5836, ___dso_handle | 0) | 0;
 return;
}

function __ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE11target_typeEv(i1) {
 i1 = i1 | 0;
 return 456;
}

function ___syscall_ret(i1) {
 i1 = i1 | 0;
 if (i1 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - i1;
  i1 = -1;
 }
 return i1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12096;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 12032;
 __ZNSt3__16localeD2Ev(i1 + 4 | 0);
 return;
}

function __ZN3p2t8Triangle14ClearNeighborsEv(i1) {
 i1 = i1 | 0;
 HEAP32[i1 + 20 >> 2] = 0;
 HEAP32[i1 + 24 >> 2] = 0;
 HEAP32[i1 + 28 >> 2] = 0;
 return;
}

function _wcslen(i2) {
 i2 = i2 | 0;
 var i1 = 0;
 i1 = i2;
 while (1) if (!(HEAP32[i1 >> 2] | 0)) break; else i1 = i1 + 4 | 0;
 return i1 - i2 >> 2 | 0;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__110__time_putD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 16 | 0;
 HEAP32[i1 >> 2] = HEAP32[i1 >> 2] | 1;
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNK6Object14spanningPointsERK4Vec2fPS0_S3_(i5, i1, d2, i3, i4) {
 i5 = i5 | 0;
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return 0;
}

function ___errno_location() {
 var i1 = 0;
 if (!(HEAP32[1581] | 0)) i1 = 6600; else i1 = HEAP32[(_pthread_self() | 0) + 60 >> 2] | 0;
 return i1 | 0;
}

function __ZN3p2t8Triangle17ClearDelunayEdgesEv(i1) {
 i1 = i1 | 0;
 HEAP8[i1 + 5 >> 0] = 0;
 HEAP8[i1 + 4 >> 0] = 0;
 HEAP8[i1 + 3 >> 0] = 0;
 return;
}

function __ZSt17__throw_bad_allocv() {
 var i1 = 0;
 i1 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev(i1);
 ___cxa_throw(i1 | 0, 600, 88);
}

function __ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7destroyEv(i1) {
 i1 = i1 | 0;
 return;
}

function dynCall_viii(i4, i1, i2, i3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 FUNCTION_TABLE_viii[i4 & 3](i1 | 0, i2 | 0, i3 | 0);
}

function __ZNSt3__119__shared_weak_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7destroyEv(i1) {
 i1 = i1 | 0;
 return;
}
function stackAlloc(i1) {
 i1 = i1 | 0;
 var i2 = 0;
 i2 = STACKTOP;
 STACKTOP = STACKTOP + i1 | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return i2 | 0;
}

function __ZNSt3__18ios_base5clearEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP32[i2 + 16 >> 2] = (HEAP32[i2 + 24 >> 2] | 0) == 0 | i1;
 return;
}

function __ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7destroyEv(i1) {
 i1 = i1 | 0;
 return;
}

function ___cxa_is_pointer_type(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 0; else i1 = (___dynamic_cast(i1, 648, 696, 0) | 0) != 0;
 return i1 & 1 | 0;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 12 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__114__shared_count12__add_sharedEv(i1) {
 i1 = i1 | 0;
 i1 = i1 + 4 | 0;
 HEAP32[i1 >> 2] = (HEAP32[i1 >> 2] | 0) + 1;
 return;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 >>> 0 < 128 ? i1 & 255 : i2) | 0;
}

function dynCall_viid(i4, i1, i2, d3) {
 i4 = i4 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 FUNCTION_TABLE_viid[i4 & 3](i1 | 0, i2 | 0, +d3);
}

function b9(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(9);
 return 0;
}

function _strtoull_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoull(i4, i3, i1) | 0;
 return i4 | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 << 24 >> 24 > -1 ? i1 : i2) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return i3 | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _strtoll_l(i4, i3, i1, i2) {
 i4 = i4 | 0;
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 i4 = _strtoll(i4, i3, i1) | 0;
 return i4 | 0;
}

function _isxdigit(i1) {
 i1 = i1 | 0;
 if ((i1 + -48 | 0) >>> 0 < 10) i1 = 1; else i1 = ((i1 | 32) + -97 | 0) >>> 0 < 6;
 return i1 & 1 | 0;
}

function __ZNSt13runtime_errorD2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 6124;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev(i1 + 4 | 0);
 return;
}

function b5(i1, i2, i3, i4, i5, d6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 d6 = +d6;
 abort(5);
 return 0;
}

function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + -8 + 12 | 0);
 return;
}

function _strtoll(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox555(i3, i2, i1, 0, -2147483648) | 0;
 return i3 | 0;
}

function ___udivdi3(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 return ___udivmoddi4(i1, i2, i3, i4, 0) | 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(21666, 21695, 1164, 21760);
}

function __Z12lessPrioNodeRK8PrioNodeS1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +HEAPF32[i1 + 4 >> 2] > +HEAPF32[i2 + 4 >> 2] | 0;
}

function _set_goal(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 __ZN7NavCtrl7setGoalEP9AgentItemP8GoalItem(HEAP32[711] | 0, i1, i2);
 return;
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(i1) {
 i1 = i1 | 0;
 ___assert_fail(21781, 21804, 303, 21760);
}

function dynCall_iii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return FUNCTION_TABLE_iii[i3 & 31](i1 | 0, i2 | 0) | 0;
}

function __ZNSt3__16localeD2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[i1 >> 2] | 0) | 0;
 return;
}

function b2(i1, i2, i3, i4, i5, i6) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 i6 = i6 | 0;
 abort(2);
}

function _strtoull(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = _strtox555(i3, i2, i1, -1, -1) | 0;
 return i3 | 0;
}

function _mbrlen(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return _mbrtowc(0, i2, i1, (i3 | 0) != 0 ? i3 : 6636) | 0;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 12 | 0);
 return;
}

function __ZL5compYPK6ObjectS1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +HEAPF32[i1 + 16 >> 2] < +HEAPF32[i2 + 16 >> 2] | 0;
}

function __ZL5compXPK6ObjectS1_(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +HEAPF32[i1 + 12 >> 2] < +HEAPF32[i2 + 12 >> 2] | 0;
}

function dynCall_dii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 return +FUNCTION_TABLE_dii[i3 & 3](i1 | 0, i2 | 0);
}

function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(2296, 1);
 HEAP32[3548] = 2296;
 return 14192;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1 + 8 | 0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv(i1) {
 i1 = i1 | 0;
 return 2;
}

function b20(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(20);
 return 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __GLOBAL__I_000101() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(183, 27015, ___dso_handle | 0) | 0;
 return;
}

function b18(i1, i2, i3, i4, d5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 d5 = +d5;
 abort(18);
 return 0;
}

function __ZNSt3__110__stdinbufIwE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 0) | 0;
}

function _wctomb(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!i1) i1 = 0; else i1 = _wcrtomb(i1, i2, 0) | 0;
 return i1 | 0;
}

function dynCall_vii(i3, i1, i2) {
 i3 = i3 | 0;
 i1 = i1 | 0;
 i2 = i2 | 0;
 FUNCTION_TABLE_vii[i3 & 63](i1 | 0, i2 | 0);
}

function b7(i1, i2, d3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(7);
 return 0;
}

function __ZN3p2t8Triangle19MarkConstrainedEdgeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 HEAP8[i2 + i1 >> 0] = 1;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__110__stdinbufIwE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv(i1) {
 i1 = i1 | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb(i1, 1) | 0;
}

function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1);
 return;
}

function setThrew(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 if (!__THREW__) {
  __THREW__ = i1;
  threwValue = i2;
 }
}

function b3(i1, i2, i3, i4, i5) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 i5 = i5 | 0;
 abort(3);
}

function _mbsinit(i1) {
 i1 = i1 | 0;
 if (!i1) i1 = 1; else i1 = (HEAP32[i1 >> 2] | 0) == 0;
 return i1 & 1 | 0;
}

function _do_read(i2, i1, i3) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 i3 = i3 | 0;
 return ___string_read(i2, i1, i3) | 0;
}

function __ZSt15get_new_handlerv() {
 var i1 = 0;
 i1 = HEAP32[1528] | 0;
 HEAP32[1528] = i1 + 0;
 return i1 | 0;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__16locale5__impD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__16locale5__impD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18numpunctIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIwED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18numpunctIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18numpunctIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _cpp_start() {
 var i1 = 0;
 i1 = __Znwj(340) | 0;
 __ZN7NavCtrlC2Ev(i1);
 HEAP32[711] = i1;
 return;
}

function b15(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(15);
 return 0;
}

function _remove_goal(i1) {
 i1 = i1 | 0;
 __ZN7NavCtrl10removeGoalEP8GoalItem(HEAP32[711] | 0, i1);
 return;
}

function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt13runtime_errorD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt13runtime_errorD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return;
}

function _strtold_l(i3, i2, i1) {
 i3 = i3 | 0;
 i2 = i2 | 0;
 i1 = i1 | 0;
 return +(+_strtox(i3, i2, 2));
}

function _catgets(i1, i4, i2, i3) {
 i1 = i1 | 0;
 i4 = i4 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 return i3 | 0;
}

function dynCall_ii(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return FUNCTION_TABLE_ii[i2 & 127](i1 | 0) | 0;
}

function ___clang_call_terminate(i1) {
 i1 = i1 | 0;
 ___cxa_begin_catch(i1 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 12 >> 2] | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 << 24 >> 24 | 0;
}

function __ZNSt3__18ios_baseD0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__18ios_baseD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNSt3__15ctypeIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZNSt3__15ctypeIcED2Ev(i1);
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 8 >> 2] | 0;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return HEAP8[i1 + 8 >> 0] | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv(i1) {
 i1 = i1 | 0;
 return -1;
}

function _cleanup526(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function _cleanup521(i1) {
 i1 = i1 | 0;
 if (!(HEAP32[i1 + 68 >> 2] | 0)) ___unlockfile(i1);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function establishStackSpace(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 STACKTOP = i1;
 STACK_MAX = i2;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 2147483647;
}

function b16(i1, i2, i3, i4) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(16);
}

function _go_to_frame(i1) {
 i1 = i1 | 0;
 __ZN7NavCtrl9goToFrameEi(HEAP32[711] | 0, i1);
 return;
}

function __ZNSt3__15ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function _isspace(i1) {
 i1 = i1 | 0;
 return ((i1 | 0) == 32 | (i1 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN10__cxxabiv123__fundamental_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _isdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return (i1 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function dynCall_vi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 FUNCTION_TABLE_vi[i2 & 255](i1 | 0);
}

function b19(i1, d2, i3, i4) {
 i1 = i1 | 0;
 d2 = +d2;
 i3 = i3 | 0;
 i4 = i4 | 0;
 abort(19);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return i1 | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZN10__cxxabiv119__pointer_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv(i1) {
 i1 = i1 | 0;
 return 127;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNKSt13runtime_error4whatEv(i1) {
 i1 = i1 | 0;
 return HEAP32[i1 + 4 >> 2] | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function b1(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(1);
 return 0;
}

function __ZNSt3__110__function6__baseIF4Vec2P6VertexEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZN5AgentD0Ev(i1) {
 i1 = i1 | 0;
 __ZN5AgentD2Ev(i1);
 __ZdlPv(i1);
 return;
}

function _isxdigit_l(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return _isxdigit(i1) | 0;
}

function __ZNSt3__117bad_function_callD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__110__function6__baseIFvP6VertexEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110__function6__baseIFvP6ObjectEED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9bad_allocC2Ev(i1) {
 i1 = i1 | 0;
 HEAP32[i1 >> 2] = 6100;
 return;
}

function _copysignl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_copysign(d1, d2));
}

function _scalbnl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_scalbn(d2, i1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN19SubGoalFromPointSegD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function b12(i1, i2, i3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 i3 = i3 | 0;
 abort(12);
}

function __ZN4Item6setPosERK4Vec2(i2, i1) {
 i2 = i2 | 0;
 i1 = i1 | 0;
 return;
}

function __ZN18SubGoalFromSegmentD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _frexpl(d2, i1) {
 d2 = +d2;
 i1 = i1 | 0;
 return +(+_frexp(d2, i1));
}

function __ZNSt3__16locale5facetD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _serialize() {
 return __ZN7NavCtrl9serializeEv(HEAP32[711] | 0) | 0;
}

function __ZNSt3__18messagesIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__18messagesIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function b11(i1, i2, d3) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 d3 = +d3;
 abort(11);
}

function __ZNSt3__17collateIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__17collateIcED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN14SegmentSubGoalD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__15ctypeIwED0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt3__121__throw_runtime_errorEPKc(i1) {
 i1 = i1 | 0;
 return;
}

function _fmodl(d1, d2) {
 d1 = +d1;
 d2 = +d2;
 return +(+_fmod(d1, d2));
}

function __ZN12PointSubGoalD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZN12PointSegmentD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function b4(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(4);
 return 0.0;
}

function b17(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(17);
 return 0;
}

function __ZNSt9bad_allocD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function _catopen(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 return -1 | 0;
}

function __ZNSt3__110moneypunctIwLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNK14SegmentSubGoal7isPointEv(i1) {
 i1 = i1 | 0;
 return 0;
}

function __ZNK12PointSubGoal7isPointEv(i1) {
 i1 = i1 | 0;
 return 1;
}

function __ZNSt3__114__shared_countD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNKSt9exception4whatEv(i1) {
 i1 = i1 | 0;
 return 21973;
}

function __ZNKSt9bad_alloc4whatEv(i1) {
 i1 = i1 | 0;
 return 21918;
}

function __ZN7SegmentD0Ev(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function dynCall_v(i1) {
 i1 = i1 | 0;
 FUNCTION_TABLE_v[i1 & 3]();
}

function __ZN3p2t14AdvancingFrontD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__16locale5facetD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__112__do_nothingEPv(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18messagesIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__18messagesIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIwED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt3__17collateIcED2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function _freelocale(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function __ZN13ISubGoalMakerD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function b8(i1, i2) {
 i1 = i1 | 0;
 i2 = i2 | 0;
 abort(8);
}

function __ZdaPv(i1) {
 i1 = i1 | 0;
 __ZdlPv(i1);
 return;
}

function __ZNSt9type_infoD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9exceptionD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function stackRestore(i1) {
 i1 = i1 | 0;
 STACKTOP = i1;
}

function __ZdlPv(i1) {
 i1 = i1 | 0;
 _free(i1);
 return;
}

function setTempRet0(i1) {
 i1 = i1 | 0;
 tempRet0 = i1;
}

function b10(i1) {
 i1 = i1 | 0;
 abort(10);
 return 0;
}

function __ZN8ISubGoalD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function __ZN6ObjectD2Ev(i1) {
 i1 = i1 | 0;
 return;
}

function ___unlockfile(i1) {
 i1 = i1 | 0;
 return;
}

function ___lockfile(i1) {
 i1 = i1 | 0;
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose(i1) {
 i1 = i1 | 0;
 return 0;
}

function ___ctype_toupper_loc() {
 return 6596;
}

function ___ctype_tolower_loc() {
 return 6592;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b6(i1) {
 i1 = i1 | 0;
 abort(6);
}

function ___ctype_b_loc() {
 return 6588;
}

function b13() {
 abort(13);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b0];
var FUNCTION_TABLE_iiii = [b1,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,___stdio_write,___stdio_seek,___stdio_read,___stdout_write,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,_do_read
,b1,b1,b1];
var FUNCTION_TABLE_viiiiii = [b2,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_viiiii = [b3,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_dii = [b4,__ZNK6Circle15distSqToSurfaceERK4Vec2,__ZNK7Segment15distSqToSurfaceERK4Vec2,__ZNK12PointSegment15distSqToSurfaceERK4Vec2];
var FUNCTION_TABLE_iiiiiid = [b5,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b5];
var FUNCTION_TABLE_vi = [b6,__ZN4ItemD2Ev,__ZN13PolyPointItemD0Ev,__ZN9AgentItemD0Ev,__ZN8GoalItemD0Ev,__ZN17BuildingPointItemD0Ev,__ZN16BuildingMoveItemD2Ev,__ZN16BuildingMoveItemD0Ev,__ZN7TriItemD0Ev,__ZN4ItemD0Ev,__ZN12ErrorBoxItemD0Ev,__ZN12ErrorBoxItem6updateEv,__ZN9ExceptionD2Ev,__ZN9ExceptionD0Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__114__shared_countD2Ev
,__ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEED0Ev,__ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE21__on_zero_shared_weakEv,__ZNSt3__110__function6__baseIFvP6ObjectEED2Ev,__ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEED0Ev,__ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7destroyEv,__ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE18destroy_deallocateEv,__ZNSt9exceptionD2Ev,__ZNSt3__117bad_function_callD0Ev,__ZN5AgentD2Ev,__ZN5AgentD0Ev,__ZN8ISubGoalD2Ev,__ZN12PointSubGoalD0Ev,__ZN14SegmentSubGoalD0Ev,__ZNSt3__110__function6__baseIFvP6VertexEED2Ev
,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEED0Ev,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7destroyEv,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE18destroy_deallocateEv,__ZNSt3__110__function6__baseIF4Vec2P6VertexEED2Ev,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEED0Ev,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7destroyEv,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE18destroy_deallocateEv,__ZN6ObjectD2Ev,__ZN7SegmentD0Ev,__ZN12PointSegmentD0Ev,__ZN13ISubGoalMakerD2Ev,__ZN19SubGoalFromPointSegD0Ev,__ZN18SubGoalFromSegmentD0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt9bad_allocD2Ev
,__ZNSt9bad_allocD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN10__cxxabiv119__pointer_type_infoD0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__17collateIcED2Ev
,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED2Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED2Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED2Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED2Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED2Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED2Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED2Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt3__113__vector_baseIfNS_9allocatorIfEEED2Ev,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
,__ZNSt3__13mapINS_4pairIP6VertexS3_EEP8HalfEdgeNS_4lessIS4_EENS_9allocatorINS1_IKS4_S6_EEEEED2Ev,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,_cleanup521,_cleanup526,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor,___cxx_global_array_dtor46,___cxx_global_array_dtor61,___cxx_global_array_dtor85,___cxx_global_array_dtor109,___cxx_global_array_dtor112,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev,_free,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiidii = [b7,__ZNK6Object14spanningPointsERK4Vec2fPS0_S3_,__ZNK7Segment14spanningPointsERK4Vec2fPS0_S3_,__ZNK12PointSegment14spanningPointsERK4Vec2fPS0_S3_];
var FUNCTION_TABLE_vii = [b8,__ZN13PolyPointItem6setPosERK4Vec2,__ZN9AgentItem6setPosERK4Vec2,__ZN8GoalItem6setPosERK4Vec2,__ZN17BuildingPointItem6setPosERK4Vec2,__ZN16BuildingMoveItem6setPosERK4Vec2,__ZN4Item6setPosERK4Vec2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7__cloneEPNS0_6__baseISA_EE,__ZNSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEEclEOS9_,__ZN5Agent6setPosERK4Vec2,__ZN6Object7setSizeERK4Vec2,__ZNK12PointSubGoal14representPointEv,__ZNK14SegmentSubGoal14representPointEv,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7__cloneEPNS0_6__baseISA_EE,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEEclEOS9_,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7__cloneEPNS0_6__baseISB_EE,__ZN6Object6setPosERK4Vec2,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv
,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiiiii = [b9,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_ii = [b10,__ZNK9Exception4whatEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE7__cloneEv,__ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE11target_typeEv,__ZNKSt9exception4whatEv,__ZNK12PointSubGoal7isPointEv,__ZNK14SegmentSubGoal7isPointEv,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE7__cloneEv,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE11target_typeEv,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE7__cloneEv,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE11target_typeEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt13runtime_error4whatEv,___stdio_close,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv
,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viid = [b11,__ZN19SubGoalFromPointSeg11makePathRefEf,__ZN18SubGoalFromSegment11makePathRefEf,b11];
var FUNCTION_TABLE_viii = [b12,__ZNK12PointSubGoal7getDestERK4Vec2,__ZNK14SegmentSubGoal7getDestERK4Vec2,__ZNSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEEclEOSA_];
var FUNCTION_TABLE_v = [b13,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b13];
var FUNCTION_TABLE_iiiiiiiii = [b14,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_iiiii = [b15,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b15,b15];
var FUNCTION_TABLE_viiii = [b16,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b16,b16,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_iii = [b17,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNKSt3__120__shared_ptr_pointerIP13PolyPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP9AgentItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP8GoalItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP16BuildingMoveItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP17BuildingPointItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__120__shared_ptr_pointerIP7TriItemNS_14default_deleteIS1_EENS_9allocatorIS1_EEE13__get_deleterERKSt9type_info,__ZNKSt3__110__function6__funcIZN5Agent16computeNeighborsER7BihTreeE3__1NS_9allocatorIS5_EEFvP6ObjectEE6targetERKSt9type_info,__ZNK12PointSubGoal8isPassedERK4Vec2,__ZNK14SegmentSubGoal8isPassedERK4Vec2,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__0NS_9allocatorIS5_EEFvP6VertexEE6targetERKSt9type_info,__ZNKSt3__110__function6__funcIZN8Document10updatePlanEP5AgentE3__1NS_9allocatorIS5_EEF4Vec2P6VertexEE6targetERKSt9type_info,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZN3p2t3cmpEPKNS_5PointES2_
,__ZL5compXPK6ObjectS1_,__ZL5compYPK6ObjectS1_,__Z12lessPrioNodeRK8PrioNodeS1_];
var FUNCTION_TABLE_iiiiid = [b18,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b18,b18,b18];
var FUNCTION_TABLE_vidii = [b19,__ZN19SubGoalFromPointSeg11makeSubGoalEfRK4Vec2R4Plan,__ZN18SubGoalFromSegment11makeSubGoalEfRK4Vec2R4Plan,b19];
var FUNCTION_TABLE_iiiiii = [b20,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20];

  return { _go_to_frame: _go_to_frame, _set_goal: _set_goal, _remove_goal: _remove_goal, _bitshift64Lshr: _bitshift64Lshr, _update_goal: _update_goal, _cpp_progress: _cpp_progress, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _memset: _memset, _add_goal: _add_goal, _moved_object: _moved_object, _deserialize: _deserialize, _add_imported: _add_imported, _serialize: _serialize, _added_poly_point: _added_poly_point, _i64Subtract: _i64Subtract, _i64Add: _i64Add, _added_building: _added_building, _added_agent: _added_agent, _started_new_poly: _started_new_poly, ___errno_location: ___errno_location, ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memmove: _memmove, _malloc: _malloc, _memcpy: _memcpy, _update_agent: _update_agent, _cpp_start: _cpp_start, __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_Mesh_cpp: __GLOBAL__sub_I_Mesh_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_dii: dynCall_dii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_vi: dynCall_vi, dynCall_iiidii: dynCall_iiidii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viid: dynCall_viid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiii: dynCall_viiii, dynCall_iii: dynCall_iii, dynCall_iiiiid: dynCall_iiiiid, dynCall_vidii: dynCall_vidii, dynCall_iiiiii: dynCall_iiiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _go_to_frame = Module["_go_to_frame"] = asm["_go_to_frame"];
var _set_goal = Module["_set_goal"] = asm["_set_goal"];
var _remove_goal = Module["_remove_goal"] = asm["_remove_goal"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _update_goal = Module["_update_goal"] = asm["_update_goal"];
var _cpp_progress = Module["_cpp_progress"] = asm["_cpp_progress"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _memset = Module["_memset"] = asm["_memset"];
var _add_goal = Module["_add_goal"] = asm["_add_goal"];
var _moved_object = Module["_moved_object"] = asm["_moved_object"];
var _deserialize = Module["_deserialize"] = asm["_deserialize"];
var __GLOBAL__sub_I_Mesh_cpp = Module["__GLOBAL__sub_I_Mesh_cpp"] = asm["__GLOBAL__sub_I_Mesh_cpp"];
var _add_imported = Module["_add_imported"] = asm["_add_imported"];
var _serialize = Module["_serialize"] = asm["_serialize"];
var _added_poly_point = Module["_added_poly_point"] = asm["_added_poly_point"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _added_building = Module["_added_building"] = asm["_added_building"];
var _added_agent = Module["_added_agent"] = asm["_added_agent"];
var _started_new_poly = Module["_started_new_poly"] = asm["_started_new_poly"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _update_agent = Module["_update_agent"] = asm["_update_agent"];
var _cpp_start = Module["_cpp_start"] = asm["_cpp_start"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiidii = Module["dynCall_iiidii"] = asm["dynCall_iiidii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_vidii = Module["dynCall_vidii"] = asm["dynCall_vidii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
Runtime.stackAlloc = asm["stackAlloc"];
Runtime.stackSave = asm["stackSave"];
Runtime.stackRestore = asm["stackRestore"];
Runtime.establishStackSpace = asm["establishStackSpace"];
Runtime.setTempRet0 = asm["setTempRet0"];
Runtime.getTempRet0 = asm["getTempRet0"];
function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}
ExitStatus.prototype = new Error;
ExitStatus.prototype.constructor = ExitStatus;
var initialStackTop;
var preloadStartTime = null;
var calledMain = false;
dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};
Module["callMain"] = Module.callMain = function callMain(args) {
 assert(runDependencies == 0, "cannot call main when async dependencies remain! (listen on __ATMAIN__)");
 assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
 args = args || [];
 ensureInitRuntime();
 var argc = args.length + 1;
 function pad() {
  for (var i = 0; i < 4 - 1; i++) {
   argv.push(0);
  }
 }
 var argv = [ allocate(intArrayFromString(Module["thisProgram"]), "i8", ALLOC_NORMAL) ];
 pad();
 for (var i = 0; i < argc - 1; i = i + 1) {
  argv.push(allocate(intArrayFromString(args[i]), "i8", ALLOC_NORMAL));
  pad();
 }
 argv.push(0);
 argv = allocate(argv, "i32", ALLOC_NORMAL);
 try {
  var ret = Module["_main"](argc, argv, 0);
  exit(ret, true);
 } catch (e) {
  if (e instanceof ExitStatus) {
   return;
  } else if (e == "SimulateInfiniteLoop") {
   Module["noExitRuntime"] = true;
   return;
  } else {
   if (e && typeof e === "object" && e.stack) Module.printErr("exception thrown: " + [ e, e.stack ]);
   throw e;
  }
 } finally {
  calledMain = true;
 }
};
function run(args) {
 args = args || Module["arguments"];
 if (preloadStartTime === null) preloadStartTime = Date.now();
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  if (Module["_main"] && shouldRunNow) Module["callMain"](args);
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout((function() {
   setTimeout((function() {
    Module["setStatus"]("");
   }), 1);
   doRun();
  }), 1);
 } else {
  doRun();
 }
}
Module["run"] = Module.run = run;
function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"]) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 if (ENVIRONMENT_IS_NODE) {
  process["stdout"]["once"]("drain", (function() {
   process["exit"](status);
  }));
  console.log(" ");
  setTimeout((function() {
   process["exit"](status);
  }), 500);
 } else if (ENVIRONMENT_IS_SHELL && typeof quit === "function") {
  quit(status);
 }
 throw new ExitStatus(status);
}
Module["exit"] = Module.exit = exit;
var abortDecorators = [];
function abort(what) {
 if (what !== undefined) {
  Module.print(what);
  Module.printErr(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 var extra = "\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.";
 var output = "abort(" + what + ") at " + stackTrace() + extra;
 if (abortDecorators) {
  abortDecorators.forEach((function(decorator) {
   output = decorator(output, what);
  }));
 }
 throw output;
}
Module["abort"] = Module.abort = abort;
if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}
var shouldRunNow = true;
if (Module["noInitialRun"]) {
 shouldRunNow = false;
}
run();




